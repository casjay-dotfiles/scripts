#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208041705-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  am_i_online --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 04, 2022 17:05 EDT
# @@File             :  am_i_online
# @@Description      :  Check for internet connection
# @@Changelog        :  Refactor the code
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208041705-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
AM_I_ONLINE_REQUIRE_SUDO="${AM_I_ONLINE_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -ISsf --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
__printf_good() { printf '\r\b%b%s %s %b %c' "$GREEN" "${1}" "${2}" "$NC" " "; }
__printf_error() { printf '\r\b%b%s %s %b %c' "$RED" "${1}" "${2}" "$NC" " "; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE"
  fi
  [ -d "$AM_I_ONLINE_CONFIG_DIR" ] || mkdir -p "$AM_I_ONLINE_CONFIG_DIR"
  [ -d "$AM_I_ONLINE_CONFIG_BACKUP_DIR" ] || mkdir -p "$AM_I_ONLINE_CONFIG_BACKUP_DIR"
  [ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ] &&
    cp -Rf "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" "$AM_I_ONLINE_CONFIG_BACKUP_DIR/$AM_I_ONLINE_CONFIG_FILE.$$"
  cat <<EOF >"$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE"
# Settings for am_i_online
AM_I_ONLINE_TIMEOUT="${AM_I_ONLINE_TIMEOUT:-}"
AM_I_ONLINE_PING_COUNT="${AM_I_ONLINE_PING_COUNT:-}"
AM_I_ONLINE_TEST_SITE_URL="${AM_I_ONLINE_TEST_SITE_URL:-}"
AM_I_ONLINE_TEST_SITE_PING="${AM_I_ONLINE_TEST_SITE_PING:-}"
AM_I_ONLINE_TEST_SITE_HTTP="${AM_I_ONLINE_TEST_SITE_HTTP:-}"
AM_I_ONLINE_TEST_SITE_HTTP_STATUS="${AM_I_ONLINE_TEST_SITE_HTTP_STATUS:-}"
AM_I_ONLINE_LOOP_INTERVAL="${AM_I_ONLINE_LOOP_INTERVAL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
AM_I_ONLINE_OUTPUT_COLOR_1="${AM_I_ONLINE_OUTPUT_COLOR_1:-}"
AM_I_ONLINE_OUTPUT_COLOR_2="${AM_I_ONLINE_OUTPUT_COLOR_2:-}"
AM_I_ONLINE_OUTPUT_COLOR_GOOD="${AM_I_ONLINE_OUTPUT_COLOR_GOOD:-}"
AM_I_ONLINE_OUTPUT_COLOR_ERROR="${AM_I_ONLINE_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
AM_I_ONLINE_NOTIFY_ENABLED="${AM_I_ONLINE_NOTIFY_ENABLED:-}"
AM_I_ONLINE_GOOD_NAME="${AM_I_ONLINE_GOOD_NAME:-}"
AM_I_ONLINE_ERROR_NAME="${AM_I_ONLINE_ERROR_NAME:-}"
AM_I_ONLINE_GOOD_MESSAGE="${AM_I_ONLINE_GOOD_MESSAGE:-}"
AM_I_ONLINE_ERROR_MESSAGE="${AM_I_ONLINE_ERROR_MESSAGE:-}"
AM_I_ONLINE_NOTIFY_CLIENT_NAME="${AM_I_ONLINE_NOTIFY_CLIENT_NAME:-}"
AM_I_ONLINE_NOTIFY_CLIENT_ICON="${AM_I_ONLINE_NOTIFY_CLIENT_ICON:-}"
AM_I_ONLINE_NOTIFY_CLIENT_URGENCY="${AM_I_ONLINE_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "am_i_online:  Check for internet connection - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: am_i_online [options] [commands]"
  __printf_line "--message myMessage             - Set custom message"
  __printf_line "--site 1.1.1.1                  - Specify site"
  __printf_line "--code 200                      - Custom http status code"
  __printf_line "--force                         - Force true"
  __printf_line "--error                         - Show only errors"
  __printf_line "--console                       - Show output messages"
  __printf_line "--loop                          - Keeps running on a 15 second loop"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$AM_I_ONLINE_REQUIRE_SUDO" = "yes" ] && [ -z "$AM_I_ONLINE_REQUIRE_SUDO_RUN" ]; then
    export AM_I_ONLINE_REQUIRE_SUDO="no"
    export AM_I_ONLINE_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$AM_I_ONLINE_TEMP_FILE" ] && rm -Rf "$AM_I_ONLINE_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__simple_loop() {
  clear
  while :; do
    for i in 1.1.1.1 google.com; do
      printf '\r%s' " Pinging $i   " &&
        ping -c 1 $i &>/dev/null && printf '\r %s' "Online  " ||
        printf '\r%s' "Offline "
      sleep 1
    done
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__local_network() {
  [ "$AM_I_ONLINE_RUN_LOOP" = "yes" ] && return 1
  local hostname="" domainname="" domain=""
  domainname="$(hostname -f 2>/dev/null)"
  hostname="$(hostname -s 2>/dev/null)"
  domain="$(hostname -d 2>/dev/null)"
  if [[ "$1" = "localhost" ]] || [[ "$1" = "$hostname" ]] || [[ "$1" = "$domainname" ]] || [[ "$1" = *."$hostname.$domain" ]] ||
    [[ "$1" = "$domainname" ]] || [[ "$1" =~ 10.*.*.* ]] || [[ "$1" =~ 192.168.*.* ]] || [[ "$1" =~ 172.16.*.* ]] ||
    [[ "$1" =~ 127.*.*.* ]] || [[ "$1" = *.local ]] || [[ "$1" = *.localdomain ]]; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
test_site() {
  siteExit=1
  curl -q --connect-timeout 1 --max-time 2 --fail --retry 0 -LSsfI https://1.1.1.1 2>/dev/null | grep -q 'server:.*cloudflare'
  siteExit="$?"
  export siteExit
  return $siteExit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
test_ping() {
  [ -z "$no_ping" ] || return
  local definesite="${site:-$AM_I_ONLINE_TEST_SITE_PING}"
  local site="${definesite:-$AM_I_ONLINE_TEST_SITE_URL}"
  local timeout="${AM_I_ONLINE_TIMEOUT:-1}"
  local count="${AM_I_ONLINE_PING_COUNT:-0}"
  timeout $timeout ping -c$count "$site" &>/dev/null && true || false
  pingExit="$?"
  export pingExit
  return $pingExit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
test_http() {
  [ -z "$no_http" ] || return
  local timeout="${AM_I_ONLINE_TIMEOUT:-1}"
  local site="${site:-$AM_I_ONLINE_TEST_SITE_URL}"
  local definestatus="${status:-200}"
  local definesite="${site:-$AM_I_ONLINE_TEST_SITE_HTTP}"
  local status="${definestatus:-$AM_I_ONLINE_TEST_SITE_HTTP_STATUS}"
  timeout $timeout curl --disable -ISsf --insecure --max-time ${timeout} "$site" 2>/dev/null |
    grep -e "HTTP/[0123456789]" | grep -qE "${status}|301" -n1 &>/dev/null && true || false
  httpExit="$?"
  export httpExit
  return $httpExit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_main() {
  exitCode="0"
  pingExit=""
  httpExit=""
  if [ -n "$AM_I_ONLINE_FORCE_CONNECTION" ] || __local_network "$site"; then
    httpExit=0
    pingExit=0
    AM_I_ONLINE_RUN=no
  fi
  if [ -z "$AM_I_ONLINE_RUN" ]; then
    if test_ping; then
      exitCode=0
    elif test_site; then
      exitCode=0
    elif test_http; then
      exitCode=0
    else
      exitCode=1
    fi
  fi
  [ "$AM_I_ONLINE_RUN_LOOP" = "yes" ] && return $exitCode
  options_used_message="PingSite:${site:-$AM_I_ONLINE_TEST_SITE_PING}|HTTPSite:${site:-$AM_I_ONLINE_TEST_SITE_HTTP}|StatusCode:$AM_I_ONLINE_TEST_SITE_HTTP_STATUS"
  if [ "$pingExit" = 0 ] || [ "$httpExit" = 0 ] || [ "$exitCode" = 0 ]; then
    exitCode=0
    export AM_I_ONLINE_NOTIFY_CLIENT_ICON="connect_established"
    if [ "$AM_I_ONLINE_SHOW_MESSAGE" = "yes" ]; then
      if [ "$AM_I_ONLINE_ERROR" != "true" ] && [ "$AM_I_ONLINE_SHOW_ERROR" != "yes" ]; then
        printf_green "$AM_I_ONLINE_GOOD_MESSAGE"
        __notifications "$AM_I_ONLINE_GOOD_NAME ${AM_I_ONLINE_GOOD_MESSAGE}"
      fi
    fi
    if [ "$AM_I_ONLINE_SHOW_CONSOLE" = "yes" ]; then
      printf_green "Options Used - $options_used_message"
      printf_green "$AM_I_ONLINE_GOOD_MESSAGE"
    fi
  else
    if [ "$AM_I_ONLINE_SHOW_CONSOLE" = "yes" ]; then
      AM_I_ONLINE_SHOW_ERROR="no"
      printf_green "Options Used - $options_used_message"
      printf_red exitCode:$exitCode httpExit:$httpExit pingExit:$pingExit
      printf_red "$AM_I_ONLINE_MESSAGE" >&2
    fi
    if [ "$AM_I_ONLINE_SHOW_ERROR" = "yes" ]; then
      printf_return 1 1 "${AM_I_ONLINE_MESSAGE:-$AM_I_ONLINE_ERROR_MESSAGE}" >&2
      __notifications "$AM_I_ONLINE_ERROR_NAME ${AM_I_ONLINE_MESSAGE:-$AM_I_ONLINE_ERROR_MESSAGE}"
    fi
    exitCode=1
  fi
  return "${exitCode:-0}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_loop() {
  trap 'exitCode=$?;[ -n "$AM_I_ONLINE_CACHE_DIR" ] && [ -f "$AM_I_ONLINE_CACHE_DIR/am_i_online_no" ] && rm -f "$AM_I_ONLINE_CACHE_DIR/am_i_online_no" &>/dev/null;echo;exit ${exitCode:-0}' SIGINT SIGQUIT SIGTSTP EXIT
  [ -n "$1" ] && __validate_ip "$1" && AM_I_ONLINE_TEST_SITE_URL="$1" || printf_red "$1 seems to be invalid... Using default"
  local date onmess="" ofmess="" onmessorig="" ofmessorig=""
  local send_notify_status="" exitCode="" interval="" site=""
  clear
  exitCode="1"
  interval="$AM_I_ONLINE_LOOP_INTERVAL"
  site="$AM_I_ONLINE_TEST_SITE_URL"
  date="$(date +'%H:%M:%S')"
  onmessorig="You appear to be online at"
  ofmessorig="You appear to be offline at"
  printf_yellow "To exit the loop press control+c"
  printf_blue "Starting loop on $date to site: $site"
  printf_cyan "And checking the site every $interval seconds"
  send_notify="false"
  AM_I_ONLINE_MESSAGE=""
  while :; do
    __execute_main
    if [ ${exitCode:-0} -eq 0 ]; then
      [ -n "$onmess" ] && onmess="You still appear to be online at" || onmess="$onmessorig"
      [ "$send_notify_status" = "offline" ] && send_notify=""
      __printf_good "${onmess}" "$date"
      [ "$send_notify" = "true" ] || __notifications "${onmess} $date"
      rm -f "$AM_I_ONLINE_CACHE_DIR/am_i_online_no"
      send_notify="true"
      send_notify_status="online"
    else
      [ -n "$ofmess" ] && ofmess="You still appear to be offline at" || ofmess="$ofmessorig"
      [ "$send_notify_status" = "online" ] && send_notify=""
      __printf_error "${ofmess}" "$date"
      [ "$send_notify" = "true" ] || __notifications "${ofmess} $date"
      touch "$AM_I_ONLINE_CACHE_DIR/am_i_online_no"
      send_notify="true"
      send_notify_status="offline"
    fi
    sleep $interval
    date="$(date +'%H:%M:%S')"
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_ip() {
  getent ahostsv4 "$1" | grep 'RAW' | awk '{print $1}' | head -n 1 || echo "$1"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__validate_ip() {
  ip="$(__get_ip "$1")"
  echo "$ip" | grep -q -E -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
AM_I_ONLINE_CONFIG_FILE="${AM_I_ONLINE_CONFIG_FILE:-settings.conf}"
AM_I_ONLINE_CONFIG_DIR="${AM_I_ONLINE_CONFIG_DIR:-$HOME/.config/myscripts/am_i_online}"
AM_I_ONLINE_CONFIG_BACKUP_DIR="${AM_I_ONLINE_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/am_i_online/backups}"
AM_I_ONLINE_LOG_DIR="${AM_I_ONLINE_LOG_DIR:-$HOME/.local/log/am_i_online}"
AM_I_ONLINE_TEMP_DIR="${AM_I_ONLINE_TEMP_DIR:-$HOME/.local/tmp/system_scripts/am_i_online}"
AM_I_ONLINE_CACHE_DIR="${AM_I_ONLINE_CACHE_DIR:-$HOME/.cache/am_i_online}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
AM_I_ONLINE_OUTPUT_COLOR_1="${AM_I_ONLINE_OUTPUT_COLOR_1:-33}"
AM_I_ONLINE_OUTPUT_COLOR_2="${AM_I_ONLINE_OUTPUT_COLOR_2:-5}"
AM_I_ONLINE_OUTPUT_COLOR_GOOD="${AM_I_ONLINE_OUTPUT_COLOR_GOOD:-2}"
AM_I_ONLINE_OUTPUT_COLOR_ERROR="${AM_I_ONLINE_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
AM_I_ONLINE_NOTIFY_ENABLED="${AM_I_ONLINE_NOTIFY_ENABLED:-yes}"
AM_I_ONLINE_GOOD_NAME="${AM_I_ONLINE_GOOD_NAME:-Great:}"
AM_I_ONLINE_ERROR_NAME="${AM_I_ONLINE_ERROR_NAME:-Error:}"
AM_I_ONLINE_GOOD_MESSAGE="${AM_I_ONLINE_GOOD_MESSAGE:-ðŸ†— you seem to be connected to the internet ðŸ†—}"
AM_I_ONLINE_ERROR_MESSAGE="${AM_I_ONLINE_ERROR_MESSAGE:-ðŸš« No internet connection ðŸš«}"
AM_I_ONLINE_NOTIFY_CLIENT_NAME="${AM_I_ONLINE_NOTIFY_CLIENT_NAME:-$APPNAME}"
AM_I_ONLINE_NOTIFY_CLIENT_ICON="${AM_I_ONLINE_NOTIFY_CLIENT_ICON:-network}"
AM_I_ONLINE_NOTIFY_CLIENT_URGENCY="${AM_I_ONLINE_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
AM_I_ONLINE_TIMEOUT="${AM_I_ONLINE_TIMEOUT:-1}"
AM_I_ONLINE_PING_COUNT="${AM_I_ONLINE_PING_COUNT:-1}"
AM_I_ONLINE_TEST_SITE_URL="${AM_I_ONLINE_TEST_SITE_URL:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_PING="${AM_I_ONLINE_TEST_SITE_PING:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_HTTP="${AM_I_ONLINE_TEST_SITE_HTTP:-1.1.1.1}"
AM_I_ONLINE_TEST_SITE_HTTP_STATUS="${AM_I_ONLINE_TEST_SITE_HTTP_STATUS:-[200|301]}"
AM_I_ONLINE_LOOP_INTERVAL="${AM_I_ONLINE_LOOP_INTERVAL:-15}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE" ] && . "$AM_I_ONLINE_CONFIG_DIR/$AM_I_ONLINE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$AM_I_ONLINE_LOG_DIR" ] || mkdir -p "$AM_I_ONLINE_LOG_DIR" |& __devnull
[ -d "$AM_I_ONLINE_TEMP_DIR" ] || mkdir -p "$AM_I_ONLINE_TEMP_DIR" |& __devnull
[ -d "$AM_I_ONLINE_CACHE_DIR" ] || mkdir -p "$AM_I_ONLINE_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
AM_I_ONLINE_TEMP_FILE="${AM_I_ONLINE_TEMP_FILE:-$(mktemp $AM_I_ONLINE_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$AM_I_ONLINE_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$AM_I_ONLINE_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$AM_I_ONLINE_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$AM_I_ONLINE_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$AM_I_ONLINE_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$AM_I_ONLINE_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="f,l,m:,s:"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,help,options,raw,version,silent,"
LONGOPTS+=",error,show,console,force,message:,site:,code:,loop"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    __printf_good() { printf '\r\b%s %s %c' "${1}" "${2}" " "; }
    __printf_error() { printf '\r\b%s %s %c' "${1}" "${2}" " "; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    AM_I_ONLINE_SILENT="true"
    ;;
  --error)
    shift 1
    AM_I_ONLINE_ERROR="true"
    AM_I_ONLINE_SHOW_ERROR="yes"
    ;;
  --show)
    shift 1
    AM_I_ONLINE_SHOW_MESSAGE="yes"
    AM_I_ONLINE_SHOW_ERROR=""
    ;;
  --console)
    shift 1
    AM_I_ONLINE_SHOW_CONSOLE="yes"
    ;;
  --code)
    status="$2"
    no_ping="true"
    shift 2
    ;;
  -f | --force)
    shift 1
    AM_I_ONLINE_FORCE_CONNECTION="true"
    ;;
  -l | --loop)
    shift 1
    AM_I_ONLINE_RUN_LOOP="yes"
    ;;
  -m | --message)
    AM_I_ONLINE_SHOW_MESSAGE="yes"
    AM_I_ONLINE_SHOW_ERROR="yes"
    AM_I_ONLINE_MESSAGE="$2"
    shift 2
    ;;
  -s | --site)
    site="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# AM_I_ONLINE_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# AM_I_ONLINE_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && AM_I_ONLINE_CWD="$1" && shift 1 || AM_I_ONLINE_CWD="${AM_I_ONLINE_CWD:-$PWD}"
AM_I_ONLINE_CWD="$(realpath "${AM_I_ONLINE_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$AM_I_ONLINE_CWD" ] && cd "$AM_I_ONLINE_CWD"; then
# if [ "$AM_I_ONLINE_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $AM_I_ONLINE_CWD"
# fi
# else
# printf_exit "ðŸ’” $AM_I_ONLINE_CWD does not exist ðŸ’”"
# fi
export AM_I_ONLINE_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask curl || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
AM_I_ONLINE_ERROR="${AM_I_ONLINE_ERROR:-}"
AM_I_ONLINE_MESSAGE="${AM_I_ONLINE_MESSAGE:-}"
AM_I_ONLINE_SHOW_ERROR="${AM_I_ONLINE_SHOW_ERROR:-}"
AM_I_ONLINE_SHOW_MESSAGE="${AM_I_ONLINE_SHOW_MESSAGE:-}"
AM_I_ONLINE_SHOW_CONSOLE="${AM_I_ONLINE_SHOW_CONSOLE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
if [ "$AM_I_ONLINE_RUN_LOOP" = "yes" ]; then
  __run_loop "$@"
  exit $?
else
  __execute_main "$@"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
