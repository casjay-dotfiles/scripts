#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202501150000-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  ask_for_input --help
# @@Copyright        :  Copyright: (c) 2025 Jason Hempstead, Casjays Developments
# @@Created          :  Wednesday, Jan 15, 2025 00:00 EST
# @@File             :  ask_for_input
# @@Description      :  Universal input collection with auto password detection
# @@Changelog        :  Modernized with universal environment support
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202501150000-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
ASK_FOR_INPUT_REQUIRE_SUDO="${ASK_FOR_INPUT_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE"
  fi
  [ -d "$ASK_FOR_INPUT_CONFIG_DIR" ] || mkdir -p "$ASK_FOR_INPUT_CONFIG_DIR"
  [ -d "$ASK_FOR_INPUT_CONFIG_BACKUP_DIR" ] || mkdir -p "$ASK_FOR_INPUT_CONFIG_BACKUP_DIR"
  [ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ] &&
    cp -Rf "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" "$ASK_FOR_INPUT_CONFIG_BACKUP_DIR/$ASK_FOR_INPUT_CONFIG_FILE.$$"
  cat <<EOF >"$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE"
# Settings for ask_for_input
ASK_FOR_INPUT_NAME="${ASK_FOR_INPUT_NAME:-Please enter a value:}"
ASK_FOR_INPUT_DEFAULT_TITLE="${ASK_FOR_INPUT_DEFAULT_TITLE:-Input Required}"
ASK_FOR_INPUT_DEFAULT_VALUE="${ASK_FOR_INPUT_DEFAULT_VALUE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
ASK_FOR_INPUT_OUTPUT_COLOR_1="${ASK_FOR_INPUT_OUTPUT_COLOR_1:-33}"
ASK_FOR_INPUT_OUTPUT_COLOR_2="${ASK_FOR_INPUT_OUTPUT_COLOR_2:-5}"
ASK_FOR_INPUT_OUTPUT_COLOR_GOOD="${ASK_FOR_INPUT_OUTPUT_COLOR_GOOD:-2}"
ASK_FOR_INPUT_OUTPUT_COLOR_ERROR="${ASK_FOR_INPUT_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
ASK_FOR_INPUT_NOTIFY_ENABLED="${ASK_FOR_INPUT_NOTIFY_ENABLED:-yes}"
ASK_FOR_INPUT_GOOD_NAME="${ASK_FOR_INPUT_GOOD_NAME:-Great:}"
ASK_FOR_INPUT_ERROR_NAME="${ASK_FOR_INPUT_ERROR_NAME:-Error:}"
ASK_FOR_INPUT_GOOD_MESSAGE="${ASK_FOR_INPUT_GOOD_MESSAGE:-Input received}"
ASK_FOR_INPUT_ERROR_MESSAGE="${ASK_FOR_INPUT_ERROR_MESSAGE:-No input provided}"
ASK_FOR_INPUT_NOTIFY_CLIENT_NAME="${ASK_FOR_INPUT_NOTIFY_CLIENT_NAME:-$APPNAME}"
ASK_FOR_INPUT_NOTIFY_CLIENT_ICON="${ASK_FOR_INPUT_NOTIFY_CLIENT_ICON:-dialog-question}"
ASK_FOR_INPUT_NOTIFY_CLIENT_URGENCY="${ASK_FOR_INPUT_NOTIFY_CLIENT_URGENCY:-normal}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "ask_for_input:  Universal input collection with auto password detection - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: ask_for_input [options] [prompt] [title] [default]"
  __printf_line "ask_for_input \"Enter username:\" \"User Setup\""
  __printf_line "ask_for_input \"Enter password:\" # Auto-detects password mode"
  __printf_line "PROMPT=\"Enter email:\" TITLE=\"Contact Info\" ask_for_input"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Environment Variables"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "PROMPT                          - Text prompt for user"
  __printf_line "TITLE                           - Title for input dialog"
  __printf_line "DEFAULT                         - Default value"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Password Auto-Detection"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Automatically enables password mode for prompts containing:"
  __printf_line "password, pass, passwd, secret, key, token, pin, code, auth"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$ASK_FOR_INPUT_REQUIRE_SUDO" = "yes" ] && [ -z "$ASK_FOR_INPUT_REQUIRE_SUDO_RUN" ]; then
    export ASK_FOR_INPUT_REQUIRE_SUDO="no"
    export ASK_FOR_INPUT_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$ASK_FOR_INPUT_TEMP_FILE" ] && rm -Rf "$ASK_FOR_INPUT_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Enhanced trap for cleanup
__trap_exit_local() {
  # Secure cleanup for any password variables
  if [ -n "$user_input" ] && __is_password_prompt "$prompt"; then
    user_input="$(head -c 32 /dev/urandom 2>/dev/null | base64 2>/dev/null || echo "overwritten")"
  fi

  # Standard cleanup
  unset PROGRAM_PATH PROGRAM_NAME user_input

  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Environment detection
__detect_environment() {
  if [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    echo "ssh"
  elif [ -n "$DISPLAY" ] || [ -n "$WAYLAND_DISPLAY" ]; then
    # Check for app menu launch (no TTY but GUI available)
    if [ -z "$TERM" ] && [ ! -t 0 ] && [ ! -t 1 ]; then
      echo "app_menu"
    else
      echo "gui"
    fi
  elif [ -t 0 ] && [ -t 1 ]; then
    echo "terminal"
  elif [ -n "$CI" ] || [ -n "$CONTINUOUS_INTEGRATION" ] || [ -n "$GITHUB_ACTIONS" ] || [ -n "$GITLAB_CI" ] || [ -n "$JENKINS_URL" ] || [ -n "$TRAVIS" ] || [ -n "$CIRCLECI" ]; then
    echo "ci"
  else
    echo "headless"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if running on macOS
__is_mac() {
  [[ "$OSTYPE" == "darwin"* ]]
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Validate environment before tool execution
__validate_environment() {
  # Check for broken DISPLAY
  if [ -n "$DISPLAY" ] && ! xset q >/dev/null 2>&1; then
    echo "terminal" # Force terminal mode if X11 broken
    return 1
  fi
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Auto-detect password mode based on prompt keywords
__is_password_prompt() {
  echo "$1" | grep -qi "password\|pass\|passwd\|secret\|key\|token\|pin\|code\|auth"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set GUI tool with fallback chain
__set_gui_tool() {
  if __is_mac; then
    PROGRAM_PATH="osascript"
    PROGRAM_NAME="osascript"
  elif __cmd_exists yad; then
    PROGRAM_PATH="$(command -v yad 2>/dev/null)"
    PROGRAM_NAME="yad"
  elif __cmd_exists zenity; then
    PROGRAM_PATH="$(command -v zenity 2>/dev/null)"
    PROGRAM_NAME="zenity"
  elif __cmd_exists rofi; then
    PROGRAM_PATH="$(command -v rofi 2>/dev/null)"
    PROGRAM_NAME="rofi"
  elif __cmd_exists dmenu; then
    PROGRAM_PATH="$(command -v dmenu 2>/dev/null)"
    PROGRAM_NAME="dmenu"
  elif __cmd_exists kdialog; then
    PROGRAM_PATH="$(command -v kdialog 2>/dev/null)"
    PROGRAM_NAME="kdialog"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set terminal tool with fallback chain
__set_terminal_tool() {
  if __cmd_exists dialog; then
    PROGRAM_PATH="$(command -v dialog 2>/dev/null)"
    PROGRAM_NAME="dialog"
  elif __cmd_exists whiptail; then
    PROGRAM_PATH="$(command -v whiptail 2>/dev/null)"
    PROGRAM_NAME="whiptail"
  else
    PROGRAM_PATH="read"
    PROGRAM_NAME="read"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute input collection with timeout protection
__execute_input() {
  local result=""
  local timeout_cmd=""
  local is_password=false

  # Use timeout if available
  command -v timeout >/dev/null && timeout_cmd="timeout 60"

  # Check if this is a password prompt
  __is_password_prompt "$prompt" && is_password=true

  if [ -x "$PROGRAM_PATH" ] || [ "$PROGRAM_NAME" = "osascript" ] || [ "$PROGRAM_NAME" = "read" ]; then
    case "$PROGRAM_NAME" in
    yad)
      if [ "$is_password" = "true" ]; then
        result=$($timeout_cmd "$PROGRAM_PATH" --entry --hide-text --title="$title" --text="$prompt" 2>/dev/null)
      else
        result=$($timeout_cmd "$PROGRAM_PATH" --entry --title="$title" --text="$prompt" --entry-text="$default" 2>/dev/null)
      fi
      ;;
    zenity)
      if [ "$is_password" = "true" ]; then
        result=$($timeout_cmd "$PROGRAM_PATH" --password --title="$title" 2>/dev/null)
      else
        result=$($timeout_cmd "$PROGRAM_PATH" --entry --title="$title" --text="$prompt" --entry-text="$default" 2>/dev/null)
      fi
      ;;
    rofi)
      if [ "$is_password" = "true" ]; then
        result=$(echo "" | $timeout_cmd "$PROGRAM_PATH" -dmenu -password -p "$prompt" -location 0 -width 400 2>/dev/null)
      else
        result=$(echo "$default" | $timeout_cmd "$PROGRAM_PATH" -dmenu -p "$prompt" -location 0 -width 400 2>/dev/null)
      fi
      ;;
    dmenu)
      # dmenu doesn't have password mode, so use regular input
      result=$(echo "$default" | $timeout_cmd "$PROGRAM_PATH" -p "$prompt" -x 200 -y 200 -w 400 2>/dev/null)
      ;;
    kdialog)
      if [ "$is_password" = "true" ]; then
        result=$($timeout_cmd "$PROGRAM_PATH" --password "$prompt" 2>/dev/null)
      else
        result=$($timeout_cmd "$PROGRAM_PATH" --inputbox "$prompt" "$default" 2>/dev/null)
      fi
      ;;
    dialog)
      if [ "$is_password" = "true" ]; then
        result=$(echo | $timeout_cmd "$PROGRAM_PATH" --passwordbox "$prompt" 8 60 3>&1 1>&2 2>&3 2>/dev/null)
      else
        result=$(echo | $timeout_cmd "$PROGRAM_PATH" --inputbox "$prompt" 8 60 "$default" 3>&1 1>&2 2>&3 2>/dev/null)
      fi
      ;;
    whiptail)
      if [ "$is_password" = "true" ]; then
        result=$(echo | $timeout_cmd "$PROGRAM_PATH" --passwordbox "$prompt" 8 60 3>&1 1>&2 2>&3 2>/dev/null)
      else
        result=$(echo | $timeout_cmd "$PROGRAM_PATH" --inputbox "$prompt" 8 60 "$default" 3>&1 1>&2 2>&3 2>/dev/null)
      fi
      ;;
    osascript)
      if [ "$is_password" = "true" ]; then
        local script="display dialog \"$prompt\" default answer \"\" with hidden answer"
        result=$($timeout_cmd osascript -e "$script" -e "text returned of result" 2>/dev/null)
      else
        local script="display dialog \"$prompt\" default answer \"$default\""
        result=$($timeout_cmd osascript -e "$script" -e "text returned of result" 2>/dev/null)
      fi
      ;;
    read)
      if [ "$is_password" = "true" ]; then
        printf "%s: " "$prompt"
        read -s result
        echo
      else
        printf "%s" "$prompt"
        [ -n "$default" ] && printf " [%s]" "$default"
        printf ": "
        read -r result
        [ -z "$result" ] && result="$default"
      fi
      ;;
    esac
  fi

  if [ -z "$result" ]; then
    return 1
  else
    echo "$result"
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Handle CI/CD environment
__handle_ci_input() {
  local env_var_name=""

  # Try to get input from environment variables in CI
  if __is_password_prompt "$prompt"; then
    # Look for password environment variables
    if [ -n "$CI_PASSWORD" ]; then
      echo "$CI_PASSWORD"
      __log_message "CI mode: Using CI_PASSWORD for prompt: $prompt"
      return 0
    elif [ -n "$INPUT_PASSWORD" ]; then
      echo "$INPUT_PASSWORD"
      __log_message "CI mode: Using INPUT_PASSWORD for prompt: $prompt"
      return 0
    fi
  else
    # Look for generic input environment variables
    if [ -n "$CI_INPUT" ]; then
      echo "$CI_INPUT"
      __log_message "CI mode: Using CI_INPUT for prompt: $prompt"
      return 0
    elif [ -n "$INPUT_VALUE" ]; then
      echo "$INPUT_VALUE"
      __log_message "CI mode: Using INPUT_VALUE for prompt: $prompt"
      return 0
    elif [ -n "$default" ]; then
      echo "$default"
      __log_message "CI mode: Using default value for prompt: $prompt"
      return 0
    fi
  fi

  __log_message "CI mode: No input available for prompt: $prompt"
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Log message with timestamp (raw text for logs)
__log_message() {
  local message="$1"
  # Remove ANSI codes for clean logging
  clean_message=$(echo "$message" | sed 's/\x1B\[[0-9;]*[JKmsu]//g')
  echo "$(date '+%Y-%m-%d %H:%M:%S') [$APPNAME] $clean_message" >>"${ASK_FOR_INPUT_LOG_DIR}/activity.log" 2>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
ASK_FOR_INPUT_CONFIG_FILE="${ASK_FOR_INPUT_CONFIG_FILE:-settings.conf}"
ASK_FOR_INPUT_CONFIG_DIR="${ASK_FOR_INPUT_CONFIG_DIR:-$HOME/.config/myscripts/ask_for_input}"
ASK_FOR_INPUT_CONFIG_BACKUP_DIR="${ASK_FOR_INPUT_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/ask_for_input/backups}"
ASK_FOR_INPUT_LOG_DIR="${ASK_FOR_INPUT_LOG_DIR:-$HOME/.local/log/ask_for_input}"
ASK_FOR_INPUT_TEMP_DIR="${ASK_FOR_INPUT_TEMP_DIR:-$HOME/.local/tmp/system_scripts/ask_for_input}"
ASK_FOR_INPUT_CACHE_DIR="${ASK_FOR_INPUT_CACHE_DIR:-$HOME/.cache/ask_for_input}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
ASK_FOR_INPUT_OUTPUT_COLOR_1="${ASK_FOR_INPUT_OUTPUT_COLOR_1:-33}"
ASK_FOR_INPUT_OUTPUT_COLOR_2="${ASK_FOR_INPUT_OUTPUT_COLOR_2:-5}"
ASK_FOR_INPUT_OUTPUT_COLOR_GOOD="${ASK_FOR_INPUT_OUTPUT_COLOR_GOOD:-2}"
ASK_FOR_INPUT_OUTPUT_COLOR_ERROR="${ASK_FOR_INPUT_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
ASK_FOR_INPUT_NOTIFY_ENABLED="${ASK_FOR_INPUT_NOTIFY_ENABLED:-yes}"
ASK_FOR_INPUT_GOOD_NAME="${ASK_FOR_INPUT_GOOD_NAME:-Great:}"
ASK_FOR_INPUT_ERROR_NAME="${ASK_FOR_INPUT_ERROR_NAME:-Error:}"
ASK_FOR_INPUT_GOOD_MESSAGE="${ASK_FOR_INPUT_GOOD_MESSAGE:-Input received}"
ASK_FOR_INPUT_ERROR_MESSAGE="${ASK_FOR_INPUT_ERROR_MESSAGE:-No input provided}"
ASK_FOR_INPUT_NOTIFY_CLIENT_NAME="${ASK_FOR_INPUT_NOTIFY_CLIENT_NAME:-$APPNAME}"
ASK_FOR_INPUT_NOTIFY_CLIENT_ICON="${ASK_FOR_INPUT_NOTIFY_CLIENT_ICON:-dialog-question}"
ASK_FOR_INPUT_NOTIFY_CLIENT_URGENCY="${ASK_FOR_INPUT_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
ASK_FOR_INPUT_NAME="${ASK_FOR_INPUT_NAME:-Please enter a value:}"
ASK_FOR_INPUT_DEFAULT_TITLE="${ASK_FOR_INPUT_DEFAULT_TITLE:-Input Required}"
ASK_FOR_INPUT_DEFAULT_VALUE="${ASK_FOR_INPUT_DEFAULT_VALUE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE" ] && . "$ASK_FOR_INPUT_CONFIG_DIR/$ASK_FOR_INPUT_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$ASK_FOR_INPUT_LOG_DIR" ] || mkdir -p "$ASK_FOR_INPUT_LOG_DIR" |& __devnull
[ -d "$ASK_FOR_INPUT_TEMP_DIR" ] || mkdir -p "$ASK_FOR_INPUT_TEMP_DIR" |& __devnull
[ -d "$ASK_FOR_INPUT_CACHE_DIR" ] || mkdir -p "$ASK_FOR_INPUT_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ASK_FOR_INPUT_TEMP_FILE="${ASK_FOR_INPUT_TEMP_FILE:-$(mktemp $ASK_FOR_INPUT_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
trap '__trap_exit 130' INT
trap '__trap_exit 143' TERM
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$ASK_FOR_INPUT_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$ASK_FOR_INPUT_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$ASK_FOR_INPUT_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$ASK_FOR_INPUT_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$ASK_FOR_INPUT_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$ASK_FOR_INPUT_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,help,options,raw,version,silent,"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    ASK_FOR_INPUT_SILENT="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
ASK_FOR_INPUT_CWD="$(realpath "${ASK_FOR_INPUT_CWD:-$PWD}" 2>/dev/null)"
export ASK_FOR_INPUT_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides - Three-tier fallback: ENV → positional → default
prompt="${PROMPT:-${1:-$ASK_FOR_INPUT_NAME}}"
title="${TITLE:-${2:-$ASK_FOR_INPUT_DEFAULT_TITLE}}"
default="${DEFAULT:-${3:-$ASK_FOR_INPUT_DEFAULT_VALUE}}"
name="${title:-$APPNAME}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
main() {
  local environment=$(__detect_environment)
  local user_input=""
  local result=1

  # Validate environment
  if [ "$environment" = "gui" ] && ! __validate_environment; then
    environment="terminal"
  fi

  case "$environment" in
  ci)
    user_input=$(__handle_ci_input)
    result=$?
    ;;
  gui | app_menu)
    __set_gui_tool
    if [ -n "$PROGRAM_PATH" ] && ([ -x "$PROGRAM_PATH" ] || [ "$PROGRAM_NAME" = "osascript" ]); then
      user_input=$(__execute_input)
      result=$?
    else
      # Fallback to terminal
      __set_terminal_tool
      user_input=$(__execute_input)
      result=$?
    fi
    ;;
  ssh | terminal | headless)
    __set_terminal_tool
    user_input=$(__execute_input)
    result=$?
    ;;
  esac

  if [ $result -eq 0 ] && [ -n "$user_input" ]; then
    # Success: got input from user
    printf '%s\n' "$user_input"
    __log_message "Success: Input received for prompt: $prompt"
    exitCode=0
  else
    # Failure: no input or user cancelled
    __log_message "Error: No input received for prompt: $prompt"
    __notifications "$name:" "$ASK_FOR_INPUT_ERROR_MESSAGE" || printf_red "$name: $ASK_FOR_INPUT_ERROR_MESSAGE" >&2
    exitCode=1
  fi

  return $exitCode
}

# Execute main function
main "$@"
exitCode=$?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
