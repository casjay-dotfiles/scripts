#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208042114-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  blog --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 04, 2022 21:14 EDT
# @@File             :  blog
# @@Description      :  Blogging script using github pages
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208042114-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
BLOG_REQUIRE_SUDO="${BLOG_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE"
  fi
  [ -d "$BLOG_CONFIG_DIR" ] || mkdir -p "$BLOG_CONFIG_DIR"
  [ -d "$BLOG_CONFIG_BACKUP_DIR" ] || mkdir -p "$BLOG_CONFIG_BACKUP_DIR"
  [ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ] &&
    cp -Rf "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" "$BLOG_CONFIG_BACKUP_DIR/$BLOG_CONFIG_FILE.$$"
  cat <<EOF >"$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE"
# Settings for blog
BLOG_NAME="${BLOG_NAME:-}"
BLOG_AUTHOR=${BLOG_AUTHOR:-}
BLOG_AUTHOR_EMAIL=${BLOG_AUTHOR_EMAIL:-}
BLOG_BASE_URL="${BLOG_BASE_URL:-}"
BLOG_PAGE_BASE_URL="${BLOG_BASE_URL:-}"
BLOG_POST_BASE_URL="${BLOG_POST_BASE_URL:-}"
BLOG_DEFAULT_EXT="${BLOG_DEFAULT_EXT:-}"
BLOG_GIT_ENABLED="${BLOG_GIT_ENABLED:-}"
BLOG_DIR="${BLOG_DIR:-}"
BLOG_TEMPLATE_DIR="${BLOG_TEMPLATE_DIR:-}"
BLOG_EDITOR="${EDITOR:-}"
BLOG_OPTIONS_VIM="${BLOG_OPTIONS_EDITOR:-}"
BLOG_GITHUB_AUTH_TOKEN="${BLOG_GITHUB_AUTH_TOKEN:-}"
BLOG_PAGE_COUNT="${BLOG_PAGE_COUNT:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
BLOG_OUTPUT_COLOR_1="${BLOG_OUTPUT_COLOR_1:-}"
BLOG_OUTPUT_COLOR_2="${BLOG_OUTPUT_COLOR_2:-}"
BLOG_OUTPUT_COLOR_GOOD="${BLOG_OUTPUT_COLOR_GOOD:-}"
BLOG_OUTPUT_COLOR_ERROR="${BLOG_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
BLOG_NOTIFY_ENABLED="${BLOG_NOTIFY_ENABLED:-}"
BLOG_GOOD_NAME="${BLOG_GOOD_NAME:-}"
BLOG_ERROR_NAME="${BLOG_ERROR_NAME:-}"
BLOG_GOOD_MESSAGE="${BLOG_GOOD_MESSAGE:-}"
BLOG_ERROR_MESSAGE="${BLOG_ERROR_MESSAGE:-}"
BLOG_NOTIFY_CLIENT_NAME="${BLOG_NOTIFY_CLIENT_NAME:-}"
BLOG_NOTIFY_CLIENT_ICON="${BLOG_NOTIFY_CLIENT_ICON:-}"
BLOG_NOTIFY_CLIENT_URGENCY="${BLOG_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "blog:  Blogging script using github pages - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: blog [options] [commands]"
  __printf_line "config                          - Generate config file for site"
  __printf_line "copy                            - Copy templates files to config directory"
  __printf_line "page                            - Create a new blog page"
  __printf_line "post                            - Create a new blog post"
  __printf_line "new                             - Create and edit new blog post"
  __printf_line "edit [/path/to/file]            - Edit an existing file"
  __printf_line "-f,--file                       - Create a new file"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$BLOG_REQUIRE_SUDO" = "yes" ] && [ -z "$BLOG_REQUIRE_SUDO_RUN" ]; then
    export BLOG_REQUIRE_SUDO="no"
    export BLOG_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$BLOG_TEMP_FILE" ] && rm -Rf "$BLOG_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__replace() { sed -i 's|'"$1"'|'"$2"'|g' "$3" 2>/dev/null; }
__blog_dir() { [ -d "$BLOG_DIR" ] && return 0 || return 1; }
__retrieve_variable() { awk -F'=' '{print $2}' | sed 's|"||g;s|^ ||g' | grep -v '^$' | grep '^' || echo "0"; }
__blog_site() { git -C "$BLOG_DIR" remote -v 2>/dev/null | grep push | head -n 1 | awk '{print $2}' 2>/dev/null | grep '^'; }
__findcmd() { find "${1:-$BLOG_CONFIG_DIR}" -type f ${1} -not -path "*/.git/*" 2>/dev/null | __sed 's|'${1:-$BLOG_CONFIG_DIR}/'||g' | sort -u; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
__git_enabled() {
  BLOG_GIT_ENABLED="${1:-$BLOG_GIT_ENABLED}"
  if [ -f "${BLOG_CONFIG_DIR}/$BLOG_NAME.nogit" ] || [ "$BLOG_GIT_ENABLED" = "" ]; then
    BLOG_GIT_ENABLED=""
    return 1
  else
    BLOG_GIT_ENABLED="ENABLED"
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__get_count() {
  count=0
  if [ -f "$BLOG_CONFIG_DIR/$BLOG_NAME.cont" ]; then
    count=$(grep -sh "BLOG_PAGE_COUNT" "$BLOG_CONFIG_DIR/$BLOG_NAME.cont" | __retrieve_variable)
  elif [ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ]; then
    count=$(grep -sh "BLOG_PAGE_COUNT" "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" | __retrieve_variable)
  else
    count=0
  fi
  [ $count -gt 0 ] && cont=$((count + 1)) || count=0
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__git_message() {
  shift 1
  if [ "$BLOG_GIT_ENABLED" = "ENABLED" ]; then
    if [ -f "$1" ]; then
      message="🐜📓❇📓 Modified: ${file/$BLOG_DIR\//} 📓❇📓🐜"
    else
      message=" 🐜📓❇📓Added: ${file/$BLOG_DIR\//} 📓❇📓🐜"
    fi
    BLOG_COMMIT_MESSAGE="${message:-New blog post} ${args:-}"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__setup() {
  local ARGS="$*"
  local exitStatus=0
  BLOG_NAME="$(basename -- "${BLOG_DIR}")"
  if __blog_init "$BLOG_DIR"; then
    if [ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ]; then
      ln -sf "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" "$BLOG_CONFIG_DIR/$BLOG_NAME.conf"
    else
      printf_red "The file $BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE doesn't exist"
      exitStatus=1
    fi
  else
    exitStatus=1
  fi
  if [ $exitStatus = 0 ]; then
    __mkd "$BLOG_DIR/_posts" "$BLOG_DIR/_pages"
    __newpage_template "index" "Welcome to your new site"
    $APPNAME $ARGS
    exit $?
  else
    exitStatus=1
  fi
  return ${exitStatus:-$?}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__blog_init() {
  local YesNo=""
  local BLOG_URL=""
  local BLOG_DIR="${1:-$BLOG_DIR}"
  if [ -f "$BLOG_CONFIG_DIR/$BLOG_NAME.nogit" ] || [ "$BLOG_GIT_ENABLED" = "" ]; then
    return 0
  fi
  printf_read_question "2" "Would you like to keep this in a git repo?" "1" "BLOG_GIT_ENABLED"
  if printf_answer_yes "$BLOG_GIT_ENABLED"; then
    BLOG_GIT_ENABLED="ENABLED"
    printf_read_question "3" "Do you already have a blog repo you would like to import: [y/N] " "1" "YES"
    if printf_answer_yes "$YES"; then
      printf_read_input "3" "Enter the url: " "120" "BLOG_URL" "-e"
      printf_blue "Cloning $BLOG_URL to"
      printf_blue "$BLOG_DIR"
      git clone "$BLOG_URL" "$BLOG_DIR" -q &>/dev/null || printf_exit "Failed to clone the repo"
    else
      __git_init "$BLOG_DIR"
    fi
  fi
  if [ ! -d "$BLOG_DIR/.git" ]; then
    printf '%s\n' "Git is disabled for $BLOG_NAME" >"$BLOG_CONFIG_DIR/$BLOG_NAME.nogit"
    BLOG_GIT_ENABLED="no"
  fi
  if [ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ]; then
    if [ -d "$BLOG_DIR" ] && [ -d "$BLOG_DIR/_posts" ] && [ -d "$BLOG_DIR/_pages" ]; then
      printf_green "Your new blogging site has been setup"
    else
      printf_red "Not enabling git for $BLOG_DIR"
    fi
    export BLOG_INIT_SETUP="true"
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__git_init() {
  if [ ! -d "${BLOG_DIR}/.git" ] && [ "$BLOG_GIT_ENABLED" = "ENABLED" ]; then
    if [ "$(__count_dir ${BLOG_DIR})" = 0 ]; then
      __mkd "$BLOG_DIR/_posts" "$BLOG_DIR/_pages"
      touch "${BLOG_DIR}/.gitignore"
      git -C "${BLOG_DIR}" init &>/dev/null
      git -C "${BLOG_DIR}" add . &>/dev/null
      git -C "${BLOG_DIR}" commit -q -m " 🦈🏠🐜❗ Initial Commit ❗🐜🦈🏠 " 2>/dev/null
      [ -d "${BLOG_DIR}/.git" ] || printf_exit "Failed to initialize the the blog"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__blog_publish() {
  local message="$1"
  if [ "$BLOG_GIT_ENABLED" = "ENABLED" ]; then
    __git_message "$message"
    if git -C "${BLOG_DIR}" add . &&
      git -C "${BLOG_DIR}" commit -q -m "${BLOG_COMMIT_MESSAGE:-$message}"; then
      printf_blue "Your changes have been commited to git"
    fi
  else
    printf_red "Git is disabled for blog: $BLOG_NAME"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__edit() {
  # Possible completion fix
  if [ -f "$1" ]; then
    file="$1"
  elif [ -f "$BLOG_DIR/$1" ]; then
    file="$BLOG_DIR/$1"
  elif [ -f "$HOME/.local/share/blogs/$1" ]; then
    file="$HOME/.local/share/blogs/$1"
  else file="$1"; fi
  printf_yellow "Launching $BLOG_EDITOR $file"
  eval ${BLOG_EDITOR:-$EDITOR} "$file"
  printf_pause "Press any key when done"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__make_file() {
  file="$1" && shift 1
  title="${1:-$BLOG_NEW_FILE_TITLE}"
  dir="$(dirname "${file/$BLOG_DIR/}" | __sed 's|^/||g;s|/$||g;s| |_|g')"
  date="$(date +"$BLOG_DATE_FORMAT")"
  if [ "$MAKE_DATE" = "no" ] || [[ "$dir" = _pages/** ]]; then
    newtitle="$(basename -- "${title:-$file}")"
    newedit="$(echo "$newtitle" | __sed 's| |_|g')"
    newfilename="$newedit.$BLOG_DEFAULT_EXT"
  else
    newtitle="$(basename -- "${title:-$file}")"
    newedit="$(echo "$date-$newtitle" | __sed 's| |_|g')"
    newfilename="$newedit.$BLOG_DEFAULT_EXT"
  fi
  export dir="$dir"
  export title="$newtitle"
  export rawfile="$dir/$newedit"
  export linkurl="${newtitle// /-}"
  export edit="$newfilename"
  export file="$BLOG_DIR/$dir/$edit"
  [ -d "$BLOG_DIR/$dir" ] || __mkd "$BLOG_DIR/$dir"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__blog_post_header() {
  local url=$(echo "${rawfile//$BLOG_DIR/}" | sed 's|_posts||g;s|_pages||g')
  local index="$(basename $rawfile)"
  local get_title="${title:-$BLOG_NEW_FILE_TITLE}"
  if [ "$index" = index ]; then
    linkurl="$(dirname $url)/"
  else
    linkurl="$(dirname $url).html"
  fi
  cat "$BLOG_TEMPLATE_DIR/blog/post.$BLOG_DEFAULT_EXT" |
    __sed "s|AuthorName|$BLOG_AUTHOR|g" |
    __sed "s|DATE|$(date +"$BLOG_DATE_FORMAT $BLOG_TIME_FORMAT")|g" |
    __sed "s|TITLE|$get_title|g" |
    __sed "s|/myurl|$BLOG_POST_BASE_URL/$url|g" | sed 's|//|/|'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__blog_page_header() {
  local url=$(echo "${rawfile//$BLOG_DIR/}" | sed 's|_posts||g;s|_pages||g')
  local get_title="${title:-$BLOG_NEW_FILE_TITLE}"
  local index="$(basename $rawfile)"
  if [ "$index" = index ]; then
    linkurl="$(dirname $url)/"
  else
    linkurl="$(dirname $url).html"
  fi
  cat "$BLOG_TEMPLATE_DIR/blog/page.$BLOG_DEFAULT_EXT" |
    __sed "s|AuthorName|$BLOG_AUTHOR|g" |
    __sed "s|DATE|$(date +"$BLOG_DATE_FORMAT $BLOG_TIME_FORMAT")|g" |
    __sed "s|TITLE|$get_title|g" |
    __sed "s|/myurl|$BLOG_PAGE_BASE_URL/$linkurl|g" |
    __sed "s|weight:.*|weight: $count|g" |
    __sed "s|BLOG_PAGE_COUNT=.*|BLOG_PAGE_COUNT=$count|g" |
    __sed "s|/myurl|$BLOG_POST_BASE_URL/$url|g" | sed 's|//|/|'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__newpost_template() {
  if __blog_dir; then
    __make_file "_posts/$1"
    __blog_post_header >"$file"
    __edit "$file"
    __blog_publish "$file"
  else
    printf_red "There is no blog directory"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__newpage_template() {
  MAKE_DATE="no"
  __make_file "_pages/$1"
  BLOG_NEW_FILE_TITLE="$2"
  __get_count
  if [ ! -f "$file" ]; then
    __blog_page_header >"$file"
  fi
  sed -i 's|permalink: //|permalink: /|g' "$file"
  __edit "$file"
  __blog_publish
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__copy_templates() {
  if [ -d "$BLOG_CONFIG_DIR/files/.git" ]; then
    printf_green "Updating the template files"
    git -C "$BLOG_CONFIG_DIR/files" pull -q
  elif [ -d "${CASJAYSDEVDIR}/templates/blog" ]; then
    printf_green "Copying $APPNAME templates $CASJAYSDEVDIR/templates/blog"
    mkdir -p "$BLOG_CONFIG_DIR/files $CASJAYSDEVDIR/templates/blog"
    __cp_rf "$CASJAYSDEVDIR/templates/blog/." "$BLOG_CONFIG_DIR/files/"
  else
    printf_error "Can not get template files"
    exit 1
  fi
  if [ "$(__count_files $BLOG_CONFIG_DIR/files)" -ne 0 ]; then
    printf_green "Copying has succeeded > $BLOG_CONFIG_DIR/files"
    exitCodeT=0
  else
    printf_error "Copying of files has failed < $BLOG_CONFIG_DIR/files"
    exitCodeT=1
  fi
  echo ""
  return $exitCodeT
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
BLOG_CONFIG_FILE="${BLOG_CONFIG_FILE:-settings.conf}"
BLOG_CONFIG_DIR="${BLOG_CONFIG_DIR:-$HOME/.config/myscripts/blog}"
BLOG_CONFIG_BACKUP_DIR="${BLOG_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/blog/backups}"
BLOG_LOG_DIR="${BLOG_LOG_DIR:-$HOME/.local/log/blog}"
BLOG_TEMP_DIR="${BLOG_TEMP_DIR:-$HOME/.local/tmp/system_scripts/blog}"
BLOG_CACHE_DIR="${BLOG_CACHE_DIR:-$HOME/.cache/blog}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
BLOG_OUTPUT_COLOR_1="${BLOG_OUTPUT_COLOR_1:-33}"
BLOG_OUTPUT_COLOR_2="${BLOG_OUTPUT_COLOR_2:-5}"
BLOG_OUTPUT_COLOR_GOOD="${BLOG_OUTPUT_COLOR_GOOD:-2}"
BLOG_OUTPUT_COLOR_ERROR="${BLOG_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
BLOG_NOTIFY_ENABLED="${BLOG_NOTIFY_ENABLED:-yes}"
BLOG_GOOD_NAME="${BLOG_GOOD_NAME:-Great:}"
BLOG_ERROR_NAME="${BLOG_ERROR_NAME:-Error:}"
BLOG_GOOD_MESSAGE="${BLOG_GOOD_MESSAGE:-No errors reported}"
BLOG_ERROR_MESSAGE="${BLOG_ERROR_MESSAGE:-Errors were reported}"
BLOG_NOTIFY_CLIENT_NAME="${BLOG_NOTIFY_CLIENT_NAME:-$APPNAME}"
BLOG_NOTIFY_CLIENT_ICON="${BLOG_NOTIFY_CLIENT_ICON:-notification-new}"
BLOG_NOTIFY_CLIENT_URGENCY="${BLOG_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
BLOG_EDITOR="${EDITOR:-myeditor}"
BLOG_NAME="${BLOG_NAME:-default}"
BLOG_AUTHOR=${BLOG_AUTHOR:-$USER}
BLOG_AUTHOR_EMAIL=${BLOG_AUTHOR_EMAIL:-$USER@$(hostname -f)}
BLOG_BASE_URL="${BLOG_BASE_URL:-}"
BLOG_PAGE_BASE_URL="${BLOG_BASE_URL:-}"
BLOG_POST_BASE_URL="${BLOG_POST_BASE_URL:-$BLOG_BASE_URL/blog}"
BLOG_DEFAULT_EXT="${BLOG_DEFAULT_EXT:-md}"
BLOG_GIT_ENABLED="${BLOG_GIT_ENABLED:-yes}"
BLOG_DIR="${BLOG_DIR:-$HOME/.local/share/blogs/$BLOG_NAME}"
BLOG_TEMPLATE_DIR="${BLOG_TEMPLATE_DIR:-$CASJAYSDEVDIR/templates}"
BLOG_OPTIONS_VIM="${BLOG_OPTIONS_EDITOR:-"vim -c ':setlocal ft=notes syntax=markdown'"}"
BLOG_GITHUB_AUTH_TOKEN="${BLOG_GITHUB_AUTH_TOKEN:-$GITHUB_ACCESS_TOKEN}"
BLOG_PAGE_COUNT=0
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ] && . "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$BLOG_LOG_DIR" ] || mkdir -p "$BLOG_LOG_DIR" |& __devnull
[ -d "$BLOG_TEMP_DIR" ] || mkdir -p "$BLOG_TEMP_DIR" |& __devnull
[ -d "$BLOG_CACHE_DIR" ] || mkdir -p "$BLOG_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - -
BLOG_TEMP_FILE="${BLOG_TEMP_FILE:-$(mktemp $BLOG_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$BLOG_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$BLOG_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$BLOG_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$BLOG_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$BLOG_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$BLOG_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="f"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",file:"
# - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="config copy edit page post new"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    BLOG_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    BLOG_CWD="$2"
    [ -d "$BLOG_CWD" ] || mkdir -p "$BLOG_CWD" |& __devnull
    shift 2
    ;;
  -f | --file)
    shift 1
    OLD_BLOG_CONFIG_FILE="$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE"
    BLOG_CONFIG_FILE="$BLOG_CONFIG_DIR/$1"
    BLOG_NAME="$(basename -- "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE")"
    shift 1
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# BLOG_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# BLOG_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && BLOG_CWD="$1" && shift 1 || BLOG_CWD="${BLOG_CWD:-$PWD}"
BLOG_CWD="$(realpath "${BLOG_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$BLOG_CWD" ] && cd "$BLOG_CWD"; then
# if [ "$BLOG_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $BLOG_CWD"
# fi
# else
# printf_exit "💔 $BLOG_CWD does not exist 💔"
# fi
export BLOG_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
[ -n "$BLOG_DIR" ] || printf_exit 1 1 "Failed to load $BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE"
[ -f "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ] && . "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE"
[ -d "$BLOG_DIR" ] || __setup "$*"
__git_enabled "$BLOG_GIT_ENABLED"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
config)
  shift 1
  BLOG_DIR="${1:-$BLOG_DIR}"
  BLOG_NAME="$(basename -- "${BLOG_DIR}")"
  BLOG_CONFIG_NEW=""$BLOG_NAME.conf""
  if [ "$BLOG_CONFIG_FILE" != "default.conf" ] || [ "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" != "$BLOG_CONFIG_DIR/$BLOG_CONFIG_FILE" ]; then
    printf_read_input "4" "Where would you like to store your blog files" "120" "BLOG_DIR" "-e -i $HOME/.local/share/blogs/$BLOG_NAME"
  fi
  __blog_init "$BLOG_DIR"
  __gen_config
  exit $?
  ;;

copy)
  shift 1
  __copy_templates
  exit $?
  ;;

edit)
  shift 1
  [ -z "${1}" ] && printf_red "Usage: $APPNAME edit 'filename'" && exit 1
  __edit "$1"
  __blog_publish "$file"
  exit $?
  ;;

page)
  shift 1
  [ -z "${1}" ] && printf_red "Usage: $APPNAME page 'filename' 'title'" && exit 1
  __newpage_template "${1:-index}" "${2:-Welcome to your new site}"
  exit $?
  ;;

post)
  shift 1
  [ -z "${1}" ] && printf_red "Usage: $APPNAME post subdir/filename" && exit 1
  __newpost_template "$1"
  exit $?
  ;;

new)
  shift 1
  [ -z "${1}" ] && printf_red "Usage: $APPNAME new filename title" && exit 1
  BLOG_NEW_FILE_TITLE="${2:-New file}"
  __make_file "$1"
  if [ "$dir" = "$BLOG_DIR" ] || [ "$dir" = "." ]; then
    file="$BLOG_DIR/_posts/$edit"
    [ -d "$BLOG_DIR/_posts" ] || __mkd "$BLOG_DIR/_posts"
  else
    file="${file:?}"
    [ -d "$dir" ] || __mkd "$dir"
  fi
  __blog_post_header >"$file"
  __edit "$file"
  __blog_publish "$file"
  exit $?
  ;;

*)
  [ -n "${1}" ] || printf_exit "Usage: $APPNAME filename title"
  BLOG_NEW_FILE_TITLE="${2:-New file}"
  __make_file "$1"
  if [ "$dir" = "$BLOG_DIR" ] || [ "$dir" = "." ]; then
    file="$BLOG_DIR/_posts/$edit"
    [ -d "$BLOG_DIR/_posts" ] || __mkd "$BLOG_DIR/_posts"
  else
    file="${file:?}"
    [ -d "$dir" ] || __mkd "$dir"
  fi
  __blog_post_header >"$file"
  __edit "$file"
  __blog_publish "$file"
  exit $?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
