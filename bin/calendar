#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208042138-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  calendar --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 04, 2022 21:38 EDT
# @@File             :  calendar
# @@Description      :  Bash calendar script
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :  https://github.com/coreymwamba/estonta
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208042138-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
CALENDAR_REQUIRE_SUDO="${CALENDAR_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE"
  fi
  [ -d "$CALENDAR_CONFIG_DIR" ] || mkdir -p "$CALENDAR_CONFIG_DIR"
  [ -d "$CALENDAR_CONFIG_BACKUP_DIR" ] || mkdir -p "$CALENDAR_CONFIG_BACKUP_DIR"
  [ -f "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE" ] &&
    cp -Rf "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE" "$CALENDAR_CONFIG_BACKUP_DIR/$CALENDAR_CONFIG_FILE.$$"
  cat <<EOF >"$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE"
# Settings for calendar
CALENDER_EVENT_DIR="${CALENDER_EVENT_DIR:-}"
CALENDER_HOMETOWN="${CALENDER_HOMETOWN:-}"
CALENDER_HOMECOUNTRY="${CALENDER_HOMECOUNTRY:-}"
CALENDER_DATEFORMAT="${CALENDER_DATEFORMAT:-}"
CALENDER_TAGS=${CALENDER_TAGS:-}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CALENDAR_OUTPUT_COLOR_1="${CALENDAR_OUTPUT_COLOR_1:-}"
CALENDAR_OUTPUT_COLOR_2="${CALENDAR_OUTPUT_COLOR_2:-}"
CALENDAR_OUTPUT_COLOR_GOOD="${CALENDAR_OUTPUT_COLOR_GOOD:-}"
CALENDAR_OUTPUT_COLOR_ERROR="${CALENDAR_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CALENDAR_NOTIFY_ENABLED="${CALENDAR_NOTIFY_ENABLED:-}"
CALENDAR_GOOD_NAME="${CALENDAR_GOOD_NAME:-}"
CALENDAR_ERROR_NAME="${CALENDAR_ERROR_NAME:-}"
CALENDAR_GOOD_MESSAGE="${CALENDAR_GOOD_MESSAGE:-}"
CALENDAR_ERROR_MESSAGE="${CALENDAR_ERROR_MESSAGE:-}"
CALENDAR_NOTIFY_CLIENT_NAME="${CALENDAR_NOTIFY_CLIENT_NAME:-}"
CALENDAR_NOTIFY_CLIENT_ICON="${CALENDAR_NOTIFY_CLIENT_ICON:-}"
CALENDAR_NOTIFY_CLIENT_URGENCY="${CALENDAR_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "calendar:  Bash calendar script - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: calendar [options] [commands]"
  __printf_line "add                             - Add an event"
  __printf_line "category                        - Search by categories"
  __printf_line "summary                         - Search by summery"
  __printf_line "date                            - Search by date"
  __printf_line "find                            - Search for an event"
  __printf_line "list                            - List events"
  __printf_line "gui                             - GUI interface to add events"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$CALENDAR_REQUIRE_SUDO" = "yes" ] && [ -z "$CALENDAR_REQUIRE_SUDO_RUN" ]; then
    export CALENDAR_REQUIRE_SUDO="no"
    export CALENDAR_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$CALENDAR_TEMP_FILE" ] && rm -Rf "$CALENDAR_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__welcome() {
  __show_date
  if [ $# = 0 ]; then
    printf_cyan "list                                                  - Show all events"
    printf_cyan "add                                                   - Add event in console."
    printf_cyan "gui                                                   - Graphical calendar display of events (can also add events)."
    printf_cyan "category=TEXT                                         - List all saved events filtered by category."
    printf_cyan "summary=TEXT                                          - List all saved events filtered by summary."
    printf_cyan "date=DATE_STRING                                      - Find events matching the date string."
    printf_cyan "find START_DATE_STRING END_DATE_STRING                - Find events within a date range."
    printf_blue "You can type exit or q to exit"
    printf_read_cal "5" "What would you like to do? " "main"
    { [ "$main" = "q" ] || [ "$main" = "exit" ] || [ "$main" = "!q" ]; } && exit
    printf_newline
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
initialize() {
  [ -f "$CALENDER_EVENT_DIR" ] && __rm_rf "$CALENDER_EVENT_DIR"
  if [ ! -d "$CALENDER_EVENT_DIR" ]; then
    mkdir -p "$CALENDER_EVENT_DIR" &>/dev/null
    printf_green "New directory created at $CALENDER_EVENT_DIR."
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
printf_read_cal() {
  test -n "$1" && test -z "${1//[0-9]/}" && local color="$1" && shift 1 || local color="1"
  local msg="$1" && shift 1
  local reply="${1:-REPLY}" && shift 1
  printf_color "$msg " "${PRINTF_COLOR:-$color}"
  read ${reply:-} || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
containsElement() {
  local e
  for e in "${@:2}"; do [ "$e" == "$1" ] && return 0; done
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
generate_fields() {
  files="$(find "${1:-$CALENDER_EVENT_DIR}" -name '*.ics' 2>/dev/null | grep '^' || echo '')"
  icalarray=("DTSTART" "SUMMARY" "LOCATION" "DESCRIPTION" "CATEGORIES")
  while read line; do
    IFS=':' read -r calname string <<<"$line"
    containsElement "${calname}" "${icalarray[@]}"
    [ $? -eq 0 ] && printf -v '%s %s' "$calname" "$string"
  done <"$LERTA"
  #iCalendar date format -> something that `date` can read. Sure there is an easier way, but I don't know it
  DTSTART="$(echo ${DTSTART%Z} | sed -e 's/.\{4\}/&-/' | sed -e 's/.\{7\}/&-/' | sed -e 's/.\{13\}/&:/' | sed -e 's/.\{16\}/&:/' 2>/dev/null)"
  THEDATE="$(date -d $DTSTART +"$CALENDER_DATEFORMAT" 2>/dev/null)"
  #possibly inefficient, but bulletproof
  desc="$(cat "$LERTA" | grep -v "DTSTART" | grep -v "CATEGORIES" | grep -v "SUMMARY" | grep -v "END" | grep -v "LOCATION" | grep -v "DTEND" | sed -r 's/\\n/\n/g' | sed -r 's/(\\)//g' 2>/dev/null)"
  desc="${desc/DESCRIPTION:/}"
  startdate="$THEDATE"
  title="$SUMMARY"
  location="$LOCATION"
  category="$CATEGORIES"
  # Format output
  [ -n "$startdate" ] && DATETIME="$startdate"
  [ -n "$title" ] && TITLE=" - $title"
  [ -n "$desc" ] && DESC=" - $desc"
  [ -n "$location" ] && LOC=" - $location"
  [ -n "$category" ] && CATEG=" - ($category)"
  #CALENDER_TERSE="$startdate - $title"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
find_appointments() {
  local files=""
  files="$(find "$CALENDER_EVENT_DIR" -name '*.ics' 2>/dev/null | grep '^' || echo '')"
  if [ -z "$files" ]; then
    printf_red "No events found"
    exit 1
  else
    needle="$(date -I -d "$DATEFILE" 2>/dev/null)"
    for found in $(grep -lr --include '*.ics' $needle $CALENDER_EVENT_DIR); do
      list_appointment
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
date_range() {
  # SO - http://stackoverflow.com/questions/28226229/bash-looping-through-dates
  sdr="$(date -I -d "$sdr" 2>/dev/null)" || exit 1
  edr="$(date -I -d "$edr" 2>/dev/null)" || exit 1
  DATEFILE="$sdr"
  while [ "$(date -d "$DATEFILE" +%Y%m%d 2>/dev/null)" -le "$(date -d "$edr" +%Y%m%d 2>/dev/null)" ]; do
    find_appointments
    DATEFILE="$(date -I -d "$DATEFILE + 1 day" 2>/dev/null)"
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
list_appointment() {
  local files=""
  files="$(find "$CALENDER_EVENT_DIR" -name '*.ics' 2>/dev/null | grep '^' || echo '')"
  if [ -z "$files" ]; then
    printf_red "No events found"
    exit 1
  else
    for file in $files; do
      tail -n +7 "$files" >"$LERTA"
      generate_fields "$file"
      printf '%s %s %s %s' "${DATETIME:-$startdate}" "${TITLE:-$title}" "${DESC:-$desc}" "${LOC:-$location}"
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
list_all() {
  initialize
  local files=""
  files="$(find "$CALENDER_EVENT_DIR" -name '*.ics' 2>/dev/null | sort | grep '^' || echo '')"
  if [ -z "$files" ]; then
    printf_red "No events found"
    exit 1
  else
    for file in $files; do
      tail -n +7 "$file" >$LERTA
      generate_fields "$file"
      printf '%s %s %s %s\n' "${DATETIME:-$startdate}" "${TITLE:-$title}" "${DESC:-$desc}" "${LOC:-$location}"
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
tagordo() {
  local files=""
  files="$(find "$CALENDER_EVENT_DIR" -name '*.ics' 2>/dev/null | grep '^' || echo '')"
  if [ -z "$files" ]; then
    printf_red "No events found"
    exit 1
  else
    for file in $files; do
      tail -n +7 $file >$LERTA
      generate_fields "$file"
      printf_green "$(date -d $DTSTART +"%Y-%m-%d" 2>/dev/null) $SUMMARY ($(date -d $DTSTART +"%-l:%M%P" 2>/dev/null))"
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
list_by_cat() {
  local files=""
  files="$(find "$CALENDER_EVENT_DIR" -name '*.ics' 2>/dev/null | grep '^' || echo '')"
  if [ -z "$files" ]; then
    printf_red "No events found"
    exit 1
  else
    for file in $files; do
      tail -n +7 $file >$LERTA
      generate_fields "$file"
      if [ "$CATEGORIES" == "$FILTER" ]; then
        printf '%s %s %s %s\n' "${DATETIME:-$startdate}" "${TITLE:-$title}" "${DESC:-$desc}" "${LOC:-$location}"
      fi
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
list_by_text() {
  local files=""
  files="$(find "$CALENDER_EVENT_DIR" -name '*.ics' 2>/dev/null | grep '^' || echo '')"
  if [ -z "$files" ]; then
    printf_red "No events found"
    exit 1
  else
    for file in $files; do
      tail -n +5 $file >$LERTA
      generate_fields "$file"
      if [[ "$SUMMARY" =~ ${FILTER} ]]; then
        printf '%s %s %s %s\n' "${DATETIME:-$startdate}" "${TITLE:-$title}" "${DESC:-$desc}" "${LOC:-$location}"
      fi
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
join_strings() {
  local d=$1
  shift
  echo -n "$1"
  shift
  printf "%s" "${@/#/$d}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
shell_generate_ical() {
  newfile="$CALENDER_EVENT_DIR/$(date -Iminutes -d "$sdt" 2>/dev/null | tr -d ':').ics"
  # simple anti-clash mechanism
  if [ -f $newfile ]; then
    printf_red "You have something on this day at that time already..."
    estonta
    exit 1
  fi
  touch "$newfile"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
populate_ical() {
  vcst="BEGIN:VCALENDAR"
  vcv="VERSION:2.0"
  vcp="PRODID:-//Estonta/ical//NONSGML v1.0//EN"
  vcuid="UID:$(date -Iminutes -d "$sdt" 2>/dev/null | tr -d ':')@$(hostname)"
  dtstamp="DTSTAMP:$(date +"%Y%m%dT%H%M%SZ" 2>/dev/null)"
  vevst="BEGIN:VEVENT"
  veven="END:VEVENT"
  echo $vcst >>$newfile
  echo $vcv >>$newfile
  echo $vcp >>$newfile
  echo $vevst >>$newfile
  echo $vcuid >>$newfile
  echo $dtstamp >>$newfile
  echo "DTSTART:$dtstart" >>$newfile
  [ -n "$location" ] && echo "LOCATION:${location}" >>$newfile
  [ -n "$summary" ] && echo "SUMMARY:$summary" >>$newfile
  [ -n "$category" ] && echo "CATEGORIES:$category" >>$newfile
  [ -n "$desc" ] && echo "DESCRIPTION:$desc" | tr '\n' '\t' | awk '{gsub(/\,/,"\\,",$0)} {gsub(/\;/, "\\;",$0)} {gsub(/\t/,"\\n",$0) } {print $0}' | fold -b -s -w 75 >>$newfile 2>/dev/null
  echo -e $veven >>$newfile
  echo "END:VCALENDAR" >>$newfile
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
text_add_event() {
  initialize
  printf_read_cal "4" "[Format: YYYYMMDD] What date is the event: $(date +"%Y%m%d" 2>/dev/null)" dat
  dtd=$(date -d "$dat" +"%Y-%m-%d" 2>/dev/null) && [ -n "$dtd" ] || exit 1
  printf_read_cal "4" "[Format: HHMM] Enter the start time: " dtt
  sdt="$dtd $dtt" && [ -n "$sdt" ] || exit 1
  dtstart=$(date -d "$sdt" +"%Y%m%dT%H%M%SZ" 2>/dev/null)
  printf_read_cal "4" "Where is it (press Enter to skip)? " location
  location=${location//,/\,}
  printf_read_cal "4" "Please give the event a title (press Enter to skip): " summary
  printf_read_cal "4" "any CALENDER_TAGS (press Enter to skip)? " category
  CALENDER_TAGS=${category//,/\,}
  printf_read_cal "4" "Write a short description (press Enter to skip): " desc
  shell_generate_ical
  populate_ical
  printf_green "Event saved."
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__show_date() {
  clear
  printf_newline '\n\n\n'
  if [ -z "$CALENDER_MESSAGE" ]; then
    CALENDER_MESSAGE="$(date +'Today is: %A %B %d, %Y and the time is: %H:%M' 2>/dev/null)"
  fi
  printf_custom "$CALENDAR_OUTPUT_COLOR" "$CALENDER_MESSAGE"
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
gui_add_event() {
  __cmd_exists yad || printf_exit "This feature required yad to be installed"
  [ ! -s $CALENDER_EVENT_DIR ] && {
    mkdir -p "$CALENDER_EVENT_DIR" 2>/dev/null
    yad --text="Events directory created at $CALENDER_EVENT_DIR" 2>/dev/null
  }
  tmpfile=$(mktemp)
  tagordo >$tmpfile
  dtd=$(yad --title="start date" --text="When is it?" --calendar --date-format="%Y-%m-%d" --details=$tmpfile) || exit 1
  [ -z "$dtd" ] && exit 0
  dtt=$(yad --title="start time" --text="enter the start time" --entry) || exit 1
  sdt="$dtd $dtt"
  dtstart=$(date -d "$sdt" +"%Y%m%dT%H%M%SZ" 2>/dev/null)
  loc=$(yad --title="location" --text="where is it?" --form --field="Name" --field="Address" --field="City" --field="Postcode" --field="Country") || exit 1
  loc_array=()
  place=$(echo $loc | awk -F '|' '{print $1}' 2>/dev/null)
  [ -n "$place" ] && loc_array+=("$place")
  street=$(echo $loc | awk -F '|' '{print $2}' 2>/dev/null)
  [ -n "$street" ] && loc_array+=("$street")
  city=$(echo $loc | awk -F '|' '{print $3}' 2>/dev/null)
  [ -z "$city" ] && city=$CALENDER_HOMETOWN
  [ -n "$city" ] && loc_array+=("$city")
  postc=$(echo $loc | awk -F '|' '{print $4}' 2>/dev/null)
  [ -n "$postc" ] && loc_array+=("$postc")
  country=$(echo $loc | awk -F '|' '{print $5}' 2>/dev/null)
  [ -z "$country" ] && country=$CALENDER_HOMECOUNTRY
  [ -n "$country" ] && loc_array+=("$country")
  location=$(printf "%s\, " "${loc_array[@]}" | sed -e 's/\(.*\)\\,/\1/' 2>/dev/null)
  group="--field tag?:CBE"
  title="--field title"
  gp=$(join_strings '!' "${CALENDER_TAGS[@]}")
  main=$(yad --form $group $title $gp) || exit 1
  summary=$(echo $main | awk -F '|' '{print $2}' 2>/dev/null)
  category=$(echo $main | awk -F '|' '{print $1}' 2>/dev/null)
  desc=$(yad --text="Write a description or more information" --text-info --editable --wrap) || exit 1
  yad_generate_ical
  populate_ical
  thanks=$(yad --text="Event saved")
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yad_generate_ical() {
  __cmd_exists yad || printf_exit "This feature required yad to be installed"
  newfile="$CALENDER_EVENT_DIR/$(date -Iminutes -d "$sdt" 2>/dev/null | tr -d ':').ics"
  # simple anti-clash mechanism
  if [ -f $newfile ]; then
    uhoh=$(yad --text="You have something on this day at that time already...")
    exit 1
  fi
  touch "$newfile"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
CALENDAR_CONFIG_FILE="${CALENDAR_CONFIG_FILE:-settings.conf}"
CALENDAR_CONFIG_DIR="${CALENDAR_CONFIG_DIR:-$HOME/.config/myscripts/calendar}"
CALENDAR_CONFIG_BACKUP_DIR="${CALENDAR_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/calendar/backups}"
CALENDAR_LOG_DIR="${CALENDAR_LOG_DIR:-$HOME/.local/log/calendar}"
CALENDAR_TEMP_DIR="${CALENDAR_TEMP_DIR:-$HOME/.local/tmp/system_scripts/calendar}"
CALENDAR_CACHE_DIR="${CALENDAR_CACHE_DIR:-$HOME/.cache/calendar}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CALENDAR_OUTPUT_COLOR_1="${CALENDAR_OUTPUT_COLOR_1:-33}"
CALENDAR_OUTPUT_COLOR_2="${CALENDAR_OUTPUT_COLOR_2:-5}"
CALENDAR_OUTPUT_COLOR_GOOD="${CALENDAR_OUTPUT_COLOR_GOOD:-2}"
CALENDAR_OUTPUT_COLOR_ERROR="${CALENDAR_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CALENDAR_NOTIFY_ENABLED="${CALENDAR_NOTIFY_ENABLED:-yes}"
CALENDAR_GOOD_NAME="${CALENDAR_GOOD_NAME:-Great:}"
CALENDAR_ERROR_NAME="${CALENDAR_ERROR_NAME:-Error:}"
CALENDAR_GOOD_MESSAGE="${CALENDAR_GOOD_MESSAGE:-No errors reported}"
CALENDAR_ERROR_MESSAGE="${CALENDAR_ERROR_MESSAGE:-Errors were reported}"
CALENDAR_NOTIFY_CLIENT_NAME="${CALENDAR_NOTIFY_CLIENT_NAME:-$APPNAME}"
CALENDAR_NOTIFY_CLIENT_ICON="${CALENDAR_NOTIFY_CLIENT_ICON:-notification-new}"
CALENDAR_NOTIFY_CLIENT_URGENCY="${CALENDAR_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
CALENDER_EVENT_DIR="${CALENDER_EVENT_DIR:-$HOME/.local/share/ics}"
CALENDER_HOMETOWN="${CALENDER_HOMETOWN:-$MYLOCATIONCITY}"
CALENDER_HOMECOUNTRY="${CALENDER_HOMECOUNTRY:-$MYLOCATION_COUNTRY}"
CALENDER_DATEFORMAT="${CALENDER_DATEFORMAT:-%a %b %d, %Y %H:%M}"
CALENDER_TAGS=${CALENDER_TAGS:-(work,meeting,study,party)}
CALENDER_MESSAGE="${CALENDER_MESSAGE:-$(date +"Today is: %A %B %d, %Y and the time is: %H:%M" 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE" ] && . "$CALENDAR_CONFIG_DIR/$CALENDAR_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$CALENDAR_LOG_DIR" ] || mkdir -p "$CALENDAR_LOG_DIR" |& __devnull
[ -d "$CALENDAR_TEMP_DIR" ] || mkdir -p "$CALENDAR_TEMP_DIR" |& __devnull
[ -d "$CALENDAR_CACHE_DIR" ] || mkdir -p "$CALENDAR_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CALENDAR_TEMP_FILE="${CALENDAR_TEMP_FILE:-$(mktemp $CALENDAR_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$CALENDAR_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$CALENDAR_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$CALENDAR_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$CALENDAR_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$CALENDAR_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$CALENDAR_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="add category summary date find list gui"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    CALENDAR_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    CALENDAR_CWD="$2"
    [ -d "$CALENDAR_CWD" ] || mkdir -p "$CALENDAR_CWD" |& __devnull
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# CALENDAR_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# CALENDAR_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && CALENDAR_CWD="$1" && shift 1 || CALENDAR_CWD="${CALENDAR_CWD:-$PWD}"
CALENDAR_CWD="$(realpath "${CALENDAR_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$CALENDAR_CWD" ] && cd "$CALENDAR_CWD"; then
# if [ "$CALENDAR_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $CALENDAR_CWD"
# fi
# else
# printf_exit "ðŸ’” $CALENDAR_CWD does not exist ðŸ’”"
# fi
export CALENDAR_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__welcome "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case ${1:-$main} in
list)
  shift 1
  list="$(list_all | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Your events are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  ;;

category)
  FILTER="$2"
  [ -n "$FILTER" ] || printf_exit 'ERROR: you need to enter a category.' >&2
  list="$(list_by_cat | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Current categories are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  exit $?
  ;;

category=?*)
  FILTER=${1#*=}
  [ -n "$FILTER" ] || printf_exit 'ERROR: you need to enter a category file.' >&2
  list="$(list_by_cat | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Current categories are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  exit $?
  ;;

summary)
  FILTER="$2"
  [ -n "$FILTER" ] || printf_exit 'ERROR: you need to enter a summary.' >&2
  list="$(list_by_text | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Current summaries are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  exit $?
  ;;

summary=?*)
  FILTER=${1#*=}
  [ -n "$FILTER" ] || printf_exit 'ERROR: you need to enter a summary file.' >&2
  list="$(list_by_text | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Current summaries are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  exit $?
  ;;

date)
  DATEFILE=$2
  [ -n "$DATEFILE" ] || printf_exit 'ERROR: you need to enter a date.' >&2
  list="$(find_appointments | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Current summaries are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  exit $?
  ;;

date=?*)
  DATEFILE=${1#*=}
  [ -n "$DATEFILE" ] || printf_exit 'ERROR: you need to enter a date file.' >&2
  list="$(find_appointments | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Current summaries are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  exit $?
  ;;

find)
  shift
  [ $# -eq 2 ] || printf_exit "Usage: $APPNAME find [startdate] [enddate]"
  sdr="$1"
  edr="$2"
  [ -n "$DATEFILE" ] || printf_exit 'ERROR: you need to enter a summary.' >&2
  list="$(date_range | grep -v '^$' | tr -s '[:space:]' | grep '^' || false)"
  if [ -n "$list" ]; then
    printf_yellow "Current summaries are:"
    printf '%s\n' "${list}" | printf_readline "$CALENDAR_OUTPUT_COLOR_2"
  else
    printf_red "You don't currently have any events"
  fi
  exit $?
  ;;

add)
  shift 1
  text_add_event
  exit 0
  ;;

gui)
  tmpfile="$CALENDAR_TEMP_FILE"
  tagordo >"$tmpfile"
  gui_add_event 2>/dev/null
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
