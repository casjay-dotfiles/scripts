#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208201626-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  cdd --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Saturday, Aug 20, 2022 16:26 EDT
# @@File             :  cdd
# @@Description      :  cd into directories using shortcuts
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208201626-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
CDD_REQUIRE_SUDO="${CDD_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE"
  fi
  [ -d "$CDD_CONFIG_DIR" ] || mkdir -p "$CDD_CONFIG_DIR"
  [ -d "$CDD_CONFIG_BACKUP_DIR" ] || mkdir -p "$CDD_CONFIG_BACKUP_DIR"
  [ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ] &&
    cp -Rf "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" "$CDD_CONFIG_BACKUP_DIR/$CDD_CONFIG_FILE.$$"
  cat <<EOF >"$CDD_CONFIG_DIR/$CDD_CONFIG_FILE"
# Settings for cdd
CDD_OPTIONS_DEFAULT_PROJECT_NAME="${CDD_OPTIONS_DEFAULT_PROJECT_NAME:-default}"
CDD_OPTIONS_PROJECT_DIR="${CDD_OPTIONS_PROJECT_DIR:-$HOME/.local/share/cdd/projects}"
CDD_GREP_COLORS="${CDD_GREP_COLORS:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CDD_OUTPUT_COLOR_1="${CDD_OUTPUT_COLOR_1:-}"
CDD_OUTPUT_COLOR_2="${CDD_OUTPUT_COLOR_2:-}"
CDD_OUTPUT_COLOR_GOOD="${CDD_OUTPUT_COLOR_GOOD:-}"
CDD_OUTPUT_COLOR_ERROR="${CDD_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CDD_NOTIFY_ENABLED="${CDD_NOTIFY_ENABLED:-}"
CDD_GOOD_NAME="${CDD_GOOD_NAME:-}"
CDD_ERROR_NAME="${CDD_ERROR_NAME:-}"
CDD_GOOD_MESSAGE="${CDD_GOOD_MESSAGE:-}"
CDD_ERROR_MESSAGE="${CDD_ERROR_MESSAGE:-}"
CDD_NOTIFY_CLIENT_NAME="${CDD_NOTIFY_CLIENT_NAME:-}"
CDD_NOTIFY_CLIENT_ICON="${CDD_NOTIFY_CLIENT_ICON:-}"
CDD_NOTIFY_CLIENT_URGENCY="${CDD_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "cdd:  cd into directories using shortcuts - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: cdd [options] [commands] [projectName]"
  __printf_line "--root [dir]                    - Enable system browsing"
  __printf_line "-s, --shell [shell]             - change shell "
  __printf_line "-a, --add [alias] [dir]         - Add an alias"
  __printf_line "-m, --modify [alias] [dir]      - Modify an alias"
  __printf_line "-d, --delete [file,dir]         - Delete all files in dir"
  __printf_line "-r, --remove [alias]            - remove an alias"
  __printf_line "-l, --list                      - List aliases"
  __printf_line "--edit                          - Open alias file in editor"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  #        --edit
  __printf_line "--silent                        - Don't show messages"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$CDD_REQUIRE_SUDO" = "yes" ] && [ -z "$CDD_REQUIRE_SUDO_RUN" ]; then
    export CDD_REQUIRE_SUDO="no"
    export CDD_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$CDD_TEMP_FILE" ] && rm -Rf "$CDD_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__gen_config_local() {
  __gen_alias &>/dev/null
  [ -f "$CDD_CONFIG_BACKUP_DIR/$CDD_ALIAS_FILE.$$" ] && rm -Rf "$CDD_CONFIG_BACKUP_DIR/$CDD_ALIAS_FILE.$$" || true
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__open_editor() {
  local editor="$(type -P "$EDITOR" 2>/dev/null || type -P "vim" 2>/dev/null || type -P "nano" 2>/dev/null || type -P "nvim" 2>/dev/null || type -P "vi" 2>/dev/null || type -P "vi" 2>/dev/null || false)"
  if [ -n "$editor" ]; then
    eval $editor "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
  else
    __notifications "No editors found"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_alias() {
  if [ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]; then
    cdd_update=true
    printf_green "Updating the aliases file in"
  else
    printf_green "Generating the aliases file in"
  fi
  printf_green "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
  tempfile="$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.bak"
  [ -d "$CDD_CONFIG_DIR" ] || mkdir -p "$CDD_CONFIG_DIR"
  [ -d "$CDD_CONFIG_BACKUP_DIR" ] || mkdir -p "$CDD_CONFIG_BACKUP_DIR"
  [ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ] && cp -Rf "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" "$tempfile"
  cat <<EOF >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
# Alias settings for cdd - format: name = "/mydir"
default = "$CDD_OPTIONS_PROJECT_DIR/${CDD_OPTIONS_DEFAULT_PROJECT_NAME}"
screen = "$CDD_OPTIONS_PROJECT_DIR/dev-screen"
tmux = "$CDD_OPTIONS_PROJECT_DIR/dev-tmux"
testing = "${TMPDIR:-/tmp}/testing"
projects = "$HOME/Projects"
pictures = "$HOME/Pictures"
music = "$HOME/Music"
share = "$HOME/.local/share"

EOF

  if [ -f "$tempfile" ] && [ "$(<"$tempfile")" != "$(<"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE")" ]; then
    cp -Rf "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" "$CDD_CONFIG_BACKUP_DIR/$CDD_ALIAS_FILE.$$"
    printf '# Settings for %s\n' "$APPNAME" >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
    cat "$HOME/.config/myscripts/cdd/aliases.conf"* | sed 's|.*:||g' | grep -v '#' | sort -u | grep -v '^$' >>"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
    printf '\n' >>"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
  fi
  if [ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ] && [ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ]; then
    printf_green "Your config file for cdd has been created"
    true
  else
    printf_red "Failed to create the config file"
    false
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
quit() {
  local exitCode=$?
  printf_red "Exiting the cdd enviroment" && sleep 3 && builtin exit $exitCode &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_cd() {
  _find() { find ${1:-$PWD/} -maxdepth 1 -type d 2>/dev/null | sed 's|'"$CDD_CWD_DIR/"'||g' | grep -shv '^$'; }
  prev=
  COMPREPLY=($(compgen -W '$(_find ${cur})' -- "${cur}"))
} && complete -F _cd cd
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cd() {
  local realdir=""
  realdir="$(realpath "$1")"
  cd_cdd "$realdir" || return 1
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cd_cdd() {
  local exitCode=0 realpath=""
  local ORIG_PATH="$PATH"
  local local_remote_repo="local repo"
  local local_remote_icon="ðŸ¤·"
  local remote_icon="ðŸš€"
  local CDD_REPO_UPDATED="${CDD_REPO_UPDATED:-}"
  local CD_INTO_DIR="$(realpath "${1:-$CDD_CWD_DIR}")"
  if [ -z "$CDD_CWD_DIR" ]; then
    builtin cd "$CD_INTO_DIR" || return 1
  else
    unalias cd &>/dev/null
    if [ "$CDD_ALLOW_ROOT" = "true" ]; then
      CDD_INTO_CUR="$CD_INTO_DIR"
    else
      CDD_INTO_CUR="$CDD_CWD_DIR/${CD_INTO_DIR//$CDD_CWD_DIR/}"
    fi
    CDD_TOP_DIR="$(__git_top_dir "${CDD_INTO_CUR:-$PWD}")"
    [ -f "$CDD_TOP_DIR/.env" ] && . "$CDD_TOP_DIR/.env"
    [ -n "$OLDPATH" ] && PATH="${OLDPATH//::/:}" || OLDPATH="${PATH//::/:}"
    [ -d "$CDD_TOP_DIR/bin" ] && PATH="$CDD_TOP_DIR/bin:${OLDPATH:$PATH}" || OLDPATH="$PATH"
    [ -d "$CDD_TOP_DIR/node_modules/.bin" ] && PATH="$CDD_TOP_DIR/node_modules/.bin:${OLDPATH:$PATH}" || PATH="$OLDPATH"
    if [ -d "$CDD_TOP_DIR/.git" ] && [ -z "$CDD_REPO_UPDATED" ]; then
      [ -f "${CDD_TOP_DIR:-$PWD}/.git/config" ] && remote_repo="$(grep -sh 'url = ' "${CDD_TOP_DIR:-$PWD}/.git/config" | awk -F'= ' '{print $2}' | grep '^')"
      [ -z "$remote_repo" ] && remote_icon="$local_remote_icon" && remote_repo="$local_remote_repo"
      { printf_green "ðŸŽ† Updating the git repo from: $remote_repo $remote_icon" && git -C "$CD_INTO_DIR" pull -q &>/dev/null; } &&
        export CDD_REPO_UPDATED="yes" || CDD_REPO_UPDATED=""
    fi
    if echo "$PATH" | grep -qv "$HOME/.local/bin"; then
      export PATH="$HOME/.local/bin:$PATH"
    fi
    if [ $# == 0 ] || [ "$CD_INTO_DIR" = "/" ]; then
      if ! builtin cd "$CDD_CWD_DIR" &>/dev/null; then
        exitCode=12
      fi
    else
      if ! builtin cd "$CDD_INTO_CUR" &>/dev/null; then
        exitCode=12
      fi
    fi
    export -f cd
  fi
  export PATH CDD_REPO_UPDATED
  [ "$exitCode" = "12" ] && printf_red "Changing into $CD_INTO_DIR is not allowed"
  exitCode=${exitCode:-0}
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cd_goto() {
  local dir="" folder="" message="" message_add="" name="" exitCode=""
  [ "$CDD_STATUS" = "running" ] && [[ "$1" = ./* ]] && cd "$1" && return
  [ -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ] || __gen_config "$@"
  if [ -n "$CDD_STATUS" ]; then
    printf_pause "cdd already appears to be active "
    return 1
  fi
  if [ "$CDD_STATUS" != "running" ] && [ "$CDD_ALLOW_ROOT" = "true" ]; then
    dir="$1"
    CDD_NO_ALIAS="true"
    folder="$(basename $(dirname "$1/."))"
    message="Entering into $dir"
  elif [ "$CDD_STATUS" != "running" ] && { [ "$1" = "current_project" ] || [ "$1" = "." ] || [ "$1" = "$PWD" ]; }; then
    dir="$PWD"
    CDD_NO_ALIAS="true"
    folder="$(basename $(dirname "$PWD/."))"
    message="Entering into $dir with alias $folder"
  elif [ -n "$(list_aliases "folder" "$1")" ]; then
    dir="$(list_aliases "folder" "$1")"
    folder="$(list_aliases alias "$1")"
    message="entering into $dir"
  elif [ -z "$dir" ]; then
    name="${1:-$CDD_OPTIONS_DEFAULT_PROJECT_NAME}"
    dir="$CDD_OPTIONS_PROJECT_DIR/$name"
    folder="$(basename -- "$dir/")"
    message="Entering $name"
    message_add="see $APPNAME -l or add alias: $APPNAME -a [name] [directory]"
  fi
  exitCode=0
  STATUS="running"
  SHELL="${SHELL:-bash}"
  PS1_ADD_CDD="$PS1_ADD cdd: ${folder:-$dir}"
  GREP_COLORS="$GREP_COLORS;$CDD_GREP_COLORS"
  clear
  printf '\n'
  AUTO="true" add_alias "${name:-$folder}" "$dir"
  [ -d "$dir" ] || mkdir -p "$dir"
  [ -d "$dir" ] && builtin cd "$dir" || printf_exit "Failed to enter $dir"
  if [ "$CDD_JUST_CD" = "true" ]; then
    printf_cyan "Setting working directory to: $dir"
    unset -f cd_cdd &>/dev/null
    cd_cdd() { [ $# -eq 0 ] && { builtin cd "$CDD_CWD_DIR" || return 1; } || { [ -d "$1" ] && builtin cd "$1" || { echo "$1 is not a directory" && return 1; }; }; }
    export SHELL GREP_COLORS CDD_CWD_DIR="$PWD" CDD_STATUS="" CDD_JUST_CD="" CDD_CWD=""
    unset CDD_CWD_DIR CDD_STATUS CDD_JUST_CD CDD_CWD
  else
    [ -n "$message" ] && printf_green "$message using $(basename -- "$SHELL" 2>/dev/null)"
    [ -n "$message_add" ] && printf_blue "$message_add"
    printf_yellow "cd out of $dir is not"
    printf_yellow "allowed while using cdd which will cause issues with applications"
    printf_cyan "Type quit to return to your previous directory/shell"
    export SHELL GREP_COLORS CDD_CWD_DIR="$PWD" PS1_ADD="$PS1_ADD_CDD" CDD_STATUS="$STATUS"
  fi
  export -f _cd cd_cdd quit __git_top_dir printf_red
  export PATH="$HOME/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:."
  printf '\n'
  eval "$SHELL"
  exitCode=$?
  sleep .5
  export PATH="${ORIG_PATH:-$PATH}" CDD_CWD_DIR="" PS1_ADD="" CDD_STATUS=""
  [ "$exitCode" = 0 ] && clear
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
add_alias() {
  [ $# = 2 ] || printf_exit "Usage: $APPNAME add name Directory"
  [ -z "$CDD_NO_ALIAS" ] || return 0
  if ! list_aliases alias "$1" | grep -qx "$1"; then
    printf_green "Adding the alias $1 to config"
    grep -shv '^$' "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp"
    printf "%s = %s\n\n" "$1" "$2" >>"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp"
    mv -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp" "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
  else
    [ -n "$AUTO" ] || printf_red "It appears that $1 has already been added"
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
rm_alias() {
  local folder
  [ $# = 1 ] || printf_exit "Usage: $APPNAME delete alias"
  folder="$(list_aliases 'alias' "$1")"
  list_aliases 'alias' "$1"
  exit
  if list_aliases 'alias' '*' | grep -qx "$folder"; then
    printf_green "Removing the alias $folder from config"
    grep -shxv ^"$folder = .*" "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" >"$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp" &&
      mv -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE.tmp" "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" || return 1
  else
    printf_red "The alias $1 doesn't exist"
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
list_aliases() {
  if [ ! -f "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" ]; then __gen_config &>/dev/null; fi
  __grep() { grep -shE '^'$1' =*..*$' "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" 2>/dev/null | sed 's|"||g' 2>/dev/null; }
  if [ "$1" = "folder" ]; then
    shift 1
    __grep "$1" | awk -F'= ' '{print $2}' | sed -e 's#" ##g' 2>/dev/null | grep -Ev '^$|^#' | grep '^'
  elif [ "$1" = "alias" ]; then
    shift 1
    __grep "$1" | awk -F' =' '{print $1}' | sed -e 's#"##g' 2>/dev/null | grep -Ev '^$|^#' | grep '^'
  else
    __grep "$1" | awk -F' =' '{print $1,$2}' | sed -e 's#"##g' 2>/dev/null | grep -Ev '^$|^#' | grep '^'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
delete_files() {
  if [ -n "$CDD_CWD_DIR" ] && [ "$CDD_STATUS" = "running" ]; then
    FILES_TO_DELETE="$(find "$CDD_CWD_DIR/" -maxdepth 1 2>/dev/null | grep -v "^$CDD_CWD_DIR/$1")"
    if [ -n "$FILES_TO_DELETE" ]; then
      printf_blue "Deleting all files in $CDD_CWD_DIR"
      for file in ${FILES_TO_DELETE}; do
        if [ -d "$file" ]; then
          printf_yellow "Deleting folder: $file" && rm -Rf "${file}" &>/dev/null
        elif [ -f "$file" ]; then
          printf_yellow "Deleting file: $file" && rm -Rf "${file}" &>/dev/null
        elif [ -e "$file" ]; then
          printf_yellow "Deleting: $file" && rm -Rf "${file}" &>/dev/null
        fi
      done
      exitCode=0
    else
      printf_red "There are no files to delete"
      exitCode=1
    fi
  else
    printf_red "cdd is not active refusing to delete files"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables
CDD_OPTIONS_DEFAULT_PROJECT_NAME="${CDD_OPTIONS_DEFAULT_PROJECT_NAME:-}"
CDD_OPTIONS_PROJECT_DIR="${CDD_OPTIONS_PROJECT_DIR:-}"
CDD_OPTIONS_TMP_DIR="${CDD_OPTIONS_TMP_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
CDD_CONFIG_FILE="${CDD_CONFIG_FILE:-settings.conf}"
CDD_CONFIG_DIR="${CDD_CONFIG_DIR:-$HOME/.config/myscripts/cdd}"
CDD_CONFIG_BACKUP_DIR="${CDD_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/cdd/backups}"
CDD_LOG_DIR="${CDD_LOG_DIR:-$HOME/.local/log/cdd}"
CDD_TEMP_DIR="${CDD_TEMP_DIR:-$HOME/.local/tmp/system_scripts/cdd}"
CDD_CACHE_DIR="${CDD_CACHE_DIR:-$HOME/.cache/cdd}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CDD_OUTPUT_COLOR_1="${CDD_OUTPUT_COLOR_1:-33}"
CDD_OUTPUT_COLOR_2="${CDD_OUTPUT_COLOR_2:-5}"
CDD_OUTPUT_COLOR_GOOD="${CDD_OUTPUT_COLOR_GOOD:-2}"
CDD_OUTPUT_COLOR_ERROR="${CDD_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CDD_NOTIFY_ENABLED="${CDD_NOTIFY_ENABLED:-yes}"
CDD_GOOD_NAME="${CDD_GOOD_NAME:-Great:}"
CDD_ERROR_NAME="${CDD_ERROR_NAME:-Error:}"
CDD_GOOD_MESSAGE="${CDD_GOOD_MESSAGE:-No errors reported}"
CDD_ERROR_MESSAGE="${CDD_ERROR_MESSAGE:-Errors were reported}"
CDD_NOTIFY_CLIENT_NAME="${CDD_NOTIFY_CLIENT_NAME:-$APPNAME}"
CDD_NOTIFY_CLIENT_ICON="${CDD_NOTIFY_CLIENT_ICON:-notification-new}"
CDD_NOTIFY_CLIENT_URGENCY="${CDD_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
CDD_ALIAS_FILE="${CDD_ALIAS_FILE:-aliases.conf}"
CDD_GREP_COLORS="${CDD_GREP_COLORS:-mt=38;5;220;1}"
CDD_OPTIONS_DEFAULT_PROJECT_NAME="${CDD_OPTIONS_DEFAULT_PROJECT_NAME:-default}"
CDD_OPTIONS_PROJECT_DIR="${CDD_OPTIONS_PROJECT_DIR:-$HOME/.local/share/cdd/projects}"
CDD_OPTIONS_TMP_DIR="${CDD_OPTIONS_TMP_DIR:-$HOME/.local/tmp/cdd}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE" ] && . "$CDD_CONFIG_DIR/$CDD_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$CDD_LOG_DIR" ] || mkdir -p "$CDD_LOG_DIR" |& __devnull
[ -d "$CDD_TEMP_DIR" ] || mkdir -p "$CDD_TEMP_DIR" |& __devnull
[ -d "$CDD_CACHE_DIR" ] || mkdir -p "$CDD_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CDD_TEMP_FILE="${CDD_TEMP_FILE:-$(mktemp $CDD_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$CDD_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$CDD_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$CDD_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$CDD_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$CDD_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$CDD_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="c,v,h,m::,r:,l,s:,a::,d:"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",modify::,remove:,list,shell:,add::,delete:,root,edit,cd,enter"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="$(list_aliases '*' | awk '{print $1}')"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    CDD_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    CDD_CWD="$2"
    [ -d "$CDD_CWD" ] || mkdir -p "$CDD_CWD" |& __devnull
    shift 2
    ;;
  --root)
    shift 1
    CDD_ALLOW_ROOT="true"
    ;;
  --edit)
    shift 1
    __open_editor
    exit $?
    ;;
  -a | --add)
    add_alias "$2" "$3"
    shift 3
    exit $?
    ;;
  -m | --modify)
    [ -z "$2" ] && [ -z "$3" ] && [ -n "$EDITOR" ] && $EDITOR "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE"
    add_alias "$2" "$3"
    shift 2
    exit $?
    ;;
  -r | --remove)
    rm_alias "$2"
    shift 2
    exit $?
    ;;
  -d | --delete)
    delete_files "$2" || false
    shift 2
    exit $?
    ;;
  -l | --list)
    shift 1
    list_aliases alias '*'
    exit $?
    ;;
  -s | --shell)
    if [ -f "$2" ] || cmd_exists "$2"; then
      SHELL="$2"
    else
      printf_exit "$2 seems to be an invalid shell"
    fi
    shift 1
    ;;
  --cd | --enter)
    shift 1
    CDD_JUST_CD="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# CDD_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# CDD_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && CDD_CWD="$1" && shift 1 || CDD_CWD="${CDD_CWD:-$PWD}"
CDD_CWD="$(realpath "${CDD_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$CDD_CWD" ] && cd "$CDD_CWD"; then
# if [ "$CDD_SILENT" != true ]; then
# printf_cyan "Setting working dir to $CDD_CWD"
# fi
# else
# printf_exit "ðŸ’” $CDD_CWD does not exist ðŸ’”"
# fi
export CDD_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
if [ "$TERMINAL_APP" = "TRUE" ]; then
  printf '\n\n'
  find "$CDD_OPTIONS_PROJECT_DIR"/ -maxdepth 1 | sed 's|'$CDD_OPTIONS_PROJECT_DIR/'||g' | printf_column $CDD_OUTPUT_COLOR_2
  printf_read_input "4" "What project would you like to work on? " "120" CDD_PROJECT
  [ -n "$CDD_PROJECT" ] || { printf_newline && printf_pause "No project selected. Exiting" && exit 1; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
list)
  shift 1
  list_aliases alias '*'
  ;;

add)
  shift 1
  add_alias "$1" "$2"
  ;;

modify)
  shift 1
  [ -z "$1" ] && [ -z "$2" ] && [ -n "$EDITOR" ] &&
    $EDITOR "$CDD_CONFIG_DIR/$CDD_ALIAS_FILE" || printf_exit "Usage: modify alias directory"
  add_alias "$1" "$2"
  ;;

remove)
  shift 1
  rm_alias "$@"
  ;;

*)
  [ $# -le 1 ] || printf_exit "Usage: [alias]"
  cd_goto "${CDD_PROJECT:-$1}"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
