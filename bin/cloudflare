#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202509200900-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  cloudflare --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 04, 2022 22:58 EDT
# @@File             :  cloudflare
# @@Description      :  cloudflare api script
# @@Changelog        :  Added auto-tunnel creation, token persistence, enhanced IP detection
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :  https://gist.github.com/benkulbertis/fff10759c2391b6618dd
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202509200900-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
CLOUDFLARE_REQUIRE_SUDO="${CLOUDFLARE_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE"
  fi
  [ -d "$CLOUDFLARE_CONFIG_DIR" ] || mkdir -p "$CLOUDFLARE_CONFIG_DIR"
  [ -d "$CLOUDFLARE_CONFIG_BACKUP_DIR" ] || mkdir -p "$CLOUDFLARE_CONFIG_BACKUP_DIR"
  [ -f "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE" ] &&
    cp -Rf "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE" "$CLOUDFLARE_CONFIG_BACKUP_DIR/$CLOUDFLARE_CONFIG_FILE.$$"
  cat <<EOF >"$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE"
# Settings for cloudflare
CLOUDFLARE_API_KEY="${CLOUDFLARE_API_KEY:-}"
CLOUDFLARE_TUNNEL_KEY="${CLOUDFLARE_TUNNEL_KEY:-}"
CLOUDFLARE_HOSTNAME="${CLOUDFLARE_HOSTNAME:-}"
CLOUDFLARE_DNS_TYPE="${CLOUDFLARE_DNS_TYPE:-A}"
CLOUDFLARE_PROXY_ENABLED="${CLOUDFLARE_PROXY_ENABLED:-}"
CLOUDFLARE_ZONE_NAME="${CLOUDFLARE_ZONE_NAME:-}"
CLOUDFLARE_ADDR_IPv4="${CLOUDFLARE_ADDR_IPv4:-}"
CLOUDFLARE_ADDR_IPv6="${CLOUDFLARE_ADDR_IPv6:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CLOUDFLARE_OUTPUT_COLOR_1="${CLOUDFLARE_OUTPUT_COLOR_1:-}"
CLOUDFLARE_OUTPUT_COLOR_2="${CLOUDFLARE_OUTPUT_COLOR_2:-}"
CLOUDFLARE_OUTPUT_COLOR_GOOD="${CLOUDFLARE_OUTPUT_COLOR_GOOD:-}"
CLOUDFLARE_OUTPUT_COLOR_ERROR="${CLOUDFLARE_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CLOUDFLARE_NOTIFY_ENABLED="${CLOUDFLARE_NOTIFY_ENABLED:-}"
CLOUDFLARE_GOOD_NAME="${CLOUDFLARE_GOOD_NAME:-}"
CLOUDFLARE_ERROR_NAME="${CLOUDFLARE_ERROR_NAME:-}"
CLOUDFLARE_GOOD_MESSAGE="${CLOUDFLARE_GOOD_MESSAGE:-}"
CLOUDFLARE_ERROR_MESSAGE="${CLOUDFLARE_ERROR_MESSAGE:-}"
CLOUDFLARE_NOTIFY_CLIENT_NAME="${CLOUDFLARE_NOTIFY_CLIENT_NAME:-}"
CLOUDFLARE_NOTIFY_CLIENT_ICON="${CLOUDFLARE_NOTIFY_CLIENT_ICON:-}"
CLOUDFLARE_NOTIFY_CLIENT_URGENCY="${CLOUDFLARE_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() { #     --id[zone/record]
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "cloudflare:  cloudflare api script - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: cloudflare [command] [options] [hostname]"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Commands"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "create hostname                 - Create a new DNS record"
  __printf_line "update hostname                 - Update an existing DNS record"
  __printf_line "delete hostname                 - Delete a DNS record"
  __printf_line "list                            - List configured DNS records"
  __printf_line "verify [record]                 - Verify API access/record ID"
  __printf_line "tunnel                          - Start Cloudflare tunnel (auto-creates if needed)"
  __printf_line "zones                           - List available zones"
  __printf_line "cron hostname                   - Setup cron job for updates"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--key [key]                     - Set API key"
  __printf_line "--zone mydomain.com             - Set the zone name"
  __printf_line "--ip 1.1.1.1                   - Set the IP address"
  __printf_line "--proxy [true,false]            - Enable/disable proxy"
  __printf_line "--record [A,AAAA,CNAME]         - Set the DNS record type"
  __printf_line "--api                           - Show full API response"
  __printf_line "--delete-all                    - Delete all records in zone"
  __printf_line "--bulk                          - Enable bulk operations"
  __printf_line "--id [zone/record]=id           - Manually set zone/record ID"
  __printf_line "--silent                        - Suppress output messages"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Notes"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "• Tunnel command automatically creates and saves tunnel tokens"
  __printf_line "• Tokens saved to: ~/.config/myscripts/cloudflare/tunnel-hostname"
  __printf_line "• Requires: CLOUDFLARE_API_KEY and CLOUDFLARE_EMAIL for tunnel creation"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
__requiresudo() {
  if [ "$CLOUDFLARE_REQUIRE_SUDO" = "yes" ] && [ -z "$CLOUDFLARE_REQUIRE_SUDO_RUN" ]; then
    export CLOUDFLARE_REQUIRE_SUDO="no"
    export CLOUDFLARE_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$CLOUDFLARE_TEMP_FILE" ] && rm -Rf "$CLOUDFLARE_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__jq() { \jq "$@" 2>/dev/null; }
__rm_rf() { rm -Rf "$@" 2>/dev/null; }
__curl_ip4() { curl -q -LSsf -4 "$1" 2>/dev/null || return 1; }
__curl_ip6() { curl -q -LSsf -6 "$1" 2>/dev/null || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_ip4() { __curl_ip4 "https://ifcfg.us" || __curl_ip4 "https://ifconfig.co" || __curl_ip4 "https://api.ipify.org" || __curl_ip4 "https://ipv4.icanhazip.com" || return 1; }
__get_ip6() { __curl_ip6 "https://ifcfg.us" || __curl_ip6 "https://ifconfig.co" || __curl_ip6 "https://api.ipify.org" || __curl_ip6 "https://ipv6.icanhazip.com" || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__message() {
  local exitStatus=0
  if grep 'success' "$CLOUDFLARE_TEMP_FILE" | grep -q 'true'; then
    printf_green "${1:-Successfully created $CLOUDFLARE_HOSTNAME}"
  elif grep -qsh 'An identical record already exists' "$CLOUDFLARE_TEMP_FILE"; then
    return 1
  else
    printf '# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n# %s\n' "$(date)" >>"$CLOUDFLARE_LOG_DIR/errors.log"
    cat "$CLOUDFLARE_TEMP_FILE" >>"$CLOUDFLARE_LOG_DIR/errors.log"
    printf '# %s\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n' "End Log" >>"$CLOUDFLARE_LOG_DIR/errors.log"
    err_mess="$(__devnull2 cat "$CLOUDFLARE_TEMP_FILE" | __jq -rc '.errors | .[].message' 2>/dev/null | grep '^')"
    [ -z "$err_mess" ] && err_mess="Well something went horribly wrong" || err_mess="Error: $err_mess"
    printf_yellow "${err_mess}"
    exitStatus=1
  fi
  return $exitStatus
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tunnel() {
  local host="$(hostname -s)"
  local key="$CLOUDFLARE_TUNNEL_KEY"
  local image="cloudflare/cloudflared:latest"
  local tunnel_name="tunnel-$host"
  local tunnel_id=""
  local execute=""

  __cmd_exists docker || printf_exit "This requires docker"
  __cmd_exists openssl || printf_exit "This requires openssl for tunnel creation"

  # Check if we have a tunnel key (env var first, then saved file)
  if [ -z "$key" ]; then
    printf_blue "🔍 Checking for saved tunnel token..."
    key="$(__load_tunnel_token "$host")"

    if [ -n "$key" ]; then
      printf_green "✅ Found saved tunnel token for: $tunnel_name"
    else
      printf_yellow "No tunnel key found. Creating new tunnel..."

      # Verify API access first
      printf_blue "Verifying API access..."
      if ! __api_verify >/dev/null; then
        printf_exit "API verification failed. Please check CLOUDFLARE_API_KEY and CLOUDFLARE_EMAIL"
      fi

      # Create tunnel
      tunnel_id="$(__create_tunnel "$tunnel_name")"
      if [ -z "$tunnel_id" ]; then
        printf_exit "Failed to create tunnel"
      fi

      printf_green "✅ Tunnel created with ID: $tunnel_id"

      # Get tunnel token
      key="$(__get_tunnel_token "$tunnel_id")"
      if [ -z "$key" ]; then
        printf_exit "Failed to get tunnel token"
      fi

      printf_green "✅ Tunnel token retrieved"

      # Save token automatically
      __save_tunnel_token "$host" "$key"
      printf_cyan "💡 Token automatically saved and will be reused for future runs"
      printf_cyan "🗑️  Remove saved token: rm ~/.config/myscripts/cloudflare/tunnel-$host"
    fi
  else
    printf_green "✅ Using tunnel token from environment variable"
  fi

  execute="tunnel --no-autoupdate run --token $key"
  printf_blue "🚀 Starting tunnel: $tunnel_name"
  docker run -d --name "$tunnel_name" --hostname "$host" --restart unless-stopped "$image" $execute

  if [ $? -eq 0 ]; then
    printf_green "✅ Tunnel started successfully!"
    printf_cyan "📋 View logs: docker logs $tunnel_name"
    printf_cyan "🛑 Stop tunnel: docker stop $tunnel_name"
  else
    printf_red "❌ Failed to start tunnel"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_tunnel_token() {
  local tunnel_name="$1"
  local token="$2"
  local token_file="$CLOUDFLARE_CONFIG_DIR/tunnel-$tunnel_name"

  [ -n "$tunnel_name" ] || {
    printf_red "Tunnel name required"
    return 1
  }
  [ -n "$token" ] || {
    printf_red "Token required"
    return 1
  }

  # Ensure config directory exists
  [ -d "$CLOUDFLARE_CONFIG_DIR" ] || mkdir -p "$CLOUDFLARE_CONFIG_DIR"

  # Save token to file with restricted permissions
  echo "$token" >"$token_file" && chmod 600 "$token_file"

  if [ $? -eq 0 ]; then
    printf_green "💾 Token saved to: $token_file"
    return 0
  else
    printf_red "Failed to save token"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__load_tunnel_token() {
  local tunnel_name="$1"
  local token_file="$CLOUDFLARE_CONFIG_DIR/tunnel-$tunnel_name"

  [ -n "$tunnel_name" ] || {
    printf_red "Tunnel name required"
    return 1
  }

  if [ -f "$token_file" ] && [ -r "$token_file" ]; then
    cat "$token_file" 2>/dev/null | grep '^' || return 1
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__api_verify() {
  curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/user/tokens/verify" 2>/dev/null | __jq -r '.messages | .[] | .message' | grep 'valid and active' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_account_id() {
  local results=""
  results="$(curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/accounts" 2>/dev/null || echo '')"
  if echo "$results" | __jq '.success' 2>/dev/null | grep -q 'false'; then
    return 1
  else
    echo "$results" | __jq -r '.result[0].id' 2>/dev/null | grep '^'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_tunnel() {
  local tunnel_name="${1:-tunnel-$(hostname -s)}"
  local account_id="$(__get_account_id)"
  local results=""

  [ -n "$account_id" ] || {
    printf_red "Failed to get account ID"
    return 1
  }

  printf_blue "Creating tunnel: $tunnel_name"
  results="$(curl -q -LSs -X POST -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" \
    --data "{\"name\":\"$tunnel_name\",\"tunnel_secret\":\"$(openssl rand -base64 32)\"}" \
    "$CLOUDFLARE_API_URL/accounts/$account_id/cfd_tunnel" 2>/dev/null || echo '')"

  if echo "$results" | __jq '.success' 2>/dev/null | grep -q 'false'; then
    printf_red "Failed to create tunnel"
    echo "$results" | __jq -r '.errors[].message' 2>/dev/null
    return 1
  else
    echo "$results" | __jq -r '.result.id' 2>/dev/null | grep '^'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_tunnel_token() {
  local tunnel_id="$1"
  local account_id="$(__get_account_id)"
  local results=""

  [ -n "$account_id" ] || {
    printf_red "Failed to get account ID"
    return 1
  }
  [ -n "$tunnel_id" ] || {
    printf_red "Tunnel ID required"
    return 1
  }

  printf_blue "Getting tunnel token for ID: $tunnel_id"
  results="$(curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" \
    "$CLOUDFLARE_API_URL/accounts/$account_id/cfd_tunnel/$tunnel_id/token" 2>/dev/null || echo '')"

  if echo "$results" | __jq '.success' 2>/dev/null | grep -q 'false'; then
    printf_red "Failed to get tunnel token"
    echo "$results" | __jq -r '.errors[].message' 2>/dev/null
    return 1
  else
    echo "$results" | __jq -r '.result' 2>/dev/null | grep '^'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__zone_identifier() {
  local results=""
  CLOUDFLARE_ZONE_NAME="${1:-$CLOUDFLARE_ZONE_NAME}"
  [ -z "$CLOUDFLARE_ZONE_ID" ] || return 0
  results="$(curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/zones?per_page=1000&name=$CLOUDFLARE_ZONE_NAME" 2>/dev/null || echo '')"
  if [ -z "$results" ] || echo "$results" | __jq '.success' 2>/dev/null | grep -q 'false'; then
    exitCode="1"
  else
    echo "$results" | grep -Po '(?<="id":")[^"]*' | head -n1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__record_identifier() {
  local results="" id=""
  local CLOUDFLARE_HOSTNAME="${1:-$CLOUDFLARE_HOSTNAME}"
  results="$(curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records" 2>/dev/null || echo '')"
  if echo "$results" | __jq '.success' 2>/dev/null | grep -q 'false'; then
    exitCode="1"
  else
    RECORD_RESULTS="$results"
    id="$(echo "$results" | __jq -r '.result | .[]' | __jq -rc '{name:.name,id:.id,type:.type}' 2>/dev/null | grep '^{"name":"'$CLOUDFLARE_HOSTNAME'' | grep -Ew 'A|AAAA|CNAME' | __jq -rc '.id' 2>/dev/null | head -n1 | grep '^')"
    [ -n "$id" ] && echo "$id" && exitCode=0 || exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__api() {
  local results=""
  results="$(curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records" 2>/dev/null || echo '')"
  if echo "$results" | __jq '.success' 2>/dev/null | grep -q 'false'; then
    exitCode=1
  else
    echo "$results" | __jq '.result|.[]' | __jq -rc '[.name,.type,.id]'
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__api_full() {
  local results=""
  results="$(curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records" 2>/dev/null || echo '')"
  #echo "$results" | __jq '.result|.[]'|__jq -rc '{name:.name,type:.type,content:.content,proxiable:.proxiable,proxied:.proxied}
  echo "$results" | __jq '.result|.[]'
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__delete_record() {
  local exitStatus=0 results=""
  printf_blue "Attempting to delete host"
  results="$(curl -q -LSs -X DELETE -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records/$CLOUDFLARE_RECORD_ID" 2>/dev/null || echo '')"
  echo "$results" >"$CLOUDFLARE_TEMP_FILE"
  __message "Successfully deleted $CLOUDFLARE_HOSTNAME" || exitStatus=1
  return $exitStatus
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__bulk_delete() {
  local exitStatus=0 results="" name=""
  printf_cyan "Getting data for $CLOUDFLARE_ZONE_NAME"
  results="$(curl -q -LSs -X GET -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records?per_page=1000" 2>/dev/null | __jq '.result| .[]' | __jq -rc '{ "name":.name,"id":.id }' | grep "${1:-^}" || echo '')"
  [ -n "$results" ] || printf_exit 2 0 "There doesn't seem to be any records for zone: $CLOUDFLARE_ZONE_NAME"
  printf_read_question "Are your sure you want to continue?" || return 1
  for dns_record in $(echo "$results" | __jq -rc '.id'); do
    name="$(echo "$results" | grep "$dns_record" | __jq -rc '.name')"
    printf_blue "Attempting to delete host: $name"
    curl -q -LSs -X DELETE -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records/$dns_record" >"$CLOUDFLARE_TEMP_FILE" || exitStatus=$((1 + exitStatus))
    __message "Successfully deleted id: $dns_record" || exitStatus=1
    [ -f "$CLOUDFLARE_TEMP_FILE" ] && rm -Rf "$CLOUDFLARE_TEMP_FILE"
  done
  return $exitStatus
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_record() {
  local exitStatus=0
  CLOUDFLARE_HOSTNAME="${1:-$CLOUDFLARE_HOSTNAME}"
  CLOUDFLARE_DNS_TYPE="${2:-$CLOUDFLARE_DNS_TYPE}"
  CLOUDFLARE_PROXY_ENABLED="${3:-$CLOUDFLARE_PROXY_ENABLED}"
  [ -n "$CLOUDFLARE_HOSTNAME" ] || CLOUDFLARE_HOSTNAME="$(hostname -s)"
  [ "$CLOUDFLARE_PROXY_ENABLED" = "yes" ] && CLOUDFLARE_PROXY_ENABLED=true
  [ "$CLOUDFLARE_PROXY_ENABLED" = "no" ] && CLOUDFLARE_PROXY_ENABLED=false
  printf_blue "Attempting to create $CLOUDFLARE_HOSTNAME for zone: ${CLOUDFLARE_ZONE_NAME:-$CLOUDFLARE_ZONE_ID}"
  if [ "$CLOUDFLARE_HOSTNAME" = '@' ]; then
    __curl_record_create "www" "CNAME" "$CLOUDFLARE_ZONE_NAME" || __curl_record_update "www" "CNAME" "$CLOUDFLARE_ZONE_NAME"
    __curl_record_create "@" "A" "$CLOUDFLARE_ADDR_IPv4" || __curl_record_update "@" "A" "$CLOUDFLARE_ADDR_IPv4"
    if [ -n "$CLOUDFLARE_ADDR_IPv6" ]; then
      __curl_record_create "@" "AAAA" "$CLOUDFLARE_ADDR_IPv6" || __curl_record_update "@" "AAAA" "$CLOUDFLARE_ADDR_IPv6"
    fi
    __message "Successfully created the record @" || exitStatus=1
  elif [ "$CLOUDFLARE_HOSTNAME" = '*' ]; then
    __curl_record_create "*" "A" "$CLOUDFLARE_ADDR_IPv4" || __curl_record_update "*" "A" "$CLOUDFLARE_ADDR_IPv4"
    if [ -n "$CLOUDFLARE_ADDR_IPv6" ]; then
      __curl_record_create "*" "AAAA" "$CLOUDFLARE_ADDR_IPv6" || __curl_record_update "*" "AAAA" "$CLOUDFLARE_ADDR_IPv6"
    fi
    __message "Successfully created the record *" || exitStatus=2
  elif [ -n "$CLOUDFLARE_HOSTNAME" ]; then
    __curl_record_create "$CLOUDFLARE_HOSTNAME" "A" "$CLOUDFLARE_ADDR_IPv4" || __curl_record_update "$CLOUDFLARE_HOSTNAME" "A" "$CLOUDFLARE_ADDR_IPv4"
    if [ -n "$CLOUDFLARE_ADDR_IPv6" ]; then
      __curl_record_create "$CLOUDFLARE_HOSTNAME" "AAAA" "$CLOUDFLARE_ADDR_IPv6" || __curl_record_update "$CLOUDFLARE_HOSTNAME" "AAAA" "$CLOUDFLARE_ADDR_IPv6"
    fi
    __message "Successfully created ${CLOUDFLARE_HOSTNAME}" || exitStatus=3
  else
    __usage
    exitStatus=9
  fi
  return $exitStatus
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_record() {
  local exitStatus=0
  CLOUDFLARE_HOSTNAME="${1:-$CLOUDFLARE_HOSTNAME}"
  CLOUDFLARE_PROXY_ENABLED="${2:-$CLOUDFLARE_PROXY_ENABLED}"
  [ "$CLOUDFLARE_PROXY_ENABLED" = "yes" ] && CLOUDFLARE_PROXY_ENABLED=true
  [ "$CLOUDFLARE_PROXY_ENABLED" = "no" ] && CLOUDFLARE_PROXY_ENABLED=false
  [ -n "$CLOUDFLARE_RECORD_ID" ] || printf_exit "Failed to get record is for $CLOUDFLARE_HOSTNAME"
  printf_blue "Attempting to update host for zone: ${CLOUDFLARE_ZONE_NAME:-$CLOUDFLARE_ZONE_ID}"
  if [ "$CLOUDFLARE_HOSTNAME" = '@' ]; then
    __curl_record_update "@" "A" "$CLOUDFLARE_ADDR_IPv4"
    if [ -n "$CLOUDFLARE_ADDR_IPv6" ]; then
      __curl_record_update "@" "AAAA" "$CLOUDFLARE_ADDR_IPv6"
    fi
    __message "Successfully updated the record @" || exitStatus=1
  elif [ "$CLOUDFLARE_HOSTNAME" = '*' ]; then
    __curl_record_update "*" "A" "$CLOUDFLARE_ADDR_IPv4"
    if [ -n "$CLOUDFLARE_ADDR_IPv6" ]; then
      __curl_record_update "*" "AAAA" "$CLOUDFLARE_ADDR_IPv6"
    fi
    __message "Successfully updated the record *" || exitStatus=1
  else
    __curl_record_update "$CLOUDFLARE_HOSTNAME" "A" "$CLOUDFLARE_ADDR_IPv4"
    if [ -n "$CLOUDFLARE_ADDR_IPv6" ]; then
      __curl_record_update "$CLOUDFLARE_HOSTNAME" "AAAA" "$CLOUDFLARE_ADDR_IPv6"
    fi
    __message "Successfully updated ${CLOUDFLARE_HOSTNAME}" || exitStatus=1
  fi
  return $exitStatus
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cloudflare_zone() {
  CLOUDFLARE_HOSTNAME="${1:-$CLOUDFLARE_HOSTNAME}"
  CLOUDFLARE_DNS_TYPE="${2:-$CLOUDFLARE_DNS_TYPE}"
  CLOUDFLARE_PROXY_ENABLED="${3:-$CLOUDFLARE_PROXY_ENABLED}"
  CLOUDFLARE_HOSTNAME="${CLOUDFLARE_HOSTNAME:-$CLOUDFLARE_ZONE_NAME}"
  CLOUDFLARE_ZONE_ID="${CLOUDFLARE_ZONE_ID:-$(__zone_identifier "$CLOUDFLARE_ZONE_NAME")}"
  CLOUDFLARE_RECORD_ID="${CLOUDFLARE_RECORD_ID:-$(__record_identifier "$CLOUDFLARE_HOSTNAME")}"
  [ "$CLOUDFLARE_PROXY_ENABLED" = "no" ] && CLOUDFLARE_PROXY_ENABLED=false
  [ "$CLOUDFLARE_PROXY_ENABLED" = "yes" ] && CLOUDFLARE_PROXY_ENABLED=true
  if [ "$CLOUDFLARE_DNS_TYPE" == "CNAME" ]; then
    CLOUDFLARE_ADDR_IPv4="$CLOUDFLARE_ZONE_NAME"
  elif [ "$CLOUDFLARE_DNS_TYPE" == "AAAA" ]; then
    CLOUDFLARE_ADDR_IPv4=${CLOUDFLARE_ADDR_IPv4:-$(__get_ip6)}
  else
    CLOUDFLARE_ADDR_IPv4=${CLOUDFLARE_ADDR_IPv4:-$(__get_ip4)}
  fi
  [ -n "$CLOUDFLARE_PROXY_ENABLED" ] || CLOUDFLARE_PROXY_ENABLED="true"
  [ -n "$CLOUDFLARE_ADDR_IPv4" ] || CLOUDFLARE_ADDR_IPv4="$(__get_ip4)"
  [ -n "$CLOUDFLARE_ZONE_NAME" ] || __usage $CLOUDFLARE_ZONE_NAME || exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__usage() {
  local zone="${1:-$CLOUDFLARE_ZONE_NAME}"
  local record="${2:-$CLOUDFLARE_HOSTNAME}"
  local type="${3:-$CLOUDFLARE_DNS_TYPE}"
  local proxy="${4:-$CLOUDFLARE_PROXY_ENABLED}"
  if [ -z "$zone" ]; then
    printf_return "Usage: $APPNAME ${zone:-ZONE} RECORD DNS_TYPE PROXY"
  elif [ -n "$record" ]; then
    printf_return "Usage: $APPNAME ${zone:-ZONE} ${record:-RECORD} DNS_TYPE PROXY"
  elif [ -n "$type" ]; then
    printf_return "Usage: $APPNAME ${zone:-ZONE} ${record:-RECORD} ${type:-DNS_TYPE} PROXY"
  elif [ -n "$proxy" ]; then
    printf_return "Usage: $APPNAME ${zone:-ZONE} ${record:-RECORD} ${type:-DNS_TYPE} ${proxy:-PROXY}"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_zones() {
  local resp="$(curl -q -LSs -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" "$CLOUDFLARE_API_URL/zones" | jq -rc '.[]|.[]|{name,id}' 2>/dev/null | jq -rc '[.name,.id]' | sed 's|,| : |g;s|"||g;s|\[||g;s|]||g' | grep '^')"
  if [ -n "$resp" ]; then
    printf_cyan "You have the following zones"
    printf_green "$resp"
  else
    printf_red "No zones found"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_record_create() {
  local exitCode=0
  curl -q -LSs -X POST -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" --data "{\"name\":\"$1\",\"type\":\"$2\",\"content\":\"$3\",\"ttl\":3600,\"priority\":0,\"proxied\":${CLOUDFLARE_PROXY_ENABLED}}" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records" 2>/dev/null >"$CLOUDFLARE_TEMP_FILE" || exitCode=1
  grep -qshE "ERROR|An identical record" "$CLOUDFLARE_TEMP_FILE" && exitCode=1
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_record_update() {
  local exitCode=0
  curl -q -LSs -X PATCH -H "X-Auth-Email: $CLOUDFLARE_EMAIL" -H "X-Auth-Key: $CLOUDFLARE_API_KEY" -H "Content-Type: application/json" --data "{\"name\":\"$1\",\"ttl\":3600,\"type\":\"$2\",\"proxied\":${CLOUDFLARE_PROXY_ENABLED},\"content\":\"$3\"}" "$CLOUDFLARE_API_URL/zones/$CLOUDFLARE_ZONE_ID/dns_records/$CLOUDFLARE_RECORD_ID" 2>/dev/null >"$CLOUDFLARE_TEMP_FILE" || exitCode=1
  grep -qshE "ERROR|An identical record" "$CLOUDFLARE_TEMP_FILE" && exitCode=1
  #[ $exitCode -eq 0 ] && echo '{"success":true}' >"$CLOUDFLARE_TEMP_FILE"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_cert() {
  docker ps -a 2>&1 | grep -q '^' || return 1
  docker run --rm --name certbot-dns-cloudflare \
    -e CERTBOT_KEY_TYPE="ecdsa" \
    -e CERTBOT_DOMAINS="$CLOUDFLARE_ZONE_NAME" \
    -e CLOUDFLARE_API_TOKEN="$CLOUDFLARE_API_KEY" \
    -e CERTBOT_EMAIL="${CLOUDFLARE_EMAIL:-ssl+admin@$CLOUDFLARE_ZONE_NAME}" \
    -v /etc/letsencrypt:/etc/letsencrypt \
    serversideup/certbot-dns-cloudflare:latest
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables
[ -f "$HOME/.config/secure/cloudflare.txt" ] && . "$HOME/.config/secure/cloudflare.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
CLOUDFLARE_CONFIG_FILE="${CLOUDFLARE_CONFIG_FILE:-settings.conf}"
CLOUDFLARE_CONFIG_DIR="${CLOUDFLARE_CONFIG_DIR:-$HOME/.config/myscripts/cloudflare}"
CLOUDFLARE_CONFIG_BACKUP_DIR="${CLOUDFLARE_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/cloudflare/backups}"
CLOUDFLARE_LOG_DIR="${CLOUDFLARE_LOG_DIR:-$HOME/.local/log/cloudflare}"
CLOUDFLARE_TEMP_DIR="${CLOUDFLARE_TEMP_DIR:-$HOME/.local/tmp/system_scripts/cloudflare}"
CLOUDFLARE_CACHE_DIR="${CLOUDFLARE_CACHE_DIR:-$HOME/.cache/cloudflare}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CLOUDFLARE_OUTPUT_COLOR_1="${CLOUDFLARE_OUTPUT_COLOR_1:-33}"
CLOUDFLARE_OUTPUT_COLOR_2="${CLOUDFLARE_OUTPUT_COLOR_2:-5}"
CLOUDFLARE_OUTPUT_COLOR_GOOD="${CLOUDFLARE_OUTPUT_COLOR_GOOD:-2}"
CLOUDFLARE_OUTPUT_COLOR_ERROR="${CLOUDFLARE_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CLOUDFLARE_NOTIFY_ENABLED="${CLOUDFLARE_NOTIFY_ENABLED:-yes}"
CLOUDFLARE_GOOD_NAME="${CLOUDFLARE_GOOD_NAME:-Great:}"
CLOUDFLARE_ERROR_NAME="${CLOUDFLARE_ERROR_NAME:-Error:}"
CLOUDFLARE_GOOD_MESSAGE="${CLOUDFLARE_GOOD_MESSAGE:-No errors reported}"
CLOUDFLARE_ERROR_MESSAGE="${CLOUDFLARE_ERROR_MESSAGE:-Errors were reported}"
CLOUDFLARE_NOTIFY_CLIENT_NAME="${CLOUDFLARE_NOTIFY_CLIENT_NAME:-$APPNAME}"
CLOUDFLARE_NOTIFY_CLIENT_ICON="${CLOUDFLARE_NOTIFY_CLIENT_ICON:-notification-new}"
CLOUDFLARE_NOTIFY_CLIENT_URGENCY="${CLOUDFLARE_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
CLOUDFLARE_PROXY_ENABLED="${CLOUDFLARE_PROXY_ENABLED:-}"
CLOUDFLARE_ADDR_IPv4="${CLOUDFLARE_ADDR_IPv4:-}"
CLOUDFLARE_DNS_TYPE="${CLOUDFLARE_DNS_TYPE:-A}"
CLOUDFLARE_TUNNEL_KEY="${CLOUDFLARE_TUNNEL_KEY:-}"
CLOUDFLARE_HOSTNAME="${CLOUDFLARE_HOSTNAME:-$(hostname -s)}"
CLOUDFLARE_ZONE_ID="${CLOUDFLARE_ZONE_ID:-}"
CLOUDFLARE_ZONE_NAME="${CLOUDFLARE_ZONE_NAME:-}"
CLOUDFLARE_API_KEY="${CLOUDFLARE_ZONE_KEY:-$CLOUDFLARE_API_KEY}"
CLOUDFLARE_API_URL="${CLOUDFLARE_API_URL:-https://api.cloudflare.com/client/v4}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE" ] && . "$CLOUDFLARE_CONFIG_DIR/$CLOUDFLARE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$CLOUDFLARE_LOG_DIR" ] || mkdir -p "$CLOUDFLARE_LOG_DIR" |& __devnull
[ -d "$CLOUDFLARE_TEMP_DIR" ] || mkdir -p "$CLOUDFLARE_TEMP_DIR" |& __devnull
[ -d "$CLOUDFLARE_CACHE_DIR" ] || mkdir -p "$CLOUDFLARE_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CLOUDFLARE_TEMP_FILE="${CLOUDFLARE_TEMP_FILE:-$(mktemp $CLOUDFLARE_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$CLOUDFLARE_NOTIFY_ENABLED" = "yes" ] || return
  (
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$CLOUDFLARE_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$CLOUDFLARE_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$CLOUDFLARE_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$CLOUDFLARE_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$CLOUDFLARE_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
    retval=$?
    unset NOTIFY_CLIENT_NAME NOTIFY_CLIENT_ICON NOTIFY_GOOD_MESSAGE NOTIFY_ERROR_MESSAGE NOTIFY_CLIENT_URGENCY
    return $retval
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,help,options,raw,version,silent,"
LONGOPTS+=",ip:,zone:,proxy:,record:,api,key:,delete-all,id:,bulk"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="create update delete list verify tunnel zones cron"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    CLOUDFLARE_SILENT="true"
    ;;
  --api)
    shift 1
    SET_API="full"
    ;;
  --delete-all)
    shift 1
    CLOUDFLARE_BULK_DELETE="true"
    ;;
  --bulk)
    shift 1
    CLOUDFLARE_BULK_DELETE="true"
    ;;
  --ip)
    CLOUDFLARE_ADDR_IPv4="$2"
    shift 2
    ;;
  --zone)
    CLOUDFLARE_ZONE_NAME="$2"
    shift 2
    ;;
  --proxy)
    CLOUDFLARE_PROXY_ENABLED="$2"
    shift 2
    ;;
  --record)
    CLOUDFLARE_HOSTNAME="$2"
    shift 2
    ;;
  --key)
    CLOUDFLARE_API_KEY="$2"
    CLOUDFLARE_TUNNEL_KEY="$2"
    shift 2
    ;;
  --id)
    shift 1
    case "$1" in
    zone*)
      CLOUDFLARE_ZONE_ID="${1//*=/}"
      shift 1
      ;;
    record*)
      CLOUDFLARE_RECORD_ID="${1//*=/}"
      shift 1
      ;;
    *)
      shift 1
      ;;
    esac
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# CLOUDFLARE_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# CLOUDFLARE_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && CLOUDFLARE_CWD="$1" && shift 1 || CLOUDFLARE_CWD="${CLOUDFLARE_CWD:-$PWD}"
CLOUDFLARE_CWD="$(realpath "${CLOUDFLARE_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$CLOUDFLARE_CWD" ] && cd "$CLOUDFLARE_CWD"; then
# if [ "$CLOUDFLARE_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $CLOUDFLARE_CWD"
# fi
# else
# printf_exit "💔 $CLOUDFLARE_CWD does not exist 💔"
# fi
export CLOUDFLARE_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
CLOUDFLARE_ADDR_IPv4="${CLOUDFLARE_ADDR_IPv4:-$(curl -q -LSsf -4 "https://ifcfg.us" --max-time 2 --retry 0 2>/dev/null || false)}"
CLOUDFLARE_ADDR_IPv6="${CLOUDFLARE_ADDR_IPv6:-$(curl -q -LSsf -6 "https://ifcfg.us" --max-time 2 --retry 0 2>/dev/null || false)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[ -n "$CLOUDFLARE_API_KEY" ] || printf_exit 1 1 "Please set CLOUDFLARE_API_KEY variable"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
tunnel)
  shift 1
  if [ -z "$CLOUDFLARE_TUNNEL_KEY" ]; then
    printf_cyan "Usage: $APPNAME --key 'MyAPIKEY' tunnel or set the"
    printf_exit "CLOUDFLARE_TUNNEL_KEY variable in the config file"
  fi
  __tunnel
  ;;

create)
  shift 1
  __cloudflare_zone "$@"
  __create_record "$CLOUDFLARE_HOSTNAME" "$CLOUDFLARE_DNS_TYPE" "$CLOUDFLARE_PROXY_ENABLED"
  exit $?
  ;;

update)
  shift 1
  __cloudflare_zone "$@"
  __update_record "$CLOUDFLARE_HOSTNAME" "$CLOUDFLARE_PROXY_ENABLED"
  exit $?
  ;;

delete)
  shift 1
  __cloudflare_zone "$@"
  if [ "$CLOUDFLARE_BULK_DELETE" = "true" ]; then
    __bulk_delete "$CLOUDFLARE_HOSTNAME"
  else
    __delete_record "$CLOUDFLARE_HOSTNAME"
  fi
  exit $?
  ;;

cron)
  shift 1
  __cloudflare_zone "$@"
  [ -n "$CLOUDFLARE_HOSTNAME" ] || printf_exit "Usage: $APPNAME cron HOST"
  cat <<EOF >"/etc/cron.d/cloudflare_${CLOUDFLARE_HOSTNAME}"
# Cloudflare updater for $CLOUDFLARE_HOSTNAME
*/5 * * * root $0 update $CLOUDFLARE_HOSTNAME >/dev/null 2>&1

EOF
  ;;

verify)
  shift 1
  printf_cyan "Fetching data from: $CLOUDFLARE_API_URL"
  if [ "$1" = "id" ]; then
    shift 1
    __cloudflare_zone "$1"
    results="$(__record_identifier "$CLOUDFLARE_HOSTNAME")"
    [ -n "$results" ] && printf_green "ID for $CLOUDFLARE_HOSTNAME should be: $results" || printf_exit 2 5 "Failed to get ID for $CLOUDFLARE_HOSTNAME"
  else
    __cloudflare_zone "$@"
    results="$(__api_verify)"
    [ -n "$results" ] && printf_green "$results" || printf_red "Invalid API Key"
  fi
  exit
  ;;

zones)
  shift 1
  __list_zones
  exit $?
  ;;

list)
  shift 1
  if [ "$SET_API" = "full" ]; then
    __cloudflare_zone "$@"
    __api_full "$CLOUDFLARE_ZONE_NAME"
  else
    __cloudflare_zone "$@"
    __api "$CLOUDFLARE_ZONE_NAME"
  fi
  ;;

*)
  __cloudflare_zone "$@"
  if [ "$SET_API" = "full" ]; then
    __api_full | __jq "{ \"zone_name\":.zone_name,\"name\":.name,\"id\":.id,\"zone_id\":.zone_id,\"type\":.type,\"content\":.content,\"proxiable\":.proxiable,\"proxied\":.proxied }"
  else
    printf_green "Current settings for cloudflare"
    printf_blue "Cloudflare Zone Name:   $CLOUDFLARE_ZONE_NAME"
    printf_blue "Cloudflare Zone ID:     ${CLOUDFLARE_ZONE_ID:-error}"
    printf_blue "Cloudflare API_Key:     $CLOUDFLARE_API_KEY"
    printf_blue "Cloudflae user Email:   $CLOUDFLARE_EMAIL"
    printf_yellow "Current settings for the host"
    printf_cyan "Default Record:         $CLOUDFLARE_HOSTNAME"
    printf_cyan "Default proxy:          $CLOUDFLARE_PROXY_ENABLED"
    printf_cyan "Default DNS Type        $CLOUDFLARE_DNS_TYPE"
    printf_cyan "Configured IP Address:  $CLOUDFLARE_ADDR_IPv4"
    printf_cyan "Record ID:              ${CLOUDFLARE_RECORD_ID:-Might need to create the record}"
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
