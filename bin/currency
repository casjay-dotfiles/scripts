#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208050218-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  currency --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Friday, Aug 05, 2022 02:18 EDT
# @@File             :  currency
# @@Description      :  Get currency data
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208050218-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
CURRENCY_REQUIRE_SUDO="${CURRENCY_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE"
  fi
  [ -d "$CURRENCY_CONFIG_DIR" ] || mkdir -p "$CURRENCY_CONFIG_DIR"
  [ -d "$CURRENCY_CONFIG_BACKUP_DIR" ] || mkdir -p "$CURRENCY_CONFIG_BACKUP_DIR"
  [ -f "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE" ] &&
    cp -Rf "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE" "$CURRENCY_CONFIG_BACKUP_DIR/$CURRENCY_CONFIG_FILE.$$"
  cat <<EOF >"$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE"
# Settings for currency
CURRENCY_DEFAULT="${CURRENCY_DEFAULT:-}"
CURRENCY_API_HOST="${CURRENCY_API_HOST:-}"
CURRENCY_API_OPTIONS="${CURRENCY_API_OPTIONS:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CURRENCY_OUTPUT_COLOR_1="${CURRENCY_OUTPUT_COLOR_1:-}"
CURRENCY_OUTPUT_COLOR_2="${CURRENCY_OUTPUT_COLOR_2:-}"
CURRENCY_OUTPUT_COLOR_GOOD="${CURRENCY_OUTPUT_COLOR_GOOD:-}"
CURRENCY_OUTPUT_COLOR_ERROR="${CURRENCY_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CURRENCY_NOTIFY_ENABLED="${CURRENCY_NOTIFY_ENABLED:-}"
CURRENCY_GOOD_NAME="${CURRENCY_GOOD_NAME:-}"
CURRENCY_ERROR_NAME="${CURRENCY_ERROR_NAME:-}"
CURRENCY_GOOD_MESSAGE="${CURRENCY_GOOD_MESSAGE:-}"
CURRENCY_ERROR_MESSAGE="${CURRENCY_ERROR_MESSAGE:-}"
CURRENCY_NOTIFY_CLIENT_NAME="${CURRENCY_NOTIFY_CLIENT_NAME:-}"
CURRENCY_NOTIFY_CLIENT_ICON="${CURRENCY_NOTIFY_CLIENT_ICON:-}"
CURRENCY_NOTIFY_CLIENT_URGENCY="${CURRENCY_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "currency:  Get currency data - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: currency [options] [commands]"
  __printf_line "convert [from] [to] [amount]    - Convert currencies"
  __printf_line "search [query]                  - Search for a currency"
  __printf_line "crypto [query]                  - Lookup crypto currenties"
  __printf_line "exchange [currency]             - Get the exchange rate of a currency"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$CURRENCY_REQUIRE_SUDO" = "yes" ] && [ -z "$CURRENCY_REQUIRE_SUDO_RUN" ]; then
    export CURRENCY_REQUIRE_SUDO="no"
    export CURRENCY_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$CURRENCY_TEMP_FILE" ] && rm -Rf "$CURRENCY_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__to_uppercase() { tr '[:lower:]' '[:upper:]'; }
__to_lowercase() { tr '[:upper:]' '[:lower:]'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__lookup() {
  curl -q -LSsf --max-time 3 --retry 0 "${1:-$CURRENCY_API_HOST}" 2>/dev/null | grep -v 'ERROR:' | grep '^' && true || false
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_data() {
  cur="$(echo "${1:-$CURRENCY_DEFAULT}" | __to_uppercase)"
  url="$(echo "$cur.$CURRENCY_API_HOST" | __to_lowercase)"
  results="$(__lookup "$url/${CURRENCY_API_OPTIONS:-}" || echo '')"
  [[ -n "$results" ]] && printf_blue "Showing the data from $url" &&
    printf '%s\n' "$results" || printf_exit "Something went wrong while accessing: $url"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__currencies() {
  cat <<EOF | tee
AUD                          Australian dollar
BRL                          Brazilian real
CAD                          Canadian dollar
CHF                          Swiss franc
CLP                          Chilean peso
CNY                          Chinese yuan
CZK                          Czech koruna
DKK                          Danish krone
EUR                          Euro
GBP                          Pound sterling
HKD                          Hong Kong dollar
HUF                          Hungarian forint
IDR                          Indonesian rupiah
ILS                          Israeli shekel
INR                          Indian rupee
JPY                          Japanese yen
KRW                          South Korean won
MXN                          Mexican peso
MYR                          Malaysian ringgit
NOK                          Norwegian krone
NZD                          New Zealand dollar
PHP                          Philippine peso
PKR                          Pakistani rupee
PLN                          Polish zloty
RUB                          Russian ruble
SEK                          Swedish krona
SGD                          Singapore dollar
THB                          Thai baht
TRY                          Turkish lira
TWD                          New Taiwan dollar
USD                          United States dollar
ZAR                          South African rand
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
CURRENCY_CONFIG_FILE="${CURRENCY_CONFIG_FILE:-settings.conf}"
CURRENCY_CONFIG_DIR="${CURRENCY_CONFIG_DIR:-$HOME/.config/myscripts/currency}"
CURRENCY_CONFIG_BACKUP_DIR="${CURRENCY_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/currency/backups}"
CURRENCY_LOG_DIR="${CURRENCY_LOG_DIR:-$HOME/.local/log/currency}"
CURRENCY_TEMP_DIR="${CURRENCY_TEMP_DIR:-$HOME/.local/tmp/system_scripts/currency}"
CURRENCY_CACHE_DIR="${CURRENCY_CACHE_DIR:-$HOME/.cache/currency}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
CURRENCY_OUTPUT_COLOR_1="${CURRENCY_OUTPUT_COLOR_1:-33}"
CURRENCY_OUTPUT_COLOR_2="${CURRENCY_OUTPUT_COLOR_2:-5}"
CURRENCY_OUTPUT_COLOR_GOOD="${CURRENCY_OUTPUT_COLOR_GOOD:-2}"
CURRENCY_OUTPUT_COLOR_ERROR="${CURRENCY_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
CURRENCY_NOTIFY_ENABLED="${CURRENCY_NOTIFY_ENABLED:-yes}"
CURRENCY_GOOD_NAME="${CURRENCY_GOOD_NAME:-Great:}"
CURRENCY_ERROR_NAME="${CURRENCY_ERROR_NAME:-Error:}"
CURRENCY_GOOD_MESSAGE="${CURRENCY_GOOD_MESSAGE:-No errors reported}"
CURRENCY_ERROR_MESSAGE="${CURRENCY_ERROR_MESSAGE:-Errors were reported}"
CURRENCY_NOTIFY_CLIENT_NAME="${CURRENCY_NOTIFY_CLIENT_NAME:-$APPNAME}"
CURRENCY_NOTIFY_CLIENT_ICON="${CURRENCY_NOTIFY_CLIENT_ICON:-notification-new}"
CURRENCY_NOTIFY_CLIENT_URGENCY="${CURRENCY_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
CURRENCY_DEFAULT="${CURRENCY_DEFAULT:-USD}"
CURRENCY_API_HOST="${CURRENCY_API_HOST:-rate.sx}"
CURRENCY_API_OPTIONS="${CURRENCY_API_OPTIONS:-?qfF}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE" ] && . "$CURRENCY_CONFIG_DIR/$CURRENCY_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$CURRENCY_LOG_DIR" ] || mkdir -p "$CURRENCY_LOG_DIR" |& __devnull
[ -d "$CURRENCY_TEMP_DIR" ] || mkdir -p "$CURRENCY_TEMP_DIR" |& __devnull
[ -d "$CURRENCY_CACHE_DIR" ] || mkdir -p "$CURRENCY_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CURRENCY_TEMP_FILE="${CURRENCY_TEMP_FILE:-$(mktemp $CURRENCY_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$CURRENCY_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$CURRENCY_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$CURRENCY_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$CURRENCY_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$CURRENCY_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$CURRENCY_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,help,options,raw,version,silent,"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="exchange crypto list convert search"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    CURRENCY_SILENT="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# CURRENCY_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# CURRENCY_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && CURRENCY_CWD="$1" && shift 1 || CURRENCY_CWD="${CURRENCY_CWD:-$PWD}"
CURRENCY_CWD="$(realpath "${CURRENCY_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$CURRENCY_CWD" ] && cd "$CURRENCY_CWD"; then
# if [ "$CURRENCY_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $CURRENCY_CWD"
# fi
# else
# printf_exit "ðŸ’” $CURRENCY_CWD does not exist ðŸ’”"
# fi
export CURRENCY_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
convert)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME convert [from] [to] [amount]"
  fromCur="$(echo "${1:-EUR}" | __to_uppercase)"
  toCur="$(echo "${2:-$CURRENCY_DEFAULT}" | __to_uppercase)"
  amount="$(echo "${3:-1}" | __to_uppercase)"
  cur="$(__lookup "${toCur}.$CURRENCY_API_HOST/${amount}${fromCur}${CURRENCY_API_OPTIONS:-}" || echo '')"
  if [ -n "$cur" ]; then
    result="$(printf "%.2f" "$cur")"
    printf_blue "${amount} ${fromCur} is ${result} ${toCur}"
  else
    printf_exit "Something went wrong"
  fi
  exit $?
  ;;

search)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME search [query]"
  [ -n "$1" ] && query="$(echo "$1" | __to_uppercase)"
  result="$(__currencies | grep -i "${query:-^}")"
  [ -n "$result" ] && printf_cyan "Found the following currencies" &&
    printf '%s\n' "$result" | printf_readline $CURRENCY_OUTPUT_COLOR ||
    printf_exit "No search results"
  exit $?
  ;;

list)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME list"
  __currencies | printf_readline
  exit $?
  ;;

crypto)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME crypto [query]"
  result="$(__lookup "$CURRENCY_API_HOST/:coins${CURRENCY_API_OPTIONS:-}")"
  printf_blue "Below is a very long list of crypto currencies"
  printf '%s\n' "$result" | grep -E "${1:-^}" | printf_column $CURRENCY_OUTPUT_COLOR
  printf_cyan "Reduce the results by searching - $APPNAME crypto [searchTerm]"
  exit $?
  ;;

exchange)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME exchange currency"
  __get_data "$@"
  exit $?
  ;;

*)
  if [ $# -eq 0 ] || [ "$1" = "" ] || [ "$1" = "help" ]; then
    __lookup "$CURRENCY_API_HOST/:help${CURRENCY_API_OPTIONS:-}"
  else
    __get_data "$@"
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
