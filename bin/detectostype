#!/usr/bin/env sh
# shellcheck shell=sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208181555-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  detectostype --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 18, 2022 15:55 EDT
# @@File             :  detectostype
# @@Description      :  Script to detect the OS
# @@Changelog        :  New script
# @@TODO             :  TODO: Update scripts to use new variables
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  shell/sh
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set sh options

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  __printf_color() { printf '%b' "$1\n" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  __printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1\n" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { __printf_color "$1" "5"; }
__printf_opts() { __printf_color "$1" "6"; }
__printf_line() { __printf_color "$1" "4"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { __printf_color "202208181555-git" "3"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "detectostype:  Script to detect the OS - 202208181555-git"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: detectostype [options] [commands]"
  __printf_line "*                               - Exports the variables"
  __printf_line "all                             - Show all variables"
  __printf_line "arch                            - Show arch type"
  __printf_line "name                            - Show OS name/ID"
  __printf_line "type                            - Show OS type"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional functions
__get_lsb_release_name() { $LSB_RELEASE -a 2>/dev/null | grep -i '^Distributor' | grep -v '/' | awk '{print $3}' | grep '^' || false; }
__get_distro_id() { grep -sh '^ID=' "/etc/os-release" | awk -F'=' '{print $2}' | awk -F' ' '{print $1$2}' | sed 's|"||g' | grep '^' || false; }
__get_distro_name() { grep -sh '^NAME=' "/etc/os-release" | awk -F'=' '{print $2}' | awk -F' ' '{print $1$2}' | sed 's|"||g' | grep '^' || false; }
__get_distro_pretty() { grep 'PRETTY_NAME=' /etc/os-release | awk -F'=' '{print $2}' | awk -F' ' '{print $1$2}' | sed 's|"||g' | grep '^' || false; }
__get_codename() { grep -E '^VERSION_CODENAME=|^CODENAME=' /etc/*-release | awk -F'=' '{print $2}' | awk -F' ' '{print $1$2}' | sed 's|"||g' | grep '^' || false; }
__get_lsb_codename() { $LSB_RELEASE -a 2>/dev/null | grep -i '^Codename' | awk '{print $2}' | grep '^' || $LSB_RELEASE -a 2>/dev/null | grep 'CODE' | sed 's#CODE_NAME:##g' | awk '{print $2}' | grep '^' || false; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_distro_version() {
  os_v=""
  if [ -n "$DISTRO_VERSION" ] && [ "$DISTRO_VERSION" != "N/A" ] && printf '%s\n' "$DISTRO_VERSION" | grep -q '^[0-9]'; then
    printf '%s\n' "$DISTRO_VERSION"
    return
  fi
  if [ -n "$(ls -A /etc/*-release 2>/dev/null)" ]; then
    os_v="$(cat /etc/os-release | grep '^VERSION="' | sed 's#VERSION="##g;s#"##g' | awk '{print $1}' | grep '^')"
  elif [ -f "/etc/redhat-release" ]; then
    os_v="$(cat /etc/redhat-release | awk '{print $4}' | tr '[:upper:]' '[:lower:]' | sed 's#"##g' | grep '^')"
  elif [ -f "/etc/os-release" ]; then
    os_v="$(grep -sh "^VERSION_ID=" /etc/*-release | cut -f1 -d'.' | cut -f2 -d'"' | grep -v '' | grep '^')"
  fi
  if [ -z "$os_v" ]; then
    os_v="$([ -f "/etc/debian_version" ] && grep '[0-9]' "/etc/debian_version" | head -n1 | awk -F '.' '{print $1}')"
  fi
  if [ -z "$os_v" ]; then
    os_v="$(grep -sh '^VERSION=' /etc/os-release 2>/dev/null | sed 's|[a-zA-Z]||g;s/[^.0-9]*//g' | grep -v '/' | grep '[0-9]$')"
  fi
  if [ -z "$os_v" ]; then
    os_v="$(grep -sh 'BUILD_ID' /etc/os-release 2>/dev/null | awk -F '=' '{print $2}' | sed 's|[a-zA-Z]||g;s/[^.0-9]*//g' | grep '[0-9]$')"
  fi
  if [ -z "$os_v" ]; then
    os_v="$($LSB_RELEASE -a 2>/dev/null | grep -i '^Release' | grep -v '/' | awk '{print $2}' | grep '^' | grep '[0-9]')"
  fi
  [ -n "$os_v" ] && printf '%s\n' "$os_v" | sed 's|"||g' || echo "Version: Unknown"
  unset os_v
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set variables
KERNEL_VERSION="$(command -v uname 2>/dev/null 1>/dev/null && uname -r || echo 'Unknown')"
LSB_RELEASE="$(command -v lsb_release 2>/dev/null || command -v lsb-release 2>/dev/null || false)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# if needed add getopts here
SHORTOPTS=""
LONGOPTS="debug,help,raw,version,options"
ARRAY="all arch name type"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "detectostype" -- "$@" 2>/dev/null)
eval set -- "${setopts}" #2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    __printf_color() { printf '%b' "$1\n" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -x
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    ;;
  --help)
    shift 1
    __help
    exit
    ;;
  --version)
    shift 1
    __version
    exit
    ;;
  --options)
    [ -z "$SHORTOPTS" ] || echo "short: $SHORTOPTS" | sed 's|: |: -|g;s|,| -|g;s|^-||g'
    [ -z "$LONGOPTS" ] || echo "long: $LONGOPTS" | sed 's|: |: --|g;s|,| --|g;s|^--||g'
    [ -z "$ARRAY" ] || echo "commands: $ARRAY"
    exit
    ;;
  --)
    shift
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main application
case "$(uname -s)" in
'Linux') OS_NAME='Linux' ;;
'FreeBSD') OS_NAME='FreeBSD' ;;
'Darwin') OS_NAME='Mac' ;;
'SunOS') OS_NAME='Solaris' ;;
'AIX') OS_NAME=AIX ;;
'WindowsNT' | msys* | mingw* | cygwin* | win*) OS_NAME='Windows' ;;
*) [ -n "$OS" ] && OS_NAME="$OS" || OS_NAME="Unknown" ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#Set OS Detection
if [ -n "$LSB_RELEASE" ]; then
  DISTRO_NAME=$(__get_lsb_release_name)
elif [ -f "/etc/os-release" ]; then
  DISTRO_NAME=$(__get_distro_name || __get_distro_pretty || echo "Unknown")
elif [ -f "/etc/debian_version" ]; then
  DISTRO_NAME="Debian"
elif [ -f "/etc/redhat-release" ]; then
  DISTRO_NAME="RHEL"
else
  DISTRO_NAME="$(uname -s)"
  DISTRO_VERSION="$KERNEL_VERSION"
fi
[ "$DISTRO_NAME" = "Unknown" ] && DISTRO_NAME="$(__get_distro_name)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#Version
CODE_NAME="$(__get_codename | grep '^')"
DISTRO_VERSION="$(__get_distro_version | grep '^')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set temp variables
o="$(echo "$OS_NAME" | tr '[:upper:]' '[:lower:]')"
n="$(echo "$DISTRO_NAME" | tr '[:upper:]' '[:lower:]')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#Various Arch Distros
if [ "$n" = "arcoLinux" ] || [ "$n" = "archlinux" ] || [ "$n" = "manjarolinux" ] || [ "$n" = "arch" ] || [ "$n" = "blackarch" ]; then
  DISTRO_ID="Arch"
  DISTRO_VERSION="${DISTRO_VERSION:-$(cat /etc/os-release | grep '^BUILD_ID' | sed 's#BUILD_ID=##g')}"
#Raspberry pi
elif [ "$n" = "raspbian" ]; then
  DISTRO_ID="Raspbian"
  CODE_NAME="$(__get_codename || __get_lsb_codename)"
#Various RedHat Distros
elif [ "$n" = "scientific" ] || [ "$n" = "redhat" ] || [ "$n" = "centos" ] || [ "$n" = "casjay" ] || [ "$n" = "almalinux" ] || [ "$n" = "rockylinux" ] || [ "$n" = "alma" ] || [ "$n" = "rocky" ]; then
  DISTRO_ID="RHEL"
#Various Debian Distros
elif [ "$n" = "kali" ] || [ "$n" = "peppermint" ] || [ "$n" = "parrot" ] || [ "$n" = "debian" ]; then
  DISTRO_ID="Debian"
  if [ "$n" = "debian" ]; then
    CODE_NAME="$(__get_codename || __get_lsb_codename)"
  fi
  if [ "$n" = "kali" ]; then
    CODE_NAME="kali"
  fi
  if [ "$n" = "parrot" ]; then
    CODE_NAME="parrot"
  fi
elif [ "$n" = "ubuntu" ] || [ "$n" = "mint" ] || [ "$n" = "elementary" ] || [ "$n" = "kde neon" ]; then
  DISTRO_ID="Ubuntu"
  CODE_NAME=$(__get_codename || __get_lsb_codename)
elif [ "$n" = "fedora" ]; then
  DISTRO_NAME="Fedora"
fi
if [ "$o" = "mac" ] || [ "$o" = "darwin" ]; then
  DISTRO_NAME="MacOS"
  DISTRO_VERSION="10.x"
  [ -f "$(command -v sw_vers 2>/dev/null)" ] && DISTRO_VERSION="$(sw_vers -productVersion)"
fi
if [ "$o" = "Windows" ] || [ "$o" = "windowsnt" ]; then
  DISTRO_NAME="Windows"
  DISTRO_VERSION="NT"
fi
[ -n "$DISTRO_ID" ] || DISTRO_ID="N/A"
[ -n "$CODE_NAME" ] || CODE_NAME="$(__get_codename || __get_lsb_codename || echo 'N/A')"
[ -n "$DISTRO_VERSION" ] && [ "$DISTRO_VERSION" != "rolling" ] && DISTRO_VERSION="$(echo "$DISTRO_VERSION" | awk '{print $1}' | sed -e 's|[()A-Za-z]||g' | grep '^' || echo "N/A")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Detect architecture. We only support linux.
case "$(uname -m)" in
x86_64)
  CPU_TYPE="amd64"
  CPU_NAME="64bit..."
  ;;
x86)
  CPU_TYPE="386"
  CPU_NAME="32bit..."
  ;;
i686)
  CPU_TYPE="386"
  CPU_NAME="32bit..."
  ;;
i386)
  CPU_TYPE="386"
  CPU_NAME="32bit..."
  ;;
aarch64)
  CPU_TYPE="arm64"
  CPU_NAME="AArch64..."
  ;;
armv5*)
  CPU_TYPE="armv5"
  CPU_NAME="ARM 5..."
  ;;
armv6*)
  CPU_TYPE="armv6"
  CPU_NAME="ARM 6..."
  ;;
armv7*)
  CPU_TYPE="armv7"
  CPU_NAME="ARM 7..."
  ;;
*)
  CPU_TYPE="Unknown"
  CPU_NAME="Uknown"
  ;;
esac

DISTRO_ID="$(echo "$DISTRO_ID" | sed 's|[0-9]||g;s|\.||g')"
DISTRO_NAME="$(echo "$DISTRO_NAME" | sed 's|[0-9]||g;s|\.||g')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# TODO: Update scripts to use new variables and remove these
OS="$OS_NAME"
DISTRO="$DISTRO_NAME"
DISTROID="$DISTRO_ID"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
all)
  shift 1
  __printf_color "OS Name        : $OS_NAME" "4"
  __printf_color "CPU Type       : $CPU_TYPE" "4"
  __printf_color "CPU NAME       : $CPU_NAME" "4"
  __printf_color "DISTRO Name    : $DISTRO_NAME" "4"
  __printf_color "DISTRO ID      : $DISTRO_ID" "4"
  __printf_color "CODE_NAME      : $CODE_NAME" "4"
  __printf_color "DISTRO Version : $DISTRO_VERSION" "4"
  exit
  ;;
arch)
  shift 1
  __printf_color "CPU Type       : $CPU_TYPE" "4"
  __printf_color "CPU NAME       : $CPU_NAME" "4"
  exit
  ;;
name)
  shift 1
  __printf_color "DISTRO Name    : $DISTRO_NAME" "4"
  __printf_color "DISTRO ID      : $DISTRO_ID" "4"
  __printf_color "CODE_NAME      : $CODE_NAME" "4"
  __printf_color "DISTRO Version : $DISTRO_VERSION" "4"
  exit
  ;;
type)
  shift 1
  __printf_color "OS Name        : $OS_NAME" "4"
  exit
  ;;
*)
  # TODO Remove DISTRO DISTROID
  export OS_NAME DISTRO_NAME DISTRO_ID DISTRO DISTROID CODE_NAME DISTRO_VERSION CPU_TYPE CPU_NAME
  unset o n
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
