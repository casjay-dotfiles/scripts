#!/usr/bin/env bash
# shellcheck shell=bash
# shellcheck disable=SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202304191255-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  dockerrun --help
# @@Copyright        :  Copyright: (c) 2023 Jason Hempstead, Casjays Developments
# @@Created          :  Wednesday, Apr 19, 2023 12:55 EDT
# @@File             :  dockerrun
# @@Description      :  run docker image
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202304191255-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
DOCKERRUN_REQUIRE_SUDO="${DOCKERRUN_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && DOCKERRUN_EXIT_STATUS=0 || DOCKERRUN_EXIT_STATUS=1
  return ${DOCKERRUN_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && DOCKERRUN_EXIT_STATUS=0 || DOCKERRUN_EXIT_STATUS=1
  return ${DOCKERRUN_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  DOCKERRUN_EXIT_STATUS=0
  [ -n "$1" ] && local DOCKERRUN_EXIT_STATUS="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && DOCKERRUN_EXIT_STATUS+=$(($DOCKERRUN_EXIT_STATUS + 0)) || DOCKERRUN_EXIT_STATUS+=$(($DOCKERRUN_EXIT_STATUS + 1))
  done
  [ $DOCKERRUN_EXIT_STATUS -eq 0 ] || DOCKERRUN_EXIT_STATUS=3
  return ${DOCKERRUN_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local DOCKERRUN_EXIT_STATUS=0
  curl -q -LSsfI --max-time 1 --retry 0 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || DOCKERRUN_EXIT_STATUS=4
  return ${DOCKERRUN_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE"
  fi
  [ -d "$DOCKERRUN_CONFIG_DIR" ] || mkdir -p "$DOCKERRUN_CONFIG_DIR"
  [ -d "$DOCKERRUN_CONFIG_BACKUP_DIR" ] || mkdir -p "$DOCKERRUN_CONFIG_BACKUP_DIR"
  [ -f "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE" ] &&
    cp -Rf "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE" "$DOCKERRUN_CONFIG_BACKUP_DIR/$DOCKERRUN_CONFIG_FILE.$$"
  cat <<EOF >"$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE"
# Settings for dockerrun
DOCKERRUN_DOCKER_BIN="${DOCKERRUN_DOCKER_BIN:-}"
DOCKERUN_DEFAULT_ORG_LIST="${DOCKERUN_DEFAULT_ORG_LIST:-}"
DOCKERRUN_DEFAULT_IMAGE="${DOCKERRUN_DEFAULT_IMAGE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
DOCKERRUN_OUTPUT_COLOR_1="${DOCKERRUN_OUTPUT_COLOR_1:-}"
DOCKERRUN_OUTPUT_COLOR_2="${DOCKERRUN_OUTPUT_COLOR_2:-}"
DOCKERRUN_OUTPUT_COLOR_GOOD="${DOCKERRUN_OUTPUT_COLOR_GOOD:-}"
DOCKERRUN_OUTPUT_COLOR_ERROR="${DOCKERRUN_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
DOCKERRUN_NOTIFY_ENABLED="${DOCKERRUN_NOTIFY_ENABLED:-}"
DOCKERRUN_GOOD_NAME="${DOCKERRUN_GOOD_NAME:-}"
DOCKERRUN_ERROR_NAME="${DOCKERRUN_ERROR_NAME:-}"
DOCKERRUN_GOOD_MESSAGE="${DOCKERRUN_GOOD_MESSAGE:-}"
DOCKERRUN_ERROR_MESSAGE="${DOCKERRUN_ERROR_MESSAGE:-}"
DOCKERRUN_NOTIFY_CLIENT_NAME="${DOCKERRUN_NOTIFY_CLIENT_NAME:-}"
DOCKERRUN_NOTIFY_CLIENT_ICON="${DOCKERRUN_NOTIFY_CLIENT_ICON:-}"
DOCKERRUN_NOTIFY_CLIENT_URGENCY="${DOCKERRUN_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE"
    DOCKERRUN_EXIT_STATUS=0
  else
    printf_red "Failed to create the config file"
    DOCKERRUN_EXIT_STATUS=1
  fi
  return ${DOCKERRUN_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "dockerrun:  run docker image - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: dockerrun [containerID,containerName] [commands] [image]"
  __printf_line "alpine /bin/sh alpine           - Runs the alpine container with sh"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep() { grep "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$DOCKERRUN_REQUIRE_SUDO" = "yes" ] && [ -z "$DOCKERRUN_REQUIRE_SUDO_RUN" ]; then
    export DOCKERRUN_REQUIRE_SUDO="no"
    export DOCKERRUN_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    DOCKERRUN_EXIT_STATUS=$?
  else
    printf '%s\n' "This requires root to run"
    DOCKERRUN_EXIT_STATUS=1
  fi
  return ${DOCKERRUN_EXIT_STATUS:-0}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  DOCKERRUN_EXIT_STATUS=${DOCKERRUN_EXIT_STATUS:-0}
  [ -f "$DOCKERRUN_TEMP_FILE" ] && rm -Rf "$DOCKERRUN_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $DOCKERRUN_EXIT_STATUS
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__jq() { jq "$@" 2>/dev/null; }
__gen_config_local() { __dockerrun_complete; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__docker_exec() { $DOCKERRUN_DOCKER_BIN exec --tty --interactive "$DOCKERRUN_NAME" $DOCKERRUN_EXEC || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__dockerrun_complete() {
  local count=""
  local list_dir="$DOCKERRUN_CONFIG_DIR/lists"
  local org_list="${*:-$DOCKERUN_DEFAULT_ORG_LIST}"
  local api="https://hub.docker.com/v2/repositories"
  org_list="${org_list//,/ }"
  [ -d "$list_dir" ] || mkdir -p "$list_dir"
  for org in $org_list; do
    prev_org="$org"
    org_name="$org"
    list_file="$list_dir/$org_name.list"
    [ $prev_org = $org_name ] || count=""
    count="${count:-$(curl -q -LSsf "$api/$org_name" 2>/dev/null | jq -rc '.count' | grep '^[0-9]' | grep -v 'null' | grep '^' || echo '0')}"
    if [ -n "$org_name" ] && [ $count -ne 0 ]; then
      [ -f "$list_file" ] && rm -Rf "$list_file"
      repo_name="$(curl -q -LSsf "$api/${org_name}?page_size=1000" 2>/dev/null | __jq -rc '.results|.[]|.name')"
      if [ -n "$repo_name" ]; then
        for repo in $repo_name; do
          [ -n "$repo" ] && printf '%s\n' "$org_name/$repo" >>"$list_file"
        done
      fi
    fi
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__docker_run() {
  cmd="$DOCKERRUN_DOCKER_BIN run -d --restart always --network $DOCKERRUN_NETWORK -it "
  cmd+="--name $DOCKERRUN_NAME $DOCKERRUN_OPTS $DOCKERRUN_MOUNTS $DOCKERRUN_PORTS $DOCKERRUN_IMAGE"
  #printf_purple "$cmd"
  eval $cmd >/dev/null 2>"$DOCKERRUN_TEMP_FILE" && sleep 10 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__show_log_file() { tail -n2 "$DOCKERRUN_TEMP_FILE" | sed 's|docker: Error.*daemon: ||g;s|\. .*||g;s|: .*||g' | grep -v 'docker run --help' | grep '^' || tail -n1 "$DOCKERRUN_TEMP_FILE"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__docker_ps_listen() {
  col=$(($COLUMNS - 10))
  listen="$(docker ps --format '{{.Names}} {{.Ports}}' 2>&1 | grep "$DOCKERRUN_NAME" | sed "s|$DOCKERRUN_NAME ||g" | tr ' ' '\n' | grep -v '^$' | sed 's|,|;|g;s|:::|0.0.0.0:|g;s|/.*|;|g;s|  *| |g' | sort -urV | grep '^')"
  [ ${#listen} -ge $col ] && listen="${listen:0:$col}..."
  [ -n "$listen" ] && printf '%s port mappings: %s\n' "$DOCKERRUN_NAME" "${listen//0.0.0.0/$CURRENT_IP_4}" | tr '\n' ' ' | sed 's| $||g;s|;$||g' | grep '^' | printf_readline "$DOCKERRUN_OUTPUT_COLOR_2"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_volume() {
  local mounts=()
  for volume in $DOCKERRUN_MOUNTS; do
    if echo "$volume" | grep -q ':'; then
      host="$(echo "$volume" | awk -F ':' '{print $1}' | sed 's|^/||g')"
      container="$(echo "$volume" | awk -F ':' '{print $2}' | sed 's|^/||g')"
    else
      host="$DOCKERRUN_TEMP_DIR/$NAME/$(echo "$volume" | sed 's|^/||g')"
      container="$(echo "$volume" | sed 's|^/||g')"
    fi
    mounts+=("--volume $host:/$container")
  done
  DOCKERRUN_MOUNTS="${mounts[*]}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default exit code
DOCKERRUN_EXIT_STATUS=0
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
DOCKERRUN_CONFIG_DIR="${DOCKERRUN_CONFIG_DIR:-$HOME/.config/myscripts/dockerrun}"
DOCKERRUN_CONFIG_BACKUP_DIR="${DOCKERRUN_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/dockerrun/backups}"
DOCKERRUN_LOG_DIR="${DOCKERRUN_LOG_DIR:-$HOME/.local/log/dockerrun}"
DOCKERRUN_RUN_DIR="${DOCKERRUN_RUN_DIR:-$HOME/.local/run/system_scripts/$DOCKERRUN_SCRIPTS_PREFIX}"
DOCKERRUN_TEMP_DIR="${DOCKERRUN_TEMP_DIR:-$HOME/.local/tmp/system_scripts/dockerrun}"
DOCKERRUN_CACHE_DIR="${DOCKERRUN_CACHE_DIR:-$HOME/.cache/dockerrun}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# File settings
DOCKERRUN_CONFIG_FILE="${DOCKERRUN_CONFIG_FILE:-settings.conf}"
DOCKERRUN_LOG_ERROR_FILE="${DOCKERRUN_LOG_ERROR_FILE:-$DOCKERRUN_LOG_DIR/error.log}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
DOCKERRUN_OUTPUT_COLOR_1="${DOCKERRUN_OUTPUT_COLOR_1:-33}"
DOCKERRUN_OUTPUT_COLOR_2="${DOCKERRUN_OUTPUT_COLOR_2:-5}"
DOCKERRUN_OUTPUT_COLOR_GOOD="${DOCKERRUN_OUTPUT_COLOR_GOOD:-2}"
DOCKERRUN_OUTPUT_COLOR_ERROR="${DOCKERRUN_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
DOCKERRUN_NOTIFY_ENABLED="${DOCKERRUN_NOTIFY_ENABLED:-yes}"
DOCKERRUN_GOOD_NAME="${DOCKERRUN_GOOD_NAME:-Great:}"
DOCKERRUN_ERROR_NAME="${DOCKERRUN_ERROR_NAME:-Error:}"
DOCKERRUN_GOOD_MESSAGE="${DOCKERRUN_GOOD_MESSAGE:-No errors reported}"
DOCKERRUN_ERROR_MESSAGE="${DOCKERRUN_ERROR_MESSAGE:-Errors were reported}"
DOCKERRUN_NOTIFY_CLIENT_NAME="${DOCKERRUN_NOTIFY_CLIENT_NAME:-$APPNAME}"
DOCKERRUN_NOTIFY_CLIENT_ICON="${DOCKERRUN_NOTIFY_CLIENT_ICON:-notification-new}"
DOCKERRUN_NOTIFY_CLIENT_URGENCY="${DOCKERRUN_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
DOCKERRUN_DOCKER_BIN="${DOCKERRUN_DOCKER_BIN:-docker}"
DOCKERRUN_DEFAULT_IMAGE="${DOCKERRUN_DEFAULT_IMAGE:-casjaysdev/alpine}"
DOCKERRUN_DEFAULT_MOUNTS="app data config "
DOCKERUN_DEFAULT_ORG_LIST="${DOCKERUN_DEFAULT_ORG_LIST:-casjaysdev,casjaysdevdocker}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE" ] && . "$DOCKERRUN_CONFIG_DIR/$DOCKERRUN_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$DOCKERRUN_RUN_DIR" ] || mkdir -p "$DOCKERRUN_RUN_DIR" |& __devnull
[ -d "$DOCKERRUN_LOG_DIR" ] || mkdir -p "$DOCKERRUN_LOG_DIR" |& __devnull
[ -d "$DOCKERRUN_TEMP_DIR" ] || mkdir -p "$DOCKERRUN_TEMP_DIR" |& __devnull
[ -d "$DOCKERRUN_CACHE_DIR" ] || mkdir -p "$DOCKERRUN_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DOCKERRUN_TEMP_FILE="${DOCKERRUN_TEMP_FILE:-$(mktemp $DOCKERRUN_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$DOCKERRUN_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$DOCKERRUN_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$DOCKERRUN_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$DOCKERRUN_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$DOCKERRUN_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$DOCKERRUN_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent,force"
LONGOPTS+=",network:,mount:,docker:,publish:,ports:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    DOCKERRUN_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    DOCKERRUN_CWD="$2"
    [ -d "$DOCKERRUN_CWD" ] || mkdir -p "$DOCKERRUN_CWD" |& __devnull
    shift 2
    ;;
  --network)
    DOCKERRUN_SET_NETWORK="$2"
    shift 2
    ;;
  --docker)
    DOCKERRUN_SET_OPTS+=("$2")
    shift 2
    ;;
  --mount)
    DOCKERRUN_SET_MOUNTS+=("$2")
    shift 2
    ;;
  --publish)
    DOCKERRUN_SET_PORTS+=("--publish $2")
    shift 2
    ;;
  --ports)
    DOCKERRUN_NAME="$2"
    __docker_ps_listen
    exit $?
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# DOCKERRUN_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# DOCKERRUN_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && DOCKERRUN_CWD="$1" && shift 1 || DOCKERRUN_CWD="${DOCKERRUN_CWD:-$PWD}"
DOCKERRUN_CWD="$(realpath "${DOCKERRUN_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$DOCKERRUN_CWD" ] && cd "$DOCKERRUN_CWD"; then
# if [ "$DOCKERRUN_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $DOCKERRUN_CWD"
# fi
# else
# printf_exit "ðŸ’” $DOCKERRUN_CWD does not exist ðŸ’”"
# fi
export DOCKERRUN_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
__dockerrun_complete ${1//\/*/}
[ -n "$1" ] || printf_exit "Please provide the container name or ID"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
DOCKERRUN_NAME="${1//*\//}"
DOCKERRUN_EXEC="${2:-/usr/bin/env sh}"
DOCKERRUN_PORTS="${DOCKERRUN_SET_PORTS[*]:--P}"
DOCKERRUN_NETWORK="${DOCKERRUN_SET_NETWORK:-bridge}"
DOCKERRUN_OPTS="${DOCKERRUN_SET_OPTS[*]} --privileged"
DOCKERRUN_MOUNTS="${DOCKERRUN_DEFAULT_MOUNTS[*]} ${DOCKERRUN_SET_MOUNTS[*]}"
if [ $# -eq 1 ]; then
  echo "$1" | grep -q '/' && DOCKERRUN_IMAGE="$1" || DOCKERRUN_IMAGE="$DOCKERRUN_DEFAULT_IMAGE"
elif [ $# -eq 2 ]; then
  DOCKERRUN_IMAGE="$2"
elif [ $# -eq 3 ]; then
  DOCKERRUN_IMAGE="$2"
  DOCKERRUN_EXEC="$3"
else
  printf_red "Usage: $APPNAME [containerID,containerName] [commands] [image]"
  printf_exit "$DOCKERRUN_NAME either doesn't exist or is not running"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
DOCKERRUN_NAME="$(echo "$DOCKERRUN_NAME" | sed 's/[!@#\$%^&*():]//g')"
DOCKERRUN_CONTAINER_EXISTS="$($DOCKERRUN_DOCKER_BIN ps -a 2>&1 | grep "$DOCKERRUN_NAME" || echo '')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Export variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
if [ -n "$($DOCKERRUN_DOCKER_BIN ps -q -f status=running -f name=^/${DOCKERRUN_NAME}$)" ]; then
  __docker_exec
elif [ -n "$DOCKERRUN_CONTAINER_EXISTS" ]; then
  printf_exit "The container exists, however, it does not seem to be running"
else
  printf_cyan "Creating and starting $DOCKERRUN_NAME using image: $DOCKERRUN_IMAGE"
  __create_volume
  if __docker_run; then
    printf_blue "Your container has been created"
    __docker_ps_listen
    __docker_exec
  else
    printf_return "Failed to created the container: $(__show_log_file)"
  fi
fi
DOCKERRUN_EXIT_STATUS=$?
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
DOCKERRUN_EXIT_STATUS="${DOCKERRUN_EXIT_STATUS:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${DOCKERRUN_EXIT_STATUS:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
