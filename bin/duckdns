#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208052230-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  duckdns --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Friday, Aug 05, 2022 22:30 EDT
# @@File             :  duckdns
# @@Description      :  DuckDNS api script
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208052230-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
DUCKDNS_REQUIRE_SUDO="${DUCKDNS_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE"
  fi
  [ -d "$DUCKDNS_CONFIG_DIR" ] || mkdir -p "$DUCKDNS_CONFIG_DIR"
  [ -d "$DUCKDNS_CONFIG_BACKUP_DIR" ] || mkdir -p "$DUCKDNS_CONFIG_BACKUP_DIR"
  [ -f "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE" ] &&
    cp -Rf "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE" "$DUCKDNS_CONFIG_BACKUP_DIR/$DUCKDNS_CONFIG_FILE.$$"
  cat <<EOF >"$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE"
# Settings for duckdns
DUCKDNS_API_KEY="${DUCKDNS_API_KEY:-}"
DUCKDNS_DOMAIN="${DUCKDNS_DOMAIN:-}"
DUCKDNS_CLEAR="${DUCKDNS_CLEAR:-}"
DUCKDNS_API_URL="${DUCKDNS_API_URL:-}"
DUCKDNS_EXTERNAL_IP="${DUCKDNS_EXTERNAL_IP:-}"
DUCKDNS_LETSENCRYPT_EMAIL="${DUCKDNS_LETSENCRYPT_EMAIL:-}"
DUCKDNS_CERTBOT_CONTAINER="${DUCKDNS_CERTBOT_CONTAINER:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
DUCKDNS_OUTPUT_COLOR_1="${DUCKDNS_OUTPUT_COLOR_1:-}"
DUCKDNS_OUTPUT_COLOR_2="${DUCKDNS_OUTPUT_COLOR_2:-}"
DUCKDNS_OUTPUT_COLOR_GOOD="${DUCKDNS_OUTPUT_COLOR_GOOD:-}"
DUCKDNS_OUTPUT_COLOR_ERROR="${DUCKDNS_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
DUCKDNS_NOTIFY_ENABLED="${DUCKDNS_NOTIFY_ENABLED:-}"
DUCKDNS_GOOD_NAME="${DUCKDNS_GOOD_NAME:-}"
DUCKDNS_ERROR_NAME="${DUCKDNS_ERROR_NAME:-}"
DUCKDNS_GOOD_MESSAGE="${DUCKDNS_GOOD_MESSAGE:-}"
DUCKDNS_ERROR_MESSAGE="${DUCKDNS_ERROR_MESSAGE:-}"
DUCKDNS_NOTIFY_CLIENT_NAME="${DUCKDNS_NOTIFY_CLIENT_NAME:-}"
DUCKDNS_NOTIFY_CLIENT_ICON="${DUCKDNS_NOTIFY_CLIENT_ICON:-}"
DUCKDNS_NOTIFY_CLIENT_URGENCY="${DUCKDNS_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "duckdns:  DuckDNS api script - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: duckdns [options] [domain] [ip4] [ipv6]"
  __printf_line "update [domain]                 - Automatically sets ip addresses and updates domain"
  __printf_line "--api [apiKey]                  - Sets the API key"
  __printf_line "--domain [domain]               - Set the domain"
  __printf_line "--ip4 [ip4Address]              - Set the ipv4 address"
  __printf_line "--ip6 [ip6Address]              - Set the ipv6 address"
  __printf_line "--txt [textRecord]              - Set the text record"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$DUCKDNS_REQUIRE_SUDO" = "yes" ] && [ -z "$DUCKDNS_REQUIRE_SUDO_RUN" ]; then
    export DUCKDNS_REQUIRE_SUDO="no"
    export DUCKDNS_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$DUCKDNS_TEMP_FILE" ] && rm -Rf "$DUCKDNS_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__duckdns_api() { __curl "$DUCKDNS_API_URL/${*}" && return 0 || return 1; }
__curl() { curl -q -LSsf --max-time 2 --retry 0 "$@" 2>/dev/null || return 1; }
__get_external_ip4() { __curl -4 "$DUCKDNS_EXTERNAL_IP" && return 0 || return 1; }
__get_external_ip6() { __curl -6 "$DUCKDNS_EXTERNAL_IP" && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_full_domain() {
  local dom="${1:-$DUCKDNS_DOMAIN}" set_domain=""
  if [ -n "$dom" ]; then
    echo "$dom" | grep -q '\..*\..*' || set_domain="$dom.duckdns.org"
  else
    printf_exit "Please set the domain you want manage"
  fi
  export DUCKDNS_DOMAIN="${set_domain:-$dom}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__var_check() {
  local set_domain="${1:-$DUCKDNS_DOMAIN}" ip4="${2:-$DUCKDNS_SET_IP4}" ip6="${3:-$DUCKDNS_SET_IP6}"
  __set_full_domain "$set_domain"
  [ -n "$DUCKDNS_LETSENCRYPT_EMAIL" ] || DUCKDNS_LETSENCRYPT_EMAIL="ssl@$DUCKDNS_DOMAIN"
  ip4="yes" && DUCKDNS_SET_IP4="$(curl -q -LSsf --max-time 2 --retry 0 -4 "$DUCKDNS_EXTERNAL_IP" 2>/dev/null || false)"
  ip6="yes" && DUCKDNS_SET_IP6="$(curl -q -LSsf --max-time 2 --retry 0 -6 "$DUCKDNS_EXTERNAL_IP" 2>/dev/null || false)"
  [ "$DUCKDNS_IP4" = "yes" ] && DUCKDNS_NOIP4="true" && DUCKDNS_IP4="$DUCKDNS_SET_IP4"
  [ "$DUCKDNS_IP6" = "yes" ] && DUCKDNS_NOIP6="true" && DUCKDNS_IP6="$DUCKDNS_SET_IP6"
  export DUCKDNS_DOMAIN="$DUCKDNS_DOMAIN" DUCKDNS_IP4="${DUCKDNS_IP4:-$ip4}" DUCKDNS_IP6="${DUCKDNS_IP6:-$ip6}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__duckdns_update() {
  local domain="${1:-$DUCKDNS_DOMAIN}" verbose="" clear="" token=""
  [ -n "$domain" ] && domains="domains=$domain"
  [ -z "$DUCKDNS_IP4" ] && [ "$DUCKDNS_NOIP4" != "true" ] && DUCKDNS_IP4="$DUCKDNS_SET_IP4"
  [ -z "$DUCKDNS_IP6" ] && [ "$DUCKDNS_NOIP6" != "true" ] && DUCKDNS_IP6="$DUCKDNS_SET_IP6"
  [ -n "$DUCKDNS_IP4" ] && ip4='&ip='${DUCKDNS_IP4}''
  [ -n "$DUCKDNS_IP6" ] && ip6='&ipv6='${DUCKDNS_IP6}''
  [ "$DUCKDNS_SILENT" = "true" ] || printf_cyan "Attempting to update $domain"
  clear="&clear=${DUCKDNS_CLEAR:-false}"
  token="&token=${DUCKDNS_API_KEY:-}"
  if [ -n "$DUCKDNS_TEXT" ]; then
    textrecord="$(__uriencode "$DUCKDNS_TEXT")"
    resp="$(__duckdns_api "update/?${domains}${token}${ip4}${ip6}${clear}&verbose=true&txt=${textrecord}")"
  else
    resp="$(__duckdns_api "update/?${domains}${token}${ip4}${ip6}${clear}&verbose=true")"
  fi
  changed4="$(echo "$resp" | __ipv4_valid)"
  changed6="$(echo "$resp" | __ipv6_valid)"
  nochange="$(echo "$resp" | grep 'NOCHANGE')"
  if echo "$resp" | grep -q 'OK'; then
    if [ -n "$nochange" ]; then
      printf_green "Successfully sent command, however, nothing was changed"
    else
      if [ -n "$textrecord" ]; then
        printf_green "Successfully updated $domain with txt: ${DUCKDNS_TEXT}"
      fi
      if [ -n "$changed4" ]; then
        printf_green "Successfully updated $domain with ip4: ${changed4}"
      fi
      if [ -n "$changed6" ]; then
        printf_green "Successfully updated $domain with ip6: ${changed6}"
      fi
    fi
    return 0
  else
    printf_red "Update of $domain has failed with error: ${CYAN}$resp${NC}"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ipv4_valid() {
  cat - | grep -E -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)" | grep '^'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ipv6_valid() {
  cat - | grep -E '(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))' | grep '^'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__uriencode() {
  local s="$1"
  s="${s//'%'/%25}"
  s="${s//' '/%20}"
  s="${s//'"'/%22}"
  s="${s//'#'/%23}"
  s="${s//'$'/%24}"
  s="${s//'&'/%26}"
  s="${s//'+'/%2B}"
  s="${s//','/%2C}"
  s="${s//'/'/%2F}"
  s="${s//':'/%3A}"
  s="${s//';'/%3B}"
  s="${s//'='/%3D}"
  s="${s//'?'/%3F}"
  s="${s//'@'/%40}"
  s="${s//'['/%5B}"
  s="${s//']'/%5D}"
  printf '%s' "$s"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__letsencrypt_cron() {
  [ -n "$DUCKDNS_DOMAIN" ] || return 0
  echo "0 3 */8 * * root $APPNAME letsencrypt renew $DUCKDNS_DOMAIN" | sudo tee -p "/etc/cron.d/$DUCKDNS_DOMAIN" &>/dev/null
  [ -f "/etc/cron.d/$DUCKDNS_DOMAIN" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__letsencrypt_create() {
  [ -n "$DUCKDNS_API_KEY" ] || printf_exit "The api key is not set"
  local exitCode=0
  local container_name=duckdns-letsencrypt-bot
  printf_cyan "Please wait while I setup the certs for the following domain: ${YELLOW}$DUCKDNS_DOMAIN *.$DUCKDNS_DOMAIN${NC}"
  sudo -n true && sudo mkdir -p /etc/letsencrypt /var/log/letsencrypt && sudo chmod 777 /etc/letsencrypt /etc/letsencrypt/live /var/log/letsencrypt
  docker pull $DUCKDNS_CERTBOT_CONTAINER &>/dev/null
  docker run --rm \
    --name $container_name \
    --dns=1.1.1.1 \
    -v "/etc/letsencrypt:/etc/letsencrypt" \
    -v "/var/log/letsencrypt:/var/log/letsencrypt" \
    $DUCKDNS_CERTBOT_CONTAINER \
    certonly -v \
    --expand \
    --agree-tos \
    --non-interactive \
    --register-unsafely-without-email \
    --authenticator dns-duckdns \
    --preferred-challenges dns \
    --dns-duckdns-token "$DUCKDNS_API_KEY" \
    --dns-duckdns-propagation-seconds $DUCKDNS_LETSENCRYPT_PROPAGATION \
    -d "$DUCKDNS_DOMAIN" -d "*.$DUCKDNS_DOMAIN" >"$DUCKDNS_LOG_DIR/lecert.log" 2>&1 && __letsencrypt_cron || exitCode=1
  if [ $exitCode -eq 0 ] || [ -d "/etc/letsencrypt/live/$DUCKDNS_DOMAIN" ]; then
    printf_green "Certs saved to: /etc/letsencrypt/live/$DUCKDNS_DOMAIN"
  else
    printf_red "Failed to create the certs: $DUCKDNS_LOG_DIR/lecert.log"
  fi
  docker rm -f $container_name &>/dev/null
  docker rmi $DUCKDNS_CERTBOT_CONTAINER &>/dev/null
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__letsencrypt_renew() {
  local container_name=duckdns-letsencrypt-bot
  docker pull $DUCKDNS_CERTBOT_CONTAINER &>/dev/null
  docker run \
    --rm \
    --name $container_name \
    --dns=1.1.1.1 \
    -v "/etc/letsencrypt:/etc/letsencrypt" \
    -v "/var/log/letsencrypt:/var/log/letsencrypt" \
    $DUCKDNS_CERTBOT_CONTAINER renew && __letsencrypt_cron || false
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_cron() {
  dom="${1:-$DUCKDNS_DOMAIN}"
  DUCKDNS_SILENT="true"
  [ -n "$dom" ] || { echo "No domain was given" && return 1; }
  sep='# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
  status="$(__duckdns_update "$dom" | grep '^' || echo 'Something went wrong')"
  printf '%s\n%s\n%s\n' "$status" "Updated $(date)" "$sep" | tee -a "$DUCKDNS_LOG_DIR/cron.$dom.log" >/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
DUCKDNS_CONFIG_FILE="${DUCKDNS_CONFIG_FILE:-settings.conf}"
DUCKDNS_CONFIG_DIR="${DUCKDNS_CONFIG_DIR:-$HOME/.config/myscripts/duckdns}"
DUCKDNS_CONFIG_BACKUP_DIR="${DUCKDNS_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/duckdns/backups}"
DUCKDNS_LOG_DIR="${DUCKDNS_LOG_DIR:-$HOME/.local/log/duckdns}"
DUCKDNS_TEMP_DIR="${DUCKDNS_TEMP_DIR:-$HOME/.local/tmp/system_scripts/duckdns}"
DUCKDNS_CACHE_DIR="${DUCKDNS_CACHE_DIR:-$HOME/.cache/duckdns}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
DUCKDNS_OUTPUT_COLOR_1="${DUCKDNS_OUTPUT_COLOR_1:-33}"
DUCKDNS_OUTPUT_COLOR_2="${DUCKDNS_OUTPUT_COLOR_2:-5}"
DUCKDNS_OUTPUT_COLOR_GOOD="${DUCKDNS_OUTPUT_COLOR_GOOD:-2}"
DUCKDNS_OUTPUT_COLOR_ERROR="${DUCKDNS_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
DUCKDNS_NOTIFY_ENABLED="${DUCKDNS_NOTIFY_ENABLED:-yes}"
DUCKDNS_GOOD_NAME="${DUCKDNS_GOOD_NAME:-Great:}"
DUCKDNS_ERROR_NAME="${DUCKDNS_ERROR_NAME:-Error:}"
DUCKDNS_GOOD_MESSAGE="${DUCKDNS_GOOD_MESSAGE:-No errors reported}"
DUCKDNS_ERROR_MESSAGE="${DUCKDNS_ERROR_MESSAGE:-Errors were reported}"
DUCKDNS_NOTIFY_CLIENT_NAME="${DUCKDNS_NOTIFY_CLIENT_NAME:-$APPNAME}"
DUCKDNS_NOTIFY_CLIENT_ICON="${DUCKDNS_NOTIFY_CLIENT_ICON:-notification-new}"
DUCKDNS_NOTIFY_CLIENT_URGENCY="${DUCKDNS_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
DUCKDNS_API_KEY="${DUCKDNS_API_KEY:-}"
DUCKDNS_DOMAIN="${DUCKDNS_DOMAIN:-}"
DUCKDNS_CLEAR="${DUCKDNS_CLEAR:-false}"
DUCKDNS_API_URL="${DUCKDNS_API_URL:-https://www.duckdns.org}"
DUCKDNS_EXTERNAL_IP="${DUCKDNS_EXTERNAL_IP:-https://ifcfg.us}"
DUCKDNS_LETSENCRYPT_EMAIL="${DUCKDNS_LETSENCRYPT_EMAIL:-}"
DUCKDNS_LETSENCRYPT_PROPAGATION="${DUCKDNS_LETSENCRYPT_PROPAGATION:-90}"
DUCKDNS_CERTBOT_CONTAINER="${DUCKDNS_CERTBOT_CONTAINER:-infinityofspace/certbot_dns_duckdns:latest}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE" ] && . "$DUCKDNS_CONFIG_DIR/$DUCKDNS_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$DUCKDNS_LOG_DIR" ] || mkdir -p "$DUCKDNS_LOG_DIR" |& __devnull
[ -d "$DUCKDNS_TEMP_DIR" ] || mkdir -p "$DUCKDNS_TEMP_DIR" |& __devnull
[ -d "$DUCKDNS_CACHE_DIR" ] || mkdir -p "$DUCKDNS_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DUCKDNS_TEMP_FILE="${DUCKDNS_TEMP_FILE:-$(mktemp $DUCKDNS_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$DUCKDNS_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$DUCKDNS_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$DUCKDNS_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$DUCKDNS_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$DUCKDNS_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$DUCKDNS_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,help,options,raw,version,silent,"
LONGOPTS+=",api:,domain:,ip4:,ip6:,txt:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="update ssl cron"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    DUCKDNS_SILENT="true"
    ;;
  --api)
    DUCKDNS_API_KEY="$2"
    shift 2
    ;;
  --domain)
    DUCKDNS_DOMAIN="$2"
    shift 2
    ;;
  --ip4)
    DUCKDNS_IP4="$2"
    shift 2
    ;;
  --ip6)
    DUCKDNS_IP6="$2"
    shift 2
    ;;
  --txt)
    DUCKDNS_TEXT="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# DUCKDNS_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# DUCKDNS_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && DUCKDNS_CWD="$1" && shift 1 || DUCKDNS_CWD="${DUCKDNS_CWD:-$PWD}"
DUCKDNS_CWD="$(realpath "${DUCKDNS_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$DUCKDNS_CWD" ] && cd "$DUCKDNS_CWD"; then
# if [ "$DUCKDNS_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $DUCKDNS_CWD"
# fi
# else
# printf_exit "ðŸ’” $DUCKDNS_CWD does not exist ðŸ’”"
# fi
export DUCKDNS_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
if [ "$DUCKDNS_IP4" = "yes" ] || [ "$DUCKDNS_IP4" = "yes" ]; then
  unset DUCKDNS_IP4
  DUCKDNS_SET_IP4="$(__get_external_ip4 || false)"
fi
if [ "$DUCKDNS_IP6" = "yes" ] || [ "$DUCKDNS_IP6" = "yes" ]; then
  unset DUCKDNS_IP6
  DUCKDNS_SET_IP6="$(__get_external_ip6 || false)"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
DUCKDNS_SET_IP4="${DUCKDNS_IP4:-$DUCKDNS_SET_IP4}"
DUCKDNS_SET_IP6="${DUCKDNS_IP6:-$DUCKDNS_SET_IP6}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[ -n "$DUCKDNS_API_KEY" ] || printf_exit "Please set the environment variable: DUCKDNS_API_KEY"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
info)
  shift
  __var_check "$@"
  printf_cyan "DUCKDNS_API_KEY:                  ${DUCKDNS_API_KEY:-}"
  printf_cyan "DUCKDNS_DOMAIN:                   ${DUCKDNS_DOMAIN:-}"
  printf_cyan "DUCKDNS_CLEAR:                    ${DUCKDNS_CLEAR:-}"
  printf_cyan "DUCKDNS_API_URL:                  ${DUCKDNS_API_URL:-}"
  printf_cyan "DUCKDNS_EXTERNAL_IP:              ${DUCKDNS_EXTERNAL_IP:-}"
  printf_cyan "DUCKDNS_LETSENCRYPT_EMAIL:        ${DUCKDNS_LETSENCRYPT_EMAIL:-}"
  printf_cyan "DUCKDNS_LETSENCRYPT_PROPAGATION:  ${DUCKDNS_LETSENCRYPT_PROPAGATION:-}"
  printf_cyan "DUCKDNS_CERTBOT_CONTAINER:        ${DUCKDNS_CERTBOT_CONTAINER:-}"
  ;;
update)
  shift 1
  __var_check "$1" "$2" "$3"
  __duckdns_update "$@"
  ;;
ssl | letsencrypt)
  shift 1
  if [ "$1" = "renew" ]; then
    shift 1
    __var_check "$1" "$2" "$3"
    __letsencrypt_renew
  elif [ "$1" = "cron" ]; then
    shift 1
    __var_check "$1" "$2" "$3"
    __letsencrypt_cron
  else
    [ "$1" = "create" ] && shift
    __var_check "$1" "$2" "$3"
    __letsencrypt_create
  fi
  exit $?
  ;;
cron)
  shift 1
  case "$1" in
  install)
    shift 1
    __var_check "$1" "$2" "$3"
    printf_exit "Not enabled yet"
    ;;
  remove)
    shift 1
    __var_check "$1" "$2" "$3"
    printf_exit "Not enabled yet"
    ;;
  run)
    shift 1
    __var_check "$1" "$2" "$3"
    __run_cron "$1"
    ;;
  *)
    __run_cron "$1"
    ;;
  esac
  ;;
*)
  __var_check "$1" "$2" "$3"
  __duckdns_update "$@"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
