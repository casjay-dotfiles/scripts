#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208070752-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-apache --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 07, 2022 07:52 EDT
# @@File             :  gen-apache
# @@Description      :  Generate a new apache host
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208070752-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_APACHE_REQUIRE_SUDO="${GEN_APACHE_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__printf_header() {
  __printf_head "##################################################"
  for line in "$@"; do __printf_line "$line"; done
  __printf_head "##################################################"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE"
  fi
  [ -d "$GEN_APACHE_CONFIG_DIR" ] || mkdir -p "$GEN_APACHE_CONFIG_DIR"
  [ -d "$GEN_APACHE_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_APACHE_CONFIG_BACKUP_DIR"
  [ -f "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE" ] &&
    cp -Rf "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE" "$GEN_APACHE_CONFIG_BACKUP_DIR/$GEN_APACHE_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE"
# Settings for gen-apache
GEN_APACHE_AUTHOR="${GEN_APACHE_AUTHOR:-}"
GEN_APACHE_PORT_SSL="${GEN_APACHE_PORT_SSL:-}"
GEN_APACHE_PORT_NONSSL="${GEN_APACHE_PORT_NONSSL:-}"
GEN_APACHE_WWW_USER_DIR="${GEN_APACHE_WWW_USER_DIR:-}"
GEN_APACHE_VHOST_USER_DIR="${GEN_APACHE_VHOST_USER_DIR:-}"
GEN_APACHE_WWW_SYSTEM_DIR_ROOT="${GEN_APACHE_WWW_SYSTEM_DIR_ROOT:-}"
GEN_APACHE_VHOST_SYSTEM_DIR="${GEN_APACHE_VHOST_DIR_ROOT:-}"
GEN_APACHE_LOCAL_IP="${GEN_APACHE_LOCAL_IP:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_APACHE_OUTPUT_COLOR_1="${GEN_APACHE_OUTPUT_COLOR_1:-}"
GEN_APACHE_OUTPUT_COLOR_2="${GEN_APACHE_OUTPUT_COLOR_2:-}"
GEN_APACHE_OUTPUT_COLOR_GOOD="${GEN_APACHE_OUTPUT_COLOR_GOOD:-}"
GEN_APACHE_OUTPUT_COLOR_ERROR="${GEN_APACHE_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_APACHE_NOTIFY_ENABLED="${GEN_APACHE_NOTIFY_ENABLED:-}"
GEN_APACHE_GOOD_NAME="${GEN_APACHE_GOOD_NAME:-}"
GEN_APACHE_ERROR_NAME="${GEN_APACHE_ERROR_NAME:-}"
GEN_APACHE_GOOD_MESSAGE="${GEN_APACHE_GOOD_MESSAGE:-}"
GEN_APACHE_ERROR_MESSAGE="${GEN_APACHE_ERROR_MESSAGE:-}"
GEN_APACHE_NOTIFY_CLIENT_NAME="${GEN_APACHE_NOTIFY_CLIENT_NAME:-}"
GEN_APACHE_NOTIFY_CLIENT_ICON="${GEN_APACHE_NOTIFY_CLIENT_ICON:-}"
GEN_APACHE_NOTIFY_CLIENT_URGENCY="${GEN_APACHE_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-apache:  Generate a new apache host - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-apache [options] [domain]"
  __printf_line "list                            - List server names and aliases"
  __printf_line "mydomain                        - Create a new Apache virtual host"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __user_is_root && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_APACHE_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_APACHE_REQUIRE_SUDO_RUN" ]; then
    export GEN_APACHE_REQUIRE_SUDO="no"
    export GEN_APACHE_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_APACHE_TEMP_FILE" ] && rm -Rf "$GEN_APACHE_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__get_httpd_domains() {
  local fileName="${1:-/etc/httpd/conf/vhosts.d}"
  grep --no-filename -sRE 'ServerName |ServerAlias ' "$fileName" 2>/dev/null | sed 's|ServerName ||g;s|ServerAlias ||g;s|;||' | tr ' ' '\n' | grep -Ev '#|^$|^\*' | grep '^'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_replace() {
  sed="$(builtin type -P gsed || builtin type -P sed)"
  find -L "$3" -type f -exec "$sed" -i 's#'$1'#'$2'#g' {} \; 2>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_apache_conf() {
  local DomainName="${GEN_APACHE_DOMAIN//,*/}"
  local ServerNames="${GEN_APACHE_DOMAIN//,/ }"
  local ServerAdmin="webmaster@${DomainName:-$HOSTNAME}"
  local template_file="${GEN_APACHE_TEMPLATE_NAME:-ssl}"
  local DomainName="${DomainName:-$HOSTNAME}"
  local ServerNames="${ServerNames:-$HOSTNAME}"
  [ -n "$DomainName" ] && [ -n "$ServerNames" ] || printf_exit "Can not determine env: GEN_APACHE_DOMAIN"
  [ -d "$GEN_APACHE_CONFIG_DIR" ] || mkdir -p "$GEN_APACHE_CONFIG_DIR"
  if [ -d "/etc/letsencrypt/live" ]; then
    SSL_LE=true
    if [ -d "/etc/letsencrypt/live/$(hostname -f)" ] && [ ! -e "/etc/letsencrypt/live/domain" ]; then
      __sudorun ln -sf "/etc/letsencrypt/live/$(hostname -f)" "/etc/letsencrypt/live/domain"
    fi
  else
    SSL_LE="false"
  fi
  if [ "$template_file" = "ssl" ] && [ "$SSL_LE" = "true" ]; then
    cat <<EOF | tee
## VirtualHost for $GEN_APACHE_DOMAIN

<IfModule mod_ssl.c>
<VirtualHost ${GEN_APACHE_LOCAL_IP:-_default_}:$GEN_APACHE_PORT_SSL>
ServerName $ServerNames
ServerAdmin $ServerAdmin
DocumentRoot "$GEN_APACHE_WWW_USER_DIR"

## LE Certs
SSLEngine on
SSLCertificateFile /etc/letsencrypt/live/domain/cert.pem
SSLCertificateKeyFile /etc/letsencrypt/live/domain/privkey.pem
SSLCertificateChainFile /etc/letsencrypt/live/domain/fullchain.pem

## Rewrites
RewriteEngine On
RewriteCond %{HTTPS} !=on
RewriteRule ^/?(.*) https://%{SERVER_NAME}/\$1 [R,L]

## Headers
#Header always set Strict-Transport-Security "max-age=31536000; preload"
#RequestHeader set Upgrade \$http_upgrade;
#RequestHeader set Connection "upgrade"
#RequestHeader set X-Forwarded-Proto "https"

## Set Proxy headers
<IfModule mod_proxy.c>
ProxyAddHeaders On
</IfModule>
</VirtualHost>
</IfModule>

EOF

  elif [ "$template_file" = "ssl" ] && [ "$SSL_LE" = "false" ]; then
    cat <<EOF | tee
## VirtualHost for $GEN_APACHE_DOMAIN

<IfModule mod_ssl.c>
<VirtualHost _default_:$GEN_APACHE_PORT_SSL>
ServerName $ServerNames
ServerAdmin $ServerAdmin
DocumentRoot "$GEN_APACHE_WWW_USER_DIR"

## letsencrypt cert
SSLEngine on
SSLCertificateFile /etc/ssl/CA/CasjaysDev/certs/localhost.crt
SSLCertificateKeyFile /etc/ssl/CA/CasjaysDev/private/localhost.key
#SSLCertificateChainFile /etc/ssl/CA/CasjaysDev/certs/localhost.crt

## Rewrites
RewriteEngine On
RewriteCond %{HTTPS} !=on
RewriteRule ^/?(.*) https://%{SERVER_NAME}/\$1 [R,L]

## Headers
#Header always set Strict-Transport-Security "max-age=31536000; preload"
#RequestHeader set Upgrade \$http_upgrade;
#RequestHeader set Connection "upgrade"
#RequestHeader set X-Forwarded-Proto "https"

## Set Proxy headers
<IfModule mod_proxy.c>
ProxyAddHeaders On
</IfModule>
</VirtualHost>
</IfModule>

EOF
  elif [ "$template_file" = "no_ssl" ]; then
    cat <<EOF | tee
## VirtualHost for $GEN_APACHE_DOMAIN

<VirtualHost _default_:$GEN_APACHE_PORT_NONSSL>
ServerName $ServerNames
ServerAdmin $ServerAdmin
DocumentRoot "$GEN_APACHE_WWW_USER_DIR"

</VirtualHost>

EOF
  fi
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configuration wizard
__configure_apache_vhosts() {
  __printf_header "Configuring the apache vhost"
  __apache_dom || __return__error
  __calculate_local_ip || __return__error
  __apache_www || __return__error
  __apache_confdir || __return__error
  __apache_conf || __return__error
  __apache_html || __return__error

  printf_newline
  if [ -f "$GEN_APACHE_VHOST_USER_DIR/$GEN_APACHE_DOMAIN.conf" ]; then
    __printf_header "Successfully created your configuration for $GEN_APACHE_DOMAIN" "$GEN_APACHE_VHOST_USER_DIR/$GEN_APACHE_DOMAIN.conf"
  else
    print_error "Failed to create $GEN_APACHE_VHOST_USER_DIR/$GEN_APACHE_DOMAIN.conf"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure domain
__apache_dom() {
  if [ -n "$GEN_APACHE_DOMAIN" ]; then
    GEN_APACHE_DOMAIN="${GEN_APACHE_DOMAIN:-}"
  else
    printf_read_input "4" "What is your domain name? [example.com]" "120" "GEN_APACHE_DOMAIN" ""
    if [ -z "$GEN_APACHE_DOMAIN" ]; then
      printf_red "domain name is required"
      return 1
    fi
  fi
  if [ -n "$GEN_APACHE_SSL" ]; then
    [ "$GEN_APACHE_SSL" = "yes" ] && GEN_APACHE_TEMPLATE_NAME="ssl" || GEN_APACHE_TEMPLATE_NAME="no_ssl"
  else
    printf_read_input "4" "Does your site support ssl? " "1" "SSL"
    [ "$SSL" = "y" ] && GEN_APACHE_TEMPLATE_NAME="ssl" || GEN_APACHE_TEMPLATE_NAME="no_ssl"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ensure every config gets a different ip
__calculate_local_ip() {
  local ips="" search=""
  search="$GEN_APACHE_LOCAL_IP"
  ips="$(grep -qs "$search" "/etc/hosts" && echo 'yes' || false)"
  if [ -n "$ips" ]; then
    new_ip="$(grep -sh "$search" "/etc/hosts" | grep '[0-9].[0-9]' | awk '{print $1}' | awk -F'.' '{print $NF}' | sort -nr | head -n1)"
    calc_ip=$((${new_ip:-0} + 1))
    set_ip="${GEN_APACHE_LOCAL_IP%.*}.$calc_ip"
  fi
  GEN_APACHE_LOCAL_IP="${GEN_APACHE_LOCAL_IP:-$set_ip}"
  if [ -z "$search" ]; then
    printf_read_input "4" "What is your local IP address? " "120" "GEN_APACHE_LOCAL_IP" "-i $GEN_APACHE_LOCAL_IP"
  fi
  if [ -n "$GEN_APACHE_LOCAL_IP" ]; then
    export GEN_APACHE_LOCAL_IP
  else
    printf_red "IP address is required"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure document root
__apache_www() {
  printf_read_input "4" "What is your DocumentRoot? " "120" "GEN_APACHE_WWW_USER_DIR" "-i $GEN_APACHE_WWW_USER_DIR"
  if [ -n "$GEN_APACHE_WWW_USER_DIR" ]; then
    GEN_APACHE_WWW_USER_DIR="${GEN_APACHE_WWW_USER_DIR:-}"
    [ -d "$GEN_APACHE_WWW_USER_DIR" ] || mkdir -p "$GEN_APACHE_WWW_USER_DIR"
  else
    printf_exit "DocumentRoot is required"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# determine apache configuration directory
__apache_confdir() {
  if [ -z "$GEN_APACHE_VHOST_SYSTEM_DIR" ]; then
    printf_read_input "4" "Where are your apache server files located? " "120" "GEN_APACHE_VHOST_SYSTEM_DIR" "-i $GEN_APACHE_VHOST_SYSTEM_DIR"
    if [ ! -d "$GEN_APACHE_VHOST_SYSTEM_DIR" ]; then
      if __user_is_root; then
        printf_read_question_nt "4" "The directory doesn't exist should I try to create it?"
        if printf_answer_yes; then sudo mkdir -p "$GEN_APACHE_VHOST_SYSTEM_DIR"; fi
      else
        printf_read_question_nt "4" "The directory doesn't exist should I try to create it?"
        if printf_answer_yes; then mkdir -p "$GEN_APACHE_VHOST_SYSTEM_DIR"; fi
      fi
    fi
  fi
  [ -d "$GEN_APACHE_VHOST_SYSTEM_DIR" ] || printf_exit "Can not create $GEN_APACHE_VHOST_SYSTEM_DIR"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__apache_html() {
  local template_dir="$CASJAYSDEVDIR/templates/html"
  local install_dir="$GEN_APACHE_WWW_USER_DIR/$GEN_APACHE_DOMAIN"
  copyright_year="$(date +'%Y')"
  author="${GEN_APACHE_AUTHOR:-$USER}"
  modified_on="$(date +'%a %b %d, %Y at %H:%M:%S %Z')"
  if [ -d "$CASJAYSDEVDIR/templates/html" ]; then
    printf_newline
    printf_green "Copying $APPNAME templates $template_dir"
    __mkd "$install_dir" && __cp_rf "$template_dir/." "$install_dir/"
    if [ "$(__count_files $install_dir)" -ne 0 ]; then
      __find_replace "GEN_SCRIPT_REPLACE_DOMAIN" "$GEN_APACHE_DOMAIN" "$install_dir"
      __find_replace "GEN_SCRIPT_REPLACE_YEAR" "$copyright_year" "$install_dir"
      __find_replace "GEN_SCRIPT_REPLACE_HTMLROOT" "$install_dir" "$install_dir"
      __find_replace "GEN_SCRIPT_REPLACE_MODIFIED" "$modified_on" "$install_dir"
      __find_replace "GEN_SCRIPT_REPLACE_TITLE" "$GEN_APACHE_DOMAIN" "$install_dir"
      __find_replace "GEN_SCRIPT_REPLACE_BODY" "<h3>Welcome to your new site</h3>" "$install_dir"
      __find_replace "GEN_SCRIPT_REPLACE_AUTHOR" "$author" "$install_dir"
      printf_green "Copying has succeeded > $install_dir"
      exitCodeT=0
    else
      printf_error "Copying of files has failed < $install_dir"
      exitCodeT=1
    fi
  fi
  echo ""
  export GEN_APACHE_WWW_USER_DIR="$install_dir"
  return $exitCodeT
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the configuration file
__apache_conf() {
  printf_newline
  __printf_header "Generating apache conf using the template $GEN_APACHE_TEMPLATE_NAME in:" "$GEN_APACHE_VHOST_USER_DIR" "using the ip: $GEN_APACHE_LOCAL_IP"
  cat <<EOF >"$GEN_APACHE_DEFAULT_VHOST_FILE"
$(__create_apache_conf)
EOF

}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# error function
__return__error() {
  printf_error "Something seems to have gone very wrong" 1>&2
  printf_yellow "File has been saved to $GEN_APACHE_DEFAULT_VHOST_FILE" 1>&2
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__setup_apache() {
  GEN_APACHE_DOMAIN="${1:-$(hostname -f)}"
  GEN_APACHE_VHOST_USER_DIR="${2:-$GEN_APACHE_VHOST_USER_DIR}"
  GEN_APACHE_WWW_USER_DIR="${3:-$GEN_APACHE_WWW_USER_DIR}"
  GEN_APACHE_DEFAULT_VHOST_FILE="$GEN_APACHE_VHOST_USER_DIR/$GEN_APACHE_DOMAIN.conf"
  GEN_APACHE_VHOST_SYSTEM_DIR="${GEN_APACHE_VHOST_SYSTEM_DIR:-$GEN_APACHE_VHOST_USER_DIR}"
  [ -d "$GEN_APACHE_WWW_USER_DIR" ] || mkdir -p "$GEN_APACHE_WWW_USER_DIR" |& __devnull
  [ -d "$GEN_APACHE_VHOST_USER_DIR" ] || mkdir -p "$GEN_APACHE_VHOST_USER_DIR" |& __devnull
  __configure_apache_vhosts
  sudo mkdir -p "$GEN_APACHE_WWW_SYSTEM_DIR_ROOT"
  if __can_i_sudo; then
    if ! grep -qs "$GEN_APACHE_DOMAIN" "/etc/hosts"; then
      echo "$GEN_APACHE_LOCAL_IP      $GEN_APACHE_DOMAIN" | sudo tee -p -a "/etc/hosts" &>/dev/null
    fi
    if [ "$GEN_APACHE_VHOST_USER_DIR/$GEN_APACHE_DOMAIN.conf" != "$GEN_APACHE_VHOST_SYSTEM_DIR/$GEN_APACHE_DOMAIN.conf" ]; then
      if [ -f "$GEN_APACHE_DEFAULT_VHOST_FILE" ]; then
        printf_green "Installing $GEN_APACHE_DEFAULT_VHOST_FILE"
        printf_green " to $GEN_APACHE_VHOST_USER_DIR/$GEN_APACHE_DOMAIN.conf"
        { [ -d "$GEN_APACHE_VHOST_SYSTEM_DIR" ] || sudo mkdir -p "$GEN_APACHE_VHOST_SYSTEM_DIR"; }
        sudo mv -f "$GEN_APACHE_DEFAULT_VHOST_FILE" "$GEN_APACHE_VHOST_SYSTEM_DIR/$GEN_APACHE_DOMAIN.conf" &&
          sudo mv -f "$GEN_APACHE_WWW_USER_DIR" "$GEN_APACHE_WWW_SYSTEM_DIR_ROOT" &&
          sudo find "$GEN_APACHE_WWW_USER_DIR" -type f -exec sed -i 's#'$GEN_APACHE_VHOST_USER_DIR'#'"${GEN_APACHE_DOMAIN}"'#g' {} \; >/dev/null 2>&1 &&
          sudo find "$GEN_APACHE_WWW_USER_DIR" -type f -exec sed -i 's#'$GEN_APACHE_VHOST_USER_DIR'#'"${GEN_APACHE_WWW_SYSTEM_DIR_ROOT}"'#g' {} \; >/dev/null 2>&1 &&
          exitCode=0 || exitCode=1
      fi
    fi
  else
    printf_red "Can not edit the system files due to no root privileges"
  fi
  exitCode=${exitCode:-0}
  if [ $exitCode -ne 0 ]; then
    __return__error
  else
    exitCode=0
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_APACHE_CONFIG_FILE="${GEN_APACHE_CONFIG_FILE:-settings.conf}"
GEN_APACHE_CONFIG_DIR="${GEN_APACHE_CONFIG_DIR:-$HOME/.config/myscripts/gen-apache}"
GEN_APACHE_CONFIG_BACKUP_DIR="${GEN_APACHE_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-apache/backups}"
GEN_APACHE_LOG_DIR="${GEN_APACHE_LOG_DIR:-$HOME/.local/log/gen-apache}"
GEN_APACHE_TEMP_DIR="${GEN_APACHE_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-apache}"
GEN_APACHE_CACHE_DIR="${GEN_APACHE_CACHE_DIR:-$HOME/.cache/gen-apache}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_APACHE_OUTPUT_COLOR_1="${GEN_APACHE_OUTPUT_COLOR_1:-33}"
GEN_APACHE_OUTPUT_COLOR_2="${GEN_APACHE_OUTPUT_COLOR_2:-5}"
GEN_APACHE_OUTPUT_COLOR_GOOD="${GEN_APACHE_OUTPUT_COLOR_GOOD:-2}"
GEN_APACHE_OUTPUT_COLOR_ERROR="${GEN_APACHE_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_APACHE_NOTIFY_ENABLED="${GEN_APACHE_NOTIFY_ENABLED:-yes}"
GEN_APACHE_GOOD_NAME="${GEN_APACHE_GOOD_NAME:-Great:}"
GEN_APACHE_ERROR_NAME="${GEN_APACHE_ERROR_NAME:-Error:}"
GEN_APACHE_GOOD_MESSAGE="${GEN_APACHE_GOOD_MESSAGE:-No errors reported}"
GEN_APACHE_ERROR_MESSAGE="${GEN_APACHE_ERROR_MESSAGE:-Errors were reported}"
GEN_APACHE_NOTIFY_CLIENT_NAME="${GEN_APACHE_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_APACHE_NOTIFY_CLIENT_ICON="${GEN_APACHE_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_APACHE_NOTIFY_CLIENT_URGENCY="${GEN_APACHE_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_APACHE_AUTHOR="${GEN_APACHE_AUTHOR:-$USER}"
GEN_APACHE_PORT_SSL="${GEN_APACHE_PORT_SSL:-8443}"
GEN_APACHE_PORT_NONSSL="${GEN_APACHE_PORT_NONSSL:-81}"
GEN_APACHE_DOMAIN="${GEN_APACHE_DOMAIN:-$(hostname -f)}"
GEN_APACHE_WWW_USER_DIR="${GEN_APACHE_WWW_USER_DIR:-$GEN_APACHE_CONFIG_DIR/files/www}"
GEN_APACHE_VHOST_USER_DIR="${GEN_APACHE_VHOST_USER_DIR:-$GEN_APACHE_CONFIG_DIR/files/vhosts}"
GEN_APACHE_WWW_SYSTEM_DIR_ROOT="${GEN_APACHE_WWW_SYSTEM_DIR_ROOT:-/var/www/html}"
GEN_APACHE_VHOST_SYSTEM_DIR="${GEN_APACHE_VHOST_DIR_ROOT:-/etc/httpd/vhosts.d}"
GEN_APACHE_LOCAL_IP="${GEN_APACHE_LOCAL_IP:-127.0.2.1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE" ] && . "$GEN_APACHE_CONFIG_DIR/$GEN_APACHE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_APACHE_LOG_DIR" ] || mkdir -p "$GEN_APACHE_LOG_DIR" |& __devnull
[ -d "$GEN_APACHE_TEMP_DIR" ] || mkdir -p "$GEN_APACHE_TEMP_DIR" |& __devnull
[ -d "$GEN_APACHE_CACHE_DIR" ] || mkdir -p "$GEN_APACHE_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_APACHE_TEMP_FILE="${GEN_APACHE_TEMP_FILE:-$(mktemp $GEN_APACHE_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp fileGEN_APACHE_WWW_SYSTEM_DIR_ROOT
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_APACHE_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_APACHE_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_APACHE_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_APACHE_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_APACHE_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_APACHE_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",template:ip:,ssl:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST="list "
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_APACHE_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_APACHE_CWD="$2"
    [ -d "$GEN_APACHE_CWD" ] || mkdir -p "$GEN_APACHE_CWD" |& __devnull
    shift 2
    ;;
  --template)
    GEN_APACHE_TEMPLATE_NAME="$2"
    [ "$GEN_APACHE_TEMPLATE_NAME" = "ssl" ] || [ "$GEN_APACHE_TEMPLATE_NAME" = "no_ssl" ] || printf_exit "Usage: $APPNAME --template [ssl,no_ssl]"
    shift 2
    ;;
  --ip)
    GEN_APACHE_LOCAL_IP="$2"
    shift 2
    ;;
  --ssl)
    GEN_APACHE_SSL="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_APACHE_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_APACHE_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && GEN_APACHE_CWD="$1" && shift 1 || GEN_APACHE_CWD="${GEN_APACHE_CWD:-$PWD}"
GEN_APACHE_CWD="$(realpath "${GEN_APACHE_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$GEN_APACHE_CWD" ] && cd "$GEN_APACHE_CWD"; then
# if [ "$GEN_APACHE_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_APACHE_CWD"
# fi
# else
# printf_exit "ðŸ’” $GEN_APACHE_CWD does not exist ðŸ’”"
# fi
export GEN_APACHE_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
if [ -d "/etc/apache2/sites-enabled" ]; then
  GEN_APACHE_VHOST_SYSTEM_DIR="/etc/apache2/sites-enabled"
elif [ -d "/etc/httpd/conf/vhosts.d" ]; then
  GEN_APACHE_VHOST_SYSTEM_DIR="/etc/httpd/conf/vhosts.d"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
list)
  shift 1
  if [ -d "/etc/httpd/conf/vhosts.d" ]; then
    for f in /etc/httpd/conf/vhosts.d/*; do
      confFile="$(basename -- "$f")"
      domain_list="$(__get_httpd_domains "$f")"
      for domain in $domain_list; do
        column=$((90 - ${#domain}))
        col="$(for i in $(seq 1 $column); do printf '%s' " "; done)"
        [ -n "$domain" ] && printf '%s: %s\n' "$domain$col" " $confFile" | printf_readline "$GEN_LINKS_OUTPUT_COLOR_1" || printf_red "httpd doesn't seem to have any configured domains in $f"
      done
    done
  else
    printf_exit "The directory /etc/httpd/conf/vhosts.d does not exist"
  fi
  exit
  ;;

*)
  __setup_apache "$@"
  exitCode=$?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
