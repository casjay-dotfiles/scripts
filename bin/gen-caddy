#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208071018-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-caddy --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 07, 2022 10:18 EDT
# @@File             :  gen-caddy
# @@Description      :  Setup caddy web server
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208071018-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_CADDY_REQUIRE_SUDO="${GEN_CADDY_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE"
  fi
  [ -d "$GEN_CADDY_CONFIG_DIR" ] || mkdir -p "$GEN_CADDY_CONFIG_DIR"
  [ -d "$GEN_CADDY_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_CADDY_CONFIG_BACKUP_DIR"
  [ -f "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE" ] &&
    cp -Rf "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE" "$GEN_CADDY_CONFIG_BACKUP_DIR/$GEN_CADDY_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE"
# Settings for gen-caddy
GEN_CADDY_PHP_VER="${GEN_CADDY_PHP_VER:-}"
GEN_CADDY_DEFAULT_USER="${GEN_CADDY_DEFAULT_USER:-}"
GEN_CADDY_NAME="${GEN_CADDY_NAME:-Caddy Web Server}"
GEN_CADDY_FILE_DIR="${GEN_CADDY_FILE_DIR:-}"
GEN_CADDY_CONFIG_DIR="${GEN_CADDY_CONFIG_DIR:-}"
GEN_CADDY_BIN_DIR="${GEN_CADDY_BIN_DIR:-}"
GEN_CADDY_BIN_FILE="${GEN_CADDY_BIN_FILE:-}"
GEN_CADDY_WWW_DIR="${GEN_CADDY_WWW_DIR:-}"
GEN_CADDY_LOG_DIR="${GEN_CADDY_LOG_DIR:-}"
GEN_CADDY_SERVER_FILE="${GEN_CADDY_SERVER_FILE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_CADDY_OUTPUT_COLOR_1="${GEN_CADDY_OUTPUT_COLOR_1:-}"
GEN_CADDY_OUTPUT_COLOR_2="${GEN_CADDY_OUTPUT_COLOR_2:-}"
GEN_CADDY_OUTPUT_COLOR_GOOD="${GEN_CADDY_OUTPUT_COLOR_GOOD:-}"
GEN_CADDY_OUTPUT_COLOR_ERROR="${GEN_CADDY_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_CADDY_NOTIFY_ENABLED="${GEN_CADDY_NOTIFY_ENABLED:-}"
GEN_CADDY_GOOD_NAME="${GEN_CADDY_GOOD_NAME:-}"
GEN_CADDY_ERROR_NAME="${GEN_CADDY_ERROR_NAME:-}"
GEN_CADDY_GOOD_MESSAGE="${GEN_CADDY_GOOD_MESSAGE:-}"
GEN_CADDY_ERROR_MESSAGE="${GEN_CADDY_ERROR_MESSAGE:-}"
GEN_CADDY_NOTIFY_CLIENT_NAME="${GEN_CADDY_NOTIFY_CLIENT_NAME:-}"
GEN_CADDY_NOTIFY_CLIENT_ICON="${GEN_CADDY_NOTIFY_CLIENT_ICON:-}"
GEN_CADDY_NOTIFY_CLIENT_URGENCY="${GEN_CADDY_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-caddy:  Setup caddy web server - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-caddy [options] [commands]"
  __printf_line "start                           - Start the caddy service"
  __printf_line "stop                            - Stop the caddy service"
  __printf_line "reload                          - Reload the caddy service"
  __printf_line "restart                         - Restart the caddy service"
  __printf_line "status                          - Get the status of caddy"
  __printf_line "service                         - Install caddy service"
  __printf_line "delete-service                  - Delete a caddy service"
  __printf_line "install                         - Install caddy with php"
  __printf_line "install --no-php               - Install only caddy without php"
  __printf_line "update                          - Update caddy"
  __printf_line "fixphp                          - Fix php install"
  __printf_line "installphp                      - Install php"
  __printf_line "edit                            - Edit a caddy config"
  __printf_line "uninstall                       - Delete a caddy installation"
  __printf_line "config                          - Create a caddy config file"
  __printf_line "html                            - Copy html templates"
  __printf_line "backup                          - Backup a caddy installation"
  __printf_line "restore                         - Restore a caddy installation"
  __printf_line "about                           - About caddy"
  __printf_line "help                            - This help"
  __printf_line "version                         - Display version"
  __printf_line "download                        - Update or download caddy binary"
  __printf_line "reverse [to] [from]             - Start a reverse proxy"
  __printf_line "check                           - test a caddy config file"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_line "--no-php                        - Skip PHP installation"
  __printf_line "--force                         - Force overwrite existing files"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo --preserve-env=PATH -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_CADDY_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_CADDY_REQUIRE_SUDO_RUN" ]; then
    export GEN_CADDY_REQUIRE_SUDO="no"
    export GEN_CADDY_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_CADDY_TEMP_FILE" ] && rm -Rf "$GEN_CADDY_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
howto() {
  printf_blue "Welcome to the $GEN_CADDY_NAME installer!"
  printf_blue "run $(tput setaf 3)$APPNAME help $(tput sgr0)for help"
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
about() {
  printf_blue "========================================================= "
  printf_blue "\             $GEN_CADDY_NAME Installer                   "
  printf_blue "\             Version: $VERSION                           "
  printf_blue "\             Caddy Web: Caddyserver.com                  "
  printf_blue "\             Created by CasjaysDev                       "
  printf_blue "========================================================= "
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_php_version() {
  local version="" distro=""
  if __cmd_exists php; then
    version="$(php --version | head -n1 | awk '{print $2}' | awk -F '.' '{print $1"."$2}')"
    echo "php$version"
  elif __cmd_exists php7; then
    version="$(php7 --version | head -n1 | awk '{print $2}' | awk -F '.' '{print $1"."$2}')"
    echo "php$version"
  elif __cmd_exists php; then
    version="php8"
    echo "php$version"
  else
    if hash apt-get 2>/dev/null; then
      DEBIAN9=$(lsb_release -i | awk 'NF{ print $NF }' | grep '^' || echo '')
      CODENAME=$(grep -shc/*-release | grep "VERSION_ID=" | cut -f1 -d'.' | cut -f2 -d'"' | grep '^' || echo '')
      # If debian 9 or above select php7
      if [ "$DEBIAN9" = 'Debian' ]; then
        CODENAME="0"
        DEBIAN9V=$(lsb_release -r | awk 'NF{ print $NF }' | cut -f1 -d'.' | grep '^' || echo '')
      fi
    fi
    # Setup PHP
    if [ -n "$CODENAME" ] && [ $CODENAME -gt 15 ]; then
      echo "php7.4"
    elif [ -n "$DEBIAN9V" ] && [ $DEBIAN9V -eq 9 ]; then
      echo "php7.4"
    elif [ -n "$DEBIAN9V" ] && [ $DEBIAN9V -ge 10 ]; then
      echo "php"
    elif __cmd_exists pacman; then
      echo php8
    else
      echo "php"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__caddy_user_install() {
  echo "$GEN_CADDY_BIN_FILE" | grep -q "$HOME" && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tar_downloaded() {
  tar xzf "$caddy_downloaded_filename" -C $GEN_CADDY_FILE_DIR &>/dev/null && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tar_backup() {
  tar -czf "$backupname" $GEN_CADDY_FILE_DIR $GEN_CADDY_CONFIG_DIR --absolute-names && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tar_restore() {
  tar -xzf "$backupname" --absolute-names && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
amiroot() {
  if [ "$EUID" -eq 0 ]; then
    return 0
  elif __caddy_user_install; then
    return 0
  else
    printf_red "Sorry, you need to run this as root"
    printf_red "Try running with command sudo $APPNAME $SETARGS"
    exit 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ps_aux() {
  ps -ax | grep -w '[c]addywebserver' | grep "run" | awk '{print $1}' | grep -v '^$' | tr '\n' ' ' | grep '^'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cat_pid() {
  [ -f "$GEN_CADDY_FILE_DIR/caddy.pid" ] && cat "$GEN_CADDY_FILE_DIR/caddy.pid"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_caddy_port() {
  [ -f "$GEN_CADDY_SERVER_FILE" ] &&
    grep ':' -s "$GEN_CADDY_SERVER_FILE" | sed 's|htt.*://||g;s|{||g' |
    awk -F ':' '{print $2}' | head -n1 | grep '[0-9]' | grep '^' ||
    echo "${GEN_CADDY_DOMAIN_PORT:-$(generate_random_port)}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_caddy_pid() {
  local pid=""
  if [ -s "$GEN_CADDY_FILE_DIR/caddy.pid" ]; then
    pid=$(__cat_pid || __ps_aux | grep '^')
  else
    pid=$(__ps_aux | grep '^')
  fi
  [ -n "$pid" ] && echo $pid || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_caddy_port() { netstat -taupln 2>/dev/null |
  grep 'LISTEN' | grep "${1:-$pids}" | tr ' ' '\n' | grep -Ev '^$|:\*' |
  grep ':' | sed 's|.*:||g' | grep -v '^$' || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_caddy_mem() { ps -axo rss,comm,pid | grep "${1:-$pids}" |
  awk '{$1/=1024;printf "%.0fMB\t",$1}{print $2}' | awk '{print $1}'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_caddy_uptime() { ps -p "${1:-$pids}" -oetime= 2>/dev/null | tr '-' ':' |
  awk -F: '{ total=0; m=1; } { for (i=0; i < NF; i++) {total += $(NF-i)*m; m *= i >= 2 ? 24 : 60 }} {print total}' |
  grep -v "^$" || return; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
move_bin() {
  [ -d "$GEN_CADDY_BIN_DIR" ] || mkdir -p "$GEN_CADDY_BIN_DIR"
  if [ -f "$GEN_CADDY_FILE_DIR/caddy" ]; then
    printf_blue "Moving $GEN_CADDY_FILE_DIR/caddy to $GEN_CADDY_BIN_FILE"
    mv -f "$GEN_CADDY_FILE_DIR/caddy" "$GEN_CADDY_BIN_FILE"
  fi
  [ -f "$GEN_CADDY_BIN_FILE" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
prms() {
  printf_blue "$APPNAME reverse port               - Proxy to localhost:PORT."
  printf_blue "$APPNAME start                      - Start $GEN_CADDY_NAME."
  printf_blue "$APPNAME stop                       - Stop/Shutdown $GEN_CADDY_NAME."
  printf_blue "$APPNAME reload                     - Reload $GEN_CADDY_NAME."
  printf_blue "$APPNAME restart                    - Restart $GEN_CADDY_NAME."
  printf_blue "$APPNAME status                     - Check $GEN_CADDY_NAME is running or not"
  printf_blue "$APPNAME install                    - Install $GEN_CADDY_NAME on fresh OS."
  printf_blue "$APPNAME install-naked              - Install only $GEN_CADDY_NAME and no prompt."
  printf_blue "$APPNAME edit                       - Edit Caddyfile using nano or default editor."
  printf_blue "$APPNAME service                    - Make $GEN_CADDY_NAME start on boot (upstart/systemd)."
  printf_blue "$APPNAME update                     - Update $GEN_CADDY_NAME."
  printf_blue "$APPNAME delete                     - Uninstall $GEN_CADDY_NAME and data."
  printf_blue "$APPNAME version                    - Print version information."
  printf_blue "$APPNAME about                      - About $GEN_CADDY_NAME Installer."
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
isinstalled() {
  # check if caddy is installed or return error code 1
  if [ ! -x "$GEN_CADDY_BIN_FILE" ] || [ ! -f "$GEN_CADDY_SERVER_FILE" ]; then
    echo
    printf_blue "Caddy is not installed."
    printf_blue "run $(tput setaf 3)$APPNAME install$(tput sgr0) to install $GEN_CADDY_NAME"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
get_hosts() {
  local hosts="" host=""
  hosts="$([ -f "$GEN_CADDY_SERVER_FILE" ] && cat "$GEN_CADDY_SERVER_FILE" | grep 'http' | awk '{printf $1}' | grep '^' || echo '')"
  if [ -n "$hosts" ]; then
    printf_blue "configured to serve the following domains"
    for host in $hosts; do
      printf_cyan "Host: $host"
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_caddy_server() {
  local statusCode=0
  if __caddy_user_install; then
    $GEN_CADDY_BIN_FILE start --config="$GEN_CADDY_SERVER_FILE" --pidfile="$GEN_CADDY_FILE_DIR/caddy.pid" --watch 2>&1 | tee -p "$GEN_CADDY_LOG_DIR/caddy.log" &>/dev/null || false &
    statusCode=$?
  else
    __sudo -HE -u "$GEN_CADDY_DEFAULT_USER" "$GEN_CADDY_BIN_FILE" start --config="$GEN_CADDY_SERVER_FILE" --pidfile="$GEN_CADDY_FILE_DIR/caddy.pid" --watch 2>&1 | tee -p "$GEN_CADDY_LOG_DIR/caddy.log" &>/dev/null || false &
    statusCode=$?
  fi
  sleep 1
  return $statusCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
startcaddy() {
  isinstalled || exit 1
  caddypid="$GEN_CADDY_FILE_DIR/caddy.pid"
  port="$(cat "$GEN_CADDY_SERVER_FILE" | head -n1 | sed 's|.*://||g;s| {||g' | awk -F ':' '{print $2}')"
  if [ ! -f "$caddypid" ]; then
    mkdir -p "$(dirname "$caddypid" 2>/dev/null)" || (
      printf_blue "error creating folder $caddypid" >&2
      printf_blue "try running with: sudo $APPNAME start" >&2
      exit 1
    ) || exit 1
    [ -f "$caddypid" ] && chown "$GEN_CADDY_DEFAULT_USER" "$caddypid"
  fi
  # Detect if running or start
  pids=$(__get_caddy_pid)
  pids="$(netstat -tauln | grep -v "2019" | grep -q "$port" && echo "$pids")"
  if [ -z "$pids" ]; then
    printf_blue "Starting $GEN_CADDY_NAME..."
    # If service exist use service
    if [ -e "/etc/init/caddy.conf" ] || [ -e "/etc/systemd/system/caddy.service" ]; then
      __cmd_exists service && __sudo service caddy start || __sudo systemctl start caddy
    else
      run_caddy_server
    fi
    sleep 1
    # restart or reload php for smooth environment
    hash php 2>/dev/null && restartphpfpm
    pids=$(__get_caddy_pid)
    caddystatus && printf_green "Caddy webserver is running" || printf_red "Error: $(tail -n1 $GEN_CADDY_LOG_DIR/caddy.log)"
  else
    printf_blue "$GEN_CADDY_NAME is already $(tput setaf 2)running$(tput sgr0) on ${RED}PORT $port: $pids (PID)${NC}"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
stopcaddy() {
  pids=$(__get_caddy_pid)
  caddypid="$GEN_CADDY_FILE_DIR/caddy.pid"
  if [ -z "$pids" ]; then
    printf_blue "$GEN_CADDY_NAME is $(tput setaf 1)NOT running$(tput sgr0)"
  else
    secs=$(ps -p "$pids" -oetime= | tr '-' ':' | awk -F: '{ total=0; m=1; } { for (i=0; i < NF; i++) {total += $(NF-i)*m; m *= i >= 2 ? 24 : 60 }} {print total}' || echo '0')
    printf_blue "Shutting down $GEN_CADDY_NAME..."
    # Wait if Caddy uptime is less than 5 seconds
    if [ $secs -lt 5 ]; then
      sleep 4
    fi
    if [ -e "/etc/init/caddy.conf" ] || [ -e "/etc/systemd/system/caddy.service" ]; then
      # Most arch based linux don't have service
      __cmd_exists service && __sudo service caddy stop || __sudo systemctl stop caddy
    else
      kill -9 "$pids" &>/dev/null
    fi
    if __caddy_user_install; then
      $GEN_CADDY_BIN_FILE stop &>/dev/null
    else
      __sudo -HE $GEN_CADDY_DEFAULT_USER $GEN_CADDY_BIN_FILE stop &>/dev/null
    fi
    sleep 1
    [ -f "$caddypid" ] && rm -Rf "$caddypid"
    printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
reloadcaddy() {
  pids=$(__get_caddy_pid)
  if [ -z "$pids" ]; then
    printf_blue "$GEN_CADDY_NAME is $(tput setaf 1)NOT running$(tput sgr0)"
    printf_blue "run $(tput setaf 3)$APPNAME start$(tput sgr0) to start Caddy"
  else
    printf_blue "Reloading $GEN_CADDY_NAME..."
    if [ -e "/etc/init/caddy.conf" ] || [ -e "/etc/systemd/system/caddy.service" ]; then
      # Headless server should have service
      __cmd_exists service && __sudo service caddy reload || __sudo systemctl reload caddy
    else
      kill -USR1 "$pids"
    fi
    sleep 2
    printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    printf_blue "To restart, use $(tput setaf 6)$APPNAME restart$(tput sgr0)"
    printf_blue "Refresh your browser at least 3 times to take affect"
    get_hosts
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
restartphpfpm() {
  local restartphpfpmMessage=""
  phpsetup &>/dev/null && printf_blue "Restarting PHP-FPM..."
  if [ -n "$getsphpervice" ]; then
    __sudo systemctl restart "$getsphpervice" &>/dev/null
    exitCode=$?
  elif [ -e "$ubuntuphp5fpm" ]; then
    # Ubuntu
    __sudo service php5-fpm restart &>/dev/null
    exitCode=$?
  elif [ -e "$centosphpfpm" ] || [ -e "$centosphpfpm2" ]; then
    # CentOS
    __sudo service php-fpm restart &>/dev/null
    exitCode=$?
  elif [ -e "$phpfpm7" ]; then
    # PHP 7
    phpfpm_init=$(find /etc/init.d/ -name "php*-fpm" | head -n 1)
    ${phpfpm_init} reload &>/dev/null
    exitCode=$?
  else
    printf_red "I can't find the php-fpm service"
    return 1
  fi
  if [ $exitCode -eq 0 ]; then
    printf_green "Service has been restarted"
    exitCode=0
  else
    printf_red "error restarting PHP-FPM"
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
caddystatus() {
  local port="" ports=""
  # Check if Caddy is installed or not
  isinstalled || exit 1
  # Detect Caddy process
  pids=$(__get_caddy_pid)
  if [ -z "$pids" ]; then
    printf_blue "$GEN_CADDY_NAME is $(tput setaf 1)NOT running$(tput sgr0)"
    return 1
  else
    secs=$(__get_caddy_uptime "$pids")
    caddyport=$(__get_caddy_port "$pids")
    caddymemusage=$(__get_caddy_mem "$pids")
    totalram="$(free -h | grep Mem: | awk '{print $7}')B"
    [ -n "$caddymemusage" ] || caddymemusage="N/A"
    if [ -z "$secs" ]; then
      caddyuptime="unknown"
    elif [ $secs -lt 120 ]; then
      caddyuptime="$secs seconds"
    elif [ $secs -lt 3600 ]; then
      caddyuptime=$(printf '%d minutes %d seconds\n' $(($secs % 3600 / 60)) $(($secs % 60)))
    elif [ $secs -lt 86400 ]; then
      caddyuptime=$(printf '%d hrs %d min %d sec\n' $(($secs / 3600)) $(($secs % 3600 / 60)) $(($secs % 60)))
    else
      caddyuptime=$(printf_blue $(($secs / 86400))" days, "$(date -d "1970-01-01 + $secs seconds" "+%H hrs %M min %S sec"))
    fi
    printf_cyan "$GEN_CADDY_NAME is $(tput setaf 2)running$(tput sgr0) $(tput setaf 8)(PID: $pids)$(tput sgr0)"
    printf_yellow "Caddy is using $caddymemusage of $totalram RAM"
    printf_blue "caddy has been up for $caddyuptime"
    for port in $caddyport; do
      ports+="$(echo -n "$port") "
    done
    printf_purple "Listening on port[s] $ports"
    get_hosts
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
getcaddy() {
  # Detect architecture
  OS="$(uname -s)"
  if uname -m | grep -q x86_64; then
    cpubits="amd64"
    cpubitsname="64bit..."
  elif uname -m | grep -q aarch64; then
    cpubits="arm64"
    cpubitsname="AArch64..."
  elif uname -m | grep -q 86; then
    cpubits="386"
    cpubitsname="32bit..."
  elif uname -m | grep -q armv5; then
    cpubits="arm5"
    cpubitsname="ARM 5..."
  elif uname -m | grep -q armv6l; then
    cpubits="arm6"
    cpubitsname="ARM 6..."
  elif uname -m | grep -q armv7l; then
    cpubits="arm7"
    cpubitsname="ARM 7..."
  else
    echo
    printf_blue "unsupported or unknown architecture"
    echo
    exit
  fi
  # Downloading Caddy
  local INSTALL=""
  os="$([ -n "$OS" ] && echo "$OS" | tr '[:upper:]' '[:lower:]' || echo 'linux')"
  curver="$(curl -q -LSsf https://api.github.com/repos/caddyserver/caddy/releases/latest | grep tag_name | sed 's/[^0-9\.]*//g' || echo '')"
  downurl="$([ -n "$curver" ] && echo "https://github.com/caddyserver/caddy/releases/download/v${curver}/caddy_${curver}_${os}_${cpubits}.tar.gz" || echo '')"
  isupdate="$1"
  nocert="--no-check-certificate"
  caddyBin="$(type -p caddy 2>/dev/null | grep -v "$GEN_CADDY_BIN_FILE" | grep '^' || echo "$GEN_CADDY_BIN_FILE")"
  caddy_downloaded_filename="/tmp/caddy_custom.tar.gz"
  [ -d "$GEN_CADDY_FILE_DIR" ] || mkdir -p "$GEN_CADDY_FILE_DIR"
  [ -n "$downurl" ] || printf_exit "Failed to get the download url from the api"
  if [ "$isupdate" = "update" ]; then
    caddyBin=""
    caddyversion=$("$GEN_CADDY_BIN_FILE" -version | awk '{print}')
    printf_blue "Found $caddyversion"
  fi
  if [ -f "$caddyBin" ]; then
    printf_yellow "Found caddy in: $caddyBin"
    ln -sf "$caddyBin" "$GEN_CADDY_BIN_FILE"
  else
    [ -f "$caddyBin" ] && __rm_rf "$caddyBin"
    printf_blue "Downloading caddy $curver for $os $cpubits from"
    printf_blue "$downurl"
    # Start downloading caddy now
    if ! wget -q $nocert "$downurl" -O "$caddy_downloaded_filename" 2>/dev/null; then
      printf_red "Error: Cannot download Caddy binary from"
      printf_blue "$downurl"
      exit 1
    fi
    # Extract Caddy to appropriate folder
    printf_blue "Extracting $GEN_CADDY_NAME to $GEN_CADDY_FILE_DIR..."
    if ! __tar_downloaded; then
      printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]: Cannot extract $caddy_downloaded_filename to $GEN_CADDY_FILE_DIR"
      exit 1
    fi
    move_bin
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
create_bin_link() {
  local bindir="" binname=""
  # Create symlink
  bindir="${1:-/usr/local/bin}"
  binname="$(basename -- "$GEN_CADDY_BIN_FILE" 2>/dev/null)"
  [ "$EUID" -ne 0 ] && [ -d "$HOME/.local/bin" ] && bindir="$HOME/.local/bin"
  if [ ! -e "$bindir/caddy" ]; then
    __ln_sf "$GEN_CADDY_BIN_FILE" "$bindir/$binname"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
installcaddy() {
  GEN_CADDY_BIN_NAME="$(basename -- "$GEN_CADDY_BIN_FILE" 2>/dev/null)"
  if [ -x "$GEN_CADDY_BIN_FILE" ]; then
    printf_blue "$GEN_CADDY_NAME is already installed in: $GEN_CADDY_BIN_FILE"
    [ -f "$GEN_CADDY_SERVER_FILE" ] || gen_caddy_config
    [ -f "$GEN_CADDY_SERVER_FILE" ] || exit 1
    echo && exit
  fi
  # Download caddy
  getcaddy
  # Deleting Caddy archive
  rm -f "$caddy_downloaded_filename"
  # move caddy binary to correct location
  move_bin
  # Php installation support for arch-linux will be implemented later
  if [ "$1" != "naked" ]; then
    __cmd_exists pacman || installphp
  fi
  # Creating non-root user
  if id -u "$GEN_CADDY_DEFAULT_USER" &>/dev/null; then
    printf_blue "User $GEN_CADDY_DEFAULT_USER already exists. Skipped!"
  else
    printf_blue "Creating user '$GEN_CADDY_DEFAULT_USER'..."
    __sudo useradd -r -d $GEN_CADDY_FILE_DIR -s /bin/false "$GEN_CADDY_DEFAULT_USER" -U &>/dev/null
    printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
  fi
  # Port setup
  printf_blue "Binding port using setcap..."
  if __cmd_exists setcap; then
    __sudo setcap cap_net_bind_service=+ep "$GEN_CADDY_BIN_FILE" &>/dev/null &&
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]" || printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]"
  elif __cmd_exists apt-get; then
    __sudo apt-get install libcap2-bin -yy &>/dev/null
    __sudo setcap cap_net_bind_service=+ep "$GEN_CADDY_BIN_FILE" &>/dev/null &&
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]" || printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]"
  else
    printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]"
  fi
  # Show success message on naked install
  if [ "$1" = "naked" ]; then
    printf_blue "Installed $GEN_CADDY_NAME to $GEN_CADDY_FILE_DIR"
  fi
  # Create symlink
  if __user_is_root || __can_i_sudo; then
    if [ ! -e "/usr/local/bin/$GEN_CADDY_BIN_NAME" ]; then
      __sudo ln -sf "$GEN_CADDY_BIN_FILE" "/usr/local/bin/$GEN_CADDY_BIN_NAME"
    fi
  elif [ ! -e "$HOME/.local/bin/$GEN_CADDY_BIN_NAME" ]; then
    ln -sf "$GEN_CADDY_BIN_FILE" "$HOME/.local/bin/$GEN_CADDY_BIN_NAME"
  fi
  # Create config file
  gen_caddy_config
  # Create update check file
  echo $(date +%s) >"$GEN_CADDY_TEMP_DIR/updatecheck"
  chmod -R 777 "$GEN_CADDY_TEMP_DIR/updatecheck"
  chown -R "$GEN_CADDY_DEFAULT_USER" "$GEN_CADDY_FILE_DIR"
  chown -R "$GEN_CADDY_DEFAULT_USER" "$GEN_CADDY_LOG_DIR"
  chown -R "$GEN_CADDY_DEFAULT_USER" "$GEN_CADDY_SERVER_FILE"
  [ -f "$GEN_CADDY_FILE_DIR/.installed" ] && date +'%Y-%m-%d %H:%M' >"$GEN_CADDY_FILE_DIR/.installed"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
compareVersion() {
  IFS='.' read -ra ver1 <<<"$1"
  IFS='.' read -ra ver2 <<<"$2"
  [ ${#ver1[@]} -gt ${#ver2[@]} ] && till=${#ver1[@]} || till=${#ver2[@]}
  for ((i = 0; i < ${till}; i++)); do
    local num1
    local num2
    [ -z ${ver1[i]} ] && num1=0 || num1=${ver1[i]}
    [ -z ${ver2[i]} ] && num2=0 || num2=${ver2[i]}
    if [ $num1 -gt $num2 ]; then
      printf_blue ">"
      return 0
    elif
      [ $num1 -lt $num2 ]
    then
      printf_blue "<"
      return 0
    fi
  done
  printf_blue "="
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
updatecaddy() {
  isinstalled || exit 1
  caddyversion=$("$GEN_CADDY_BIN_FILE" -version | sed -e 's/-/ /g' -e 's/[^0-9\. ]*//g' | awk '{print $1}')
  CADDYV=$(wget -qO- https://api.github.com/repos/caddyserver/caddy/releases/latest 2>/dev/null | grep tag_name | sed 's/[^0-9\.]*//g')
  isGreater=$(compareVersion "$CADDYV" "$caddyversion")
  if [ "$isGreater" != ">" ]; then
    printf_blue "Looks like you already have latest version installed."
    sleep 0.1
    exit
  fi
  # Download caddy
  getcaddy update
  sleep 0.1
  # Stop current process if found
  if [ -n "$pids" ]; then
    printf_blue "Caddy is running!"
    printf_blue "Stopping Caddy... $pids"
    stopcaddy
  fi
  # Delete Caddy folder
  printf_blue "Removing current $GEN_CADDY_NAME from $GEN_CADDY_BIN_FILE"
  sleep 0.2
  __rm_rf "${GEN_CADDY_BIN_FILE:?}"
  printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
  sleep 0.1
  # Extract Caddy to appropriate folder
  printf_blue "Extracting $GEN_CADDY_NAME to $GEN_CADDY_FILE_DIR..."
  if ! __tar_downloaded; then
    printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]"
    printf_blue "Error: Cannot extract $caddy_downloaded_filename"
    printf_red "Aborting......."
    exit 1
  fi
  printf_blue "$(tput setaf 2)[DONE]$(tput sgr0)"
  # move caddy binary to correct location
  move_bin
  # Granting owner access and required permission
  if id -u "$GEN_CADDY_DEFAULT_USER" >/dev/null 2>&1; then
    chown -R "$GEN_CADDY_DEFAULT_USER" $GEN_CADDY_FILE_DIR
  fi
  # Port setup
  __cmd_exists setcap && __sudo setcap cap_net_bind_service=+ep "$GEN_CADDY_BIN_FILE" &>/dev/null
  # Removing caddy archive and printing info
  echo $(date +%s) >$GEN_CADDY_TEMP_DIR/updatecheck
  chmod -R 777 "$GEN_CADDY_TEMP_DIR/updatecheck"
  rm -f "$caddy_downloaded_filename" # Deleting Caddy archive
  caddyversion=$("$GEN_CADDY_BIN_FILE" -version | awk '{print}')
  # create config file
  gen_caddy_config
  echo
  printf_blue "Updated to $caddyversion"
  echo
  [ -f "$GEN_CADDY_FILE_DIR/.installed" ] && date +'%Y-%m-%d %H:%M' >"$GEN_CADDY_FILE_DIR/.installed"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
installphp() {
  local PHP="$GEN_CADDY_PHP_VER"
  if [ -e "$GEN_CADDY_FILE_DIR" ]; then
    printf_read_question "5" "Are you gonna run php site? [y/N]: " "1" "option"
    case $option in
    [yY][eE][sS] | [yY])
      printf_blue "Installing required php files..."
      # Install PHP
      if __cmd_exists yum; then
        yum update -y &>/dev/null && __sudo yum install sed php-fpm php-cli php-curl curl sudo -y &>/dev/null
        printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
        printf_blue "Installed 'php-fpm php-cli php-curl curl sudo'"
        fixphpfpm
      elif __cmd_exists apt-get; then
        apt-get update -y &>/dev/null && __sudo apt-get install sed $PHP-fpm $PHP-cli $PHP-curl curl sudo -y &>/dev/null
        printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
        printf_blue "Installed '$PHP-fpm $PHP-cli $PHP-curl curl sudo'"
        fixphpfpm
      elif __cmd_exists php && __cmd_exists php-fpm; then
        printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
        printf_blue "Installed 'php-fpm php'"
        fixphpfpm
      else
        printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]"
      fi
      ;;
    *)
      printf_blue "PHP installation skipped!"
      ;;
    esac
  else
    printf_blue "Looks like Caddy was not installed!"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
phpfpm_init() {
  # ubuntuphp5fpm="/etc/php5/fpm/pool.d/www.conf"
  # centosphpfpm="/etc/php/fpm/pool.d/www.conf"
  # centosphpfpm2="/etc/php-fpm.d/www.conf"
  getcaddyphpfpm="$(find /etc/*php* -maxdepth 4 -type f -name 'caddy.conf' 2>/dev/null | grep 'www' | head -n1 | grep '^' || echo '')"
  if [ ! -f "$getcaddyphpfpm" ]; then
    getphpfpm="$(find /etc/*php* -maxdepth 4 -type f -name 'www.conf' 2>/dev/null | grep 'www' | head -n1 | grep '^' || echo '')"
  fi
  # phpfpm7="$(find /etc/php/*/fpm/pool.d/ -name 'www.conf' 2>/dev/null | grep '^' || echo '')"
  getsphpervice="$(systemctl list-unit-files | grep 'php.*-fpm' | awk '{print $1}' | grep '^php' | grep '^' || echo '')"
  if [ -n "$getphpfpm" ] && [ -e "$getphpfpm" ]; then
    phpfpm="$getphpfpm"
  # elif [ -n "$phpfpm7" ] && [ -e "$phpfpm7" ]; then
  # phpfpm="$phpfpm7"
  # elif [ -n "$centosphpfpm" ] && [ -e "$centosphpfpm" ]; then
  #   phpfpm="$centosphpfpm"
  # elif [ -n "$centosphpfpm2" ] && [ -e "$centosphpfpm2" ]; then
  #   phpfpm="$centosphpfpm2"
  # elif [ -n "$ubuntuphp5fpm" ] && [ -e "$ubuntuphp5fpm" ]; then
  #   phpfpm="$ubuntuphp5fpm"
  else
    phpfpm=""
  fi
  [ -f "$getcaddyphpfpm" ] && caddyphpfpm="$getcaddyphpfpm" && phpfpm="${getcaddyphpfpm}"
  if [ -n "$phpfpm" ]; then
    [ "$1" = "--show" ] && cat "$phpfpm" | grep 'listen = ' | awk -F' = ' '{print $2}' | grep '^'
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_phpfpm_conf() {
  cat <<EOF | sudo tee -p "${1:-$caddyphpfpm}" &>/dev/null
[caddy]
user = $phpuser
group = $phpgroup
listen = ${phpfpm_caddy:-$phplisten}
listen.backlog = 65535
listen.allowed_clients = 127.0.0.1
pm = ondemand
pm.max_children = 30
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 5
pm.status_path = /status
ping.path = /ping
ping.response = pong
clear_env = yes
access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"
slowlog = $GEN_CADDY_LOG_DIR/php-fpm_slow.log
access.log = $GEN_CADDY_LOG_DIR/php_fpm_caddy.access.log
php_admin_value[error_log] = $GEN_CADDY_LOG_DIR/php-fpm_error.log
env[PATH] = $HOME/.local/bin:/usr/local/bin:/usr/bin:/bin
env[HOSTNAME] = $HOSTNAME
env[TMP] = $GEN_CADDY_TEMP_DIR
env[TEMP] = $GEN_CADDY_TEMP_DIR
env[TMPDIR] = $GEN_CADDY_TEMP_DIR
php_flag[display_errors] = off
php_admin_flag[log_errors] = on

EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
phpsetup() {
  phpfpm_init
  [ -z "$phpfpm" ] || caddyphpfpmdir="$(dirname "$phpfpm" 2>/dev/null || echo '')"
  if [ -n "$DELETE_CADDY" ]; then
    if [ -f "$caddyphpfpmdir/caddy.conf" ]; then
      printf_red "Deleting $caddyphpfpmdir/caddy.conf"
      __sudo rm -Rf "$caddyphpfpmdir/caddy.conf" &>/dev/null
      return
    else
      return
    fi
  elif [ -n "$phpfpm" ] && [ -d "$caddyphpfpmdir" ]; then
    printf_blue "PHP-FPM config dir found: $caddyphpfpmdir"
    caddyphpfpm="$caddyphpfpmdir/caddy.conf"
    [ -f "$caddyphpfpm" ] || __gen_phpfpm_conf "$caddyphpfpm"
  fi
  [ -f "$caddyphpfpm" ] && [ -f "$caddyphpfpmdir/caddy.conf" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
phpfpm_user() {
  phpfpm_init
  grep -Rs "user =" ${phpfpm:-/etc/*php*/*fpm*/www.conf} | awk -F '=' '{print $2}' | sed 's|^.* ||g' | head -n1 | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
phpfpm_group() {
  phpfpm_init
  grep -Rhs "group =" ${phpfpm:-/etc/*php*/*fpm*/www.conf} | awk -F '=' '{print $2}' | sed 's|^.* ||g' | head -n1 | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
phpfpm_listen() {
  phpfpm_init
  grep -Rhs "listen =" ${phpfpm:-/etc/*php*/*fpm*/www.conf} | awk -F '=' '{print $2}' | sed 's|^.* ||g' | head -n1 | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
phpfpm_caddy() {
  phpfpm_init
  grep -Rhs "php_fastcgi " "$GEN_CADDY_SERVER_FILE" | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fixphpfpm() {
  phpsetup &>/dev/null
  getuser="$(phpfpm_user)"
  getgroup="$(phpfpm_group)"
  phpuser="${getuser:-www-data}"
  phpgroup="${getgroup:-www-data}"
  phplisten="$(generate_random_port || echo '9001')"
  echo -en "$phplisten" | grep -qE ":[0-9]" || phplisten="127.0.0.1:$phplisten"
  __user_is_not_root && phpuser="$USER"
  __user_is_not_root && phpgroup="$USER"
  [ "$phpuser" = "" ] && phpuser="$GEN_CADDY_DEFAULT_USER"
  [ "$getgroup" = "" ] && phpgroup="$GEN_CADDY_DEFAULT_USER"
  [ -n "$caddyphpfpm" ] && sudo touch "$caddyphpfpm"
  if [ -f "$caddyphpfpm" ]; then
    printf_yellow "Fixing php-fpm user and group..."
    printf_purple "in $caddyphpfpm"
    __gen_phpfpm_conf "$caddyphpfpm"
  else
    # Detect php5-fpm or php-fpm
    printf_blue "Fixing php sock issue..."
    # PHP 5-7
    if [ -e "$phpfpm" ]; then
      __can_i_sudo && sudo sed -i 's@user = .*@user = '$phpuser'@g' "$phpfpm"
      __can_i_sudo && sudo sed -i 's@group = .*@group = '$phpuser'@g' "$phpfpm"
      __can_i_sudo && sudo sed -i 's@listen = .*@listen = '$fpmport'@g' "$phpfpm"
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    #Ubuntu
    elif [ -e "$ubuntuphp5fpm" ]; then
      __can_i_sudo && sudo sed -i "s@user = .*@user = $phpuser@g" "$ubuntuphp5fpm"
      __can_i_sudo && sudo sed -i "s@group = .*@group = $phpuser@g" "$ubuntuphp5fpm"
      __can_i_sudo && sudo sed -i 's@listen = .*@listen = '$fpmport'@g' "$ubuntuphp5fpm"
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    # CentOS
    elif [ -e "$centosphpfpm" ]; then
      __can_i_sudo && sudo sed -i "s@user = .*@user = $phpuser@g" "$centosphpfpm"
      __can_i_sudo && sudo sed -i "s@group = .*@group = $phpuser@g" "$centosphpfpm"
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    # CentOS 2
    elif [ -e "$centosphpfpm2" ]; then
      __can_i_sudo && __sudo sed -i "s@user = .*@user = $phpuser@g" "$centosphpfpm2"
      __can_i_sudo && __sudo sed -i "s@group = .*@group = $phpuser@g" "$centosphpfpm2"
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    # PHP 7
    elif [ -e "$phpfpm7" ]; then
      __can_i_sudo && sudo sed -i "s@user = .*@user = $phpuser@g" "$phpfpm7"
      __can_i_sudo && sudo sed -i "s@group = .*@group = $phpuser@g" "$phpfpm7"
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    else
      printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]"
      printf_blue "php not found!"
    fi
  fi
  restartphpfpm && exitCode=0 || exitCode=1
  [ -n "$restartphpfpmMessage" ] && $restartphpfpmMessageColor "$restartphpfpmMessage"
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
make_example_html() {
  # Create example html
  GEN_CADDY_WWW_DIR="${1:-$GEN_CADDY_WWW_DIR}"
  [ -n "$FORCE_INSTALL" ] && __rm_rf "$GEN_CADDY_WWW_DIR"
  [ -d "$GEN_CADDY_WWW_DIR" ] || mkdir -p "$GEN_CADDY_WWW_DIR"
  if [ -f "$GEN_CADDY_WWW_DIR/.installed" ]; then
    printf_blue "$GEN_CADDY_WWW_DIR/index.html found. Skipped!"
  else
    __cp_rf "$CASJAYSDEVDIR/templates/html/." "$GEN_CADDY_WWW_DIR/"
    printf_blue "Template HTML Documents copied"
    printf_blue "$GEN_CADDY_WWW_DIR"
    date +'%Y%m%d%H%M' | tee -p "$GEN_CADDY_WWW_DIR/.installed" &>/dev/null
  fi
  #
  YEAR="$(date +'%Y')"
  MODIFIED_ON="$(date)"
  # phpinfo
  if [ -f "$GEN_CADDY_WWW_DIR/info.php" ]; then
    printf_blue "$GEN_CADDY_WWW_DIR/info.php found. Skipped!"
  else
    echo -e "<?php phpinfo(); ?>\n" >"$GEN_CADDY_WWW_DIR/info.php"
    printf_blue "$GEN_CADDY_WWW_DIR/info.php file created"
  fi
  sed -i "s|GEN_SCRIPT_REPLACE_MODIFIED|$MODIFIED_ON|g" "$GEN_CADDY_WWW_DIR/index.html"
  __find_replace "GEN_SCRIPT_REPLACE_YEAR" "$YEAR" "$GEN_CADDY_WWW_DIR"
  __find_replace "GEN_SCRIPT_REPLACE_DOMAIN" "$domainname" "$GEN_CADDY_WWW_DIR"
  __find_replace "GEN_SCRIPT_REPLACE_HTMLROOT" "$GEN_CADDY_WWW_DIR" "$GEN_CADDY_WWW_DIR"
  __find_replace "GEN_SCRIPT_REPLACE_AUTHOR" "$GEN_CADDY_DEFAULT_USER" "$GEN_CADDY_WWW_DIR"
  __sudo chown -Rf "$GEN_CADDY_DEFAULT_USER:$GEN_CADDY_DEFAULT_USER" "$GEN_CADDY_WWW_DIR"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
generate_random_port() {
  __run() { cat "/dev/urandom" | od -N2 -An -i | awk -v f=2000 -v r=65000 '{printf "%i\n", f + r * $1 / 65536}'; }
  __number() { [ $number -lt 65000 ] && echo "$number" || number="$(__run)"; }
  number="$(__run)"
  while :; do
    if netstat -taupln 2>/dev/null | grep 'LISTEN' | grep -q ":$number "; then
      number="$(__run)"
      exitCode=1
    else
      exitCode=0
      break
    fi
    sleep 0.1
  done
  __number
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
checkconfigfile() {
  if checkconfig &>/dev/null; then
    if [ "$1" = "json" ]; then
      checkconfig 2>&1 | jq -rc '.' 2>/dev/null
      return $?
    else
      printf_blue "Caddyfile is valid and is configured for $domainnameport"
      return
    fi
  else
    printf_red "$GEN_CADDY_SERVER_FILE is not valid"
    printf_blue "$GEN_CADDY_BIN_FILE validate --config $GEN_CADDY_SERVER_FILE --adapter caddyfile"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
gen_caddy_config() {
  local fpmport newport domainname="" update_caddyfile=""
  phpsetup
  newport="$GEN_CADDY_DOMAIN_PORT"
  fpmport="127.0.0.1:${phpfpm_listen:-$(phpfpm_init --show | awk -F':' '{print $2}' | grep '^' || echo '9001')}"
  move_bin &>/dev/null
  [ -n "$1" ] && domainname="$1"
  [ -d "$GEN_CADDY_SERVER_DIR" ] || mkdir -p "$GEN_CADDY_SERVER_DIR"
  if [ -n "$phplisten" ]; then
    phpsock="$phplisten"
  # Ubuntu
  elif [ -n "$phpfpm" ] && [ -e "$phpfpm" ]; then
    phpsock=$(grep -Rhs "listen = *." "$phpfpm" | head -n1 | awk -F':' '{print $2}' | grep -v '^$')
  elif [ -n "$ubuntuphp5fpm" ] && [ -e "$ubuntuphp5fpm" ]; then
    phpsock=$(grep -Rhs "listen = *." "$ubuntuphp5fpm" | head -n1 | awk -F':' '{print $2}' | grep -v '^$')
  # CentOS
  elif [ -n "$centosphpfpm" ] && [ -e "$centosphpfpm" ]; then
    phpsock=$(grep -Rhs "listen = *." "$centosphpfpm" | head -n1 | awk -F':' '{print $2}' | grep -v '^$')
  # CentOS 2
  elif [ -n "$centosphpfpm2" ] && [ -e "$centosphpfpm2" ]; then
    phpsock=$(grep -Rhs "listen = *." "$centosphpfpm2" | head -n1 | awk -F':' '{print $2}' | grep -v '^$')
  # PHP 7
  elif [ -n "$phpfpm7" ] && [ -e "$phpfpm7" ]; then
    phpsock=$(grep -Rhs "listen = *." "$phpfpm7" | head -n1 | awk -F':' '{print $2}' | grep -v '^$')
  else
    phpsock="127.0.0.1:${fpmport:-9000}"
  fi
  fpmport="${phpsock:-$fpmport}"
  # Check if Caddyfile exist & Generate Caddyfile
  printf_blue "Enter your domain name seperated by comma"
  printf_read_input "5" "Domain protocol: [http/https]" "200" domainproto "-i http"
  [ -n "$domainname" ] || printf_read_input "5" "Domain name: " "200" domainname "-i ${HOSTNAME:-localhost}"
  printf_read_input "5" "Domain port: " "200" domainport "-i :${newport:-85}"
  #printf_read_input "5" "Config name:" "200" config_file "-i $GEN_CADDY_SERVER_DIR/$domainname"
  GEN_CADDY_DOMAIN_NAME="$domainname"
  config_file="$GEN_CADDY_SERVER_DIR/$domainname"
  grep -qs "$domainport" "$GEN_CADDY_SERVER_FILE" && domainport=":$(generate_random_port)"
  GEN_CADDY_DOMAIN_PORT="$domainport"
  update_caddyfile="$(grep -Eqs "$domainname$domainport|root.*/$domainname" "$GEN_CADDY_SERVER_FILE" || echo "true")"
  if echo "$domainname" | grep -q ','; then
    domainlist=$(echo "$domainname" | tr ',' '\n' | grep -v '^$' | tr '\n' ' ')
    for domains in $domainlist; do
      domainnameport+="${domainproto}://${domains}${domainport},"
      echo domainnameport+="${domainproto}://${domains}${domainport}" >>"$GEN_CADDY_CONFIG_DIR/domains.txt"
    done
  else
    domainnameport="${domainproto}://${domainname}${domainport}"
    echo domainnameport+="${domainproto}://${domainname}${domainport}" >>"$GEN_CADDY_CONFIG_DIR/domains.txt"
  fi
  GEN_CADDY_WWW_DIR="$GEN_CADDY_WWW_DIR/$(echo "$domainname" | awk -F',' '{print $1}' | sed 's|http.*//||g;s|:.*||g')"
  if grep -qs "$domainnameport" "$config_file"; then
    printf_blue "Looks like domain already already exist in: $config_file"
  else
    # Check if its going to run locally
    if [ "$domainname" = "localhost" ] || [[ "$domainname" = localhost:* ]] || [[ "$domainname" = 127.0.0* ]] || [[ "$domainname" = 192.168.* ]] || [[ "$domainname" = 10.*.* ]] || [[ "$domainname" = 172.16.* ]]; then
      printf_blue "SSL is disabled on non-production server."
    else
      printf_blue "Enter your email for automated ssl: [off]"
      printf_read_input "5" "Email: " "200" domainmail '-e'
      until [[ "$domainmail" = *@*.* ]] || [ "$domainmail" = "off" ]; do
        printf_blue "Invalid email: Type $(tput setaf 3)off$(tput sgr0) if you don't want https"
        printf_read_input "5" "Email: " "200" domainmail '-e'
      done
    fi
    if [ "$domainmail" = "off" ]; then
      domainmail=""
      makeconfig "$domainnameport" | tee -p "$config_file" &>/dev/null
    else
      makeconfig ssl "$domainnameport" | tee -p "$config_file" &>/dev/null
    fi
    if [ ! -f "$GEN_CADDY_SERVER_FILE" ] || [ "$update_caddyfile" = "true" ]; then
      [ -f "$config_file" ] && cat "$config_file" >>"$GEN_CADDY_SERVER_FILE"
    fi
    checkconfigfile || exit 10
  fi
  if [ -f "$config_file" ]; then
    cp -Rf "$config_file" "$config_file.orig"
    # caddy adapt --config "$config_file" 2>/dev/null | jq | sudo tee -p "$config_file.tmp" &>/dev/null
    # mv -f "$config_file.tmp" "$config_file"
  fi
  # Check if GEN_CADDY_WWW_DIR exist
  [ -d "$GEN_CADDY_WWW_DIR" ] || mkdir -p "$GEN_CADDY_WWW_DIR"
  [ -d "$GEN_CADDY_LOG_DIR" ] || mkdir -p "$GEN_CADDY_LOG_DIR"

  # fix permissions
  touch "$GEN_CADDY_LOG_DIR" &>/dev/null
  __sudo chown -Rf $USER:$USER "$GEN_CADDY_LOG_DIR"
  __sudo chown -Rf $USER:$USER "$GEN_CADDY_CONFIG_DIR"
  # Generate example html
  make_example_html "$GEN_CADDY_WWW_DIR"
  printf_blue "Done. Caddy has been installed :)"
  printf_blue "Run $(tput setaf 3)$APPNAME start --caddyfile=\"Caddyfile\"$(tput sgr0) ${GREEN}to start $GEN_CADDY_NAME${NC}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
global_config() {
  https_port="$(generate_random_port)"
  fulldomain="${2:-${1:-$domainnameport}}"
  sslfulldomain="$(echo "$domainnameport" | sed 's/^http:\/\//https:\/\//g')"
  netstat -taupln 2>/dev/null | grep -q ":$https_port " || https_port="$(generate_random_port)"
  if [ "$1" = "all" ]; then
    cat <<EOF | tee
$fulldomain,$sslfulldomain
EOF
  elif [ "$1" = "ssl" ]; then
    cat <<EOF | tee
$sslfulldomain
EOF
  else
    cat <<EOF | tee
$fulldomain
EOF
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
checkconfig() {
  [ -f "$GEN_CADDY_SERVER_FILE" ] || { printf_red "Failed to create $GEN_CADDY_SERVER_FILE" && return 1; }
  if $GEN_CADDY_BIN_FILE validate --config "$GEN_CADDY_SERVER_FILE" --adapter caddyfile 2>&1 | grep -q 'caddy fmt'; then
    $GEN_CADDY_BIN_FILE fmt "$GEN_CADDY_SERVER_FILE" >"$GEN_CADDY_SERVER_FILE.fmt"
    mv -f "$GEN_CADDY_SERVER_FILE.fmt" "$GEN_CADDY_SERVER_FILE"
  fi
  $GEN_CADDY_BIN_FILE validate --config "$GEN_CADDY_SERVER_FILE" --adapter caddyfile &&
    return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
makeconfig() {
  phpfpm_caddy="$(phpfpm_caddy)"
  local domain_name="${2:-${1:-$domainnameport}}"
  [ -d "$GEN_CADDY_LOG_DIR" ] || mkdir -p "$GEN_CADDY_LOG_DIR" &>/dev/null
  if [ "$1" = "ssl" ]; then
    shift 1
    port="$(global_config ssl $domain_name)"
    cat <<EOF | tee
$port {
  root * $GEN_CADDY_WWW_DIR
  file_server {
    index index.php index.cgi index.asp index.aspx index.pl index.json index.txt index.aspx Default.aspx default.aspx index.shtml awstats.pl index.html index.html.var index.unknown.php index.default.php
  }
  encode gzip
  tls ${domainmail:-internal}
  php_fastcgi $fpmport
  log {
    output file $GEN_CADDY_LOG_DIR/access.log
    }
}

EOF
  elif [ "$1" = "example" ]; then
    shift 1
    port="$(global_config all $domain_name)"
    cat <<EOF | tee
$port {
  root * $GEN_CADDY_WWW_DIR
  file_server {
    index index.php index.cgi index.asp index.aspx index.pl index.json index.txt index.aspx Default.aspx default.aspx index.shtml awstats.pl index.html index.html.var index.unknown.php index.default.php
  }
  encode gzip
  tls ${domainmail:-internal}
  php_fastcgi $fpmport
  log {
    output file $GEN_CADDY_LOG_DIR/access.log
    }
  rewrite /t1 /t1/
  handle /t1/* {
    uri strip_prefix /t1
    root * /home/username/app/Test/t1/dist
    file_server {
      index index.php index.cgi index.asp index.aspx index.pl index.json index.txt index.aspx Default.aspx default.aspx index.shtml awstats.pl index.html index.html.var index.unknown.php index.default.php
    }
  }

  rewrite /t2 /t2/
  handle /t2/* {
    uri strip_prefix /t2
    root * /home/username/app/Test/t2/dist
      file_server {
        index index.php index.cgi index.asp index.aspx index.pl index.json index.txt index.aspx Default.aspx default.aspx index.shtml awstats.pl index.html index.html.var index.unknown.php index.default.php
      }
    }
}

EOF
  elif [ "$1" = "reverse" ]; then
    shift 1
    port="$(global_config $domain_name)"
    cat <<EOF | tee
$port {
  reverse_proxy localhost:3333
}

EOF
  else
    port="$(global_config $domain_name)"
    cat <<EOF | tee
$port {
  root * $GEN_CADDY_WWW_DIR
  file_server {
    index index.php index.cgi index.asp index.aspx index.pl index.json index.txt index.aspx Default.aspx default.aspx index.shtml awstats.pl index.html index.html.var index.unknown.php index.default.php
  }
  encode gzip
  php_fastcgi $fpmport
  log {
    output file $GEN_CADDY_LOG_DIR/access.log
    }
}

EOF
  fi
  domainnameport="$port"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
makeservice() {
  __can_i_sudo || return
  nocert="--no-check-certificate"
  init=$(cat /proc/1/comm)
  printf_blue "Creating startup service..."
  [ "$UID" = 0 ] && servicename="root" || servicename="$USER"
  if [ "$init" = 'systemd' ]; then
    MAIN="$"
    MAINPID="MAINPID"
    __sudo rm -f "/etc/systemd/system/caddy-${servicename}.service"
    cat <<EOF | sudo tee -p /etc/systemd/system/caddy-${servicename}.service &>/dev/null
[Unit]
Description=Caddy HTTP/2 web server
Documentation=https://caddyserver.com/docs
After=network-online.target
Requires=network-online.target

[Service]
User=$GEN_CADDY_DEFAULT_USER
Group=$GEN_CADDY_DEFAULT_USER
StartLimitInterval=86400
StartLimitBurst=5
LimitNOFILE=16535
ExecStart=$GEN_CADDY_BIN_FILE start --watch --config="$GEN_CADDY_SERVER_FILE" --pidfile=$GEN_CADDY_FILE_DIR/caddy.pid
ExecReload=/bin/kill -USR1 $MAIN$MAINPID
ExecStop=/bin/kill $MAIN$MAINPID
PIDFile=$GEN_CADDY_FILE_DIR/caddy.pid

[Install]
WantedBy=multi-user.target
EOF
    __sudo chmod -Rf 0644 "/etc/systemd/system/caddy.service"
    __sudo systemctl daemon-reload &>/dev/null
    __sudo systemctl enable caddy &>/dev/null
    __sudo systemctl restart caddy &>/dev/null
    printf_blue "$(tput setaf 2)DONE$(tput sgr0)"
  elif [ -d "/etc/init.d/caddy.sh" ]; then
    # Download
    __sudo wget -q $nocert "https://raw.githubusercontent.com/sayem314/Caddy-Web-Server-Installer/master/php-fpm/runcaddy.sh" -O "/etc/init.d/caddy.sh" 2>/dev/null
    __sudo chmod +x "/etc/init.d/caddy.sh"
    # Enable
    if __cmd_exists yum; then
      __sudo chkconfig caddy.sh on
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    elif __cmd_exists apt-get; then
      printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
      __sudo update-rc.d caddy.sh defaults
    else
      printf_blue "[$(tput setaf 1)FAILED$(tput sgr0)]"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
deletecaddy() {
  if [ -e "$GEN_CADDY_BIN_FILE" ] || [ -f "$GEN_CADDY_FILE_DIR/.installed" ]; then
    pids=$(__get_caddy_pid)
    printf_blue "Are you sure you want to uninstall Caddy web server? [y/N]"
    printf_read_question "5" "Select an option: " "1" "option"
    case $option in
    [yY][eE][sS] | [yY])
      # Stop caddy if running
      if [ -n "$pids" ]; then
        printf_blue "Found Caddy is running!"
        stopcaddy
        sleep 2
      fi
      __caddy_user_install && kill -9 "$pids" &>/dev/null || __sudo kill -9 "$pids" &>/dev/null
      sleep 1
      # Disable and remove startup script if exist
      removeservice
      # Backup Caddyfile if exists, usually on /etc/Caddyfile.
      if [ -f "$GEN_CADDY_CONFIG_DIR" ]; then
        cp -Rf $GEN_CADDY_CONFIG_DIR $GEN_CADDY_CONFIG_DIR.$$ 2>/dev/null
        printf_blue "Backup of current Caddy config dir saved to $GEN_CADDY_CONFIG_DIR.$$"
      fi
      # Remove Caddy web server folder, usually on /opt/caddyserver.
      [ -f "$GEN_CADDY_BIN_FILE" ] && __rm_rf "$GEN_CADDY_BIN_FILE"
      # Now remove Caddyfile
      __rm_rf "$GEN_CADDY_CONFIG_DIR" &>/dev/null
      # Prompt if data should be removed
      if [ -d "$GEN_CADDY_WWW_DIR" ]; then
        printf_blue "$GEN_CADDY_NAME has been deleted."
        deletecaddydata
      else
        # remove caddy user
        if [ ! "$GEN_CADDY_DEFAULT_USER" = "$(whoami)" ]; then
          if id -u "$GEN_CADDY_DEFAULT_USER" >/dev/null 2>&1; then
            hash php 2>/dev/null && fixphpfpm
            restartphpfpm
            __sudo userdel -f -r "$GEN_CADDY_DEFAULT_USER" &>/dev/null # delete caddy user
            printf_blue "$GEN_CADDY_NAME and Caddy user '$GEN_CADDY_DEFAULT_USER' has been deleted."
          fi
        fi
      fi
      [ -d "$GEN_CADDY_LOG_DIR" ] && __rm_rf "$GEN_CADDY_LOG_DIR" &>/dev/null
      [ -d "$GEN_CADDY_FILE_DIR" ] && __rm_rf "$GEN_CADDY_FILE_DIR" &>/dev/null
      exit
      ;;
    [nN][oO] | [nN])
      printf_red "Aborting......."
      exit
      ;;
    *)
      printf_blue "Incorrect input, exiting! "
      exit
      ;;
    esac
  else
    printf_blue "Looks like Caddy is not installed!"
    [ -e "$GEN_CADDY_FILE_DIR" ] && __rm_rf "$GEN_CADDY_FILE_DIR"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
removeservice() {
  if [ -e "/etc/init/caddy.conf" ] || [ -e "/etc/systemd/system/caddy.service" ]; then
    init=$(cat /proc/1/comm)
    printf_blue "Removing startup service..."
    if [ "$init" = "systemd" ]; then
      __sudo systemctl disable caddy &>/dev/null
      __sudo systemctl daemon-reload &>/dev/null
      __sudo rm -f "/etc/systemd/system/caddy.service" &>/dev/null
    elif [ "$init" = "init" ]; then
      __sudo update-rc.d -f caddy.sh remove
      __sudo rm -f /etc/init/caddy.conf &>/dev/null
    fi
    printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
deletecaddydata() {
  totalsize=$(du -sh $GEN_CADDY_WWW_DIR)
  totalfiles=$(find $GEN_CADDY_WWW_DIR -type f | wc -l)
  printf_blue "Would you also like to delete data?"
  printf_blue "Size: $totalsize (Files: $totalfiles)"
  printf_read_question "5" "Select an option [y/N]: " "1" option
  case $option in
  [yY][eE][sS] | [yY])
    printf_blue "Deleting $GEN_CADDY_WWW_DIR (data)..."
    sleep 2
    # deleting caddy html folder
    __rm_rf $GEN_CADDY_WWW_DIR
    printf_blue "[$(tput setaf 2)DONE$(tput sgr0)]"
    # remove caddy user too if exists
    if [ ! "$GEN_CADDY_DEFAULT_USER" = "$(whoami)" ]; then
      if id -u "$GEN_CADDY_DEFAULT_USER" >/dev/null 2>&1; then
        hash php 2>/dev/null && fixphpfpm
        hash php 2>/dev/null && restartphpfpm
        # delete caddy user
        __sudo userdel -f -r "$GEN_CADDY_DEFAULT_USER" &>/dev/null
        printf_blue "Caddy user '$GEN_CADDY_DEFAULT_USER' has been deleted too."
      fi
    fi
    ;;
  *)
    printf_blue "Removing $GEN_CADDY_WWW_DIR (data)... [$(tput setaf 5)Skipped$(tput sgr0)]"
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
versioninfo() {
  if [ -f "$GEN_CADDY_BIN_FILE" ]; then
    printf_blue "$("$GEN_CADDY_BIN_FILE" version 2>&1 | grep -v 'caddy help')"
  else
    printf_blue "$GEN_CADDY_NAME is not installed."
  fi
  printf_blue "$GEN_CADDY_NAME Installer - $VERSION"
  if hash php8 2>/dev/null; then
    printf_blue "$(php8 -v | grep cli)"
  elif hash php 2>/dev/null; then
    printf_blue "$(php -v | grep cli)"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
edit_gen_caddy_config() {
  if hash $EDITOR 2>/dev/null; then
    printf_blue "opening $GEN_CADDY_SERVER_FILE using $EDITOR"
    $EDITOR "$GEN_CADDY_SERVER_FILE"
  elif hash nano 2>/dev/null; then
    printf_blue "opening $GEN_CADDY_SERVER_FILE using nano"
    nano "$GEN_CADDY_SERVER_FILE"
  elif hash editor 2>/dev/null; then
    editor "$GEN_CADDY_SERVER_FILE"
  else
    printf_blue "error: please manually edit files"
    printf_blue "$GEN_CADDY_SERVER_FILE"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
checkforupdate() {
  caddyversion=$("$GEN_CADDY_BIN_FILE" -version | sed -e 's/-/ /g' -e 's/[^0-9\. ]*//g' | awk '{print $1}')
  CADDYV=$(wget -qO- https://api.github.com/repos/caddyserver/caddy/releases/latest 2>/dev/null | grep tag_name | sed 's/[^0-9\.]*//g')
  isGreater=$(compareVersion "$CADDYV" "$caddyversion")
  if [ "$CADDYV" != "" ] && [ "$isGreater" = ">" ]; then
    printf_blue "$(tput setaf 1)NOTICE:$(tput sgr0)"
    printf_blue "There is an update available of $GEN_CADDY_NAME"
    printf_blue "run $(tput setaf 3)$APPNAME update$(tput sgr0) to update"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
backupcaddy() {
  backupname="caddybackup-$(date +"%Y%m%d%H%M").tar.gz"
  printf_blue "Please wait! Creating backup $backupname"
  printf_blue "$(du -sh $GEN_CADDY_FILE_DIR)"
  printf_blue "$(du -sh $GEN_CADDY_CONFIG_DIR)"
  __tar_backup || (
    printf_blue "error creating backup $backupname"
    printf_red "Aborting......."
    __rm_rf "$backupname"
    exit
  )
  printf_blue "Backup finished."
  printf_blue "$(du -sh "$backupname")"
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
restorecaddy() {
  if [ ! -x "$GEN_CADDY_BIN_FILE" ]; then
    printf_blue "$(tput setaf 1)WARN:$(tput sgr0)"
    printf_blue "Caddy is not installed."
    printf_blue "It is recommended to install Caddy before restoring."
    printf_read_question "5" "Press enter to continue anyway!" || return
  fi
  printf_read_input "5" "Please provide backup name: " "160" backupname || exit
  printf_blue "Please wait! restoring backup $backupname"
  if [ -e $backupname ]; then
    printf_blue "$(du -sh "$backupname")"
    __tar_restore || (
      printf_blue "error restoring backup $backupname"
      printf_red "Aborting......."
      exit
    )
    printf_blue "Restore finished."
  else
    printf_blue "$backupname not found in $(pwd)"
    printf_red "Aborting......."
  fi
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_gen_caddy() {
  GEN_CADDY_FILE_DIR="${GEN_CADDY_FILE_DIR:-}"
  GEN_CADDY_FPM_PORT="${GEN_CADDY_FPM_PORT:-}"
  GEN_CADDY_DOMAIN_NAME="${GEN_CADDY_DOMAIN_NAME:-}"
  GEN_CADDY_DOMAIN_PORT="${GEN_CADDY_DOMAIN_PORT:-$(__set_caddy_port | grep '^')}"
  GEN_CADDY_DEFAULT_USER="${GEN_CADDY_DEFAULT_USER:-caddy}"
  [ -n "$GEN_CADDY_DOMAIN_PORT" ] || printf_exit "Failed to set the port for caddy"
  [ -d "$GEN_CADDY_LOG_DIR" ] || mkdir -p "$GEN_CADDY_LOG_DIR"
  [ -d "$GEN_CADDY_FILE_DIR" ] || mkdir -p "$GEN_CADDY_FILE_DIR"
  [ "$EUID" -ne 0 ] && GEN_CADDY_FILE_DIR="$HOME/.local/share/caddyserver" && GEN_CADDY_DEFAULT_USER="${GEN_CADDY_DEFAULT_USER:-$USER}"
  echo "$GEN_CADDY_FPM_PORT" | grep -q ':' || GEN_CADDY_FPM_PORT="localhost:$GEN_CADDY_FPM_PORT"
  case "$1" in
  'start' | 'startcaddy')
    shift 1
    amiroot
    startcaddy
    ;;
  'stop' | 'stopcaddy')
    shift 1
    amiroot
    stopcaddy
    ;;
  'reload' | 'reloadcaddy')
    shift 1
    reloadcaddy
    ;;
  'restart')
    shift 1
    amiroot
    stopcaddy
    sleep 2
    startcaddy
    ;;
  'status' | 'caddystatus')
    shift 1
    caddystatus
    ;;
  'install')
    shift 1
    amiroot
    plugin="$1"
    if [ "$GEN_CADDY_NO_PHP" = "true" ]; then
      installcaddy naked
    else
      installcaddy
      makeservice
    fi
    ;;
  'update' | 'updatecaddy')
    shift 1
    amiroot
    plugin="$1"
    updatecaddy
    ;;
  'fixphp' | 'fixphpfpm')
    shift 1
    amiroot
    fixphpfpm
    ;;
  'installphp')
    shift 1
    amiroot
    installphp
    ;;
  'edit')
    shift 1
    amiroot
    edit_gen_caddy_config
    ;;
  'service' | 'makeservice')
    shift 1
    amiroot
    __sudo rm -f /etc/systemd/system/caddy.service
    makeservice
    ;;
  'uninstall' | 'delete')
    shift 1
    amiroot
    DELETE_CADDY="yes"
    deletecaddy
    ;;
  'delete-service' | 'remove-startup')
    shift 1
    amiroot
    removeservice
    ;;
  'config' | 'gen-config')
    shift 1
    amiroot
    gen_caddy_config "$@"
    exit $?
    ;;
  'html' | 'gen-html')
    shift 1
    make_example_html "$1"
    exit $?
    ;;
  'backup')
    shift 1
    amiroot
    backupcaddy
    ;;
  'restore')
    shift 1
    amiroot
    restorecaddy
    ;;
  'about')
    shift 1
    about
    ;;
  'help')
    shift 1
    prms
    ;;
  'version' | 'versioninfo')
    shift 1
    versioninfo
    ;;
  'download')
    shift 1
    amiroot
    getcaddy
    ;;
  'reverse')
    shift 1
    if cmd_exists caddy; then
      $GEN_CADDY_BIN_FILE reverse-proxy -to 127.0.0.1:${1:-3000} -from :${2:-$(generate_random_port)}
    else
      printf_red "caddy doesn't seem to be installed"
      printf_exit 1 1 "Please run $APPNAME install to setup caddy"
    fi
    ;;
  'check')
    shift 1
    amiroot
    checkconfigfile "$1"
    ;;
  *)
    if [ -f "$GEN_CADDY_SERVER_FILE" ]; then
      howto
      caddystatus
    else
      amiroot
      installcaddy
      makeservice
      exit $?
    fi
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a --no-* options function
__options_function_no() {
  local options="${1//=*/}"
  local argument="${1//*=/}"
  case "$options" in
  --no-php) GEN_CADDY_NO_PHP="true" ;;
  *) echo "${argument:-No argument provided}" ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a --yes-* options function
__options_function_yes() {
  local options="${1//=*/}"
  local argument="${1//*=/}"
  case "$options" in
  *) echo "${argument:-No argument provided}" && shift ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_CADDY_CONFIG_FILE="${GEN_CADDY_CONFIG_FILE:-settings.conf}"
GEN_CADDY_CONFIG_DIR="${GEN_CADDY_CONFIG_DIR:-$HOME/.config/myscripts/gen-caddy}"
GEN_CADDY_CONFIG_BACKUP_DIR="${GEN_CADDY_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-caddy/backups}"
GEN_CADDY_LOG_DIR="${GEN_CADDY_LOG_DIR:-$HOME/.local/log/gen-caddy}"
GEN_CADDY_TEMP_DIR="${GEN_CADDY_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-caddy}"
GEN_CADDY_CACHE_DIR="${GEN_CADDY_CACHE_DIR:-$HOME/.cache/gen-caddy}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_CADDY_OUTPUT_COLOR_1="${GEN_CADDY_OUTPUT_COLOR_1:-33}"
GEN_CADDY_OUTPUT_COLOR_2="${GEN_CADDY_OUTPUT_COLOR_2:-5}"
GEN_CADDY_OUTPUT_COLOR_GOOD="${GEN_CADDY_OUTPUT_COLOR_GOOD:-2}"
GEN_CADDY_OUTPUT_COLOR_ERROR="${GEN_CADDY_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_CADDY_NOTIFY_ENABLED="${GEN_CADDY_NOTIFY_ENABLED:-yes}"
GEN_CADDY_GOOD_NAME="${GEN_CADDY_GOOD_NAME:-Great:}"
GEN_CADDY_ERROR_NAME="${GEN_CADDY_ERROR_NAME:-Error:}"
GEN_CADDY_GOOD_MESSAGE="${GEN_CADDY_GOOD_MESSAGE:-No errors reported}"
GEN_CADDY_ERROR_MESSAGE="${GEN_CADDY_ERROR_MESSAGE:-Errors were reported}"
GEN_CADDY_NOTIFY_CLIENT_NAME="${GEN_CADDY_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_CADDY_NOTIFY_CLIENT_ICON="${GEN_CADDY_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_CADDY_NOTIFY_CLIENT_URGENCY="${GEN_CADDY_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_CADDY_NAME="${GEN_CADDY_NAME:-Caddy Web Server}"
GEN_CADDY_DOMAIN_NAME="${GEN_CADDY_DOMAIN_NAME:-}"
GEN_CADDY_DOMAIN_PORT="${GEN_CADDY_DOMAIN_PORT:-}"
GEN_CADDY_PHP_VER="${GEN_CADDY_PHP_VER:-$(__get_php_version)}"
GEN_CADDY_DEFAULT_USER="${GEN_CADDY_DEFAULT_USER:-$USER}"
GEN_CADDY_FILE_DIR="${GEN_CADDY_FILE_DIR:-$GEN_CADDY_CONFIG_DIR/server}"
GEN_CADDY_WWW_DIR="${GEN_CADDY_WWW_DIR:-$HOME/Public/caddy}"
GEN_CADDY_LOG_DIR="${GEN_CADDY_LOG_DIR:-$GEN_CADDY_FILE_DIR/log}"
GEN_CADDY_BIN_DIR="${GEN_CADDY_BIN_DIR:-$GEN_CADDY_FILE_DIR/bin}"
GEN_CADDY_SERVER_DIR="${GEN_CADDY_SERVER_DIR:-$GEN_CADDY_FILE_DIR/config}"
GEN_CADDY_BIN_FILE="${GEN_CADDY_BIN_FILE:-$GEN_CADDY_BIN_DIR/caddywebserver}"
GEN_CADDY_SERVER_FILE="${GEN_CADDY_SERVER_FILE:-$GEN_CADDY_SERVER_DIR/Caddyfile}"
#GEN_CADDY_FPM_PORT="${GEN_CADDY_FPM_PORT:-$(phpfpm_init --show || echo '')}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "$GEN_CADDY_BIN_FILE" ] || GEN_CADDY_BIN_FILE="$(type -P caddy || type -P caddyserver || type -P caddywebserver)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE" ] && . "$GEN_CADDY_CONFIG_DIR/$GEN_CADDY_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_CADDY_LOG_DIR" ] || mkdir -p "$GEN_CADDY_LOG_DIR" |& __devnull
[ -d "$GEN_CADDY_TEMP_DIR" ] || mkdir -p "$GEN_CADDY_TEMP_DIR" |& __devnull
[ -d "$GEN_CADDY_CACHE_DIR" ] || mkdir -p "$GEN_CADDY_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_CADDY_TEMP_FILE="${GEN_CADDY_TEMP_FILE:-$(mktemp $GEN_CADDY_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_CADDY_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_CADDY_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_CADDY_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_CADDY_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_CADDY_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_CADDY_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",force,domain:,port:,fpm:,caddyfile:,no-php"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="start stop reload restart status install update "
ARRAY+="fixphp installphp edit service uninstall delete-service config "
ARRAY+="html backup restore about help version download reverse check "
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_CADDY_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_CADDY_CWD="$2"
    [ -d "$GEN_CADDY_CWD" ] || mkdir -p "$GEN_CADDY_CWD" |& __devnull
    shift 2
    ;;
  --force)
    shift 1
    FORCE_INSTALL="yes"
    ;;
  --no-*)
    __options_function_no "$@"
    shift 1
    ;;
  --yes-*)
    __options_function_yes "$@"
    shift 1
    ;;
  --domain)
    GEN_CADDY_DOMAIN_NAME="$2"
    shift 2
    ;;
  --port)
    [ "$2" = "random" ] && GEN_CADDY_DOMAIN_PORT="$(generate_random_port)" || GEN_CADDY_DOMAIN_PORT="$2"
    shift 2
    ;;
  --fpm)

    shift 2
    ;;
  --caddyfile)
    if [ -f "$GEN_CADDY_SERVER_DIR/$2" ]; then
      GEN_CADDY_SERVER_FILE="$GEN_CADDY_SERVER_DIR/$2"
    elif [ -f "$2" ]; then
      GEN_CADDY_SERVER_FILE="$2"
    fi
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_CADDY_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_CADDY_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && GEN_CADDY_CWD="$1" && shift 1 || GEN_CADDY_CWD="${GEN_CADDY_CWD:-$PWD}"
GEN_CADDY_CWD="$(realpath "${GEN_CADDY_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$GEN_CADDY_CWD" ] && cd "$GEN_CADDY_CWD"; then
# if [ "$GEN_CADDY_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_CADDY_CWD"
# fi
# else
# printf_exit "ðŸ’” $GEN_CADDY_CWD does not exist ðŸ’”"
# fi
export GEN_CADDY_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
[ -f "$GEN_CADDY_CONFIG_DIR/domains.txt" ] || echo 'domainnameport=""' >"$GEN_CADDY_CONFIG_DIR/domains.txt"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
. "$GEN_CADDY_CONFIG_DIR/domains.txt"
__user_is_not_root && printf_cyan "Running caddy as $USER"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_gen_caddy "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
