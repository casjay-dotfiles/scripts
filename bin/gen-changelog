#!/usr/bin/env bash
# shellcheck shell=bash
# shellcheck disable=SC2016
# shellcheck disable=SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202304181317-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-changelog --help
# @@Copyright        :  Copyright: (c) 2023 Jason Hempstead, Casjays Developments
# @@Created          :  Tuesday, Apr 18, 2023 13:17 EDT
# @@File             :  gen-changelog
# @@Description      :  Generate a changelog file
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202304181317-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_CHANGELOG_REQUIRE_SUDO="${GEN_CHANGELOG_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && GEN_CHANGELOG_EXIT_STATUS=0 || GEN_CHANGELOG_EXIT_STATUS=1
  return ${GEN_CHANGELOG_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && GEN_CHANGELOG_EXIT_STATUS=0 || GEN_CHANGELOG_EXIT_STATUS=1
  return ${GEN_CHANGELOG_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  GEN_CHANGELOG_EXIT_STATUS=0
  [ -n "$1" ] && local GEN_CHANGELOG_EXIT_STATUS="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && GEN_CHANGELOG_EXIT_STATUS+=$(($GEN_CHANGELOG_EXIT_STATUS + 0)) || GEN_CHANGELOG_EXIT_STATUS+=$(($GEN_CHANGELOG_EXIT_STATUS + 1))
  done
  [ $GEN_CHANGELOG_EXIT_STATUS -eq 0 ] || GEN_CHANGELOG_EXIT_STATUS=3
  return ${GEN_CHANGELOG_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local GEN_CHANGELOG_EXIT_STATUS=0
  curl -q -LSsfI --max-time 1 --retry 0 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || GEN_CHANGELOG_EXIT_STATUS=4
  return ${GEN_CHANGELOG_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE"
  fi
  [ -d "$GEN_CHANGELOG_CONFIG_DIR" ] || mkdir -p "$GEN_CHANGELOG_CONFIG_DIR"
  [ -d "$GEN_CHANGELOG_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_CHANGELOG_CONFIG_BACKUP_DIR"
  [ -f "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE" ] &&
    cp -Rf "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE" "$GEN_CHANGELOG_CONFIG_BACKUP_DIR/$GEN_CHANGELOG_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE"
# Settings for gen-changelog
GEN_CHANGELOG_FILE_EXT="${GEN_CHANGELOG_FILE_EXT:-}"
GEN_CHANGELOG_DEFAULT_ICON="${GEN_CHANGELOG_DEFAULT_ICON:-}"
GEN_CHANGELOG_VERSION_FILE="${GEN_CHANGELOG_VERSION_FILE:-}"
GEN_CHANGELOG_FILE_NAME="${GEN_CHANGELOG_FILE_NAME:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_CHANGELOG_OUTPUT_COLOR_1="${GEN_CHANGELOG_OUTPUT_COLOR_1:-}"
GEN_CHANGELOG_OUTPUT_COLOR_2="${GEN_CHANGELOG_OUTPUT_COLOR_2:-}"
GEN_CHANGELOG_OUTPUT_COLOR_GOOD="${GEN_CHANGELOG_OUTPUT_COLOR_GOOD:-}"
GEN_CHANGELOG_OUTPUT_COLOR_ERROR="${GEN_CHANGELOG_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_CHANGELOG_NOTIFY_ENABLED="${GEN_CHANGELOG_NOTIFY_ENABLED:-}"
GEN_CHANGELOG_GOOD_NAME="${GEN_CHANGELOG_GOOD_NAME:-}"
GEN_CHANGELOG_ERROR_NAME="${GEN_CHANGELOG_ERROR_NAME:-}"
GEN_CHANGELOG_GOOD_MESSAGE="${GEN_CHANGELOG_GOOD_MESSAGE:-}"
GEN_CHANGELOG_ERROR_MESSAGE="${GEN_CHANGELOG_ERROR_MESSAGE:-}"
GEN_CHANGELOG_NOTIFY_CLIENT_NAME="${GEN_CHANGELOG_NOTIFY_CLIENT_NAME:-}"
GEN_CHANGELOG_NOTIFY_CLIENT_ICON="${GEN_CHANGELOG_NOTIFY_CLIENT_ICON:-}"
GEN_CHANGELOG_NOTIFY_CLIENT_URGENCY="${GEN_CHANGELOG_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE"
    GEN_CHANGELOG_EXIT_STATUS=0
  else
    printf_red "Failed to create the config file"
    GEN_CHANGELOG_EXIT_STATUS=1
  fi
  return ${GEN_CHANGELOG_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-changelog: Generate changelogs from git - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-changelog [options]"
  __printf_line " "
  __printf_head "Basic Options:"
  __printf_line "--init                          - Create initial CHANGELOG.md"
  __printf_line "--amend                         - Amend last commit with changelog"
  __printf_line "--message MSG                   - Set message for all changes"
  __printf_line "--icon ICON                     - Change default icon (default: 🚀)"
  __printf_line "--dir DIR                       - Set working directory"
  __printf_line " "
  __printf_head "Version Management:"
  __printf_line "--major                         - Bump major version (X.0.0)"
  __printf_line "--minor                         - Bump minor version (0.X.0)"
  __printf_line "--patch                         - Bump patch version (0.0.X)"
  __printf_line "--version-bump                  - Auto-detect version bump type"
  __printf_line " "
  __printf_head "Advanced Features:"
  __printf_line "--interactive                   - Select files interactively"
  __printf_line "--categorize                    - Group changes by category"
  __printf_line "--conventional                  - Parse conventional commits"
  __printf_line "--format FORMAT                 - Output format (markdown/json/yaml/html)"
  __printf_line "--stats                         - Show statistics"
  __printf_line "--release                       - Generate release notes"
  __printf_line "--since-tag TAG                 - Changes since specific tag"
  __printf_line "--install-hooks                 - Install git hooks"
  __printf_line "--undo                          - Undo last changelog update"
  __printf_line " "
  __printf_head "Collaboration:"
  __printf_line "--author                        - Include commit authors"
  __printf_line "--contributors                  - List contributors"
  __printf_line "--pr NUMBER                     - Link to pull request"
  __printf_line "--issue NUMBER                  - Link to issue"
  __printf_line "--link-commits                  - Add commit links"
  __printf_line "--github-url URL                - Set GitHub repository URL"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_line "--silent                        - Silent mode"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep() { grep "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_CHANGELOG_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_CHANGELOG_REQUIRE_SUDO_RUN" ]; then
    export GEN_CHANGELOG_REQUIRE_SUDO="no"
    export GEN_CHANGELOG_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    GEN_CHANGELOG_EXIT_STATUS=$?
  else
    printf '%s\n' "This requires root to run"
    GEN_CHANGELOG_EXIT_STATUS=1
  fi
  return ${GEN_CHANGELOG_EXIT_STATUS:-0}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  GEN_CHANGELOG_EXIT_STATUS=${GEN_CHANGELOG_EXIT_STATUS:-0}
  [ -f "$GEN_CHANGELOG_TEMP_FILE" ] && rm -Rf "$GEN_CHANGELOG_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $GEN_CHANGELOG_EXIT_STATUS
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__clean_output() { sed 's|[ ] *| |g;s|^ ||g'; }
__git_status() { git -C "$GEN_CHANGELOG_CWD" status -b -s 2>/dev/null && return 0 || return 1; }
__is_dirty() { __git_status "$GEN_CHANGELOG_CWD" | grep -v '##' | grep -q '^' && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_amend() {
  local changelog_status="$(__changed_files changelog)"
  git -C "$GEN_CHANGELOG_CWD" add "$GEN_CHANGELOG_FILE_NAME" -q 2>/dev/null
  if [ -n "$changelog_status" ]; then git -C "$GEN_CHANGELOG_CWD" commit --amend --no-edit -q 2>/dev/null || return 1; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_commit_id() { git -C "$GEN_CHANGELOG_CWD" log 2>/dev/null | grep "$1" | head -n1 | sed 's|^[[:space:]]||g;s|:. | |g' | awk -F ' ' '{print $2}' || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__changed_files() {
  __git_s_added() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -Ew ^'\?\?|A|AA' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
  __git_s_renamed() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -Ew ^'R|RM| R' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
  __git_s_modified() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -Ew ^'M|MM| M' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
  __git_s_deleted() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -E ^'[M, ]D|DD' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
  __git_s_message() { git -C "$GEN_CHANGELOG_CWD" status -b -s | grep -v '^$' | sed '/^\#/d;s,^ ,,g;s,??,A,g' | tr '\n' ' | ' | sed 's# | $# #g' | sed 's|  | |g' | grep '^' || return 1; }
  local files=""
  while :; do
    case $1 in
    message)
      shift
      __git_s_message | grep ${1:--v '^CHANGELOG.md'} || return 1
      ;;
    added)
      shift
      __git_s_added | grep -v '^CHANGELOG.md' || return 1
      ;;
    renamed)
      shift
      __git_s_renamed | grep -v '^CHANGELOG.md' || return 1
      ;;
    modified)
      shift
      __git_s_modified | grep -v '^CHANGELOG.md' || return 1
      ;;
    deleted)
      shift
      __git_s_deleted | grep -v '^CHANGELOG.md' || return 1
      ;;
    changelog)
      shift
      files+="$(__git_s_added | grep '^CHANGELOG.md') "
      files+="$(__git_s_deleted | grep '^CHANGELOG.md') "
      files+="$(__git_s_renamed | grep '^CHANGELOG.md') "
      files+="$(__git_s_modified | grep '^CHANGELOG.md') "
      results="$(printf '%b\n' "$files" | tr ' ' '\n' | sort -u | grep -v '^$' | grep '^')"
      [ -n "$results" ] && echo "$results"
      ;;
    all)
      shift 1
      files+="$(__changed_files added) "
      files+="$(__changed_files modified) "
      files+="$(__changed_files deleted) "
      files+="$(__changed_files renamed) "
      printf '%b\n' "$files" | tr ' ' '\n' | sort -u | grep -v '^$' | grep '^'
      ;;
    *)
      break
      ;;
    esac
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__write_change_log() {
  if [ -n "$icon" ]; then
    icon="$icon "
  fi
  printf '%b\n\n' "$GEN_CHANGELOG_MESSAGE_HEADER"
  printf '%b\n' "$@" | __clean_output | while read -r line; do
    printf '%b  \n' "$line"
  done
  printf '\n%b  \n' "$GEN_CHANGELOG_MESSAGE_FOOTER"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Semantic versioning functions
__bump_version() {
  local current="${1:-0.0.0}"
  local bump_type="${2:-patch}"
  local major minor patch
  
  # Parse current version
  IFS='.' read -r major minor patch <<< "${current//[^0-9.]*/}"
  major=${major:-0}
  minor=${minor:-0}
  patch=${patch:-0}
  
  case "$bump_type" in
    major)
      ((major++))
      minor=0
      patch=0
      ;;
    minor)
      ((minor++))
      patch=0
      ;;
    patch|*)
      ((patch++))
      ;;
  esac
  
  echo "${major}.${minor}.${patch}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Parse conventional commit type
__parse_commit_type() {
  local message="${1:-}"
  local type icon category
  
  # Extract type from conventional commit
  type=$(echo "$message" | grep -oE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|breaking)' | head -1)
  
  case "${type,,}" in
    feat)     icon="🚀"; category="Features" ;;
    fix)      icon="🐛"; category="Bug Fixes" ;;
    docs)     icon="📚"; category="Documentation" ;;
    style)    icon="💎"; category="Style" ;;
    refactor) icon="♻️"; category="Code Refactoring" ;;
    perf)     icon="⚡"; category="Performance" ;;
    test)     icon="🧪"; category="Tests" ;;
    build)    icon="📦"; category="Build System" ;;
    ci)       icon="👷"; category="CI/CD" ;;
    chore)    icon="🔧"; category="Maintenance" ;;
    breaking) icon="💥"; category="BREAKING CHANGES" ;;
    *)        icon="${GEN_CHANGELOG_DEFAULT_ICON:-✨}"; category="Other Changes" ;;
  esac
  
  echo "$icon|$category"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Categorize file changes
__categorize_file() {
  local file="$1"
  case "$file" in
    *.md|README*|LICENSE*|CHANGELOG*) echo "📚 Documentation" ;;
    *.test.*|*_test.*|test/*|tests/*|spec/*) echo "🧪 Tests" ;;
    .github/*|.gitlab-ci*|.travis*|.circleci/*) echo "👷 CI/CD" ;;
    package*.json|Cargo.toml|go.mod|pom.xml|*.gemspec) echo "📦 Dependencies" ;;
    Dockerfile|docker-compose*|.dockerignore) echo "🐳 Docker" ;;
    *.sh|*.bash|bin/*) echo "🔨 Scripts" ;;
    *.css|*.scss|*.less) echo "🎨 Styles" ;;
    *.js|*.ts|*.jsx|*.tsx) echo "💻 Code" ;;
    *) echo "✨ Changes" ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Analyze change size
__analyze_change() {
  local file="$1"
  local additions deletions
  
  if git -C "$GEN_CHANGELOG_CWD" diff --cached --numstat "$file" 2>/dev/null | read -r additions deletions _; then
    if [ "$additions" -gt 100 ] || [ "$deletions" -gt 100 ]; then
      echo "major"
    elif [ "$additions" -gt 50 ] || [ "$deletions" -gt 50 ]; then
      echo "moderate"
    else
      echo "minor"
    fi
  else
    echo "unknown"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get statistics
__get_statistics() {
  local total_files=0
  local total_additions=0
  local total_deletions=0
  local contributors=""
  
  # Count changed files
  total_files=$(__changed_files all | wc -l)
  
  # Get additions/deletions
  while IFS=$'\t' read -r add del _; do
    total_additions=$((total_additions + add))
    total_deletions=$((total_deletions + del))
  done < <(git -C "$GEN_CHANGELOG_CWD" diff --cached --numstat 2>/dev/null)
  
  # Get unique contributors from recent commits
  contributors=$(git -C "$GEN_CHANGELOG_CWD" log --format='%aN' -10 2>/dev/null | sort -u | wc -l)
  
  cat <<EOF
📊 Statistics:
   Files changed: $total_files
   Additions: +$total_additions lines
   Deletions: -$total_deletions lines
   Contributors: $contributors
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Install git hooks
__install_git_hooks() {
  local hook_file="$GEN_CHANGELOG_CWD/.git/hooks/post-commit"
  
  if [ ! -d "$GEN_CHANGELOG_CWD/.git/hooks" ]; then
    printf_red "Not a git repository"
    return 1
  fi
  
  cat > "$hook_file" << 'EOF'
#!/usr/bin/env bash
# Auto-generated by gen-changelog
if command -v gen-changelog &>/dev/null; then
  gen-changelog --amend --silent 2>/dev/null || true
fi
EOF
  
  chmod +x "$hook_file"
  printf_green "Git hook installed at $hook_file"
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if file should be ignored
__should_ignore() {
  local file="$1"
  local ignore_patterns="${GEN_CHANGELOG_IGNORE_PATTERNS:-*.log *.tmp .DS_Store node_modules/* vendor/* dist/*}"
  
  for pattern in $ignore_patterns; do
    case "$file" in
      $pattern) return 0 ;;
    esac
  done
  
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Format output based on type
__format_output() {
  local format="${1:-markdown}"
  local content="$2"
  
  case "$format" in
    json)
      echo "{"
      echo '  "version": "'$GEN_CHANGELOG_VERSION_CURRENT'",'
      echo '  "date": "'$GEN_CHANGELOG_DATE'",'
      echo '  "changes": ['
      echo "$content" | sed 's/^/    "/;s/$/",/' | sed '$ s/,$//'
      echo "  ]"
      echo "}"
      ;;
    yaml)
      echo "version: $GEN_CHANGELOG_VERSION_CURRENT"
      echo "date: $GEN_CHANGELOG_DATE"
      echo "changes:"
      echo "$content" | sed 's/^/  - /'
      ;;
    html)
      echo "<div class=\"changelog\">"
      echo "  <h2>Changelog - $GEN_CHANGELOG_DATE</h2>"
      echo "  <ul>"
      echo "$content" | sed 's/^/    <li>/;s|$|</li>|'
      echo "  </ul>"
      echo "</div>"
      ;;
    keepachangelog)
      echo "# Changelog"
      echo ""
      echo "All notable changes to this project will be documented in this file."
      echo ""
      echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),"
      echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)."
      echo ""
      echo "## [$GEN_CHANGELOG_VERSION_CURRENT] - $GEN_CHANGELOG_DATE"
      echo ""
      echo "$content"
      ;;
    markdown|*)
      echo "$content"
      ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Group changes by category
__group_by_category() {
  local -a changes=()
  local -a categories=()
  local current_category=""
  
  # Read all changes into array
  while IFS= read -r line; do
    [ -n "$line" ] && changes+=("$line")
  done
  
  # Group by category
  declare -A grouped
  for change in "${changes[@]}"; do
    local file="${change##*: }"
    local category=$(__categorize_file "$file")
    grouped["$category"]+="$change"$'\n'
  done
  
  # Output grouped
  for category in "${!grouped[@]}"; do
    echo "### $category"
    echo "${grouped[$category]}"
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Interactive mode
__interactive_mode() {
  local -a files=()
  local -a selected=()
  
  # Get all changed files
  while IFS= read -r file; do
    [ -n "$file" ] && files+=("$file")
  done < <(__changed_files all)
  
  if [ ${#files[@]} -eq 0 ]; then
    printf_red "No files changed"
    return 1
  fi
  
  printf_cyan "Select files to include in changelog (y/n/a for yes/no/all):"
  
  for file in "${files[@]}"; do
    printf_yellow "Include $file? "
    read -r response
    case "${response,,}" in
      y|yes) selected+=("$file") ;;
      a|all) selected=("${files[@]}"); break ;;
      *) ;;
    esac
  done
  
  # Output selected files
  printf '%s\n' "${selected[@]}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate release notes
__generate_release_notes() {
  local since_tag="${1:-}"
  local until_tag="${2:-HEAD}"
  local notes=""
  
  if [ -z "$since_tag" ]; then
    # Get last tag
    since_tag=$(git -C "$GEN_CHANGELOG_CWD" describe --tags --abbrev=0 2>/dev/null || echo "")
  fi
  
  if [ -n "$since_tag" ]; then
    notes=$(git -C "$GEN_CHANGELOG_CWD" log --pretty=format:"- %s (%h)" "$since_tag..$until_tag" 2>/dev/null)
  else
    notes=$(git -C "$GEN_CHANGELOG_CWD" log --pretty=format:"- %s (%h)" -10 2>/dev/null)
  fi
  
  echo "## Release Notes"
  echo ""
  echo "$notes"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Undo last changelog update
__undo_last_update() {
  local backup_file="$GEN_CHANGELOG_CONFIG_BACKUP_DIR/CHANGELOG.md.$(date -d '1 minute ago' +'%Y%m%d')*"
  local latest_backup=$(ls -t $backup_file 2>/dev/null | head -1)
  
  if [ -f "$latest_backup" ]; then
    cp "$latest_backup" "$GEN_CHANGELOG_FILE_NAME"
    printf_green "Restored changelog from $latest_backup"
    return 0
  else
    printf_red "No backup found to restore"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default exit code
GEN_CHANGELOG_EXIT_STATUS=0
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_CHANGELOG_CONFIG_DIR="${GEN_CHANGELOG_CONFIG_DIR:-$HOME/.config/myscripts/gen-changelog}"
GEN_CHANGELOG_CONFIG_BACKUP_DIR="${GEN_CHANGELOG_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-changelog/backups}"
GEN_CHANGELOG_LOG_DIR="${GEN_CHANGELOG_LOG_DIR:-$HOME/.local/log/gen-changelog}"
GEN_CHANGELOG_RUN_DIR="${GEN_CHANGELOG_RUN_DIR:-$HOME/.local/run/system_scripts/$GEN_CHANGELOG_SCRIPTS_PREFIX}"
GEN_CHANGELOG_TEMP_DIR="${GEN_CHANGELOG_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-changelog}"
GEN_CHANGELOG_CACHE_DIR="${GEN_CHANGELOG_CACHE_DIR:-$HOME/.cache/gen-changelog}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# File settings
GEN_CHANGELOG_CONFIG_FILE="${GEN_CHANGELOG_CONFIG_FILE:-settings.conf}"
GEN_CHANGELOG_LOG_ERROR_FILE="${GEN_CHANGELOG_LOG_ERROR_FILE:-$GEN_CHANGELOG_LOG_DIR/error.log}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_CHANGELOG_OUTPUT_COLOR_1="${GEN_CHANGELOG_OUTPUT_COLOR_1:-33}"
GEN_CHANGELOG_OUTPUT_COLOR_2="${GEN_CHANGELOG_OUTPUT_COLOR_2:-5}"
GEN_CHANGELOG_OUTPUT_COLOR_GOOD="${GEN_CHANGELOG_OUTPUT_COLOR_GOOD:-2}"
GEN_CHANGELOG_OUTPUT_COLOR_ERROR="${GEN_CHANGELOG_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_CHANGELOG_NOTIFY_ENABLED="${GEN_CHANGELOG_NOTIFY_ENABLED:-yes}"
GEN_CHANGELOG_GOOD_NAME="${GEN_CHANGELOG_GOOD_NAME:-Great:}"
GEN_CHANGELOG_ERROR_NAME="${GEN_CHANGELOG_ERROR_NAME:-Error:}"
GEN_CHANGELOG_GOOD_MESSAGE="${GEN_CHANGELOG_GOOD_MESSAGE:-No errors reported}"
GEN_CHANGELOG_ERROR_MESSAGE="${GEN_CHANGELOG_ERROR_MESSAGE:-Errors were reported}"
GEN_CHANGELOG_NOTIFY_CLIENT_NAME="${GEN_CHANGELOG_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_CHANGELOG_NOTIFY_CLIENT_ICON="${GEN_CHANGELOG_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_CHANGELOG_NOTIFY_CLIENT_URGENCY="${GEN_CHANGELOG_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_CHANGELOG_FILE_EXT="${GEN_CHANGELOG_FILE_EXT:-md}"
GEN_CHANGELOG_DEFAULT_ICON="${GEN_CHANGELOG_DEFAULT_ICON:-🚀}"
GEN_CHANGELOG_FILE_NAME="${GEN_CHANGELOG_FILE_NAME:-CHANGELOG}"
GEN_CHANGELOG_VERSION_FILE="${GEN_CHANGELOG_VERSION_FILE:-version.txt}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE" ] && . "$GEN_CHANGELOG_CONFIG_DIR/$GEN_CHANGELOG_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_CHANGELOG_RUN_DIR" ] || mkdir -p "$GEN_CHANGELOG_RUN_DIR" |& __devnull
[ -d "$GEN_CHANGELOG_LOG_DIR" ] || mkdir -p "$GEN_CHANGELOG_LOG_DIR" |& __devnull
[ -d "$GEN_CHANGELOG_TEMP_DIR" ] || mkdir -p "$GEN_CHANGELOG_TEMP_DIR" |& __devnull
[ -d "$GEN_CHANGELOG_CACHE_DIR" ] || mkdir -p "$GEN_CHANGELOG_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_CHANGELOG_TEMP_FILE="${GEN_CHANGELOG_TEMP_FILE:-$(mktemp $GEN_CHANGELOG_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_CHANGELOG_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_CHANGELOG_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_CHANGELOG_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_CHANGELOG_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_CHANGELOG_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_CHANGELOG_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent,force,"
LONGOPTS+="message:,files:,changelog:,from:,icon:,prepend:,commit,amend,init,"
LONGOPTS+="major,minor,patch,version-bump,interactive,format:,install-hooks,"
LONGOPTS+="stats,statistics,release,since-tag:,between:,author,contributors,"
LONGOPTS+="pr:,issue:,link-commits,github-url:,undo,categorize,conventional"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_CHANGELOG_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_CHANGELOG_CWD="$2"
    [ -d "$GEN_CHANGELOG_CWD" ] || mkdir -p "$GEN_CHANGELOG_CWD" |& __devnull
    shift 2
    ;;
  --force)
    GEN_CHANGELOG_FORCE="true"
    shift 1
    ;;
  --message)
    GEN_CHANGELOG_SET_MESSAGE="$2"
    shift 2
    ;;
  --changelog)
    GEN_CHANGELOG_FULL_MESSAGE="$(printf '%s\n' "$2")"
    shift 2
    ;;
  --files)
    GEN_CHANGELOG_FILES="$(printf '%s\n' "$2")"
    shift 2
    ;;
  --icon)
    GEN_CHANGELOG_DEFAULT_ICON="$2"
    shift 2
    ;;
  --prepend)
    GEN_CHANGELOG_PREPEND_MESSAGE="$2"
    shift 2
    ;;
  --from)
    GEN_CHANGELOG_FILE_MESSAGE="$2"
    shift 2
    ;;
  --commit | --amend)
    shift 1
    GEN_CHANGELOG_AMEND_CHANGELOG="true"
    ;;
  --init)
    shift 1
    GEN_CHANGELOG_CREATE_INIT="true"
    ;;
  --major)
    shift 1
    GEN_CHANGELOG_VERSION_BUMP="major"
    ;;
  --minor)
    shift 1
    GEN_CHANGELOG_VERSION_BUMP="minor"
    ;;
  --patch)
    shift 1
    GEN_CHANGELOG_VERSION_BUMP="patch"
    ;;
  --version-bump)
    shift 1
    GEN_CHANGELOG_AUTO_VERSION="true"
    ;;
  --interactive)
    shift 1
    GEN_CHANGELOG_INTERACTIVE="true"
    ;;
  --format)
    GEN_CHANGELOG_FORMAT="$2"
    shift 2
    ;;
  --install-hooks)
    shift 1
    __install_git_hooks
    exit $?
    ;;
  --stats | --statistics)
    shift 1
    GEN_CHANGELOG_SHOW_STATS="true"
    ;;
  --release)
    shift 1
    GEN_CHANGELOG_RELEASE_NOTES="true"
    ;;
  --since-tag)
    GEN_CHANGELOG_SINCE_TAG="$2"
    shift 2
    ;;
  --between)
    GEN_CHANGELOG_BETWEEN_TAGS="$2"
    shift 2
    ;;
  --author)
    shift 1
    GEN_CHANGELOG_SHOW_AUTHOR="true"
    ;;
  --contributors)
    shift 1
    GEN_CHANGELOG_SHOW_CONTRIBUTORS="true"
    ;;
  --pr)
    GEN_CHANGELOG_PR_NUMBER="$2"
    shift 2
    ;;
  --issue)
    GEN_CHANGELOG_ISSUE_NUMBER="$2"
    shift 2
    ;;
  --link-commits)
    shift 1
    GEN_CHANGELOG_LINK_COMMITS="true"
    ;;
  --github-url)
    GEN_CHANGELOG_GITHUB_URL="$2"
    shift 2
    ;;
  --undo)
    shift 1
    __undo_last_update
    exit $?
    ;;
  --categorize)
    shift 1
    GEN_CHANGELOG_CATEGORIZE="true"
    ;;
  --conventional)
    shift 1
    GEN_CHANGELOG_CONVENTIONAL="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_CHANGELOG_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_CHANGELOG_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && GEN_CHANGELOG_CWD="$1" && shift 1 || GEN_CHANGELOG_CWD="${GEN_CHANGELOG_CWD:-$PWD}"
GEN_CHANGELOG_CWD="$(realpath "${GEN_CHANGELOG_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$GEN_CHANGELOG_CWD" ] && cd "$GEN_CHANGELOG_CWD"; then
# if [ "$GEN_CHANGELOG_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_CHANGELOG_CWD"
# fi
# else
# printf_exit "💔 $GEN_CHANGELOG_CWD does not exist 💔"
# fi
export GEN_CHANGELOG_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
if [ -f "$GEN_CHANGELOG_CWD/$GEN_CHANGELOG_VERSION_FILE" ]; then
  GEN_CHANGELOG_VERSION_CURRENT="$(<"$GEN_CHANGELOG_CWD/$GEN_CHANGELOG_VERSION_FILE")"
else
  GEN_CHANGELOG_VERSION_CURRENT="$(date +'%Y%m%d%H%M-git')"
fi

# Handle version bumping
if [ -n "$GEN_CHANGELOG_VERSION_BUMP" ]; then
  GEN_CHANGELOG_VERSION_CURRENT=$(__bump_version "$GEN_CHANGELOG_VERSION_CURRENT" "$GEN_CHANGELOG_VERSION_BUMP")
  echo "$GEN_CHANGELOG_VERSION_CURRENT" > "$GEN_CHANGELOG_CWD/$GEN_CHANGELOG_VERSION_FILE"
fi

# Handle interactive mode
if [ "$GEN_CHANGELOG_INTERACTIVE" = "true" ]; then
  GEN_CHANGELOG_SET_FILES="$(__interactive_mode)"
else
  GEN_CHANGELOG_SET_FILES="$(__changed_files all)"
fi

# Filter ignored files
if [ -n "$GEN_CHANGELOG_SET_FILES" ]; then
  filtered_files=""
  for file in $GEN_CHANGELOG_SET_FILES; do
    if ! __should_ignore "$file"; then
      filtered_files="$filtered_files $file"
    fi
  done
  GEN_CHANGELOG_SET_FILES="$filtered_files"
fi

GEN_CHANGELOG_DATE="$(date +'%Y-%m-%d at %H:%M:%S')"
GEN_CHANGELOG_WORKFILE_FILE="${GEN_CHANGELOG_TEMP_FILE}.tmp"
GEN_CHANGELOG_PREV_FILE="$GEN_CHANGELOG_CWD/.git/prev_commit_files.txt"
GEN_CHANGELOG_MESSAGE_HEADER="$(printf '## %s Changelog: %s %s  \n\n\n' $GEN_CHANGELOG_DEFAULT_ICON "$GEN_CHANGELOG_DATE" $GEN_CHANGELOG_DEFAULT_ICON)"
GEN_CHANGELOG_MESSAGE_FOOTER="$(printf '\n### %s End of changes for %s %s  \n\n----\n\n' $GEN_CHANGELOG_DEFAULT_ICON $GEN_CHANGELOG_VERSION_CURRENT $GEN_CHANGELOG_DEFAULT_ICON)"
GEN_CHANGELOG_FILE_NAME="$GEN_CHANGELOG_CWD/$GEN_CHANGELOG_FILE_NAME.$GEN_CHANGELOG_FILE_EXT"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[ -f "$GEN_CHANGELOG_FILE_NAME" ] || exit 0
[ -d "$GEN_CHANGELOG_CWD/.git" ] || printf_exit "$GEN_CHANGELOG_CWD does not seem to be a git repo" >&2
{ [ "$1" = "init" ] && shift 1 || [ -n "$GEN_CHANGELOG_CREATE_INIT" ]; } && touch "$GEN_CHANGELOG_FILE_NAME"
touch "$GEN_CHANGELOG_WORKFILE_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Export variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
# Handle special modes first
if [ "$GEN_CHANGELOG_RELEASE_NOTES" = "true" ]; then
  __generate_release_notes "$GEN_CHANGELOG_SINCE_TAG" "$GEN_CHANGELOG_BETWEEN_TAGS"
  exit $?
elif [ "$GEN_CHANGELOG_SHOW_STATS" = "true" ]; then
  __get_statistics
  exit $?
elif [ "$GEN_CHANGELOG_SHOW_CONTRIBUTORS" = "true" ]; then
  git -C "$GEN_CHANGELOG_CWD" log --format='%aN <%aE>' | sort -u
  exit $?
elif [ "$GEN_CHANGELOG_AMEND_CHANGELOG" = "true" ]; then
  printf_cyan "$GEN_CHANGELOG_DEFAULT_ICON Amending CHANGELOG $GEN_CHANGELOG_DEFAULT_ICON"
  __git_amend
  GEN_CHANGELOG_EXIT_STATUS=$?
  GEN_CHANGELOG_EXIT_RUN="no"
elif [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
  input="$(cat -)"
  __write_change_log "$input" >"$GEN_CHANGELOG_WORKFILE_FILE"
  GEN_CHANGELOG_EXIT_STATUS=$?
elif [ -n "$GEN_CHANGELOG_FILE_MESSAGE" ] && [ -f "$GEN_CHANGELOG_FILE_MESSAGE" ]; then
  input="$(<"$GEN_CHANGELOG_FILE_MESSAGE")"
  __write_change_log "$input" >"$GEN_CHANGELOG_WORKFILE_FILE"
  GEN_CHANGELOG_EXIT_STATUS=$?
  rm -Rf "$GEN_CHANGELOG_FILE_MESSAGE"
elif [ -n "$GEN_CHANGELOG_FULL_MESSAGE" ]; then
  __write_change_log "$GEN_CHANGELOG_FULL_MESSAGE" >"$GEN_CHANGELOG_WORKFILE_FILE"
  GEN_CHANGELOG_EXIT_STATUS=$?
elif [ -n "$GEN_CHANGELOG_SET_FILES" ] && __is_dirty; then
  printf '' >"$GEN_CHANGELOG_PREV_FILE"
  printf '%s\n' "$GEN_CHANGELOG_MESSAGE_HEADER" | __clean_output >"$GEN_CHANGELOG_WORKFILE_FILE"
  GEN_CHANGELOG_EXIT_STATUS=$?
  if [ -f "$GEN_CHANGELOG_WORKFILE_FILE" ]; then
    [ "$GEN_CHANGELOG_SILENT" = "true" ] || printf_blue "$GEN_CHANGELOG_MESSAGE_HEADER"
    # Build changelog entries
    changelog_content=""
    for changed in $GEN_CHANGELOG_SET_FILES; do
      if [ -n "$changed" ]; then
        commit_id="$(__get_commit_id "$changed")"
        
        # Get icon and category based on settings
        if [ "$GEN_CHANGELOG_CONVENTIONAL" = "true" ]; then
          commit_msg=$(git -C "$GEN_CHANGELOG_CWD" log -1 --format='%s' -- "$changed" 2>/dev/null)
          commit_info=$(__parse_commit_type "$commit_msg")
          icon="${commit_info%|*}"
          category="${commit_info#*|}"
        elif [ "$GEN_CHANGELOG_CATEGORIZE" = "true" ]; then
          category=$(__categorize_file "$changed")
          icon="${GEN_CHANGELOG_DEFAULT_ICON}"
        else
          icon="${GEN_CHANGELOG_DEFAULT_ICON// /}"
          category=""
        fi
        
        # Build message with optional features
        set_message="$icon $GEN_CHANGELOG_SET_MESSAGE : $changed"
        
        # Add PR/Issue links
        [ -n "$GEN_CHANGELOG_PR_NUMBER" ] && set_message="$set_message (#$GEN_CHANGELOG_PR_NUMBER)"
        [ -n "$GEN_CHANGELOG_ISSUE_NUMBER" ] && set_message="$set_message (fixes #$GEN_CHANGELOG_ISSUE_NUMBER)"
        
        # Add commit link if requested
        if [ "$GEN_CHANGELOG_LINK_COMMITS" = "true" ] && [ -n "$commit_id" ] && [ -n "$GEN_CHANGELOG_GITHUB_URL" ]; then
          set_message="$set_message [[$commit_id]($GEN_CHANGELOG_GITHUB_URL/commit/$commit_id)]"
        elif [ -n "$commit_id" ]; then
          set_message="$set_message - $commit_id"
        fi
        
        # Add author if requested
        if [ "$GEN_CHANGELOG_SHOW_AUTHOR" = "true" ]; then
          author=$(git -C "$GEN_CHANGELOG_CWD" log -1 --format='%aN' -- "$changed" 2>/dev/null)
          [ -n "$author" ] && set_message="$set_message (@$author)"
        fi
        
        set_commit_message+=("$changed : $GEN_CHANGELOG_SET_MESSAGE")
        printf '%b\n' "$changed" | __clean_output >>"$GEN_CHANGELOG_PREV_FILE"
        changelog_content="${changelog_content}${set_message}\n"
        [ "$GEN_CHANGELOG_SILENT" = "true" ] || printf_cyan "$set_message"
      fi
    done
    
    # Apply categorization if enabled
    if [ "$GEN_CHANGELOG_CATEGORIZE" = "true" ] || [ "$GEN_CHANGELOG_CONVENTIONAL" = "true" ]; then
      changelog_content=$(echo -e "$changelog_content" | __group_by_category)
    fi
    
    # Format output
    if [ -n "$GEN_CHANGELOG_FORMAT" ] && [ "$GEN_CHANGELOG_FORMAT" != "markdown" ]; then
      changelog_content=$(__format_output "$GEN_CHANGELOG_FORMAT" "$changelog_content")
    fi
    
    # Write content
    echo -e "$changelog_content" >>"$GEN_CHANGELOG_WORKFILE_FILE"
    [ "$GEN_CHANGELOG_SILENT" = "true" ] || printf_blue "$GEN_CHANGELOG_MESSAGE_FOOTER"
    printf '%s\n' "$GEN_CHANGELOG_MESSAGE_FOOTER" | __clean_output >>"$GEN_CHANGELOG_WORKFILE_FILE"
    [ -n "${set_commit_message[*]}" ] && printf '%s\n' "${set_commit_message[@]}" | __clean_output >"$GEN_CHANGELOG_CWD/.git/changelog-file.md"
  fi
else
  [ "$GEN_CHANGELOG_SILENT" = "true" ] || printf_return "No files have changed" >&2
  GEN_CHANGELOG_EXIT_STATUS=1
fi
if [ "$GEN_CHANGELOG_EXIT_RUN" != "no" ]; then
  if [ "$GEN_CHANGELOG_EXIT_STATUS" = 0 ] && [ -s "$GEN_CHANGELOG_WORKFILE_FILE" ]; then
    [ -f "$GEN_CHANGELOG_FILE_NAME" ] && cat "$GEN_CHANGELOG_FILE_NAME" >>"$GEN_CHANGELOG_WORKFILE_FILE"
    if mv -f "$GEN_CHANGELOG_WORKFILE_FILE" "$GEN_CHANGELOG_FILE_NAME"; then
      git -C "$GEN_CHANGELOG_CWD" add "$GEN_CHANGELOG_FILE_NAME"
      GEN_CHANGELOG_EXIT_STATUS=$?
    else
      [ "$GEN_CHANGELOG_SILENT" = "true" ] || printf_red "Something went wrong" >&2
      GEN_CHANGELOG_EXIT_STATUS=1
    fi
  else
    [ "$GEN_CHANGELOG_SILENT" = "true" ] || printf_red "Failed to create $GEN_CHANGELOG_FILE_NAME" >&2
    GEN_CHANGELOG_EXIT_STATUS=1
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
GEN_CHANGELOG_EXIT_STATUS="${GEN_CHANGELOG_EXIT_STATUS:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${GEN_CHANGELOG_EXIT_STATUS:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
