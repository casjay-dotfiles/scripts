#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202308292055-git
# @@Author           :  Jason Hempstead
# @@Contact          :  git-admin@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-dockerfile --help
# @@Copyright        :  Copyright: (c) 2023 Jason Hempstead, Casjays Developments
# @@Created          :  Tuesday, Aug 29, 2023 20:55 EDT
# @@File             :  gen-dockerfile
# @@Description      :  Create a Dockerfile
# @@Changelog        :  New script
# @@TODO             :  Rewite/Cleanup variables
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202308292057-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
TEST_REQUIRE_SUDO="${TEST_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
  fi
  [ -d "$GEN_DOCKERFILE_CONFIG_DIR" ] || mkdir -p "$GEN_DOCKERFILE_CONFIG_DIR"
  [ -d "$GEN_DOCKERFILE_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_DOCKERFILE_CONFIG_BACKUP_DIR"
  [ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ] &&
    cp -Rf "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" "$GEN_DOCKERFILE_CONFIG_BACKUP_DIR/$GEN_DOCKERFILE_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
# Settings for gen-dockerfile
GEN_DOCKERFILE_BACKUP_EXT="${GEN_DOCKERFILE_BACKUP_EXT:-}"
GEN_DOCKER_GIT_ORG="${GEN_DOCKER_GIT_ORG:-}"
GEN_DOCKER_REGISTRY_ORG="${GEN_DOCKER_REGISTRY_ORG:-}"
BUILDX_BUILD_DATE_FORMAT="${BUILDX_BUILD_DATE_FORMAT:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Maintainer info
GEN_DOCKERFILE_GIT_BASE="${GEN_DOCKERFILE_GIT_BASE:-}"
GEN_DOCKERFILE_HUB_BASE="${GEN_DOCKERFILE_HUB_BASE:-}"
GEN_DOCKERFILE_VENDOR="${GEN_DOCKERFILE_VENDOR:-}"
GEN_DOCKERFILE_AUTHOR="${GEN_DOCKERFILE_AUTHOR:-}"
GEN_DOCKERFILE_MAINTAINER="${GEN_DOCKERFILE_MAINTAINER:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default version formatting - ymdHM-git
GEN_DOCKER_VERSION_FORMAT="${GEN_DOCKER_VERSION_FORMAT:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initialize git
GEN_DOCKER_GIT_AUTO_INIT="${GEN_DOCKER_GIT_AUTO_INIT:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Template directory
GEN_DOCKERFILE_TEMPLATE_DIR="${GEN_DOCKERFILE_TEMPLATE_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specify default image
GEN_DOCKERFILE_DEFAULT_IMAGE="${GEN_DOCKERFILE_DEFAULT_IMAGE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specify default versions and image repo for alpine
GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE:-}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ALPINE:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specify default versions and image repo for almalinux
GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL:-}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_RHEL:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specify default versions and image repo for archlinux
GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX:-}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ARCHLINUX:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specify default versions and image repo for debian
GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN:-}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_DEBIAN:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specify default versions and image repo for ubuntu
GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU:-}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_UBUNTU:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Global packages
# Defaults: ${GEN_DOCKER_FILE_PKGS_ALL:-none}
#GEN_DOCKER_FILE_PKGS_ALL=""
GEN_DOCKER_FILE_PKGS_ALL+=""
GEN_DOCKER_FILE_PKGS_ALL+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# debian - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_DEBIAN:-none}
#GEN_DOCKER_FILE_PKGS_DEBIAN=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ubuntu - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_UBUNTU:-none}
#GEN_DOCKER_FILE_PKGS_UBUNTU=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# almalinux - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_RHEL:-none}
#GEN_DOCKER_FILE_PKGS_RHEL=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# alpine - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_ALPINE:-none}
#GEN_DOCKER_FILE_PKGS_ALPINE=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# archlinux - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_ARCH:-none}
#GEN_DOCKER_FILE_PKGS_ARCH=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_DOCKERFILE_OUTPUT_COLOR_1="${GEN_DOCKERFILE_OUTPUT_COLOR_1:-}"
GEN_DOCKERFILE_OUTPUT_COLOR_2="${GEN_DOCKERFILE_OUTPUT_COLOR_2:-}"
GEN_DOCKERFILE_OUTPUT_COLOR_GOOD="${GEN_DOCKERFILE_OUTPUT_COLOR_GOOD:-}"
GEN_DOCKERFILE_OUTPUT_COLOR_ERROR="${GEN_DOCKERFILE_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_DOCKERFILE_NOTIFY_ENABLED="${GEN_DOCKERFILE_NOTIFY_ENABLED:-}"
GEN_DOCKERFILE_GOOD_NAME="${GEN_DOCKERFILE_GOOD_NAME:-}"
GEN_DOCKERFILE_ERROR_NAME="${GEN_DOCKERFILE_ERROR_NAME:-}"
GEN_DOCKERFILE_GOOD_MESSAGE="${GEN_DOCKERFILE_GOOD_MESSAGE:-}"
GEN_DOCKERFILE_ERROR_MESSAGE="${GEN_DOCKERFILE_ERROR_MESSAGE:-}"
GEN_DOCKERFILE_NOTIFY_CLIENT_NAME="${GEN_DOCKERFILE_NOTIFY_CLIENT_NAME:-}"
GEN_DOCKERFILE_NOTIFY_CLIENT_ICON="${GEN_DOCKERFILE_NOTIFY_CLIENT_ICON:-}"
GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY="${GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY:-}"
EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-dockerfile:  Create a Dockerfile - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-dockerfile [options] [dir] [template] [imageName] [repo]"
  __printf_line "scratch                         - A simple template"
  __printf_line "alpine                          - Use alpine template"
  __printf_line "debian                          - Use debian template"
  __printf_line "rhel                            - Use rockylinux template"
  __printf_line "xorg                            - Use xorg template"
  __printf_line "web                             - Use web template"
  __printf_line "--nogit                         - Do not Initialize a git repo"
  __printf_line "--template                      - Specify the template"
  __printf_line "--tag                           - Specify the image tag"
  __printf_line "--image                         - Specify the image repo"
  __printf_line "--dockerfile                    - Create only a Dockerfile"
  __printf_line "--distro-name                   - Specify the distro name"
  __printf_line "--distro-tag                    - Specify the distro version"
  __printf_line "--startup                       - Create an init scripts"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_DOCKERFILE_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_DOCKERFILE_REQUIRE_SUDO_RUN" ]; then
    export GEN_DOCKERFILE_REQUIRE_SUDO="no"
    export GEN_DOCKERFILE_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_DOCKERFILE_TEMP_FILE" ] && rm -Rf "$GEN_DOCKERFILE_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__remove_extra_spaces() { sed 's/\( \)*/\1/g;s|^ ||g'; }
__dockerignore() { __cmd_exists dockerignore && dockerignore || true; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__rm_rf() {
  for d in "$@"; do
    [ -e "$d" ] && rm -Rf "$d"
    [ ! -e "$d" ] || return 1
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trim() {
  local var="${*//;/ }"
  var="${var#"${var%%[![:space:]]*}"}" # remove leading whitespace characters
  var="${var%"${var##*[![:space:]]}"}" # remove trailing whitespace characters
  var="$(echo "$var" | __remove_extra_spaces)"
  printf '%s' "$var" | grep -v '^$'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_git() {
  gitignore --dir "$GEN_DOCKERFILE_CWD" default --automated &>/dev/null && printf_purple "Created $GEN_DOCKERFILE_CWD/.gitignore"
  gen-gitattr --dir "$GEN_DOCKERFILE_CWD" default --automated &>/dev/null && printf_purple "Created $GEN_DOCKERFILE_CWD/.gitattributes"
  # Create .dockerignore
  __dockerignore &>/dev/null && printf_purple "Created $GEN_DOCKERFILE_CWD/.dockerignore"
  # create README.md
  [ -f "$GEN_DOCKERFILE_CWD/README.md" ] || gen-readme projects docker.md "$GEN_DOCKERFILE_CWD/README.md" &>/dev/null && printf_purple "Created $GEN_DOCKERFILE_CWD/README.md"
  # create LICENSE.md
  [ -f "$GEN_DOCKERFILE_CWD/LICENSE.md" ] || gen-license wtfpl "$GEN_DOCKERFILE_CWD/LICENSE.md" &>/dev/null && printf_purple "Created $GEN_DOCKERFILE_CWD/LICENSE.md"
  printf_green "Using $repo as VCS url"
  if [ -d "$rootfs_dir/usr/local/bin" ] && [ -d "$template_dir/data" ] && [ -d "$template_dir/config" ] || [ "$GEN_DOCKERFILE_TEMPLATE" = "scratch" ]; then
    printf_blue "All files and Directories have been created"
    if [ "$GEN_DOCKER_INIT" = "true" ]; then rm -Rf "$file"; fi
    if [ -f "$file" ] && [ "$GEN_DOCKER_GIT_AUTO_INIT" = "yes" ]; then
      if [ ! -d "$GEN_DOCKERFILE_CWD/.git" ] && [ ! -f "$GEN_DOCKERFILE_CWD/.nogit" ]; then
        if [ "$GEN_DOCKER_AUTOMATED" = "true" ]; then
          gitadmin --dir "$GEN_DOCKERFILE_CWD" setup "$repo" --automated
        else
          [ -f "$GEN_DOCKERFILE_CWD/.gitignore" ] || gitignore "$GEN_DOCKERFILE_CWD" default
          gitadmin --dir "$GEN_DOCKERFILE_CWD" setup "$repo"
        fi
      fi
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__custom_init_files() {
  [ -d "$custom_init_dir" ] || mkdir -p "$custom_init_dir"
  for custom_init_file in "$GEN_DOCKERFILE_TEMPLATE_DIR/init_scripts"/*.sh; do
    custom_init_name="$(basename -- "$custom_init_file")"
    custom_init_command="$(echo "$custom_init_name" | sed 's|.*-||g;s|.sh||g')"
    printf_purple "Creating setup script: $custom_init_dir/$custom_init_name"
    if [ -f "$custom_init_dir/$custom_init_name" ]; then
      mv -f "$custom_init_dir/$custom_init_name" "$custom_init_dir/$custom_init_name.bak"
    fi
    cat <<EOF >"$custom_init_dir/$custom_init_name"
$(. "$custom_init_file")
EOF
    if [ -f "$custom_init_dir/$custom_init_name" ]; then
      chmod -Rf 755 "$custom_init_dir/$custom_init_name"
      chmod -Rf +x "$custom_init_dir/$custom_init_name"
    else
      printf_red "Failed to create $custom_init_dir/$custom_init_name"
    fi
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_gen_dockerfile() {
  if [ $# -lt 3 ]; then
    export name="$(basename -- "$GEN_DOCKERFILE_CWD")"
    __docker_file "${1:-$GEN_DOCKERFILE_CWD/Dockerfile}" "$name" ${2:-}
  elif [ $# -eq 3 ]; then
    __docker_file "$1" "$2" ${3:-}
  else
    printf_red "Usage: [Dockerfile] [name] [gitRepo]"
    printf_exit "IE: ./Dockerfile alpine https://github.com/[orgname]/[reponame]"
  fi
  echo ""
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__docker_file() {
  dotenv_file=""
  build_date="$(date +"${BUILDX_BUILD_DATE_FORMAT:-%Y%m%d%H%M}")"
  if [ -z "$GEN_DOCKERFILE_SET_VERSION" ]; then
    dotenv_file="$GEN_DOCKERFILE_CWD/.env.scripts"
  elif [ "$GEN_DOCKERFILE_SET_VERSION" != "latest" ]; then
    dotenv_file="$GEN_DOCKERFILE_CWD/.env.scripts.$GEN_DOCKERFILE_SET_VERSION"
  else
    dotenv_file="$GEN_DOCKERFILE_CWD/.env.scripts"
  fi
  __set_make_file_variables "$@"
  if [ "$GEN_DOCKER_INIT" != "true" ]; then
    if [ -f "$GEN_DOCKERFILE_CWD/rootfs/usr/local/etc/docker/functions/entrypoint.sh" ]; then
      GEN_DOCKER_ONLY_DOCKERFILE="true"
      GEN_DOCKER_INIT=""
    fi
  fi
  if [ -f "$GEN_DOCKERFILE_CWD/.env.scripts.${file_version:-latest}" ]; then
    printf_cyan "Setting version to ${file_version:-latest}"
    if [ -f "$GEN_DOCKERFILE_CWD/.env.scripts.${file_version:-latest}" ]; then
      . "$GEN_DOCKERFILE_CWD/.env.scripts.${file_version:-latest}"

    fi
    if [ "$GEN_DOCKERFILE_FORCE" = "yes" ]; then
      GEN_DOCKER_INIT=true
      GEN_DOCKER_ONLY_DOCKERFILE=false
      __rm_rf "$GEN_DOCKERFILE_CWD"/*
    fi

    __set_variables
    __set_make_file_variables "$@"
  elif [ -f "$dotenv_file" ]; then
    [ -f "$dotenv_file" ] && . "$dotenv_file"
    __set_variables
    __set_make_file_variables "$@"
  fi
  [ -d "$rootfs_dir" ] || GEN_DOCKER_ONLY_DOCKERFILE=false
  [ -n "$file_version" ] && GEN_DOCKERFILE_DEFAULT_VERSION="$file_version"
  GEN_DOCKERFILE_SET_VERSION="${GEN_DOCKERFILE_DEFAULT_VERSION}"
  GEN_DOCKERFILE_SET_DISTRO_VERSION="${GEN_DOCKERFILE_DEFAULT_DISTRO_VERSION:-$GEN_DOCKERFILE_SET_DISTRO_VERSION}"
  GEN_DOCKERFILE_SET_TAGS="$(echo "$GEN_DOCKERFILE_SET_TAGS $GEN_DOCKERFILE_DEFAULT_VERSION $GEN_DOCKERFILE_DEFAULT_TAGS" | tr ' ' '\n' | sort -urV | grep -vE '^$|^USE_DATE$' | tr '\n' ' ')"
  GEN_DOCKER_USE_DATE_TAG="$(echo "$GEN_DOCKERFILE_SET_TAGS $GEN_DOCKERFILE_DEFAULT_VERSION $GEN_DOCKERFILE_DEFAULT_TAGS" | tr ' ' '\n' | sort -u | grep -v '^$' | grep '^USE_DATE$' | head -n1)"
  # Rewite dockerfile to version number
  echo "$file" | grep -v "Dockerfile" | grep -q "$file_version" && file="Dockerfile" && is_file_versioned="false"
  [ -n "$file_version" ] && [ "$is_file_versioned" = "false" ] && file="$file.$file_version" && dotenv_file="$GEN_DOCKERFILE_CWD/.env.scripts.$file_version"
  GEN_DOCKERFILE_DOCKERFILE_NAME="$(basename -- "$file")"
  # begin
  local tag_name="${GEN_DOCKERFILE_SET_TAGS:-latest} $GEN_DOCKER_USE_DATE_TAG"
  # if [ "$GEN_DOCKER_INIT" = "true" ]; then
  # GEN_DOCKER_AUTOMATED="true"
  # init_message="Initializing $name in: ${GEN_DOCKERFILE_CWD//$PWD\//}"
  # else
  # init_message="Initialize $name in: ${file//$PWD\//}"
  # fi
  # if [ "$GEN_DOCKER_AUTOMATED" != "true" ]; then
  # [ -f "$file" ] && printf_pause "If this is what you want press enter or control-c to exit"
  # fi
  # Init Dockerfile functions
  __configure_dockerfile "$name"
  #
  [ -n "$GEN_DOCKERFILE_SET_DISTRO_NAME" ] || GEN_DOCKERFILE_SET_DISTRO_NAME="$GEN_DOCKERFILE_PULL_URL"
  [ -f "$dotenv_file" ] && printf_blue "Updating $dotenv_file" || printf_purple "Creating $dotenv_file"
  dotenv_base_file="$(basename -- "$dotenv_file")"
  cat <<EOF >"$dotenv_file"
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/dotenv.template")
EOF
  [ "$GEN_DOCKER_INIT" != "true" ] || [ ! -f "$rootfs_dir/usr/local/bin/entrypoint.sh" ] || return
  . $dotenv_file && __set_variables && repo="${GEN_DOCKERFILE_GIT_BASE:-$repo}"
  if [ -f "$rootfs_dir/usr/local/bin/entrypoint.sh" ] && [ -f "$file.$GEN_DOCKERFILE_BACKUP_EXT" ]; then
    printf_cyan "Generating your Dockerfile using template: $GEN_DOCKERFILE_TEMPLATE"
    if __make_file "$GEN_DOCKERFILE_TEMPLATE" "$file"; then
      printf_green "Your Dockerfile for $name has been created in: $(readlink -f "$GEN_DOCKERFILE_CWD")"
      exit 0
    else
      printf_green "Failed to create Dockerfile for $name"
      exit 1
    fi
  elif [ "$GEN_DOCKERFILE_TEMPLATE" = "scratch" ]; then
    if [ "$GEN_DOCKER_INIT" != "true" ]; then
      if __make_file "$GEN_DOCKERFILE_TEMPLATE" "$file"; then
        printf_green "Your Dockerfile for $name has been created in: $(readlink -f "$GEN_DOCKERFILE_CWD")"
      else
        printf_green "Failed to create Dockerfile for $name"
        exit 1
      fi
    fi
    # Create actions file
    printf_blue "Creating $GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml"
    [ -d "$GEN_DOCKERFILE_CWD/.gitea/workflows" ] || mkdir -p "$GEN_DOCKERFILE_CWD/.gitea/workflows"
    __create_actions_file >"$GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml"
    # Create pkmgr script
    printf_blue "Creating $rootfs_dir/usr/local/bin/pkmgr"
    [ -d "$rootfs_dir/usr/local/bin" ] || mkdir -p "$rootfs_dir/usr/local/bin"
    __create_pkmgr_install_script >"$rootfs_dir/usr/local/bin/pkmgr"
    chmod -Rf 755 "$rootfs_dir/usr/local/bin/pkmgr"
    # Run git
    __init_git
    [ -f "$dotenv_file" ] && exit 0 || exit 1
  else
    printf_cyan "Generating your Dockerfile using template: $GEN_DOCKERFILE_TEMPLATE"
    __make_file "$GEN_DOCKERFILE_TEMPLATE" "$file"
    if [ -f "$file" ]; then
      printf_green "Your Dockerfile for $name has been created in: $(readlink -f "$file")"
      # Create directories
      if [ "$GEN_DOCKER_ONLY_DOCKERFILE" != "true" ]; then
        for create_dir in $make_directories; do
          printf_purple "Creating Directory: ${create_dir//$GEN_DOCKERFILE_CWD\//}"
          mkdir -p "$create_dir"
        done
        # create functions file
        printf_blue "Creating global functions file"
        [ -d "$rootfs_dir/usr/local/etc/docker/functions" ] || mkdir -p "$rootfs_dir/usr/local/etc/docker/functions"
        cp -Rf "$CASJAYSDEVDIR/templates/scripts/functions/docker-entrypoint" "$rootfs_dir/usr/local/etc/docker/functions/entrypoint.sh" &>/dev/null
        if [ -f "$rootfs_dir/usr/local/etc/docker/functions/entrypoint.sh" ]; then
          printf_cyan "Created $rootfs_dir/usr/local/etc/docker/functions/entrypoint.sh"
        fi
        # Create actions file
        printf_blue "Creating $GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml"
        [ -d "$GEN_DOCKERFILE_CWD/.gitea/workflows" ] || mkdir -p "$GEN_DOCKERFILE_CWD/.gitea/workflows"
        __create_actions_file >"$GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml"
        # Create pkmgr script
        printf_blue "Creating $rootfs_dir/usr/local/bin/pkmgr"
        [ -d "$rootfs_dir/usr/local/bin" ] || mkdir -p "$rootfs_dir/usr/local/bin"
        __create_pkmgr_install_script >"$rootfs_dir/usr/local/bin/pkmgr"
        chmod -Rf 755 "$rootfs_dir/usr/local/bin/pkmgr"
        # Create entrypoint script
        printf_blue "Creating $rootfs_dir/usr/local/bin/entrypoint.sh"
        if [ -f "$rootfs_dir/usr/local/bin/entrypoint.sh" ]; then
          printf_yellow "Found existing entrypoint... ${GREEN}Backing up${NC}"
          mv -f "$rootfs_dir/usr/local/bin/entrypoint.sh" "$rootfs_dir/usr/local/bin/entrypoint.sh.$GEN_DOCKERFILE_BACKUP_EXT"
        fi
        if GEN_SCRIPT_EDITFILE="N" gen-script other docker-entrypoint --name "$name" --dir "$rootfs_dir/usr/local/bin" "entrypoint.sh" &>/dev/null; then
          printf_green "Created the entrypoint script"
        else
          printf_red "Failed to create the entrypoint script"
        fi
        # create custom init files
        __custom_init_files
        # create env files
        mkdir -p "$shared_dir/template-files/config/env/examples"
        __create_env "$shared_dir/template-files/config/env/default.sample"
        if [ -d "$CASJAYSDEVDIR/templates/env/docker" ]; then
          printf_yellow "Copying enviroment files to $shared_dir/template-files/config/env/examples/$name"
          for env_file in "$CASJAYSDEVDIR/templates/env/docker"/*; do
            if [ -f "$env_file" ]; then
              name="$(basename -- "$env_file")"
              if ! cp -Rf "$env_file" "$shared_dir/template-files/config/env/examples" |& __devnull; then
                printf_red "Failed to copy $name to $shared_dir/template-files/config/env/examples/$name"
              fi
            fi
          done
        fi
        # create init dir
        printf_cyan "Creating $init_dir dir"
        [ -d "$init_dir" ] || mkdir -p "$init_dir"
        # Make sure git keeps empty directories
        touch "$template_dir/data/.gitkeep"
        touch "$template_dir/config/.gitkeep"
        touch "$template_dir/defaults/.gitkeep"
        # create .gitignore
        __init_git
      fi
      exitCode=$?
    else
      printf_red "Failed to create Dockerfile for $name in $GEN_DOCKERFILE_CWD"
      exitCode=1
    fi
  fi
  [ -f "$tmpFile" ] && rm -Rf "$tmpFile"
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__make_file() {
  template="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
  GEN_DOCKERFILE_TEMPLATE="$template"
  case "$template" in
  alpine)
    shift 1
    __alpine_file "$1"
    ;;

  arch | archlinux)
    shift 1
    __arch_file "$1"
    ;;

  debian)
    shift 1
    __debian_file "$1"
    ;;

  ubuntu)
    shift 1
    __ubuntu_file "$1"
    ;;

  rhel | rockylinux | almalinux | oraclelinux | redhat | centos)
    shift 1
    __almalinux "$1"
    ;;

  web)
    shift 1
    __web "$1"
    ;;

  xorg)
    shift 1
    __xorg "$1"
    ;;

  scratch)
    shift 1
    __scratch "$1"
    ;;

  *)
    __alpine_file "${2:-$1}"
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_start_script() {
  local script_filename="$(basename -- "$1")"
  local rootfs_dir="${dir:-${GEN_DOCKERFILE_CWD:-$PWD}}/rootfs"
  local init_dir="${init_dir:-$rootfs_dir/usr/local/etc/docker/init.d}"
  local script_file="$init_dir/$script_filename"
  local mess="startup script"
  [ "$script_filename" = "service.sample" ] && mess="example start script"
  printf_cyan "Creating the $mess for $script_file"
  [ -d "$init_dir" ] || mkdir -p "$init_dir"
  GEN_SCRIPT_EDITFILE="N" gen-script other start-service --name "$script_filename" --dir "$init_dir" "$script_filename" #&>/dev/null
  [ -f "$script_file" ] && printf_cyan "Created $script_file"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_pkmgr_install_script() {
  cat <<EOF | tee
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/pkmgr.template")
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_actions_file() {
  name="${name:-$(__basename "$GEN_DOCKERFILE_CWD")}"
  cat <<EOF | tee
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/actions.template")
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_env() {
  cat <<EOF | tee -p "$1" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/envfile.template")
EOF
  [ -f "$1" ] && printf_cyan "Created default env file in $1" || printf_red "failed to create $1"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__scratch() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } "
  packages="$(__trim "$packages")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/templates/scratch.template" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/scratch.template")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1

}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__web() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_DEBIAN//,/ }"
  packages="$(__trim "$packages xorg x11-apps")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/templates/web.template" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/web.template")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/web.template")
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__xorg() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_DEBIAN//,/ }"
  packages="$(__trim "$packages xorg x11-apps")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/templates/xorg.template" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/xorg.template")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/xorg.template")
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__debian_file() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_DEBIAN//,/ }"
  packages="$(__trim "$packages")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/templates/debian.template" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/debian.template")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/debian.template")
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ubuntu_file() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_UBUNTU//,/ }"
  packages="$(__trim "$packages")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/templates/ubuntu.template" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/ubuntu.template")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/ubuntu.template")
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__almalinux() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_RHEL//,/ }"
  packages="$(__trim "$packages")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/templates/almalinux.template" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/almalinux.template")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/almalinux.template")
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__alpine_file() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_ALPINE//,/ }"
  packages="$(__trim "$packages")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/alpinelinux.template" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/alpinelinux.template")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/alpinelinux.template")
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__arch_file() {
  Dfile="${1:-$file}"
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES" || packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_ARCH//,/ }"
  packages="$(__trim "$packages")"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/templates/archlinux" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/templates/archlinux")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/archlinux.template")
$(. "$GEN_DOCKERFILE_TEMPLATE_DIR/scratch.template")
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__configure_dockerfile() {
  name="${1:-$GEN_DOCKERFILE_TEMPLATE}"
  printf_yellow "Initializing $name in: ${GEN_DOCKERFILE_CWD//$PWD\//}"
  printf_blue "Setting the tag[s] to: $tag_name"
  if [ -f "$file" ] && [ -f "$file.$GEN_DOCKERFILE_BACKUP_EXT" ]; then
    printf_yellow "Found an existing Dockerfile at: $file"
    printf_cyan "Backing up to: $file.$date.$GEN_DOCKERFILE_BACKUP_EXT"
    mv -f "$file.bak" "$file.$date.$GEN_DOCKERFILE_BACKUP_EXT"
    mv -f "$file" "$file.$GEN_DOCKERFILE_BACKUP_EXT"
  elif [ -f "$file" ]; then
    printf_yellow "Found an existing Dockerfile at: $file"
    printf_cyan "Backing up to: $file.$GEN_DOCKERFILE_BACKUP_EXT"
    mv -f "$file" "$file.$GEN_DOCKERFILE_BACKUP_EXT"
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __set_variables
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ -f "$GEN_DOCKERFILE_TEMPLATE_DIR/template_options.source" ] && . "$GEN_DOCKERFILE_TEMPLATE_DIR/template_options.source" && printf_yellow "Setting options from: $GEN_DOCKERFILE_TEMPLATE_DIR/template_options.source"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_variables() {
  # Set variables from .env.scripts file
  [ -n "$ENV_PACKAGES" ] && packages="$ENV_PACKAGES"
  [ -n "$ENV_VENDOR" ] && GEN_DOCKERFILE_VENDOR="$ENV_VENDOR"
  [ -n "$ENV_AUTHOR" ] && GEN_DOCKERFILE_AUTHOR="$ENV_AUTHOR"
  [ -n "$ENV_HUB_BASE" ] && GEN_DOCKERFILE_HUB_BASE="$ENV_HUB_BASE"
  [ -n "$ENV_MAINTAINER" ] && GEN_DOCKERFILE_MAINTAINER="$ENV_MAINTAINER"
  [ -n "$ENV_ADD_TAGS" ] && GEN_DOCKERFILE_SET_TAGS="$ENV_ADD_TAGS" || GEN_DOCKERFILE_SET_TAGS="$GEN_DOCKERFILE_DEFAULT_TAGS"
  [ -n "$ENV_USE_TEMPLATE" ] && GEN_DOCKERFILE_TEMPLATE="$ENV_USE_TEMPLATE" || GEN_DOCKERFILE_TEMPLATE="$GEN_DOCKERFILE_DEFAULT_TEMPLATE"
  [ -n "$ENV_IMAGE_PUSH" ] && GEN_DOCKERFILE_PUSH_URL="$ENV_IMAGE_PUSH" || GEN_DOCKERFILE_PUSH_URL="${GEN_DOCKERFILE_DEFAULT_IMAGE:-$name}"
  [ -n "$ENV_IMAGE_TAG" ] && GEN_DOCKERFILE_SET_VERSION="$ENV_IMAGE_TAG" || GEN_DOCKERFILE_SET_VERSION="${GEN_DOCKERFILE_DEFAULT_VERSION:-latest}"
  [ -n "$ENV_ORG_NAME" ] && GEN_DOCKERFILE_SET_ORG="$ENV_ORG_NAME" || GEN_DOCKERFILE_SET_ORG="${GEN_DOCKER_DEFAULT_ORG:-$GEN_DOCKER_REGISTRY_ORG}"
  [ -n "$ENV_DISTRO_TAG" ] && GEN_DOCKERFILE_SET_DISTRO_VERSION="$ENV_DISTRO_TAG" || GEN_DOCKERFILE_SET_DISTRO_VERSION="$GEN_DOCKERFILE_DEFAULT_DISTRO_VERSION"
  [ -n "$ENV_PULL_URL" ] && GEN_DOCKERFILE_SET_DISTRO_NAME="$ENV_PULL_URL" || GEN_DOCKERFILE_SET_DISTRO_NAME="${GEN_DOCKERFILE_DEFAULT_DISTRO_NAME_SOURCE:-$GEN_DOCKERFILE_DEFAULT_DISTRO_NAME}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Actions based on env
  [ -n "$GEN_DOCKERFILE_SET_BUILD" ] || GEN_DOCKERFILE_SET_BUILD='${IMAGE_VERSION}'
  [ -n "$GEN_DOCKERFILE_SET_DISTRO_VERSION" ] || GEN_DOCKERFILE_SET_DISTRO_VERSION='${IMAGE_VERSION}'
  [ -z "$GEN_DOCKERFILE_SET_TAGS" ] || GEN_DOCKERFILE_SET_TAGS="$(__trim "${GEN_DOCKERFILE_SET_TAGS//,/ }")"
  [ "$GEN_DOCKERFILE_PUSH_URL" != "$name" ] || GEN_DOCKERFILE_PUSH_URL="${GEN_DOCKERFILE_SET_ORG:-$GEN_DOCKER_REGISTRY_ORG}/$name"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ -n "$GEN_DOCKERFILE_GIT_REPO" ] || GEN_DOCKERFILE_GIT_REPO="$GEN_DOCKERFILE_GIT_BASE/$GEN_DOCKER_GIT_ORG/$(basename -- "$name")"
  [ -n "$GEN_DOCKERFILE_HUB_REPO" ] || GEN_DOCKERFILE_HUB_REPO="$GEN_DOCKERFILE_HUB_BASE/$GEN_DOCKER_REGISTRY_ORG/$(basename -- "$name")"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  GEN_DOCKERFILE_SET_ORG="$(echo "$GEN_DOCKERFILE_SET_ORG" | tr '[:upper:]' '[:lower:]')"
  GEN_DOCKERFILE_PUSH_URL="$(echo "$GEN_DOCKERFILE_PUSH_URL" | tr '[:upper:]' '[:lower:]')"
  GEN_DOCKERFILE_SET_VERSION="$(echo "$GEN_DOCKERFILE_SET_VERSION" | tr '[:upper:]' '[:lower:]')"
  GEN_DOCKERFILE_PULL_URL="$(echo "${GEN_DOCKERFILE_SET_DISTRO_NAME:-casjaysdev/$GEN_DOCKERFILE_TEMPLATE}" | tr '[:upper:]' '[:lower:]')"
  GEN_DOCKERFILE_GIT_BASE="$(echo "${ENV_GIT_REPO_URL:-$GEN_DOCKERFILE_GIT_REPO}" | tr '[:upper:]' '[:lower:]')"
  # Keep HUB_BASE as just the registry hostname, not the full path
  GEN_DOCKERFILE_HUB_BASE="$(echo "${ENV_REGISTRY_URL:-$GEN_DOCKERFILE_HUB_BASE}" | tr '[:upper:]' '[:lower:]')"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ "$GEN_DOCKER_REGISTRY_PUSH_ORG" = "_" ] && GEN_DOCKERFILE_PULL_URL="${GEN_DOCKERFILE_PULL_URL//*\//}"
  GEN_DOCKER_FILE_EXPOSE_PORTS="$(echo "$GEN_DOCKER_FILE_EXPOSE_PORTS+" | tr ' ' '\n' | sort -uV | grep -v '^$' | tr '\n' ',')"
  GEN_DOCKER_FILE_EXPOSE_PORTS="${GEN_DOCKER_FILE_EXPOSE_PORTS//,/ }"
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_make_file_variables() {
  date="$(date +'%Y%m%d%H%M')"
  file="${1:-$GEN_DOCKERFILE_CWD/Dockerfile}"
  [ -n "$ENV_IMAGE_NAME" ] && name="$ENV_IMAGE_NAME" || name="${2:-$(basename -- "$GEN_DOCKERFILE_CWD")}"
  [ -n "$GEN_DOCKERFILE_DEFAULT_VERSION" ] && version="$GEN_DOCKERFILE_DEFAULT_VERSION" || version="$GEN_DOCKERFILE_SET_VERSION"
  file="$(realpath "${ENV_DOCKERFILE:-$file}")"
  repo="${ENV_GIT_REPO_URL:-$3}"
  tmpFile="$GEN_DOCKERFILE_CWD/init.$$"
  rootfs_dir="$GEN_DOCKERFILE_CWD/rootfs"
  shared_dir="$rootfs_dir/usr/local/share"
  template_dir="$shared_dir/template-files"
  custom_init_dir="$rootfs_dir/root/docker/setup"
  init_dir="$rootfs_dir/usr/local/etc/docker/init.d"
  GEN_DOCKERFILE_TEMPLATE="${GEN_DOCKERFILE_TEMPLATE:-alpine}"
  organization="${ENV_ORG_NAME:-$(basename -- "$(dirname "$GEN_DOCKERFILE_CWD")")}"
  make_directories="$GEN_DOCKERFILE_CWD $rootfs_dir $shared_dir $template_dir/config $template_dir/data $template_dir/defaults"
  file_version="$(echo "$version" | grep -v 'latest' | sed 's|[a-zA-Z]||g;s|^ ||g' | awk '{print $1}' | sed 's| ||g' | grep '[a-z]')"
  file_version_is_named="$(echo "$version" | grep -v 'latest' | tr '[:upper:]' '[:lower:]' | awk '{print $1}' | sed 's| ||g' | grep '[0-9a-z]')"
  [ -n "$file_version_is_named" ] && [ -z "$file_version" ] && file_version="$file_version_is_named"
  is_file_versioned="$(echo "$file" | grep -q "$file_version" || echo 'false')"
  IMAGE_REPO="${GEN_DOCKERFILE_HUB_BASE//http*:\/\//}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_DOCKERFILE_CONFIG_FILE="${GEN_DOCKERFILE_CONFIG_FILE:-settings.conf}"
GEN_DOCKERFILE_CONFIG_DIR="${GEN_DOCKERFILE_CONFIG_DIR:-$HOME/.config/myscripts/gen-dockerfile}"
GEN_DOCKERFILE_CONFIG_BACKUP_DIR="${GEN_DOCKERFILE_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-dockerfile/backups}"
GEN_DOCKERFILE_LOG_DIR="${GEN_DOCKERFILE_LOG_DIR:-$HOME/.local/log/gen-dockerfile}"
GEN_DOCKERFILE_TEMP_DIR="${GEN_DOCKERFILE_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-dockerfile}"
GEN_DOCKERFILE_CACHE_DIR="${GEN_DOCKERFILE_CACHE_DIR:-$HOME/.cache/gen-dockerfile}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_DOCKERFILE_OUTPUT_COLOR_1="${GEN_DOCKERFILE_OUTPUT_COLOR_1:-33}"
GEN_DOCKERFILE_OUTPUT_COLOR_2="${GEN_DOCKERFILE_OUTPUT_COLOR_2:-5}"
GEN_DOCKERFILE_OUTPUT_COLOR_GOOD="${GEN_DOCKERFILE_OUTPUT_COLOR_GOOD:-2}"
GEN_DOCKERFILE_OUTPUT_COLOR_ERROR="${GEN_DOCKERFILE_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_DOCKERFILE_BACKUP_EXT="${GEN_DOCKERFILE_BACKUP_EXT:-bak}"
GEN_DOCKERFILE_NOTIFY_ENABLED="${GEN_DOCKERFILE_NOTIFY_ENABLED:-yes}"
GEN_DOCKERFILE_GOOD_NAME="${GEN_DOCKERFILE_GOOD_NAME:-Great:}"
GEN_DOCKERFILE_ERROR_NAME="${GEN_DOCKERFILE_ERROR_NAME:-Error:}"
GEN_DOCKERFILE_GOOD_MESSAGE="${GEN_DOCKERFILE_GOOD_MESSAGE:-No errors reported}"
GEN_DOCKERFILE_ERROR_MESSAGE="${GEN_DOCKERFILE_ERROR_MESSAGE:-Errors were reported}"
GEN_DOCKERFILE_NOTIFY_CLIENT_NAME="${GEN_DOCKERFILE_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_DOCKERFILE_NOTIFY_CLIENT_ICON="${GEN_DOCKERFILE_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY="${GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_DOCKERFILE_SET_TAGS=""
GEN_DOCKERFILE_SET_BUILD=""
GEN_DOCKERFILE_SET_VERSION=""
GEN_DOCKERFILE_SILENT="${GEN_DOCKERFILE_SILENT:-true}"
GEN_DOCKER_FILE_OPTS="${GEN_DOCKER_FILE_OPTS:-set -ex;}"
GEN_DOCKER_GIT_AUTO_INIT="${GEN_DOCKER_GIT_AUTO_INIT:-no}"
GEN_DOCKERFILE_DEFAULT_IMAGE="${GEN_DOCKERFILE_DEFAULT_IMAGE:-}"
GEN_DOCKER_VERSION_FORMAT="${GEN_DOCKER_VERSION_FORMAT:-${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}}"
GEN_DOCKER_GIT_ORG="${GEN_DOCKER_GIT_ORG:-casjaysdevdocker}"
GEN_DOCKER_REGISTRY_ORG="${GEN_DOCKER_REGISTRY_ORG:-casjaysdevdocker}"
GEN_DOCKERFILE_GIT_BASE="${GEN_DOCKERFILE_GIT_BASE:-https://github.com}"
GEN_DOCKERFILE_HUB_BASE="${GEN_DOCKERFILE_HUB_BASE:-https://hub.docker.com}"
BUILDX_BUILD_DATE_FORMAT="${BUILDX_BUILD_DATE_FORMAT:-%Y%m%d%H%M}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_DOCKERFILE_VENDOR="${GEN_DOCKERFILE_VENDOR:-CasjaysDev}"
GEN_DOCKERFILE_AUTHOR="${GEN_DOCKERFILE_AUTHOR:-CasjaysDev}"
GEN_DOCKERFILE_MAINTAINER="${GEN_DOCKERFILE_MAINTAINER:-CasjaysDev <docker-admin@casjaysdev.pro>}"
GEN_DOCKERFILE_TEMPLATE_DIR="${GEN_DOCKERFILE_TEMPLATE_DIR:-$CASJAYSDEVDIR/templates/dockerfiles}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default source registry url
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_RHEL:-almalinux}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ALPINE:-alpine}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_DEBIAN:-debian}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_UBUNTU:-ubuntu}"
GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ARCHLINUX:-menci/archlinuxarm}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Built image registry source
GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL:-casjaysdev/almalinux}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE:-casjaysdev/alpine}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN:-casjaysdev/debian}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU:-casjaysdev/ubuntu}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX:-casjaysdev/archlinux}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default image tags
GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX:-latest}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure variables are null
PHP_SERVER="" PHP_VERSION="" NODE_VERSION="" NODE_MANAGER="" SERVICE_PORT="" GEN_DOCKER_FILE_EXPOSE_PORTS=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Global packages
GEN_DOCKER_FILE_PKGS_ALL=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# debian - comma seperated list
GEN_DOCKER_FILE_PKGS_DEBIAN=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ubuntu - comma seperated list
GEN_DOCKER_FILE_PKGS_UBUNTU=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# almalinux - comma seperated list
GEN_DOCKER_FILE_PKGS_RHEL=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# alpine - comma seperated list
GEN_DOCKER_FILE_PKGS_ALPINE=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# archlinux - comma seperated list
GEN_DOCKER_FILE_PKGS_ARCH=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ] && . "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_DOCKERFILE_LOG_DIR" ] || mkdir -p "$GEN_DOCKERFILE_LOG_DIR" |& __devnull
[ -d "$GEN_DOCKERFILE_TEMP_DIR" ] || mkdir -p "$GEN_DOCKERFILE_TEMP_DIR" |& __devnull
[ -d "$GEN_DOCKERFILE_CACHE_DIR" ] || mkdir -p "$GEN_DOCKERFILE_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_DOCKERFILE_TEMP_FILE="${GEN_DOCKERFILE_TEMP_FILE:-$(mktemp $GEN_DOCKERFILE_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_DOCKERFILE_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_DOCKERFILE_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_DOCKERFILE_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_DOCKERFILE_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_DOCKERFILE_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent,force"
LONGOPTS+=",dockerfile,startup,nogit,template:,image-name:,image-version:,org:,pkmgr"
LONGOPTS+=",tag:,registry:,git:,distro-name:,distro-version:,add-tags:,x11,init,ports"
LONGOPTS+=",apache,nginx,mysql,postgres,php,application:"
LONGOPTS+=",alpine,almalinux,archlinux,debian,ubuntu"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="alpine arch debian ubuntu rhel scratch xorg web"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_DOCKERFILE_SILENT="true"
    ;;
  --force)
    shift 1
    GEN_DOCKERFILE_FORCE="yes"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_DOCKERFILE_CWD="$2"
    [ -d "$GEN_DOCKERFILE_CWD" ] || mkdir -p "$GEN_DOCKERFILE_CWD" |& __devnull
    shift 2
    ;;
  --init)
    GEN_DOCKER_INIT="true"
    shift 1
    ;;
  --x11)
    shift 1
    GEN_DOCKER_ENABLE_X11="yes"
    ;;
  --nogit)
    shift 1
    GEN_DOCKER_GIT_AUTO_INIT="no"
    ;;
  --startup)
    shift 1
    GEN_DOCKER_CREATE_START_SCRIPT="true"
    exit $?
    ;;
  --dockerfile)
    shift 1
    GEN_DOCKER_ONLY_DOCKERFILE="true"
    ;;
  --pkmgr)
    shift 1
    __create_pkmgr_install_script
    exit
    ;;
  --template)
    GEN_DOCKERFILE_DEFAULT_TEMPLATE="$2"
    shift 2
    ;;
  --git)
    GEN_DOCKER_GIT_ORG="$2"
    shift 2
    ;;
  --registry)
    GEN_DOCKER_REGISTRY_PUSH_ORG="$2"
    shift 2
    ;;
  --org)
    GEN_DOCKER_GIT_ORG="$2"
    GEN_DOCKER_DEFAULT_ORG="$2"
    GEN_DOCKER_REGISTRY_ORG="$2"
    shift 2
    ;;
  --image-name)
    GEN_DOCKERFILE_DEFAULT_IMAGE="$2"
    shift 2
    ;;
  --image-version)
    GEN_DOCKERFILE_DEFAULT_VERSION="$2"
    GEN_DOCKERFILE_SET_VERSION="$GEN_DOCKERFILE_DEFAULT_VERSION"
    shift 2
    ;;
  --tag)
    GEN_DOCKERFILE_DEFAULT_VERSION="$2"
    GEN_DOCKERFILE_SET_VERSION="$GEN_DOCKERFILE_DEFAULT_VERSION"
    shift 2
    ;;
  --add-tags)
    GEN_DOCKERFILE_DEFAULT_TAGS+="$2 "
    shift 2
    ;;
  --distro-name)
    GEN_DOCKERFILE_DEFAULT_DISTRO_NAME="$2"
    shift 2
    ;;
  --distro-version)
    GEN_DOCKERFILE_DEFAULT_DISTRO_VERSION="$2"
    shift 2
    ;;
  --ports)
    GEN_DOCKER_FILE_EXPOSE_PORTS+="$2 "
    shift 2
    ;;
  --application)
    file="https://github.com/templatemgr/$2/raw/main/install.sh"
    if curl -q -LSsfI --max-time 2 --retry 1 -o /dev/null "$file" &>/dev/null; then
      printf_cyan "Adding $2 as a custom app"
      GEN_DOCKERFILE_CUSTOM_APPLICATIONS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"$file\")\"; \\
"
    else
      printf_yellow "$2 is not a valid application"
    fi
    unset file
    shift 2
    ;;
  --apache)
    shift 1
    GEN_DOCKER_FILE_EXPOSE_PORTS+="80 "
    GEN_DOCKERFILE_DEFAULT_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" apache2 apache2-ctl apache2-lua apache2-ssl apache2-ldap apache2-icons apache2-http2 \\
  apache2-error apache2-proxy apache2-brotli apache2-webdav apache2-mod-wsgi apache-mod-fcgid apache2-proxy-html "
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/apache2/raw/main/install.sh\")\"; \\
"
    GEN_DOCKERFILE_CUSTOM_APPLICATIONS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-cgi-bin/raw/main/install.sh\")\"; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-html-pages/raw/main/install.sh\")\"; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-error-pages/raw/main/install.sh\")\"; \\
"
    ;;
  --nginx)
    shift 1
    GEN_DOCKER_FILE_EXPOSE_PORTS+="80 "
    GEN_DOCKERFILE_DEFAULT_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" nginx nginx-mod-http-brotli nginx-mod-http-cache-purge nginx-mod-http-dav-ext nginx-mod-http-echo \\
  nginx-mod-http-encrypted-session nginx-mod-http-fancyindex nginx-mod-http-geoip nginx-mod-http-geoip2 \\
  nginx-mod-http-headers-more nginx-mod-http-image-filter nginx-mod-http-js nginx-mod-http-lua nginx-mod-http-perl \\
  nginx-mod-http-redis2 nginx-mod-http-set-misc nginx-mod-http-shibboleth nginx-mod-http-untar nginx-mod-http-upload \\
  nginx-mod-http-upload-progress nginx-mod-http-upstream-fair nginx-mod-http-xslt-filter nginx-mod-http-zip"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/nginx/raw/main/install.sh\")\"; \\
"
    GEN_DOCKERFILE_CUSTOM_APPLICATIONS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-html-pages/raw/main/install.sh\")\"; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-error-pages/raw/main/install.sh\")\"; \\
"
    ;;
  --mariadb | --mysql)
    shift 1
    GEN_DOCKER_FILE_EXPOSE_PORTS+="80 3306 "
    GEN_DOCKERFILE_DEFAULT_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" mariadb-server-utils mariadb-client mariadb pwgen \\
"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/mariadb/raw/main/install.sh\")\"; \\
"
    ;;
  --postgres)
    shift 1
    GEN_DOCKER_FILE_EXPOSE_PORTS+="80 5432 "
    GEN_DOCKERFILE_DEFAULT_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" pwgen \${POSTGRESQL_VERSION} \${POSTGRESQL_VERSION}-client \${POSTGRESQL_VERSION}-contrib \${POSTGRESQL_VERSION}-jit \\
"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=$PHP_VERSION NODE_VERSION=$NODE_VERSION NODE_MANAGER=$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/postgres/raw/main/install.sh\")\"; \\
"
    ;;
  --php)
    shift 1
    GEN_DOCKER_FILE_EXPOSE_PORTS+="80 9000 "
    GEN_DOCKERFILE_DEFAULT_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" composer \${PHP_VERSION}-bcmath \${PHP_VERSION}-bz2 \${PHP_VERSION}-calendar \${PHP_VERSION}-cgi \${PHP_VERSION}-common \\
  \${PHP_VERSION}-ctype \${PHP_VERSION}-curl \${PHP_VERSION}-dba \${PHP_VERSION}-dev \${PHP_VERSION}-doc \${PHP_VERSION}-dom \\
  \${PHP_VERSION}-embed \${PHP_VERSION}-enchant \${PHP_VERSION}-exif \${PHP_VERSION}-ffi \${PHP_VERSION}-fileinfo \${PHP_VERSION}-fpm \\
  \${PHP_VERSION}-ftp \${PHP_VERSION}-gd \${PHP_VERSION}-gettext \${PHP_VERSION}-gmp \${PHP_VERSION}-iconv \${PHP_VERSION}-imap \${PHP_VERSION}-intl \\
  \${PHP_VERSION}-ldap \${PHP_VERSION}-litespeed \${PHP_VERSION}-mbstring \${PHP_VERSION}-mysqli \${PHP_VERSION}-mysqlnd \${PHP_VERSION}-odbc \\
  \${PHP_VERSION}-opcache \${PHP_VERSION}-openssl \${PHP_VERSION}-pcntl \${PHP_VERSION}-pdo \${PHP_VERSION}-pdo_dblib \${PHP_VERSION}-pdo_mysql \\
  \${PHP_VERSION}-pdo_odbc \${PHP_VERSION}-pdo_pgsql \${PHP_VERSION}-pdo_sqlite \${PHP_VERSION}-pear \${PHP_VERSION}-pgsql \${PHP_VERSION}-phar \\
  \${PHP_VERSION}-phpdbg \${PHP_VERSION}-posix \${PHP_VERSION}-pspell \${PHP_VERSION}-session \${PHP_VERSION}-shmop \${PHP_VERSION}-simplexml \\
  \${PHP_VERSION}-snmp \${PHP_VERSION}-soap \${PHP_VERSION}-sockets \${PHP_VERSION}-sodium \${PHP_VERSION}-sqlite3 \${PHP_VERSION}-sysvmsg \\
  \${PHP_VERSION}-sysvsem \${PHP_VERSION}-sysvshm \${PHP_VERSION}-tidy \${PHP_VERSION}-tokenizer \${PHP_VERSION}-xml \${PHP_VERSION}-xmlreader \\
  \${PHP_VERSION}-xmlwriter \${PHP_VERSION}-xsl \${PHP_VERSION}-zip \${PHP_VERSION}-pecl-memcached \${PHP_VERSION}-pecl-mcrypt \\
  \${PHP_VERSION}-pecl-mongodb \${PHP_VERSION}-pecl-redis "
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/php/raw/main/install.sh\")\"; \\
"
    ;;
  --alpine) shift 1 && GEN_DOCKER_FILE_EXPOSE_PORTS+="" && GEN_DOCKERFILE_DEFAULT_DISTRO_NAME_SOURCE="$GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ALPINE" && GEN_DOCKERFILE_DEFAULT_TEMPLATE="alpine" ;;
  --almalinux) shift 1 && GEN_DOCKER_FILE_EXPOSE_PORTS+="" && GEN_DOCKERFILE_DEFAULT_DISTRO_NAME_SOURCE="$GEN_DOCKER_SPECIFY_IMAGE_SOURCE_RHEL" && GEN_DOCKERFILE_DEFAULT_TEMPLATE="almalinux" ;;
  --archlinux) shift 1 && GEN_DOCKER_FILE_EXPOSE_PORTS+="" && GEN_DOCKERFILE_DEFAULT_DISTRO_NAME_SOURCE="$GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ARCHLINUX" && GEN_DOCKERFILE_DEFAULT_TEMPLATE="archlinux" ;;
  --debian) shift 1 && GEN_DOCKER_FILE_EXPOSE_PORTS+="" && GEN_DOCKERFILE_DEFAULT_DISTRO_NAME_SOURCE="$GEN_DOCKER_SPECIFY_IMAGE_SOURCE_DEBIAN" && GEN_DOCKERFILE_DEFAULT_TEMPLATE="debian" ;;
  --ubuntu) shift 1 && GEN_DOCKER_FILE_EXPOSE_PORTS+="" && GEN_DOCKERFILE_DEFAULT_DISTRO_NAME_SOURCE="$GEN_DOCKER_SPECIFY_IMAGE_SOURCE_UBUNTU" && GEN_DOCKERFILE_DEFAULT_TEMPLATE="ubuntu" ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_DOCKERFILE_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_DOCKERFILE_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
[ -d "$1" ] && __is_an_option "$1" && GEN_DOCKERFILE_CWD="$1" && shift 1 || GEN_DOCKERFILE_CWD="${GEN_DOCKERFILE_CWD:-$PWD}"
GEN_DOCKERFILE_CWD="$(realpath "${GEN_DOCKERFILE_CWD:-$PWD}" 2>/dev/null)"
if [ -d "$GEN_DOCKERFILE_CWD" ] && cd "$GEN_DOCKERFILE_CWD"; then
  true
# if [ "$GEN_DOCKERFILE_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_DOCKERFILE_CWD"
# fi
else
  printf_exit "ðŸ’” $GEN_DOCKERFILE_CWD does not exist ðŸ’”"
fi
export GEN_DOCKERFILE_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
[ "$(ls -A "$GEN_DOCKERFILE_CWD/Dockerfile"* 2>/dev/null | wc -l)" -ne 0 ] && GEN_DOCKER_ONLY_DOCKERFILE="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
actions)
  shift 1
  if [ -f "$GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml" ]; then
    if [ -f "$GEN_DOCKERFILE_CWD/Dockerfile" ]; then
      printf_blue "Creating $GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml"
      [ -d "$GEN_DOCKERFILE_CWD/.gitea/workflows" ] || mkdir -p "$GEN_DOCKERFILE_CWD/.gitea/workflows"
      __create_actions_file >"$GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml"
    fi
  else
    printf_red "File: $GEN_DOCKERFILE_CWD/.gitea/workflows/docker.yaml exists"
  fi
  exit
  ;;
alpine)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="alpine"
  ;;
arch | archlinux)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="archlinux"
  ;;
debian)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="debian"
  ;;
rhel | rockylinux | almalinux | oraclelinux | redhat | centos)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="almalinux"
  ;;
ubuntu)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="ubuntu"
  ;;
xorg)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="xorg"
  ;;
web)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="web"
  ;;
scratch)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="scratch"
  ;;
*)
  GEN_DOCKERFILE_DEFAULT_TEMPLATE="${GEN_DOCKERFILE_DEFAULT_TEMPLATE:-${GEN_DOCKERFILE_TEMPLATE:-alpine}}"
  ;;
esac
GEN_DOCKERFILE_TEMPLATE="${GEN_DOCKERFILE_TEMPLATE:-$GEN_DOCKERFILE_DEFAULT_TEMPLATE}"
GEN_DOCKERFILE_DEFAULT_TEMPLATE="${GEN_DOCKERFILE_TEMPLATE:-$GEN_DOCKERFILE_DEFAULT_TEMPLATE}"
if [ "$GEN_DOCKER_CREATE_START_SCRIPT" = "true" ]; then
  __create_start_script "$2"
else
  __execute_gen_dockerfile "${@:-Dockerfile}"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
