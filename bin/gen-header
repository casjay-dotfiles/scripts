#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208072313-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-header --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 07, 2022 23:13 EDT
# @@File             :  gen-header
# @@Description      :  Generate a header for use in scripts
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208072313-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_HEADER_REQUIRE_SUDO="${GEN_HEADER_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE"
  fi
  [ -d "$GEN_HEADER_CONFIG_DIR" ] || mkdir -p "$GEN_HEADER_CONFIG_DIR"
  [ -d "$GEN_HEADER_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_HEADER_CONFIG_BACKUP_DIR"
  [ -f "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE" ] &&
    cp -Rf "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE" "$GEN_HEADER_CONFIG_BACKUP_DIR/$GEN_HEADER_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE"
# Settings for gen-header
GEN_HEADER_EMAIL="${GEN_HEADER_EMAIL:-$USER@$(hostname -f)}"
GEN_HEADER_AUTHOR="${GEN_HEADER_AUTHOR:-$USER}"
GEN_HEADER_COMPANY="${GEN_HEADER_COMPANY:-}"
GEN_HEADER_VERSIONFMT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GEN_HEADER_DEFREADME="${GEN_HEADER_DEFREADME:-README.md}"
GEN_HEADER_DEFLICENSE="${GEN_HEADER_DEFLICENSE:-WTFPL}"
GEN_HEADER_DATEFMT="${GEN_HEADER_DATEFMT:-%A, %b %d, %Y %H:%M %Z}"
GEN_HEADER_COPYRIGHT="Copyright: (c) $GEN_HEADER_YEAR $GEN_HEADER_AUTHOR, $GEN_HEADER_COMPANY"
GEN_HEADER_CONFIG_DIR="${GEN_HEADER_CONFIG_DIR:-$GEN_HEADER_CONFIG_DIR}"
GEN_HEADER_CONFIG_BACKUP_DIR="${GEN_HEADER_CONFIG_BACKUP_DIR:-$GEN_HEADER_CONFIG_DIR/backups}"
GEN_HEADER_DEFAULT_MAN_DIR="${GEN_HEADER_DEFAULT_MAN_DIR:-man}"
GEN_HEADER_DEFAULT_COMPLETION_DIR="${GEN_HEADER_DEFAULT_COMPLETION_DIR:-completions}"
GEN_HEADER_GIT_DEFAULT_BRANCH="${GEN_HEADER_GIT_DEFAULT_BRANCH:-main}"
GEN_HEADER_TEMPLATE_DIR="${GEN_HEADER_TEMPLATE_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Make file options - the first option allows environment overrides
GEN_HEADER_MAKEFILE="\${MAKEFILE:-Y}"        # This should always be Y
GEN_HEADER_OVERWRITE="\${OVERWRITE:-N}"      # Default ask to overwrite
GEN_HEADER_EDITFILE="\${EDITFILE:-N}"        # Skip editing file
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_HEADER_OUTPUT_COLOR_1="${GEN_HEADER_OUTPUT_COLOR_1:-}"
GEN_HEADER_OUTPUT_COLOR_2="${GEN_HEADER_OUTPUT_COLOR_2:-}"
GEN_HEADER_OUTPUT_COLOR_GOOD="${GEN_HEADER_OUTPUT_COLOR_GOOD:-}"
GEN_HEADER_OUTPUT_COLOR_ERROR="${GEN_HEADER_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_HEADER_NOTIFY_ENABLED="${GEN_HEADER_NOTIFY_ENABLED:-}"
GEN_HEADER_GOOD_NAME="${GEN_HEADER_GOOD_NAME:-}"
GEN_HEADER_ERROR_NAME="${GEN_HEADER_ERROR_NAME:-}"
GEN_HEADER_GOOD_MESSAGE="${GEN_HEADER_GOOD_MESSAGE:-}"
GEN_HEADER_ERROR_MESSAGE="${GEN_HEADER_ERROR_MESSAGE:-}"
GEN_HEADER_NOTIFY_CLIENT_NAME="${GEN_HEADER_NOTIFY_CLIENT_NAME:-}"
GEN_HEADER_NOTIFY_CLIENT_ICON="${GEN_HEADER_NOTIFY_CLIENT_ICON:-}"
GEN_HEADER_NOTIFY_CLIENT_URGENCY="${GEN_HEADER_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-header:  Generate a header for use in scripts - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-header [options] [commands]"
  __printf_line "head [name]                        - Create header info"
  __printf_line "folders [name]                     - Create environment variables "
  __printf_line "functions [name]                   - Generate functions"
  __printf_line "replace [file] [search] [replace]  - Replace older header info"
  __printf_line "env [name] [PRE:] [SUF:] [VARS]    - Create environment variables"
  __printf_line "--copy                             - Copy template files"
  __printf_line "--folders                          - Show folders"
  __printf_line "--functions                        - Show functions"
  __printf_line "--desc [Text]                      - Set the description"
  __printf_line "--todo [Text]                      - Set TODO message"
  __printf_line "--changelog [Text]                 - Set changelog message"
  __printf_line "--copyright [Text]                 - Set copyright message"
  __printf_line "--other [Text]                     - Set other messages"
  __printf_line "--res [Text]                       - Set resource message"
  __printf_line "--type [system,user]               - Set type: see bottom for full list"
  __printf_line "--name [Text]                      - Set script name"
  __printf_line "--license [wtfpl,gpl,etc.]         - Set the license"
  __printf_line "--silent                           - Disable all messages"
  __printf_line "--prev                             - Import from a script"
  __printf_line "--no                               - No confirmations"
  __printf_line "--keep                             - No overwrite"
  __printf_line "--replace                          - Replace header info"
  __printf_line "--pause                            - Waits for user input"
  __printf_line "--skip                             - Overwrite files"
  __printf_line "--user                             - Set type to user"
  __printf_line "--system                           - Set type to system"
  __printf_line "--profile                          - Set type to a personal script"
  __printf_line "--dir                              - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_HEADER_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_HEADER_REQUIRE_SUDO_RUN" ]; then
    export GEN_HEADER_REQUIRE_SUDO="no"
    export GEN_HEADER_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_HEADER_TEMP_FILE" ] && rm -Rf "$GEN_HEADER_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__source() {
  local source="${1:-$GEN_HEADER_TEMPLATE_DIR/header/default.tmpl.sh}"
  [ -f "$source" ] && . "$source" || echo ''
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__copy_files() {
  if [ "$GEN_HEADER_TEMPLATE_DIR" = "$CASJAYSDEVDIR/templates/gen-script" ]; then
    GEN_HEADER_TEMPLATE_DIR="$GEN_HEADER_CONFIG_DIR/templates"
    __gen_config &>/dev/null
  fi
  mkdir -p "$GEN_HEADER_TEMPLATE_DIR"
  if [ -d "${CASJAYSDEVDIR}/templates/gen-script" ]; then
    printf_green "Copying $APPNAME templates $CASJAYSDEVDIR/templates/gen-script"
    __cp_rf "$CASJAYSDEVDIR/templates/gen-script/." "$GEN_HEADER_TEMPLATE_DIR/"
    if [ "$(__count_dir $GEN_HEADER_TEMPLATE_DIR)" -ne 0 ]; then
      printf_green "Copying has succeeded > $GEN_HEADER_TEMPLATE_DIR"
      exitCodeT=0
    else
      printf_error "Copying of files has failed < $GEN_HEADER_TEMPLATE_DIR"
      exitCodeT=1
    fi
  else
    printf_error "Can not find headers template files"
    exitCodeT=1
  fi
  echo ""
  return $exitCodeT
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__filename() {
  basename -- "$1" 2>/dev/null
} && export -f __filename
# - - - - - - - - - - - - - - - - - - - - - - - - -
__sed() {
  $GEN_HEADER_SED_CMD -i 's|'"$1"'|'"$2"'|g' "$3" &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providefilename() {
  [ -f "$(__fullfilename "${1:-$filename}")" ] || printf_exit "Please provide a filename"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_env_vars() {
  echo "$1" | tr '[a-z]' '[A-Z]' | $GEN_HEADER_SED_CMD 's#-#_#g;s# #_#g;s/\./_/g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__print_wait() {
  printf_pause "$*" && printf_newline "\n"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__tee() {
  tee | $GEN_HEADER_SED_CMD 's|  :   |  :  |g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__sed_remove_empty() {
  $GEN_HEADER_SED_CMD '/^\#/d;/^$/d;s#^ ##g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__sed_head_remove() {
  awk -F'  :' '{print $2}'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__sed_head() {
  $GEN_HEADER_SED_CMD -E 's|^.*#||g;s#^ ##g;s|^@||g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_head() {
  grep -shE '[".#]?@[A-Z]' "${2:-$command}" | grep "${1:-}" | head -n 12 | __sed_head | __sed_remove_empty | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_head_remove() {
  grep -shE '[".#]?@[A-Z]' "${2:-$command}" | grep "${1:-}" | grep -Ev 'GEN_SCRIPT_*|\${|\$\(' | sed_head_remove | $GEN_HEADER_SED_CMD '/^\#/d;/^$/d;s#^ ##g' | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__grep() {
  grep -shE ^'.*#?@'${2:-$headerfield}'.*  :' "${3:-$filename}" |
    grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 | grep ${1:-} '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__show_message() {
  if [ -z "$gen_header_raw" ]; then
    [ "$GEN_HEADER_SILENT" != "true" ] && $1 "$2"
  fi
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__fullfilename() {
  found_name="$(type -P "$(basename -- "$1" 2>/dev/null)" || command -v "$(basename -- "$1" 2>/dev/null)" || ls -A "$1" 2>/dev/null)"
  [ -n "$found_name" ] && echo "$found_name" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__get_header() {
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  local command="$(__fullfilename "$filename")"
  if [ -f "$command" ] && __check_header "$command"; then
    if [ "$1" = "all" ]; then
      shift 1
      printf "# - - - - - - - - - - - - - - - - - - - - - - - - -\n"
      grep -shE '^.*#.@'*'.*  :' "$command" 2>/dev/null | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n${1:-14} | grep '^' || return 1
      printf "# - - - - - - - - - - - - - - - - - - - - - - - - -\n"
    elif [ "$1" = "prev" ]; then
      shift 1
      grep -shE '^.*#.@'*'.*  :' -B1 -A1 "$command" 2>/dev/null | head -n${1:-14} | grep -Ev '${.*}|\$|GEN_SCRIPT_' | grep '^' || return 1
    else
      local search="$1"
      local command="${2:-$command}"
      #grep -shE '^.*#.@'$1'' "$command" 2>/dev/null | grep ' :' | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 | $GEN_HEADER_SED_CMD 's/.*#.@'*'.*  ://g;s#^ ##g' | grep '^' || return 1
      __grep_head_remove "$search" "$command" | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 || return 1
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__check_header() {
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin:$PWD"
  local command="$(__fullfilename "${command:-$filename}")"
  grep -sh ^'.*##@Version.*:' "${command:-$filename}" 2>/dev/null | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 | grep -q '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__get_prev() {
  local filename="${1:-$filename}"
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  local command="$(__fullfilename "$filename")"
  if [ -f "$command" ] && __check_header "$command"; then
    if [ -z "$get_prev_shown" ]; then
      [ "$GEN_HEADER_SILENT" = "true" ] || printf_green "setting desc todo other and res from $(basename -- "$command" 2>/dev/null)"
    fi
    get_desc="$(__get_header 'Description' || echo '')"
    get_changelog="$(__get_header 'Changelog' || echo '')"
    get_todo="$(__get_header 'TODO' || echo '')"
    get_other="$(__get_header 'Other' || echo '')"
    get_res="$(__get_header 'Resource' || echo '')"
    get_template="$(__get_header 'Template' || echo 'no')"
    get_terminal="$(__get_header 'Terminal App' || echo 'no')"
    get_sudo="$(__get_header 'sudo/root' || echo 'no')"
  fi
  get_prev_shown=true
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Current file info
__prev_header() {
  __get_header "prev" #|| __no_header
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__no_header() {
  unset gen_header_prev gen_header_replace exitCode
  rerun=true
  printf_red "No header info was found: Using default"
  __gen_header "${filename:-command}"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__set_header() {
  get_template="${GEN_HEADER_TEMPLATE_NAME:-$get_template}"
  [ "$GEN_HEADER_SILENT" = "true" ] || printf_blue "Setting header options for ${header_type:-system}"
  [ -n "$desc" ] || get_desc="${get_desc:-newScript}"
  [ -n "$todo" ] || get_todo="${get_todo:-Refactor code}"
  [ -n "$other" ] || get_other="${get_other:-}"
  [ -n "$res" ] || get_res="${get_other:-}"
  [ -n "$changelog" ] || get_changelog="${get_changelog:-newScript}"
  [ -n "$terminal" ] || get_terminal="${get_terminal:-no}"
  [ -n "$sudo" ] || get_sudo="${get_sudo:-no}"
  [ -n "$template" ] || get_template="${get_template:-bash/system}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_header() {
  local filename="${1:-$filename}"
  shell="${GEN_HEADER_SHELL:-bash}"
  [ -z "$pause" ] || { clear && printf_newline "\n\n\n"; }
  rerun() {
    unset gen_header_replace exitCode
    rerun=true
    __gen_header
    exit $?
  }
  if [ "$rerun" != "true" ]; then
    __set_header "$@"
    __vars "$filename"
    __show_message printf_green "New header info for $filename"
    __get_prev "$filename"
    [ -n "$gen_header_raw" ] && filename=template
    GEN_SCRIPT_DEFREADME="$(__filename "$filename" 2>/dev/null) --help"
    GEN_SCRIPT_NEWFILE="$filename"
    GEN_SCRIPT_REPLACE_ENV="$(__gen_env_vars "$filename")"
    [ -n "$gen_header_raw" ] || [ -n "${desc:-$get_desc}" ] ||
      __show_message printf_yellow "Description: ${desc:-None provided}"
    [ -n "$gen_header_raw" ] || [ -n "${todo:-$get_todo}" ] ||
      __show_message printf_yellow "TODO: ${todo:-None provided}"
  fi
  if [ -n "$gen_header_prev" ]; then
    __check_header "$filename" || __no_header
    __providefilename "$filename"
    __show_message printf_blue "Imported header from $(__fullfilename "$filename")"
    __prev_header
  elif [ "$gen_header_replace" = "true" ]; then
    __check_header "$filename" || __no_header
    __providefilename "$filename"
    __show_message printf_blue "Imported header from $(__fullfilename "$filename")"
    __replace_header "$filename"
  elif [ -n "$gen_header_raw" ]; then
    __show_message printf_blue "Showing the raw header template"
    __gen_header_raw "$filename" || rerun
  elif [ -f "$GEN_HEADER_TEMPLATE_DIR/header/default.tmpl.sh" ] && [ "$GEN_HEADER_TYPE" = "basic" ]; then
    template="shell/$shell"
    readme="# @@ReadME           :  $shell --help"
    license="# @@License          :  WTFPL"
    [ -z "$GEN_SCRIPT_CUSTOM_LICENSE" ] || license="# @@License          :  $GEN_SCRIPT_DEFLICENSE"
    __show_message printf_blue "Using header from $GEN_HEADER_TEMPLATE_DIR/header/default.tmpl.sh"
    cat <<EOF | sed "s|# @@ReadME   .*|$readme|g;s|# @@License   .*|$license|g" |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/header/default.tmpl.sh")
# - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
  elif [ -n "$gen_header_user" ] && [ -z "$gen_header_raw" ]; then
    __gen_template_user | $GEN_HEADER_SED_CMD "s|GEN_SCRIPT_REPLACE_ENV|$GEN_SCRIPT_REPLACE_ENV|g"
  else
    __gen_template_system | $GEN_HEADER_SED_CMD "s|GEN_SCRIPT_REPLACE_ENV|$GEN_SCRIPT_REPLACE_ENV|g"
  fi

  if [ "$showFunctions" = "true" ]; then
    __gen_functions
  fi

  if [ "$showFolders" = "true" ]; then
    __gen_folders "$GEN_SCRIPT_NEWFILE" | $GEN_HEADER_SED_CMD 's|'$(__gen_env_vars "GEN_SCRIPT_REPLACE_ENV")'|'$(__gen_env_vars "$GEN_SCRIPT_NEWFILE")'|g' |& __tee
  fi

  [ ${exitCode:-0} -ne 0 ] || { __show_message "printf '\n' && printf_blue" "Your header is ready for use"; }
  [ -z "$pause" ] || __show_message __print_wait "Press any key when done"
  [ "$GEN_HEADER_SILENT" = "true" ] || printf_newline
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_template_user() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-$GEN_FILENAME} 2>/dev/null)"
  [ "$header_type" = "user" ] && PROG="PROG" || PROG="APPNAME"
  cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/script/user.tmpl.sh")
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_template_system() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-$GEN_FILENAME} 2>/dev/null)"
  cat <<EOF
$(__source "$GEN_HEADER_TEMPLATE_DIR/script/system.tmpl.sh")
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__replace_header() {
  local GEN_SCRIPT_NEWFILE="${1:-$GEN_SCRIPT_NEWFILE}"
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-$GEN_FILENAME} 2>/dev/null)"
  __get_prev
  if [ -n "$filename" ]; then
    printf "Version: %s | Created: %s\n" "$GEN_SCRIPT_VERSION" "$GEN_SCRIPT_CREATED"
    __get_header "all"
  else
    [ -n "$desc" ] || get_desc="${get_desc:-newScript}"
    [ -n "$todo" ] || get_todo="${get_todo:-Refactor code}"
    [ -n "$other" ] || get_other="${get_other:-}"
    [ -n "$res" ] || get_res="${get_res:-}"
    [ -n "$changelog" ] || get_changelog="${get_changelog:-newScript}"
    [ -n "$terminal" ] || get_terminal="${get_terminal:-no}"
    [ -n "$sudo" ] || get_sudo="${get_sudo:-no}"
    [ -n "$template" ] || get_template="${get_template:-bash/system}"
    cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/header/replace.tmpl.sh")
EOF
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_header_raw() {
  local GEN_SCRIPT_NEWFILE="${1:-$GEN_SCRIPT_NEWFILE}"
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-$GEN_FILENAME} 2>/dev/null)"
  if [ "$header_type" = "user" ]; then
    GEN_SCRIPT_REPLACE_APPNAME="APPNAME"
  else
    GEN_SCRIPT_REPLACE_APPNAME="APPNAME"
  fi
  cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/header/raw.tmpl.sh")
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__vars() {
  if [ -f "$GEN_HEADER_TOP_DIR/README.md" ]; then
    GEN_SCRIPT_DEFREADME="README.md"
  else
    GEN_SCRIPT_DEFREADME="$(basename -- "$1" 2>/dev/null) --help"
  fi
  if [ -f "$GEN_HEADER_TOP_DIR/LICENSE.md" ] && [ -z "$GEN_SCRIPT_CUSTOM_LICENSE" ]; then
    GEN_SCRIPT_DEFLICENSE="LICENSE.md"
  else
    GEN_SCRIPT_DEFLICENSE="${GEN_SCRIPT_DEFLICENSE:-}"
  fi
  if [ -f "$GEN_HEADER_TOP_DIR/version.txt" ]; then
    GEN_SCRIPT_VERSION="$(cat $GEN_HEADER_TOP_DIR/version.txt 2>/dev/null)"
  else
    GEN_SCRIPT_VERSION="${GEN_SCRIPT_VERSION:-}"
  fi
  export GEN_SCRIPT_VERSION GEN_SCRIPT_DEFREADME GEN_SCRIPT_DEFLICENSE
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_env() {
  local scriptName="$1" && shift 1
  while :; do
    case "$1" in
    PRE:*)
      PREFIX="${1//PRE:/}"
      shift 1
      ;;
    SUF:*)
      SUFFIX="${1//SUF:/}"
      shift 1
      ;;
    *) break ;;
    esac
  done
  local vars=("${@:-}")
  [ -z "$PREFIX" ] || PREFIX="${PREFIX}_"
  [ -z "$SUFFIX" ] || SUFFIX="_$SUFFIX"
  printf_blue "Creating variables for $scriptName"
  echo "# - - - - - - - - - - - - - - - - - - - - - - - - -"
  echo "# Additional Variables"
  for var in "${vars[@]}"; do
    var="$(__gen_env_vars "${scriptName}_${PREFIX}${var}${SUFFIX}")"
    echo "$var"
  done
  echo "# - - - - - - - - - - - - - - - - - - - - - - - - -"
  printf_blue "Created your new variables"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_functions() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-$GEN_FILENAME} 2>/dev/null)"
  header_type="${1:-$header_type}"
  __vars "$@"
  if [ "$header_type" = "profile" ]; then
    cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/functions/profile.tmpl.sh")
EOF
  elif [ -n "$gen_header_user" ] || [ "$header_type" = "user" ]; then
    cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/functions/user.tmpl.sh")
EOF
  else
    header_type="${header_type:-system}"
    cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/functions/system.tmpl.sh")
EOF
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_folders() {
  local GEN_SCRIPT_NEWFILE="${1:-$filename}"
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-$GEN_FILENAME} 2>/dev/null)"
  __vars "$@"
  if [ -n "$gen_header_user" ] || [ "$header_type" = "profile" ]; then
    cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/folders/profile.tmpl.sh")
EOF
  elif [ -n "$gen_header_user" ] || [ "$header_type" = "user" ]; then
    cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/folders/user.tmpl.sh")
EOF
  else
    header_type="${header_type:-system}"
    cat <<EOF |& __tee
$(__source "$GEN_HEADER_TEMPLATE_DIR/folders/system.tmpl.sh")
EOF
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# "$file" "$search" "$replace"
__update_header() {
  local filename="$1"
  local headerfield="$2"
  local replace="$3"
  local exitCode=0
  local search="" status="" pretty_header=""
  updateheader="$(grep -sh '# @@'$headerfield'.*:' "$filename" | head -n1 | awk -F':' '{print $1}' || echo '')"
  updatevalue="$(grep -sh '# @@'$headerfield'.*:' "$filename" | head -n1 | awk -F':' '{print $2}' || echo 'New Value')"
  [ -f "$filename" ] || printf_exit "Please provide a filename"
  [ "$headerfield" = "Version" ] && __update_version "$filename" && return 0 || return 1
  [ -z "$replace" ] && [ "$headerfield" = "Author" ] && replace="$GEN_HEADER_AUTHOR"
  [ -z "$replace" ] && [ "$headerfield" = "Contact" ] && replace="$GEN_HEADER_EMAIL"
  [ -z "$replace" ] && [ "$headerfield" = "License" ] && replace="$GEN_HEADER_DEFLICENSE"
  [ -z "$replace" ] && [ "$headerfield" = "ReadME" ] && replace="$GEN_HEADER_DEFREADME"
  [ -z "$replace" ] && [ "$headerfield" = "Copyright" ] && replace="$GEN_HEADER_COPYRIGHT"
  [ -z "$replace" ] && [ "$headerfield" = "File" ] && replace="$(basename -- "$filename")"
  [ -z "$replace" ] && [ "$headerfield" = "Description" ] && replace="$updatevalue"
  [ -z "$replace" ] && [ "$headerfield" = "Changelog" ] && replace="Updated header info"
  [ -z "$replace" ] && [ "$headerfield" = "TODO" ] && replace="Update Documentation"
  [ -z "$replace" ] && [ "$headerfield" = "Other" ] && replace="$updatevalue"
  [ -z "$replace" ] && [ "$headerfield" = "Resource" ] && replace="$updatevalue"
  [ -z "$replace" ] && [ "$headerfield" = "Terminal" ] && replace="$updatevalue"
  [ -z "$replace" ] && [ "$headerfield" = "sudo" ] && replace="$updatevalue"
  [ -z "$replace" ] && [ "$headerfield" = "Template" ] && replace="$updatevalue"
  [ -n "$headerfield" ] || printf_exit "Please provide the header"
  [ -n "$replace" ] || printf_exit "Please provide a value"
  if [ -n "$updateheader" ]; then
    printf_cyan "Updating $headerfield in $filename"
    sed -i "0,/# @@$headerfield.*      :.*/s||$updateheader:  $replace|" "$filename" &>/dev/null
    status="$(grep -sh "$updateheader" "$filename" | head -n1 | grep "$replace")"
    pretty_header="${updateheader//# @@/}"
    pretty_message="${pretty_header//:*/}:  $replace"
    if [ -n "$status" ]; then
      printf_green "Changed header to: $pretty_message"
    else
      printf_yellow "Failed to update header to: $pretty_message"
      exitCode=$((1 + exitCode))
    fi
  else
    printf_red "Failed to change $search to $replace pattern was not found"
    exitCode=$((1 + exitCode))
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__update_version() {
  local exitCode=0
  local new_version="$(date +"$GEN_HEADER_VERSIONFMT")"
  for file in "$@"; do
    if [ -n "$file" ] && [ -f "$file" ]; then
      printf_cyan "Changing version to $new_version in $file"
      sed -i '0,/##@Version           :.*/s//##@Version           :  '$new_version'/' "$file" 2>/dev/null
      if ! grep -sh '##@Version.*: ' "$file" | head -n1 | grep -q "$new_version"; then
        printf_yellow "Failed to update the version"
        exitCode=$((1 + exitCode))
      fi
    fi
  done
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_HEADER_CONFIG_FILE="${GEN_HEADER_CONFIG_FILE:-settings.conf}"
GEN_HEADER_CONFIG_DIR="${GEN_HEADER_CONFIG_DIR:-$HOME/.config/myscripts/gen-header}"
GEN_HEADER_CONFIG_BACKUP_DIR="${GEN_HEADER_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-header/backups}"
GEN_HEADER_LOG_DIR="${GEN_HEADER_LOG_DIR:-$HOME/.local/log/gen-header}"
GEN_HEADER_TEMP_DIR="${GEN_HEADER_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-header}"
GEN_HEADER_CACHE_DIR="${GEN_HEADER_CACHE_DIR:-$HOME/.cache/gen-header}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_HEADER_OUTPUT_COLOR_1="${GEN_HEADER_OUTPUT_COLOR_1:-33}"
GEN_HEADER_OUTPUT_COLOR_2="${GEN_HEADER_OUTPUT_COLOR_2:-5}"
GEN_HEADER_OUTPUT_COLOR_GOOD="${GEN_HEADER_OUTPUT_COLOR_GOOD:-2}"
GEN_HEADER_OUTPUT_COLOR_ERROR="${GEN_HEADER_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_HEADER_NOTIFY_ENABLED="${GEN_HEADER_NOTIFY_ENABLED:-yes}"
GEN_HEADER_GOOD_NAME="${GEN_HEADER_GOOD_NAME:-Great:}"
GEN_HEADER_ERROR_NAME="${GEN_HEADER_ERROR_NAME:-Error:}"
GEN_HEADER_GOOD_MESSAGE="${GEN_HEADER_GOOD_MESSAGE:-No errors reported}"
GEN_HEADER_ERROR_MESSAGE="${GEN_HEADER_ERROR_MESSAGE:-Errors were reported}"
GEN_HEADER_NOTIFY_CLIENT_NAME="${GEN_HEADER_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_HEADER_NOTIFY_CLIENT_ICON="${GEN_HEADER_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_HEADER_NOTIFY_CLIENT_URGENCY="${GEN_HEADER_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_HEADER_YEAR="${GEN_HEADER_YEAR:-$(date +%Y 2>/dev/null)}"
GEN_HEADER_EMAIL="${GEN_HEADER_EMAIL:-$USER@$(hostname -f)}"
GEN_HEADER_AUTHOR="${GEN_HEADER_AUTHOR:-$USER}"
GEN_HEADER_COMPANY="${GEN_HEADER_COMPANY:-}"
GEN_HEADER_VERSIONFMT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GEN_HEADER_DEFREADME="${GEN_HEADER_DEFREADME:-README.md}"
GEN_HEADER_DEFLICENSE="${GEN_HEADER_DEFLICENSE:-WTFPL}"
GEN_HEADER_DATEFMT="${GEN_HEADER_DATEFMT:-%A, %b %d, %Y %H:%M %Z}"
GEN_HEADER_COPYRIGHT="Copyright: (c) $GEN_HEADER_YEAR $GEN_HEADER_AUTHOR, $GEN_HEADER_COMPANY"
GEN_HEADER_DEFAULT_MAN_DIR="${GEN_HEADER_DEFAULT_MAN_DIR:-man}"
GEN_HEADER_DEFAULT_COMPLETION_DIR="${GEN_HEADER_DEFAULT_COMPLETION_DIR:-completions}"
GEN_HEADER_GIT_DEFAULT_BRANCH="${GEN_HEADER_GIT_DEFAULT_BRANCH:-main}"
GEN_HEADER_TEMPLATE_DIR="${GEN_HEADER_TEMPLATE_DIR:-$GEN_HEADER_CONFIG_DIR/templates}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE" ] && . "$GEN_HEADER_CONFIG_DIR/$GEN_HEADER_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_HEADER_LOG_DIR" ] || mkdir -p "$GEN_HEADER_LOG_DIR" |& __devnull
[ -d "$GEN_HEADER_TEMP_DIR" ] || mkdir -p "$GEN_HEADER_TEMP_DIR" |& __devnull
[ -d "$GEN_HEADER_CACHE_DIR" ] || mkdir -p "$GEN_HEADER_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_HEADER_TEMP_FILE="${GEN_HEADER_TEMP_FILE:-$(mktemp $GEN_HEADER_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_HEADER_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_HEADER_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_HEADER_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_HEADER_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_HEADER_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_HEADER_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="e,h,d:,t:,c:,o:,r:,i:,f:,n:,l:,p,k"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",copy,no,help,raw,desc:,todo:,changelog:,copyright:,other:,res:"
LONGOPTS+=",type:,functions,name:,prev,replace,keep,pause,system,user"
LONGOPTS+=",clip,license:,shell:,skip,profile,folders,sudo,template,basic"
# - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="folders functions replace head env"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_HEADER_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_HEADER_CWD="$2"
    [ -d "$GEN_HEADER_CWD" ] || mkdir -p "$GEN_HEADER_CWD" |& __devnull
    shift 2
    ;;
  --copy)
    shift 1
    __copy_files
    exit $?
    ;;
  --folders)
    shift 1
    showFolders="true"
    ;;
  -f | --functions)
    shift 1
    showFunctions="true"
    header_type="${header_type:-system}"
    ;;
  --changelog)
    changelog="$2"
    shift 2
    ;;
  -d | --desc)
    desc="$2"
    shift 2
    ;;
  -t | --todo)
    todo="$2"
    shift 2
    ;;
  -c | --copyright)
    GEN_SCRIPT_COPYRIGHT="$2"
    shift 2
    ;;
  -o | --other)
    other="$2"
    shift 2
    ;;
  -r | --res)
    res="$2"
    shift 2
    ;;
  --sudo)
    sudo="$2"
    shift 2
    ;;
  -i | --type)
    default_type="$2"
    header_type="$2"
    new_type="$2"
    shift 2
    ;;
  -p | --prev)
    gen_header_prev="true"
    shift 1
    ;;
  -n | --name)
    GEN_FILENAME="$2"
    shift 2
    ;;
  -l | --license)
    GEN_SCRIPT_CUSTOM_LICENSE="true"
    GEN_SCRIPT_DEFLICENSE="$2"
    shift 2
    ;;
  --clip)
    GEN_HEADER_SILENT="true"
    shift 1
    ;;
  -e | --no)
    printf_red "Setting overwrite to yes and edit to no"
    GEN_HEADER_OVERWRITE="Y"
    GEN_HEADER_EDITFILE="N"
    GEN_HEADER_MAKEFILE="${MAKEFILE:-yes}"
    shift 1
    ;;
  -k | --keep)
    printf_red "Setting overwrite to no and edit to no"
    GEN_HEADER_OVERWRITE="N"
    GEN_HEADER_EDITFILE="N"
    GEN_HEADER_MAKEFILE="N"
    shift 1
    ;;
  --replace)
    gen_header_replace="true"
    shift 1
    ;;
  --pause)
    pause="true"
    shift 1
    ;;
  --skip)
    GEN_HEADER_OVERWRITE="Y"
    OPENEDIT="N"
    shift 1
    ;;
  --user)
    showFunctions="true"
    showFolders="true"
    header_type="user"
    gen_header_user="true"
    shift 1
    ;;
  --system)
    showFunctions="true"
    showFolders="true"
    header_type="system"
    shift 1
    ;;
  --profile)
    showFunctions="true"
    showFolders="true"
    header_type="profile"
    shift 1
    ;;
  --basic)
    GEN_HEADER_TYPE="basic"
    showFunctions="false"
    showFolders="false"
    header_type="basic"
    shift 1
    ;;
  --template)
    shift 1
    gen_header_raw="true"
    ;;
  --shell)
    GEN_HEADER_SHELL="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_HEADER_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_HEADER_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
[ -d "$1" ] && __is_an_option "$1" && GEN_HEADER_CWD="$1" && shift 1 || GEN_HEADER_CWD="${GEN_HEADER_CWD:-$PWD}"
GEN_HEADER_CWD="$(realpath "${GEN_HEADER_CWD:-$PWD}" 2>/dev/null)"
if [ -d "$GEN_HEADER_CWD" ] && cd "$GEN_HEADER_CWD"; then
  true
# if [ "$GEN_HEADER_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_HEADER_CWD"
# fi
else
  printf_exit "ðŸ’” $GEN_HEADER_CWD does not exist ðŸ’”"
fi
export GEN_HEADER_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
GEN_HEADER_TOP_DIR="$(__git_top_dir "$GEN_HEADER_CWD" || echo "$GEN_HEADER_CWD" 2>/dev/null)"
GEN_SCRIPT_COPY_CONFIRM="${GEN_HEADER_COPY_CONFIRM:-yes}"
GEN_SCRIPT_GIT_DEFAULT_BRANCH="${GEN_HEADER_GIT_DEFAULT_BRANCH:-main}"
GEN_SCRIPT_YEAR="${GEN_HEADER_YEAR:-$(date +%Y 2>/dev/null)}"
GEN_SCRIPT_EMAIL="${GEN_HEADER_EMAIL:-${USER}@$(hostname -f 2>/dev/null)}"
GEN_SCRIPT_AUTHOR="${GEN_HEADER_AUTHOR:-$USER}"
GEN_SCRIPT_COMPANY="${GEN_HEADER_AUTHOR:-$USER}"
GEN_SCRIPT_VERSIONFMT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GEN_SCRIPT_DEFREADME="${GEN_HEADER_DEFREADME:-README.md}"
GEN_SCRIPT_DEFLICENSE="${GEN_HEADER_DEFLICENSE:-WTFPL}"
GEN_SCRIPT_DEFAULT_MAN_DIR="${GEN_HEADER_DEFAULT_MAN_DIR:-man}"
GEN_SCRIPT_DEFAULT_COMPLETION_DIR="${GEN_HEADER_DEFAULT_COMPLETION_DIR:-completions}"
GEN_SCRIPT_DATEFMT="${GEN_HEADER_DATEFMT:-%A, %b %d, %Y %H:%M %Z}"
GEN_SCRIPT_COPYRIGHT="${GEN_HEADER_COPYRIGHT:-Copyright: (c) $GEN_SCRIPT_YEAR $GEN_SCRIPT_AUTHOR, $GEN_SCRIPT_COMPANY}"
GEN_SCRIPT_VERSION="$(date +"${GEN_HEADER_VERSIONFMT}" 2>/dev/null)"
GEN_SCRIPT_CREATED="$(date +"${GEN_HEADER_DATEFMT}" 2>/dev/null)"
GEN_HEADER_SED_CMD="$(builtin type -P gsed 2>/dev/null || builtin type -P sed 2>/dev/null || false)"
GEN_FILENAME="${GEN_FILENAME:-template}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[ -d "$GEN_HEADER_TEMPLATE_DIR" ] || __copy_files
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
folders)
  shift 1
  NEW_FOLDER="$1"
  [ "$show_raw" = "true" ] && printf_blue() { echo "$*"; }
  if [ "$1" = "full" ]; then
    shift 1
    clear
    __show_message printf_newline '\n\n\n'
    [ "$1" = "noreplace" ] && shift 1 && NEW_FOLDER="GEN_SCRIPT_REPLACE_ENV" || NEW_FOLDER="$1"
    __show_message printf_green "Creating folder info for $NEW_FOLDER"
    __gen_folders "$@" | $GEN_HEADER_SED_CMD 's|'$(__gen_env_vars "GEN_SCRIPT_REPLACE_ENV")'|'$(__gen_env_vars "$NEW_FOLDER")'|g' |& __tee
  elif [ $# -eq 1 ]; then
    __show_message printf_green "Creating folder info for $NEW_FOLDER"
    __gen_folders "$NEW_FOLDER" | $GEN_HEADER_SED_CMD 's|'$(__gen_env_vars "GEN_SCRIPT_REPLACE_ENV")'|'$(__gen_env_vars "$NEW_FOLDER")'|g' |& __tee
  elif [ $# -eq 2 ]; then
    __show_message printf_green "Creating folder info for $2"
    NEW_FOLDER="$(__gen_env_vars "${1}_${2}")"
    __show_message printf_blue "$NEW_FOLDER"
    __show_message printf_blue '[ -d "'$NEW_FOLDER'" ] || mkdir -p "'$NEW_FOLDER'" &>/dev/null'
  else
    exit 0
  fi
  __show_message printf_pause
  exit $?
  ;;

functions)
  shift 1
  [ "$1" = "u" ] && gen_header_user=true && shift 1
  [ $# -lt 2 ] || printf_exit "Only takes a filename as an argument"
  printf_green "New functions info for ${1:-$GEN_FILENAME}"
  __gen_functions ${1:-$GEN_FILENAME} |& __tee
  printf_green "End of functions"
  exit $?
  ;;

replace)
  shift 1
  filename="${1:-$GEN_FILENAME}"
  [ -f "$1" ] || filename="$(type -P "$(basename -- "$filename" 2>/dev/null)" | head -n1)"
  filename="$(realpath "$filename" 2>/dev/null)"
  if [ $# -lt 2 ]; then
    printf_exit "Requires filename search replace"
  else
    __update_header "$filename" "$2" "$3"
  fi
  exit
  ;;

version)
  shift 1
  __update_version "$@"
  exit $?
  ;;

head)
  shift 1
  filename="${1:-$GEN_FILENAME}"
  if [ $# -ne 0 ]; then
    filename="${1:-$GEN_FILENAME}"
    shift 1
  else
    filename="$GEN_FILENAME"
  fi
  __gen_header "$@" |& __tee
  exit $?
  ;;

env)
  shift 1
  #[ $# -gt 2 ]
  filename="$GEN_FILENAME"
  __gen_env "$@"
  exit $?
  ;;

*)
  if [ $# -eq 0 ]; then
    filename="$GEN_FILENAME"
  else
    filename="${1:-$GEN_FILENAME}"
    shift $#
  fi
  __gen_header "$@" |& __tee
  exit $?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
