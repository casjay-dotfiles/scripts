#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208080003-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-html --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 08, 2022 00:03 EDT
# @@File             :  gen-html
# @@Description      :  Create a html file
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208080003-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_HTML_REQUIRE_SUDO="${GEN_HTML_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE"
  fi
  [ -d "$GEN_HTML_CONFIG_DIR" ] || mkdir -p "$GEN_HTML_CONFIG_DIR"
  [ -d "$GEN_HTML_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_HTML_CONFIG_BACKUP_DIR"
  [ -f "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE" ] &&
    cp -Rf "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE" "$GEN_HTML_CONFIG_BACKUP_DIR/$GEN_HTML_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE"
# Settings for gen-html
GEN_HTML_AUTHOR="${GEN_HTML_AUTHOR:-}"
GEN_HTML_BODY="${GEN_HTML_BODY:-}"
GEN_HTML_TITLE="${GEN_HTML_TITLE:-}"
GEN_HTML_REPO="${GEN_HTML_REPO:-}"
GEN_HTML_REPO_RAW="${GEN_HTML_REPO_RAW:-}"
GEN_HTML_GIT_USER="${GEN_HTML_GIT_USER:-}"
GEN_HTML_GIT_EMAIL="${GEN_HTML_GIT_EMAIL:-}"
GEN_HTML_DIR_FILES_DEFAULT="${GEN_HTML_DIR_FILES_DEFAULT:-}"
GEN_HTML_DIR_FILES_CUSTOM="${GEN_HTML_DIR_FILES_CUSTOM:-}"
GEN_HTML_DEFAULT_HTML="${GEN_HTML_DEFAULT_HTML:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_HTML_OUTPUT_COLOR_1="${GEN_HTML_OUTPUT_COLOR_1:-}"
GEN_HTML_OUTPUT_COLOR_2="${GEN_HTML_OUTPUT_COLOR_2:-}"
GEN_HTML_OUTPUT_COLOR_GOOD="${GEN_HTML_OUTPUT_COLOR_GOOD:-}"
GEN_HTML_OUTPUT_COLOR_ERROR="${GEN_HTML_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_HTML_NOTIFY_ENABLED="${GEN_HTML_NOTIFY_ENABLED:-}"
GEN_HTML_GOOD_NAME="${GEN_HTML_GOOD_NAME:-}"
GEN_HTML_ERROR_NAME="${GEN_HTML_ERROR_NAME:-}"
GEN_HTML_GOOD_MESSAGE="${GEN_HTML_GOOD_MESSAGE:-}"
GEN_HTML_ERROR_MESSAGE="${GEN_HTML_ERROR_MESSAGE:-}"
GEN_HTML_NOTIFY_CLIENT_NAME="${GEN_HTML_NOTIFY_CLIENT_NAME:-}"
GEN_HTML_NOTIFY_CLIENT_ICON="${GEN_HTML_NOTIFY_CLIENT_ICON:-}"
GEN_HTML_NOTIFY_CLIENT_URGENCY="${GEN_HTML_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  site
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-html:  Create a html file - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-html [options] [commands]"
  __printf_line "site                            - Setup a new site"
  __printf_line "custom                          - Use custom file"
  __printf_line "download                        - Download templates"
  __printf_line "list                            - List template files"
  __printf_line "redirect [url] [filename]       - Create a redirect"
  __printf_line "--title [title]                 - Set document title"
  __printf_line "--body [html]                   - Document body"
  __printf_line "--copy                          - Copy templates to $"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_HTML_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_HTML_REQUIRE_SUDO_RUN" ]; then
    export GEN_HTML_REQUIRE_SUDO="no"
    export GEN_HTML_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_HTML_TEMP_FILE" ] && rm -Rf "$GEN_HTML_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__sed_delete_line() { find -L "$2" -type f -exec "$(builtin type -P gsed || builtin type -P sed)" -i '/'$1'/d' {} \; 3>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_replace() {
  sed="$(builtin type -P gsed || builtin type -P sed)"
  find -L "$3" -type f -exec "$sed" -i "s|$1|$2|g" {} \; 2>/dev/null
  find -L "$3" -type f -exec "$sed" -i 's#'$1'#'$2'#g' {} \; 2>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cat_input() {
  cat <<EOF | tee
${@:-}
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__make_html_file() {
  sed -e 's/[&%\\]/\\&/g' \
    -e '$!s/$/\\/' \
    -e '1s/^/s%'$1'%/' \
    -e '$s/$/%g/' <<<"$2" | sed -f - "$3"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_body() {
  local -a input=("$@")
  [ $# -ne 0 ] && [ "$1" != "" ] && __cat_input "${input[@]}" | sed 'N;s|\n|<br />\n|;s|^<br />$||g' || true
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__file_failed() {
  printf_error "Failed to get the html file"
  printf_exit 1 1 "from: $1"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
get_remote_file() {
  [ -n "$GEN_HTML_REPO" ] || printf_exit "The GEN_HTML_REPO is not set"
  local filename name default_ext
  filename="$1"
  name="$(__basename "$filename")"
  check_uri "$1" filename="$1" || filename="$GEN_HTML_REPO_RAW/$name"
  [ "$filename" = -q ] || printf_green "Attempting to get $filename"
  __urlverify "$filename" && __curl "$filename" | tee -p "$GEN_HTML_DIR_FILES_CUSTOM/$name" &>/dev/null
  if [ -f "$GEN_HTML_DIR_FILES_CUSTOM/$name" ] && [ -s "$GEN_HTML_DIR_FILES_CUSTOM/$name" ]; then
    printf_cyan "Successfully saved $name to $GEN_HTML_DIR_FILES_CUSTOM"
    __create_local_file "$GEN_HTML_DIR_FILES_CUSTOM/$name"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
copy_templates() {
  local TEMPLATE_REPO=""
  [ -d "$GEN_HTML_DIR_FILES_DEFAULT" ] || mkdir -p "$GEN_HTML_DIR_FILES_DEFAULT"
  if am_i_online && [ -n "$GEN_HTML_REPO" ]; then
    if [ -d "$GEN_HTML_CONFIG_DIR/gitrepo/.git" ]; then
      printf_green "Copying $APPNAME templates $GEN_HTML_CONFIG_DIR/gitrepo"
      git -C "$GEN_HTML_CONFIG_DIR/gitrepo" pull -q &>/dev/null
      TEMPLATE_REPO="$(__git_remote_fetch $GEN_HTML_CONFIG_DIR/gitrepo)"
    else
      if git clone -q "$GEN_HTML_REPO" "$GEN_HTML_CONFIG_DIR/gitrepo" &>/dev/null; then
        printf_green "Copying $APPNAME templates $GEN_HTML_REPO"
        TEMPLATE_REPO="$GEN_HTML_REPO"
      else
        printf_green "Copying $APPNAME templates $CASJAYSDEVDIR/templates/html"
        __cp_rf "$CASJAYSDEVDIR/templates/html/." "$GEN_HTML_DIR_FILES_DEFAULT/"
        TEMPLATE_REPO="$CASJAYSDEVDIR/templates"
      fi
    fi
  else
    if [ -f "$CASJAYSDEVDIR/templates/html/template.html" ]; then
      printf_green "Copying $APPNAME templates $CASJAYSDEVDIR/templates/html"
      __cp_rf "$CASJAYSDEVDIR/templates/html/." "$GEN_HTML_DIR_FILES_DEFAULT/"
      TEMPLATE_REPO="$CASJAYSDEVDIR/templates"
    else
      printf_exit 1 1 "Can not get html files"
    fi
  fi
  if [ -d "$GEN_HTML_CONFIG_DIR/gitrepo/files" ]; then
    __cp_rf "$GEN_HTML_CONFIG_DIR/gitrepo/files/." "$GEN_HTML_DIR_FILES_DEFAULT/"
  fi
  if [ "$(__count_files "$GEN_HTML_DIR_FILES_DEFAULT" "2")" -ne 0 ]; then
    printf_green "Copying has succeeded > $GEN_HTML_DIR_FILES_DEFAULT"
    exitCodeT=0
  else
    printf_red "could not copy the html files < $TEMPLATE_REPO"
    exitCodeT=1
  fi
  echo ""
  return $exitCodeT
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__modify_html_file() {
  fileName="${1:-index.html}"
  serverHost="$(__cmd_exists hostname && hostname -f || echo "$HOSTNAME")"
  siteDir="$(dirname "$(realpath "$fileName")")"
  YEAR="$(date +'%Y')"
  SERVER_HOSTNAME="$HOSTNAME"
  SERVER_IP_V4="$CURRENT_IP_4"
  SERVER_IP_V6="$CURRENT_IP_6"
  MODIFIED="$(date +'%a %b %m, %Y at %M:%H:%S')"
  BODY="${body:-$(__gen_body 'Welcome to your new site</br>\n')}"
  if [[ "$fileName" = index.* ]]; then
    SiteName="$(__foldername "$fileName")"
  else
    SiteName="${fileName%.*}"
  fi
  if [ -f "$fileName" ] || [ -d "$fileName" ]; then
    __find_replace "GEN_SCRIPT_REPLACE_BODY" "$BODY" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_YEAR" "$YEAR" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_MODIFIED" "$MODIFIED" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_AUTHOR" "$GEN_HTML_GIT_USER" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_EMAIL" "$GEN_HTML_GIT_EMAIL" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_DOMAIN" "${serverHost:-localhost}" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_TITLE" "${GEN_HTML_TITLE:-$SiteName}" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_HTMLROOT" "${siteDir:-$GEN_HTML_CWD}" "$fileName"
    __find_replace "GEN_SCRIPT_REPLACE_SERVER_HOSTNAME" "${siteDir:-$GEN_HTML_CWD}" "$fileName"
    if [ -n "$SERVER_IP_V4" ]; then
      __find_replace "GEN_SCRIPT_REPLACE_SERVER_IPV4" "$SERVER_IP_V4" "$fileName"
    else
      __sed_delete_line '/GEN_SCRIPT_REPLACE_SERVER_IPV4/d' "$fileName"
    fi
    if [ -n "$SERVER_IP_V6" ]; then
      __find_replace "GEN_SCRIPT_REPLACE_SERVER_IPV6" "$SERVER_IP_V6" "$fileName"
    else
      __sed_delete_line '/GEN_SCRIPT_REPLACE_SERVER_IPV6/d' "$fileName"
    fi
  else
    printf_exit "Failed to find the file at $fileName"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_redirect() {
  cat <<EOF | tee
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="Keywords" content="Casjay, CasjaysDev, Jason M. Hempstead, Website, About Me" />
    <meta name="Description" content="Created By Casjays Developments" />
    <meta name="generator" content="CasjaysDev" />
    <meta http-equiv="refresh" content="1; url='${1:-/}'" />
    <title>${GEN_HTML_TITLE:-Resource moved}</title>
  </head>
  <body>
    <p>Page has moved <a href="${1:-/}">${1:-/}</a></p>
  </body>
</html>
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_local_file() {
  local default_file default_ext default_ext post_mess html_base html_name fileName
  fileName="$(realpath "${1:-$GEN_HTML_CWD}")"
  default_file="$(basename ${2:-$GEN_HTML_DEFAULT_HTML} 2>/dev/null)"
  post_mess="$fileName for $GEN_HTML_CWD"
  html_base="$(basename -- "${default_file^^*}" 2>/dev/null)"
  html_name="${html_base%.*}"
  backup_ext="bak"
  body="$(__gen_body "$GEN_HTML_BODY")"
  # copy all files
  if [ "$fileName" = "$GEN_HTML_CWD" ]; then
    fileName="$GEN_HTML_CWD"
    default_file="$GEN_HTML_DIR_FILES_DEFAULT"
    template="$GEN_HTML_DIR_FILES_DEFAULT"
    message="Copying all from $default_file"
  # Search custom dir
  elif [ -f "$GEN_HTML_DIR_FILES_CUSTOM/${default_file//$GEN_HTML_DIR_FILES_CUSTOM\//}" ]; then
    template="$GEN_HTML_DIR_FILES_CUSTOM/${default_file//$GEN_HTML_DIR_FILES_CUSTOM\//}"
    message="Using $html_name $post_mess"
  # Search template dir
  elif [ -f "$GEN_HTML_DIR_FILES_DEFAULT/${default_file//$GEN_HTML_DIR_FILES_DEFAULT\//}" ]; then
    template="$GEN_HTML_DIR_FILES_DEFAULT/${default_file//$GEN_HTML_DIR_FILES_DEFAULT\//}"
    message="Using Default $default_file $post_mess"
  elif [ -f "$default_file" ]; then
    template="$default_file"
    message="Using file from $default_file"
  else
    printf_exit 1 1 "Can not find any html files matching ${2:-$default_file} for $fileName"
  fi
  if [ -d "$fileName" ]; then
    if [ ! -f "$fileName/index.html" ]; then
      printf_green "$message"
      __cp_rf "$template/." "$GEN_HTML_CWD"
      [ -e "$GEN_HTML_CWD" ] && __modify_html_file "$GEN_HTML_CWD/"
    else
      printf_exit "$fileName contains files, refusig to overwrite"
    fi
  elif [ -f "$template" ]; then
    printf_green "$message"
    [ -f "$fileName" ] && mv -f "$fileName" "$fileName.$backup_ext"
    __make_html_file "GEN_HTML_REPLACE_BODY" "${body[@]}" "$template" | tee -p "$fileName" &>/dev/null
    if [ -f "$fileName" ] && [ -s "$fileName" ]; then
      __modify_html_file "$fileName"
      printf_green "$fileName has been created"
    else
      __file_failed "$1"
    fi
  else
    __file_failed "$template"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_HTML_CONFIG_FILE="${GEN_HTML_CONFIG_FILE:-settings.conf}"
GEN_HTML_CONFIG_DIR="${GEN_HTML_CONFIG_DIR:-$HOME/.config/myscripts/gen-html}"
GEN_HTML_CONFIG_BACKUP_DIR="${GEN_HTML_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-html/backups}"
GEN_HTML_LOG_DIR="${GEN_HTML_LOG_DIR:-$HOME/.local/log/gen-html}"
GEN_HTML_TEMP_DIR="${GEN_HTML_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-html}"
GEN_HTML_CACHE_DIR="${GEN_HTML_CACHE_DIR:-$HOME/.cache/gen-html}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_HTML_OUTPUT_COLOR_1="${GEN_HTML_OUTPUT_COLOR_1:-33}"
GEN_HTML_OUTPUT_COLOR_2="${GEN_HTML_OUTPUT_COLOR_2:-5}"
GEN_HTML_OUTPUT_COLOR_GOOD="${GEN_HTML_OUTPUT_COLOR_GOOD:-2}"
GEN_HTML_OUTPUT_COLOR_ERROR="${GEN_HTML_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_HTML_NOTIFY_ENABLED="${GEN_HTML_NOTIFY_ENABLED:-yes}"
GEN_HTML_GOOD_NAME="${GEN_HTML_GOOD_NAME:-Great:}"
GEN_HTML_ERROR_NAME="${GEN_HTML_ERROR_NAME:-Error:}"
GEN_HTML_GOOD_MESSAGE="${GEN_HTML_GOOD_MESSAGE:-No errors reported}"
GEN_HTML_ERROR_MESSAGE="${GEN_HTML_ERROR_MESSAGE:-Errors were reported}"
GEN_HTML_NOTIFY_CLIENT_NAME="${GEN_HTML_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_HTML_NOTIFY_CLIENT_ICON="${GEN_HTML_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_HTML_NOTIFY_CLIENT_URGENCY="${GEN_HTML_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_HTML_AUTHOR="${GEN_HTML_AUTHOR:-$USER}"
GEN_HTML_BODY="${GEN_HTML_BODY:-<p><h1>Welcome to your new page</h1><br /></p><br />}"
GEN_HTML_TITLE="${GEN_HTML_TITLE:-NewDocument}"
GEN_HTML_REPO="${GEN_HTML_REPO:-}"
GEN_HTML_REPO_RAW="${GEN_HTML_REPO_RAW:-}"
GEN_HTML_GIT_USER="${GEN_HTML_GIT_USER:-$(__git_globaluser)}"
GEN_HTML_GIT_EMAIL="${GEN_HTML_GIT_EMAIL:-$(__git_globalemail)}"
GEN_HTML_DIR_FILES_DEFAULT="${GEN_HTML_DIR_FILES_DEFAULT:-$GEN_HTML_CONFIG_DIR/files}"
GEN_HTML_DIR_FILES_CUSTOM="${GEN_HTML_DIR_FILES_CUSTOM:-$GEN_HTML_CONFIG_DIR/custom}"
GEN_HTML_DEFAULT_HTML="${GEN_HTML_DEFAULT_HTML:-$CASJAYSDEVDIR/templates/template.html}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE" ] && . "$GEN_HTML_CONFIG_DIR/$GEN_HTML_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_HTML_LOG_DIR" ] || mkdir -p "$GEN_HTML_LOG_DIR" |& __devnull
[ -d "$GEN_HTML_TEMP_DIR" ] || mkdir -p "$GEN_HTML_TEMP_DIR" |& __devnull
[ -d "$GEN_HTML_CACHE_DIR" ] || mkdir -p "$GEN_HTML_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_HTML_TEMP_FILE="${GEN_HTML_TEMP_FILE:-$(mktemp $GEN_HTML_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_HTML_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_HTML_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_HTML_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_HTML_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_HTML_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_HTML_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",copy,body:,title:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="custom download list redirect"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_HTML_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_HTML_CWD="$2"
    [ -d "$GEN_HTML_CWD" ] || mkdir -p "$GEN_HTML_CWD" |& __devnull
    shift 2
    ;;
  --copy)
    copy_templates
    exit $?
    ;;
  --body)
    GEN_HTML_BODY="$2"
    shift 2
    ;;
  --title)
    GEN_HTML_TITLE="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_HTML_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_HTML_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
[ -d "$1" ] && __is_an_option "$1" && GEN_HTML_CWD="$1" && shift 1 || GEN_HTML_CWD="${GEN_HTML_CWD:-$PWD}"
GEN_HTML_CWD="$(realpath "${GEN_HTML_CWD:-$PWD}" 2>/dev/null)"
if [ -d "$GEN_HTML_CWD" ] && cd "$GEN_HTML_CWD"; then
  true
# if [ "$GEN_HTML_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_HTML_CWD"
# fi
else
  printf_exit "ðŸ’” $GEN_HTML_CWD does not exist ðŸ’”"
fi
export GEN_HTML_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
GEN_HTML_CHOICE="${1:-$GEN_HTML_DEFAULT_HTML}"
GEN_HTML_FILE="$(basename ${GEN_HTML_CHOICE:-$WHICH_HTML_DEF} 2>/dev/null)"
GEN_HTML_WHICH_FILE="$(echo "${1:-$GEN_HTML_FILE}")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[ ! -d "$GEN_HTML_DIR_FILES_DEFAULT" ] && mkdir -p "$GEN_HTML_DIR_FILES_DEFAULT" && copy_templates &>/dev/null
[ -p "/dev/stdin" ] && GEN_HTML_BODY="$(cat -)" || GEN_HTML_BODY="${GEN_HTML_BODY:-<h3>Welcome to your new site</h1>\n}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "${1:-$GEN_HTML_WHICH_FILE}" in
list)
  shift 1
  if [ "$(__count_files "$GEN_HTML_DIR_FILES_DEFAULT")" -eq 0 ]; then
    $APPNAME --options
  else
    [ "$(__count_files "$GEN_HTML_DIR_FILES_DEFAULT")" -eq 0 ] &&
      printf_red "Default templates haven't been copied" ||
      __find "$GEN_HTML_DIR_FILES_DEFAULT" | printf_readline "2"
    [ "$(__count_files "$GEN_HTML_DIR_FILES_CUSTOM")" -eq 0 ] ||
      __find "$GEN_HTML_DIR_FILES_CUSTOM" | printf_readline "2"
  fi
  exit $?
  ;;

download)
  shift 1
  tmpfolder="/tmp/html.$$"
  printf_green "Cloning the repo to $tmpfolder"
  __git_clone "$GEN_HTML_REPO_RAW" "$tmpfolder"
  if [ -d "$tmpfolder/files" ]; then
    printf_green "Copying files to $GEN_HTML_DIR_FILES_CUSTOM"
    __cp_rf "$tmpfolder/files/." "$GEN_HTML_DIR_FILES_CUSTOM/"
    __rm_rf "$tmpfolder"
  fi
  [ -d "$GEN_HTML_DIR_FILES_CUSTOM" ] &&
    [ "$(__count_files "$GEN_HTML_DIR_FILES_CUSTOM" "2")" -ne 0 ] &&
    printf_green "Done cloning and copying the files" ||
    printf_red "Failed to setup custom html file"
  ;;

custom)
  shift 1
  if [ -f "$2" ]; then
    __create_local_file "$2" "$1"
  else
    GEN_HTML_REPO="${GEN_HTML_REPO:-$2}"
    get_remote_file "$2" "$1"
  fi
  ;;

redirect)
  shift 1
  if [ $# -eq 1 ]; then
    __create_redirect "$1"
  elif [ $# -eq 2 ]; then
    __create_redirect "$1" >"$2"
    [ -f $2 ] &&
      printf_green "Created redirect file: $2" ||
      printf_red "Failed to create redirect file: $2"
  else
    printf_exit "No redirect url provided"
  fi
  ;;

site)
  shift 1
  domain="$(hostname -f)"
  body="$GEN_HTML_BODY"
  doc_root="$GEN_HTML_CWD"
  static_files="$GEN_HTML_CWD"
  copyright_year="$(date +'%Y')"
  author="${GEN_HTML_AUTHOR:-$USER}"
  modified_on="$(date +'%a %b %d, %Y at %H:%M:%S %Z')"
  printf_yellow "Setting up new site in $static_files"
  __cp_rf "$GEN_HTML_DIR_FILES_DEFAULT/." "$doc_root/"
  __find_replace "GEN_SCRIPT_REPLACE_YEAR" "$copyright_year" "$doc_root"
  __find_replace "GEN_SCRIPT_REPLACE_DOMAIN" "$domain" "$doc_root"
  __find_replace "GEN_SCRIPT_REPLACE_HTMLROOT" "$static_files" "$doc_root"
  __find_replace "GEN_SCRIPT_REPLACE_AUTHOR" "$author" "$doc_root"
  __find_replace "GEN_SCRIPT_REPLACE_MODIFIED" "$modified_on" "$doc_root"
  __find_replace "GEN_SCRIPT_REPLACE_TITLE" "$domain" "$doc_root"
  __find_replace "GEN_SCRIPT_REPLACE_BODY" "$body" "$doc_root"
  if [ -f "$static_files/index.html" ]; then
    printf_blue "Your new site has been created"
    exit 0
  else
    printf_exit "Failed to create the new site"
  fi
  ;;

*)
  __create_local_file "${@:-$GEN_HTML_CWD/index.html}"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
