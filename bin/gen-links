#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208080932-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-links --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 08, 2022 09:32 EDT
# @@File             :  gen-links
# @@Description      :  Create a links from a text document
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208080932-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_LINKS_REQUIRE_SUDO="${GEN_LINKS_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE"
  fi
  [ -d "$GEN_LINKS_CONFIG_DIR" ] || mkdir -p "$GEN_LINKS_CONFIG_DIR"
  [ -d "$GEN_LINKS_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_LINKS_CONFIG_BACKUP_DIR"
  [ -f "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE" ] &&
    cp -Rf "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE" "$GEN_LINKS_CONFIG_BACKUP_DIR/$GEN_LINKS_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE"
# Settings for gen-links
GEN_LINKS_BOOKMARK_DIR="${GEN_LINKS_BOOKMARK_DIR:-}"
GEN_LINKS_BOOKMARK_FILE="${GEN_LINKS_BOOKMARK_FILE:-}"
GEN_LINKS_HEADER="${GEN_LINKS_HEADER:-}"
GEN_LINKS_FOOTER="${GEN_LINKS_FOOTER:-}"
GEN_LINKS_SEPARATOR="${GEN_LINKS_SEPARATOR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_LINKS_OUTPUT_COLOR_1="${GEN_LINKS_OUTPUT_COLOR_1:-}"
GEN_LINKS_OUTPUT_COLOR_2="${GEN_LINKS_OUTPUT_COLOR_2:-}"
GEN_LINKS_OUTPUT_COLOR_GOOD="${GEN_LINKS_OUTPUT_COLOR_GOOD:-}"
GEN_LINKS_OUTPUT_COLOR_ERROR="${GEN_LINKS_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_LINKS_NOTIFY_ENABLED="${GEN_LINKS_NOTIFY_ENABLED:-}"
GEN_LINKS_GOOD_NAME="${GEN_LINKS_GOOD_NAME:-}"
GEN_LINKS_ERROR_NAME="${GEN_LINKS_ERROR_NAME:-}"
GEN_LINKS_GOOD_MESSAGE="${GEN_LINKS_GOOD_MESSAGE:-}"
GEN_LINKS_ERROR_MESSAGE="${GEN_LINKS_ERROR_MESSAGE:-}"
GEN_LINKS_NOTIFY_CLIENT_NAME="${GEN_LINKS_NOTIFY_CLIENT_NAME:-}"
GEN_LINKS_NOTIFY_CLIENT_ICON="${GEN_LINKS_NOTIFY_CLIENT_ICON:-}"
GEN_LINKS_NOTIFY_CLIENT_URGENCY="${GEN_LINKS_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-links:  Create a links from a text document - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-links [options] [commands]"
  __printf_line "* [textFile] [htmlFile]         - Creates html from text file"
  __printf_line "watch [inFile] [outFile] [time] - Updates html file"
  __printf_line "--force                         - Allow overwriting of file"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_LINKS_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_LINKS_REQUIRE_SUDO_RUN" ]; then
    export GEN_LINKS_REQUIRE_SUDO="no"
    export GEN_LINKS_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_LINKS_TEMP_FILE" ] && rm -Rf "$GEN_LINKS_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__printf_return() { printf '\r%b%s%b%c' "$2" "$1" "$NC" ""; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_text() { grep -shv '^ *#'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__finalize_html() { grep -E 'ftp://|http://|https://'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sed_separator() { sed 's|^$|<br />'$GEN_LINKS_SEPARATOR'<br />|g'; }
__is_video_valid() {
  [ -n "$1" ] || return 1
  if echo "$1" | grep -Eqi '^Video Disabled|^Video Deleted|^Video Inactive|^Inactive |^Deleted |^Disabled |^404|^Not Found|^Error'; then
    return 1
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep() { grep "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__awk() { awk "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sed() { sed "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__retrieve_page_title() { echo "$@" | grep '<title>.*</title>|' | sed 's|.*<title>||g;s|</title.*||g' | grep '^' || return 1; }
__retrieve_page_meta() { echo "$@" | grep -E 'og:description|meta property="og:title" content' | sed 's|.*="||g;s|".*||g;s,|.*,,g' | grep -Ev '[|]|-' | head -n1 | grep '^' || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_page_title() {
  local exitCode=0
  local link="$(basename -- "$1" | grep -v '?.*=' | sed 's|-| |g;s|_| |g')"
  local title="$(echo "$2" | grep -v '://' | sed -e 's|^HD*. *||g;s|[vV]ideo||g;s|^ ||g;s|^\t||g' | grep '^')"

  if __is_video_valid "$title"; then
    echo "$title"
  else
    # Video is invalid/deleted - provide fallback title
    if echo "$title" | grep -Eqi 'disabled|deleted|inactive|404|not found|error'; then
      echo "[UNAVAILABLE] $link"
      exitCode=2 # Special code for unavailable content
    else
      [ -n "$link" ] && echo "$link" || {
        echo "[NO TITLE] $1"
        exitCode=1
      }
    fi
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_markdown() {
  # Extract markdown links in [text](url) format
  __grep -E ']\(' | __grep -v '#' | __sed 's|.*\[||g;s|\]| :: |g;s|)||g' |
    __sed 's|`.*||g;s| - | :: |g;s|\. | ::|g;s|   | |g' | __grep -v '^$' |
    __awk -F '\(' '{print $1,":: "$3," :: "$2}' | __sed 's| ::  ::   :: | :: |g' | __grep '^'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__extract_markdown_links() {
  # Enhanced markdown link extraction for future use
  local input_file="$1"

  # Extract different types of markdown links
  {
    # Standard links: [text](url)
    grep -oE '\[([^\]]+)\]\(([^)]+)\)' "$input_file" | sed 's|\[\([^]]*\)\](\([^)]*\))|\2 :: \1|g'

    # Reference links: [text][ref] with [ref]: url
    grep -E '^\[.*\]:' "$input_file" | sed 's|^\[\([^]]*\)\]:[[:space:]]*\(.*\)|\2 :: \1|g'

    # Auto links: <url>
    grep -oE '<https?://[^>]+>' "$input_file" | sed 's|<\(.*\)>|\1 :: \1|g'

    # Plain URLs (fallback)
    grep -oE 'https?://[^[:space:]]+' "$input_file" | sed 's|\(.*\)|\1 :: \1|g'
  } | sort -u
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__process_markdown_content() {
  # Future: Process markdown content with proper link extraction
  local input_file="$1"
  local temp_output="$2"

  # This would replace the current line-by-line processing for markdown files
  # when implemented

  echo "<!-- Markdown processing not yet implemented -->" >"$temp_output"
  echo "<!-- Use __extract_markdown_links for proper markdown link handling -->" >>"$temp_output"
  echo "<!-- Current fallback: treating as plain text -->" >>"$temp_output"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__validate_markdown_syntax() {
  # Future: Validate markdown syntax and report issues
  local input_file="$1"

  # Check for common markdown issues
  local issues=0

  # Unclosed brackets
  if grep -q '\[.*[^]]$' "$input_file"; then
    printf_yellow "⚠️ Found unclosed brackets in markdown"
    ((issues++))
  fi

  # Malformed links
  if grep -q '\]([^)]*)$' "$input_file"; then
    printf_yellow "⚠️ Found malformed links in markdown"
    ((issues++))
  fi

  # Empty link text
  if grep -q '\[\](' "$input_file"; then
    printf_yellow "⚠️ Found links with empty text"
    ((issues++))
  fi

  return $issues
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__make_html() {
  local from="" to=""
  FILE="${1:-$FILE}"
  LINKS="${2:-${FILE%.*}.html}"
  from="$(basename -- "$FILE" 2>/dev/null)"
  to="$(basename -- "$LINKS" 2>/dev/null)"
  GEN_LINKS_FORCE="${GEN_LINKS_FORCE:-false}"
  [ -f "$FILE" ] || { printf_red "$FILE doesn't exist" && return 1; }
  if [ "$GEN_LINKS_FORCE" != "true" ] && [ -f "$LINKS" ]; then
    printf_yellow "Refusing to overwrite $LINKS"
    printf_yellow "Add --force to allow overwriting"
    return 1
  fi
  xdg-mime query filetype "$FILE" 2>&1 | grep -q "markdown" && FILE_TYPE="markdown" || FILE_TYPE="text"
  if [ "$GEN_LINKS_SILENT" != "true" ]; then
    printf_blue "Creating $to from $from - File type is $FILE_TYPE"
    printf_cyan "Setting temp file to $GEN_LINKS_TEMP_FILE"
  fi
  __make_links "${1:-$FILE}"
  cat <<EOF | tee -p "$LINKS" &>/dev/null
<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="utf-8">
<meta http-equiv="x-ua-compatible" content="ie=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<!--
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  $(date +'%Y%m%d%H%M')
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  Link list
# @@Copyright        :  Copyright: (c) $(date +'%Y') Jason Hempstead, Casjays Developments
# @@Created          :  $(date +'%A, %B %d, %Y %H:%M:%S %Z')
# @@File             :  $to
# @@Description      :  links from $from
# @@Changelog        :  Updated links
# @@TODO             :
# @@Other            :  Do not edit this file
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  gen-links
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<meta
name="Keywords"
content="Casjay, CasjaysDev, Jason M. Hempstead, Website, About Me"
/>
<meta name="Description" content="Created By Casjays Developments" />
<meta name="generator" content="gen-links" />
<link rel="shortcut icon" href="casjaysdev-sites.github.io/static/main/favicon.ico" />
<link rel="stylesheet" href="https://casjaysdev-sites.github.io/static/default-css/base.css" />
<link rel="stylesheet" href="https://casjaysdev-sites.github.io/static/default-css/hacker.css" />
<link
rel="stylesheet"
href="https://casjaysdev-sites.github.io/static/default-css/gh/ribbon.css"
crossorigin="anonymous"
/>
<link
  rel="stylesheet"
  type="text/css"
  href="https://cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.0.3/cookieconsent.min.css"
  crossorigin="anonymous"
/>
<link
  rel="stylesheet"
  href="https://casjaysdev-sites.github.io/static/default-css/other/forms-min.css"
  crossorigin="anonymous"
/>
<link
  rel="stylesheet"
  href="https://casjaysdev-sites.github.io/static/default-css/bootstrap/darkly.css"
  crossorigin="anonymous"
/>
<link
  rel="stylesheet"
  href="https://casjaysdev-sites.github.io/static/default-css/bootstrap/bootstrap-icons.css"
  integrity="sha384-b6lVK+yci+bfDmaY1u0zE8YYJt0TZxLEAFyYSLHId4xoVvsrQu3INevFKo+Xir8e"
  crossorigin="anonymous"
/>
<link
  rel="stylesheet"
  href="https://casjaysdev-sites.github.io/static/default-css/bootstrap/font-awesome.css"
  crossorigin="anonymous"
/>

<script
  src="https://cdn.jsdelivr.net/npm/@widgetbot/crate@3"
  async
  defer
></script>
<script
  src="https://casjaysdev-sites.github.io/static/default-js/errorpages/isup.js"
  async
  defer
  crossorigin="anonymous"
></script>
<script
  src="https://casjaysdev-sites.github.io/static/default-js/errorpages/homepage.js"
  async
  defer
  crossorigin="anonymous"
></script>
<script
  src="https://casjaysdev-sites.github.io/static/default-js/errorpages/loaddomain.js"
  async
  defer
  crossorigin="anonymous"
></script>
<script
  src="https://casjaysdev-sites.github.io/static/default-js/utils/fetch.min.js"
  async
  defer
  crossorigin="anonymous"
></script>
<script
  src="https://casjaysdev-sites.github.io/static/default-js/utils/popper.min.js"
  async
  defer
  crossorigin="anonymous"
></script>
<script
  src="https://casjaysdev-sites.github.io/static/default-js/utils/bootstrap.bundle.min.js"
  async
  defer
  crossorigin="anonymous"
></script>
<!-- Begin Main Site -->
<title>${GEN_LINKS_TITLE:-List of links from $from}</title>
$GEN_LINKS_HEADER
</head>

<!-- Begin Body -->
<body>
<!-- Begin Main content -->
<div class="container vh-100 align-items-center my-5">
<h1 class="text-center">List of links from $from</h1>
<div class="links align-items-center">
<br />
<!-- $GEN_LINKS_SEPARATOR -->
$([ -f "$GEN_LINKS_TEMP_FILE" ] && cat "$GEN_LINKS_TEMP_FILE" | sed '/^$/N;/^\n$/D' | __sed_separator)
<!-- $GEN_LINKS_SEPARATOR -->
</div>
<br />
<!-- Begin Footer -->
<div class="footer fs-3">
Last updated on: $(date +'%Y-%m-%d %H:%M:%S')
</div>
<br />
$GEN_LINKS_FOOTER
<!-- End Footer -->
<br />
<!-- End Body -->
</div>
</body>
<!-- End Site -->
</html>

EOF
  if [ -f "$LINKS" ]; then
    sed -i '$!N; s|'$GEN_LINKS_SEPARATOR'\n'$GEN_LINKS_SEPARATOR'|'$GEN_LINKS_SEPARATOR'|g' "$LINKS"
    if [ "$GEN_LINKS_SILENT" != "true" ]; then
      printf_green "Your links file has been generated"
    fi
    return 0
  else
    printf_red "Failed to create $LINKS"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__make_links() {
  local name="" url="" line="" lines="" total_lines="0" number_init="0" number="0" color_number="1"
  FILE="${1:-$FILE}"
  rm -Rf "$GEN_LINKS_TEMP_FILE"
  echo '<div class="row text-center align-items-center justify-content-center">' >>"$GEN_LINKS_TEMP_FILE" 2>/dev/null
  cat "$FILE" | __grep_text | while IFS= read -r line; do
    if { [ "$line" = " " ] || [ "$line" = "" ]; } && [ "$number_init" != 0 ]; then
      number=0
      echo "" | __sed_separator >>"$GEN_LINKS_TEMP_FILE" 2>/dev/null
    elif [ "${#line}" -lt 4 ]; then
      number=0
      [ "$number_init" = 0 ] || echo "" | __sed_separator >>"$GEN_LINKS_TEMP_FILE" 2>/dev/null
    else
      number=$(($number + 1))
      total_lines=$(($total_lines + 1))
      __get_page_title "$line"
      local title_exit=$?

      # Only create links for valid content
      if [ $title_exit -eq 0 ] && [ -n "$link_title" ]; then
        border="$(__border_color "$color_number")"
        [ "$color_number" -ge "6" ] && color_number="1" || color_number=$(($color_number + 1))
        echo '<div class="col-10 text-center align-center border border-'${border:-primary}' align-items-center pt-5" style="font-size: 1.3rem;">'$number': <a href="'$line'" class="pl-5" target="_blank">'$link_title'</a></div><br />' >>"$GEN_LINKS_TEMP_FILE" 2>/dev/null
      elif [ $title_exit -eq 1 ] && [ -n "$link_title" ]; then
        # No title but valid link - still create link
        border="$(__border_color "$color_number")"
        [ "$color_number" -ge "6" ] && color_number="1" || color_number=$(($color_number + 1))
        echo '<div class="col-10 text-center align-center border border-secondary align-items-center pt-5" style="font-size: 1.3rem;">'$number': <a href="'$line'" class="pl-5 text-muted" target="_blank">'$link_title'</a></div><br />' >>"$GEN_LINKS_TEMP_FILE" 2>/dev/null
      fi
      # If title_exit -eq 2 (unavailable), skip entirely - no link created
    fi
    number_init="$number"
    builtin printf '\r                                                                                                                        '
  done
  echo '</div><br />' >>"$GEN_LINKS_TEMP_FILE" 2>/dev/null
  builtin printf '%b\r' ""
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__watch() {
  local time="" filein="" fileout="" dir="" files="" date_time="" line_count=""
  filein="$1"
  files="$filein"
  time="$3"
  fileout="${2:-${filein%.*}}"
  GEN_LINKS_SILENT="true"
  dir=$(realpath "$filein" 2>/dev/null)
  date_time="$(date +'%Y-%m-%d at %H:%M:%S')"
  line_count="$(cat "$filein" | wc -l 2>/dev/null)"
  [ -f "$filein" ] && file="$(basename -- "$filein")" || exit 1
  [ -f "$filein" ] && dir=$(dirname $(realpath "$filein") 2>/dev/null)
  printf_blue "watching $file every ${time} secs and regenerating as it changes"
  printf_cyan "Processing $line_count lines. ${YELLOW}Press control+c to exit."
  while :; do
    date_time="$(date +'%Y-%m-%d at %H:%M:%S')"
    line_count="$(cat "$filein" | wc -l 2>/dev/null)"
    if [ "$files" = "" ]; then
      __printf_return "Nothing changed with ${files:-$filein} on $date_time - processed $line_count lines " "$GREEN"
    else
      __make_html "$filein" "$fileout"
      __printf_return "Updated $fileout with ${files:-$filein} on $date_time - processing $line_count lines " "$CYAN"
    fi
    builtin printf '\r                                                                                                                  '
    __watch_files $time "$filein" && files=$(echo "$filein") || files=""
  done
  builtin printf '\r'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__watch_files() {
  stty -echoctl
  trap 'printf "\n";exit 0' SIGINT
  local sleep=$((${1:-$time} - 2))
  timeout $sleep watch -d -t -g ls -l "${2:-$filein}" &>/dev/null && exitCode=0 || exitCode=1
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_page_title() {
  link_title=""
  local exitCode=0
  local link_url="$1"
  local url_contents=""
  local retrieve_title=""
  builtin printf '%s' "$link_url" | grep -q '\-----------' && link_url="" && return 1
  builtin printf '\r%b%s%b ' "${YELLOW}" "Setting up ${link_url:0:120}" "${NC}"
  if [ -n "$GEN_LINKS_LOOKUP" ]; then
    if __check_status "$link_url" &>/dev/null; then
      url_contents="$(curl -q -LSsf "$link_url" 2>/dev/null)"
      retrieve_title="$(__retrieve_page_meta "$url_contents" || __retrieve_page_title "$url_contents" || false)"
      set_title="$(__set_page_title "$link_url" "$retrieve_title" | grep '^' || false)"
      if [ -n "$set_title" ]; then
        link_title="$set_title"
      else
        link_title="$(__extract_smart_title "$link_url")"
        exitCode=$?
      fi
    else
      exitCode=2
    fi
  else
    link_title="$(__extract_smart_title "$link_url")"
  fi
  sleep .2
  builtin printf '\r                                                                                                                                           '
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__extract_smart_title() {
  local url="$1"
  local title=""

  # Remove protocol and common parameters
  local clean_url="$(echo "$url" | sed 's|^https*://||g;s|^ftp://||g;s|?.*||g;s|#.*||g')"

  # Site-specific title extraction
  if echo "$url" | grep -q 'youtube.com/watch'; then
    # YouTube - try to extract from URL path or use description
    local video_id="$(echo "$url" | sed 's|.*[?&]v=||g;s|&.*||g')"
    title="YouTube: $video_id"
  elif echo "$url" | grep -q 'github.com'; then
    # GitHub - extract repo name and owner
    title="$(echo "$clean_url" | cut -d'/' -f2-3 | sed 's|/| - |g')"
  elif echo "$url" | grep -q 'stackoverflow.com/questions'; then
    # StackOverflow - extract question title from URL
    title="$(echo "$clean_url" | cut -d'/' -f4- | sed 's|/| |g' | head -c60)"
  elif echo "$url" | grep -q 'reddit.com/r/'; then
    # Reddit - extract subreddit and post title
    local subreddit="$(echo "$clean_url" | cut -d'/' -f3)"
    local post_title="$(echo "$clean_url" | cut -d'/' -f6- | head -c40)"
    title="$subreddit: $post_title"
  elif echo "$url" | grep -q '/videos\?/'; then
    # Video sites - extract from video path
    title="$(echo "$clean_url" | sed 's|.*/videos\?/[^/]*/||g;s|.*/videos\?/||g' | cut -d'/' -f1)"
  elif echo "$url" | grep -q 'docs\|documentation'; then
    # Documentation sites
    local doc_section="$(echo "$clean_url" | sed 's|.*/docs/||g;s|.*/documentation/||g' | cut -d'/' -f1-2 | sed 's|/| - |g')"
    local site_name="$(echo "$clean_url" | cut -d'/' -f1 | sed 's|^www\.||g;s|\..*||g')"
    title="$site_name: $doc_section"
  elif echo "$url" | grep -q '/wiki/'; then
    # Wikipedia and wiki sites
    title="$(echo "$clean_url" | sed 's|.*/wiki/||g' | cut -d'/' -f1 | sed 's|_| |g')"
  elif echo "$url" | grep -q '/package\|/packages'; then
    # Package repositories
    local package_name="$(echo "$clean_url" | sed 's|.*/package/||g;s|.*/packages/||g' | cut -d'/' -f1)"
    local site_name="$(echo "$clean_url" | cut -d'/' -f1 | sed 's|^www\.||g;s|\..*||g')"
    title="$site_name: $package_name"
  else
    # Generic - use last meaningful path segment
    title="$(echo "$clean_url" | sed 's|/$||g' | awk -F'/' '{print $NF}' | head -c60)"
  fi
  # Clean up the extracted title
  title="$(echo "$title" | sed 's|[-_+]| |g;s|%20| |g;s|%2[Dd]|-|g;s|%28|(|g;s|%29|)|g' |
    sed 's|  *| |g;s|^ *||g;s| *$||g' | head -c80)"
  # Fallback to domain name if title is still too short
  if [ ${#title} -lt 3 ] || [[ "$title" =~ ^[0-9]+$ ]]; then
    title="$(echo "$clean_url" | cut -d'/' -f1 | sed 's|^www\.||g;s|\..*||g' | sed 's|\b\(.\)|\U\1|g')"
  fi

  # Final cleanup and capitalization
  title="$(echo "$title" | sed 's|\b\(.\)|\U\1|g')"

  echo "${title:-$url}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_status() {
  local return_status="$(curl -q -LSsfI --max-time 1 -o /dev/null -w "%{http_code}" "$1" | grep '^')"
  if [ "$return_status" = 200 ]; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__border_color() {
  local get_color="$1"
  if [ "$get_color" -eq 1 ]; then
    echo "primary"
  elif [ "$get_color" -eq 2 ]; then
    echo "danger"
  elif [ "$get_color" -eq 3 ]; then
    echo "secondary"
  elif [ "$get_color" -eq 4 ]; then
    echo "warning"
  elif [ "$get_color" -eq 5 ]; then
    echo "success"
  elif [ "$get_color" -eq 6 ]; then
    echo "info"
  else
    color_number=1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__md_to_html() { $CASJAYSDEVDIR/helpers/scripts/md-to-html.sed; }
__get_bookmarks_dir() { dirname "$1" | grep -vE '^.$||^$' | grep '^' || echo "$GEN_LINKS_BOOKMARK_DIR"; }
__get_bookmarks_file() { dirname "$1" | grep -vE '^.$||^$' | grep '^' || echo "$(dirname "$GEN_LINKS_BOOKMARK_FILE")"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__add_bookmark() {
  local url="$1"
  local file_name="${2:-bookmarks}"
  local html_file="${3:-${2:-$GEN_LINKS_BOOKMARK_FILE}}"
  local url_dir dir_name temp_file final_file_name final_html_file

  url_dir="$(__get_bookmarks_file "$file_name")"
  dir_name="$(__get_bookmarks_dir "$html_file")"
  temp_file="$GEN_LINKS_TEMP_DIR/$(basename -- "$file_name")"
  final_file_name="$dir_name/$(basename -- "${file_name%.*}.txt")"
  final_html_file="$dir_name/$(basename -- "${html_file%.*}.html")"

  printf '%s\n' "$url" >"$temp_file"
  [ -f "$final_file_name" ] && cat "$final_file_name" | grep -vw "$url" >>"$temp_file"
  cat "$temp_file" >"$final_file_name"
  rm -Rf "$temp_file"

  __make_html "$final_file_name" "$final_html_file"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_LINKS_CONFIG_FILE="${GEN_LINKS_CONFIG_FILE:-settings.conf}"
GEN_LINKS_CONFIG_DIR="${GEN_LINKS_CONFIG_DIR:-$HOME/.config/myscripts/gen-links}"
GEN_LINKS_CONFIG_BACKUP_DIR="${GEN_LINKS_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-links/backups}"
GEN_LINKS_LOG_DIR="${GEN_LINKS_LOG_DIR:-$HOME/.local/log/gen-links}"
GEN_LINKS_TEMP_DIR="${GEN_LINKS_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-links}"
GEN_LINKS_CACHE_DIR="${GEN_LINKS_CACHE_DIR:-$HOME/.cache/gen-links}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_LINKS_OUTPUT_COLOR_1="${GEN_LINKS_OUTPUT_COLOR_1:-33}"
GEN_LINKS_OUTPUT_COLOR_2="${GEN_LINKS_OUTPUT_COLOR_2:-5}"
GEN_LINKS_OUTPUT_COLOR_GOOD="${GEN_LINKS_OUTPUT_COLOR_GOOD:-2}"
GEN_LINKS_OUTPUT_COLOR_ERROR="${GEN_LINKS_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_LINKS_NOTIFY_ENABLED="${GEN_LINKS_NOTIFY_ENABLED:-yes}"
GEN_LINKS_GOOD_NAME="${GEN_LINKS_GOOD_NAME:-Great:}"
GEN_LINKS_ERROR_NAME="${GEN_LINKS_ERROR_NAME:-Error:}"
GEN_LINKS_GOOD_MESSAGE="${GEN_LINKS_GOOD_MESSAGE:-No errors reported}"
GEN_LINKS_ERROR_MESSAGE="${GEN_LINKS_ERROR_MESSAGE:-Errors were reported}"
GEN_LINKS_NOTIFY_CLIENT_NAME="${GEN_LINKS_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_LINKS_NOTIFY_CLIENT_ICON="${GEN_LINKS_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_LINKS_NOTIFY_CLIENT_URGENCY="${GEN_LINKS_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_LINKS_HEADER="${GEN_LINKS_HEADER:-}"
GEN_LINKS_FOOTER="${GEN_LINKS_FOOTER:-}"
GEN_LINKS_BOOKMARK_DIR="${GEN_LINKS_BOOKMARK_DIR:-$GEN_LINKS_CONFIG_DIR/bookmarks}"
GEN_LINKS_BOOKMARK_FILE="${GEN_LINKS_BOOKMARK_FILE:-$GEN_LINKS_CONFIG_DIR/index.html}"
GEN_LINKS_SEPARATOR="${GEN_LINKS_SEPARATOR:-<p>------------------------------------------------------------------------------------------------------------------------</p>}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE" ] && . "$GEN_LINKS_CONFIG_DIR/$GEN_LINKS_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_LINKS_LOG_DIR" ] || mkdir -p "$GEN_LINKS_LOG_DIR" |& __devnull
[ -d "$GEN_LINKS_TEMP_DIR" ] || mkdir -p "$GEN_LINKS_TEMP_DIR" |& __devnull
[ -d "$GEN_LINKS_CACHE_DIR" ] || mkdir -p "$GEN_LINKS_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_LINKS_TEMP_FILE="${GEN_LINKS_TEMP_FILE:-$(mktemp $GEN_LINKS_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_LINKS_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_LINKS_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_LINKS_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_LINKS_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_LINKS_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_LINKS_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",force,lookup"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="watch"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_LINKS_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_LINKS_CWD="$2"
    [ -d "$GEN_LINKS_CWD" ] || mkdir -p "$GEN_LINKS_CWD" |& __devnull
    shift 2
    ;;
  --force)
    shift 1
    GEN_LINKS_FORCE="true"
    ;;
  --lookup)
    shift 1
    GEN_LINKS_LOOKUP="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_LINKS_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_LINKS_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && GEN_LINKS_CWD="$1" && shift 1 || GEN_LINKS_CWD="${GEN_LINKS_CWD:-$PWD}"
GEN_LINKS_CWD="$(realpath "${GEN_LINKS_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$GEN_LINKS_CWD" ] && cd "$GEN_LINKS_CWD"; then
# if [ "$GEN_LINKS_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_LINKS_CWD"
# fi
# else
# printf_exit "💔 $GEN_LINKS_CWD does not exist 💔"
# fi
export GEN_LINKS_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
[ -d "$GEN_LINKS_BOOKMARK_DIR" ] || mkdir -p "$GEN_LINKS_BOOKMARK_DIR"
[ -f "$GEN_LINKS_CONFIG_DIR/header.html" ] && GEN_LINKS_HEADER="$(<"$GEN_LINKS_CONFIG_DIR/header.html")"
[ -f "$GEN_LINKS_CONFIG_DIR/footer.html" ] && GEN_LINKS_FOOTER="$(<"$GEN_LINKS_CONFIG_DIR/footer.html")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
watch)
  shift 1
  if [ $# -eq 2 ]; then
    __watch "$1" "$2" "5"
  elif [ $# -eq 3 ]; then
    __watch "$1" "$2" "$3"
  else
    printf_exit "Usage: $APPNAME watch <inFile> <outFile> <time>"
  fi
  ;;

bookmark | bookmarks)
  shift 1
  { [ -z "$1" ] || [ $# -eq 0 ]; } && printf_blue "Usage: $APPNAME bookmark <url> [name/outFile]" && exit 1
  __add_bookmark "$@"
  exit $?
  ;;

*)
  [ $# -eq 0 ] && printf_blue "Usage: $APPNAME <inFile> <outFile>" && exit 1
  __make_html "$@"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
