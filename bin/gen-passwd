#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202509201030-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-passwd --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 08, 2022 22:32 EDT
# @@File             :  gen-passwd
# @@Description      :  generate random password
# @@Changelog        :  Enhanced OpenSSL support, mkpasswd integration, Docker format, distro-agnostic compatibility
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202509201030-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_PASSWD_REQUIRE_SUDO="${GEN_PASSWD_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-simple.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
#user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE"
  fi
  [ -d "$GEN_PASSWD_CONFIG_DIR" ] || mkdir -p "$GEN_PASSWD_CONFIG_DIR"
  [ -d "$GEN_PASSWD_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_PASSWD_CONFIG_BACKUP_DIR"
  [ -f "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE" ] &&
    cp -Rf "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE" "$GEN_PASSWD_CONFIG_BACKUP_DIR/$GEN_PASSWD_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE"
# Settings for gen-passwd
GEN_PASSWD_DEFAULT_LENGTH="${GEN_PASSWD_DEFAULT_LENGTH:-}"
GEN_PASSWD_CHARACTERS="${GEN_PASSWD_CHARACTERS:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_PASSWD_OUTPUT_COLOR_1="${GEN_PASSWD_OUTPUT_COLOR_1:-}"
GEN_PASSWD_OUTPUT_COLOR_2="${GEN_PASSWD_OUTPUT_COLOR_2:-}"
GEN_PASSWD_OUTPUT_COLOR_GOOD="${GEN_PASSWD_OUTPUT_COLOR_GOOD:-}"
GEN_PASSWD_OUTPUT_COLOR_ERROR="${GEN_PASSWD_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_PASSWD_NOTIFY_ENABLED="${GEN_PASSWD_NOTIFY_ENABLED:-}"
GEN_PASSWD_GOOD_NAME="${GEN_PASSWD_GOOD_NAME:-}"
GEN_PASSWD_ERROR_NAME="${GEN_PASSWD_ERROR_NAME:-}"
GEN_PASSWD_GOOD_MESSAGE="${GEN_PASSWD_GOOD_MESSAGE:-}"
GEN_PASSWD_ERROR_MESSAGE="${GEN_PASSWD_ERROR_MESSAGE:-}"
GEN_PASSWD_NOTIFY_CLIENT_NAME="${GEN_PASSWD_NOTIFY_CLIENT_NAME:-}"
GEN_PASSWD_NOTIFY_CLIENT_ICON="${GEN_PASSWD_NOTIFY_CLIENT_ICON:-}"
GEN_PASSWD_NOTIFY_CLIENT_URGENCY="${GEN_PASSWD_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-passwd:  generate random password - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-passwd [options] [length]"
  __printf_line "       gen-passwd hash [type] [password]"
  __printf_line "       gen-passwd app [type] [password]"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Password Generation"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "20                              - Set the password length"
  __printf_line "--length [20]                   - Set the password length"
  __printf_line "--no-numbers                    - No numbers"
  __printf_line "--no-chars                      - No special characters"
  __printf_line "--no-upper                      - No uppercase letters"
  __printf_line "--no-lower                      - No lowercase letters"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Hash Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--docker                        - Format output for Docker compose"
  __printf_line "--prefix                        - Include algorithm prefix in hash"
  __printf_line "--silent                        - Suppress messages and clipboard"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Password Hashing"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "hash bcrypt [password]          - Generate bcrypt hash"
  __printf_line "hash argon2 [password]          - Generate argon2id hash"
  __printf_line "hash argon2i [password]         - Generate argon2i hash"
  __printf_line "hash argon2d [password]         - Generate argon2d hash"
  __printf_line "hash pbkdf2 [password]          - Generate PBKDF2 hash"
  __printf_line "hash scrypt [password]          - Generate scrypt hash"
  __printf_line "hash sha256 [password]          - Generate SHA256 hash"
  __printf_line "hash sha512 [password]          - Generate SHA512 hash"
  __printf_line "hash sha3-256 [password]        - Generate SHA3-256 hash"
  __printf_line "hash sha3-512 [password]        - Generate SHA3-512 hash"
  __printf_line "hash blake2b [password]         - Generate Blake2b hash"
  __printf_line "hash blake2s [password]         - Generate Blake2s hash"
  __printf_line "hash crypt-sha512 [password]    - Generate SHA512 crypt hash"
  __printf_line "hash crypt-sha256 [password]    - Generate SHA256 crypt hash"
  __printf_line "hash unix-sha512 [password]     - Generate Unix SHA512 crypt (wg-easy compatible)"
  __printf_line "hash unix-sha256 [password]     - Generate Unix SHA256 crypt"
  __printf_line "hash unix-md5 [password]        - Generate Unix MD5 crypt"
  __printf_line "hash whirlpool [password]       - Generate Whirlpool hash"
  __printf_line "hash md5 [password]             - Generate MD5 hash"
  printf_cyan "• If no password provided, generates random password and hashes it"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Application Presets"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "app wg-easy [password]          - WireGuard Easy setup"
  __printf_line "app nginx [password] [username] - Nginx HTTP basic auth"
  __printf_line "app traefik [password] [user]   - Traefik basic auth labels"
  __printf_line "app postgres [password]         - PostgreSQL database password"
  __printf_line "app mysql [password]            - MySQL/MariaDB database password"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Examples"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  printf_cyan "gen-passwd 16                   # Generate 16-char password"
  printf_cyan "gen-passwd app wg-easy          # WireGuard Easy setup"
  printf_cyan "gen-passwd app nginx mypass admin  # Nginx auth for user 'admin'"
  printf_cyan "gen-passwd hash bcrypt          # Generate password + bcrypt hash"
  printf_cyan "gen-passwd hash unix-sha512     # Unix format (wg-easy compatible)"
  printf_cyan "gen-passwd --docker hash unix-sha512  # Docker format"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
__requiresudo() {
  if [ "$GEN_PASSWD_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_PASSWD_REQUIRE_SUDO_RUN" ]; then
    export GEN_PASSWD_REQUIRE_SUDO="no"
    export GEN_PASSWD_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_PASSWD_TEMP_FILE" ] && rm -Rf "$GEN_PASSWD_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
if __cmd_exists clipboard; then
  __clipboard() { clipboard; }
elif __cmd_exists xclip; then
  __clipboard() { xclip -selection clipboard; }
elif __cmd_exists xsel; then
  __clipboard() { xsel -ib; }
elif __cmd_exists clip.exe; then
  __clipboard() { clip.exe; }
elif __cmd_exists pbcopy; then
  __clipboard() { pbcopy; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tr() { tr "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__generator() {
  local pass="" characters="" length=""
  length="$GEN_PASSWD_DEFAULT_LENGTH"
  characters="$(echo "$GEN_PASSWD_CHARACTERS" | tr -d ' ')"

  # Generate password using /dev/urandom
  if [ -n "$characters" ]; then
    pass="$(cat /dev/urandom 2>/dev/null | __tr -cd "${characters}" | __tr -d '[:space:]\042\047\134' | head -c${length} 2>/dev/null || echo '')"
  fi

  # Fallback method if urandom fails
  if [ -z "$pass" ] || [ ${#pass} -lt "$length" ]; then
    local fallback_chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_@-"
    pass="$(printf '%s' "$fallback_chars" | fold -w1 | shuf | head -n"$length" | tr -d '\n' 2>/dev/null || echo 'fallback_password_12345')"
  fi

  printf '%s\n' "$pass"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_gen-passwd() {
  GEN_PASSWD_DEFAULT_LENGTH="${1:-$GEN_PASSWD_DEFAULT_LENGTH}"
  GEN_PASSWD_SET_PASS="$(__generator)"
  [ -n "$GEN_PASSWD_SILENT" ] || [ "$GEN_PASSWD_RAW" = "yes" ] || printf_blue "Your password has been created and copied to your clipboard"
  if [ -n "$GEN_PASSWD_SET_PASS" ]; then
    printf_green "$GEN_PASSWD_SET_PASS"
    [ -n "$GEN_PASSWD_SILENT" ] || echo "$GEN_PASSWD_SET_PASS" | __clipboard
    return $?
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# OpenSSL capability detection
__openssl_supports() {
  local algorithm="$1"
  local type="${2:-dgst}"

  if ! __cmd_exists openssl; then
    return 1
  fi

  case "$type" in
  dgst)
    openssl dgst -list 2>/dev/null | grep -qw -- "-$algorithm"
    ;;
  passwd)
    openssl passwd -help 2>&1 | grep -q -- "-$algorithm"
    ;;
  kdf)
    openssl list -kdf-algorithms 2>/dev/null | grep -qi "$algorithm"
    ;;
  cipher)
    openssl list -cipher-algorithms 2>/dev/null | grep -qi "$algorithm"
    ;;
  mac)
    openssl list -mac-algorithms 2>/dev/null | grep -qi "$algorithm"
    ;;
  provider)
    openssl list -providers 2>/dev/null | grep -qi "$algorithm"
    ;;
  version)
    local min_version="$algorithm"
    local current_version="$(openssl version | awk '{print $2}' | cut -d. -f1-2)"
    if [ "$(printf '%s\n%s' "$min_version" "$current_version" | sort -V | head -n1)" = "$min_version" ]; then
      return 0
    else
      return 1
    fi
    ;;
  *)
    return 1
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Hash Functions
__hash_bcrypt() {
  local password="$1"
  local rounds="${2:-12}"

  if __cmd_exists mkpasswd; then
    # mkpasswd from whois package (most common)
    mkpasswd -m bcrypt -R "$rounds" "$password" 2>/dev/null
  elif __cmd_exists htpasswd; then
    # Apache htpasswd utility
    htpasswd -nbB "" "$password" 2>/dev/null | cut -d: -f2
  elif __cmd_exists python3; then
    # Python bcrypt module
    python3 -c "import bcrypt; print(bcrypt.hashpw('$password'.encode('utf-8'), bcrypt.gensalt(rounds=$rounds)).decode('utf-8'))" 2>/dev/null
  else
    printf_red "❌ bcrypt requires mkpasswd (whois package), htpasswd, or python3 with bcrypt module"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_argon2() {
  local password="$1"
  local type="${2:-argon2id}"
  local salt="$(openssl rand -hex 16 2>/dev/null)"

  if __openssl_supports "ARGON2" "kdf"; then
    # Use OpenSSL 3.x native Argon2 support
    local kdf_type=""
    case "$type" in
    argon2i) kdf_type="ARGON2I" ;;
    argon2d) kdf_type="ARGON2D" ;;
    *) kdf_type="ARGON2ID" ;;
    esac

    local hash_result="$(printf '%s' "$password" | openssl kdf -keylen 32 -kdfopt pass:stdin -kdfopt salt:"$salt" -kdfopt iter:3 -kdfopt lanes:1 -kdfopt memcost:4096 "$kdf_type" 2>/dev/null | head -c 32 | od -t x1 -An | tr -d ' \n\t')"
    printf '%s\n' "$type\$$salt\$$hash_result"
  elif __cmd_exists argon2; then
    echo -n "$password" | argon2 "$(openssl rand -base64 16)" -e -t 3 -m 12 -p 1 -"$type" 2>/dev/null
  elif __cmd_exists python3; then
    python3 -c "import argon2; ph = argon2.PasswordHasher(); print(ph.hash('$password'))" 2>/dev/null
  else
    printf_red "❌ argon2 requires OpenSSL 3.x with KDF, argon2 command, or python3 with argon2-cffi module"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_pbkdf2() {
  local password="$1"
  local iterations="${2:-10000}"
  local salt="$(openssl rand -hex 16 2>/dev/null)"

  if __openssl_supports "PBKDF2" "kdf"; then
    # Use OpenSSL native PBKDF2 support
    local hash_result="$(printf '%s' "$password" | openssl kdf -keylen 32 -kdfopt digest:SHA256 -kdfopt pass:stdin -kdfopt salt:"$salt" -kdfopt iter:"$iterations" PBKDF2 2>/dev/null | head -c 32 | od -t x1 -An | tr -d ' \n\t')"
    printf '%s\n' "pbkdf2_sha256\$$iterations\$$salt\$$hash_result"
  elif __cmd_exists python3; then
    python3 -c "import hashlib; import base64; import binascii; salt=binascii.unhexlify('$salt'); result=hashlib.pbkdf2_hmac('sha256', '$password'.encode(), salt, $iterations); print('pbkdf2_sha256\$${iterations}\$' + '$salt' + '\$' + binascii.hexlify(result).decode())" 2>/dev/null
  else
    printf_red "❌ pbkdf2 requires OpenSSL with KDF support or python3"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_scrypt() {
  local password="$1"
  local salt="$(openssl rand -hex 16 2>/dev/null)"

  if __openssl_supports "SCRYPT" "kdf"; then
    # Use OpenSSL native scrypt support
    local hash_result="$(printf '%s' "$password" | openssl kdf -keylen 32 -kdfopt pass:stdin -kdfopt salt:"$salt" -kdfopt n:16384 -kdfopt r:8 -kdfopt p:1 SCRYPT 2>/dev/null | head -c 32 | od -t x1 -An | tr -d ' \n\t')"
    printf '%s\n' "scrypt\$$salt\$$hash_result"
  elif __cmd_exists python3; then
    python3 -c "import hashlib; import base64; import binascii; salt=binascii.unhexlify('$salt'); result=hashlib.scrypt('$password'.encode(), salt=salt, n=16384, r=8, p=1); print('scrypt\$' + '$salt' + '\$' + binascii.hexlify(result).decode())" 2>/dev/null
  else
    printf_red "❌ scrypt requires OpenSSL with KDF support or python3"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_sha() {
  local password="$1"
  local algorithm="${2:-sha256}"
  local salt="$(openssl rand -base64 16 2>/dev/null)"

  if __cmd_exists openssl; then
    echo -n "${password}${salt}" | openssl dgst -"$algorithm" 2>/dev/null | awk -v salt="$salt" '{print algorithm"$"salt"$"$2}' algorithm="$algorithm"
  else
    printf_red "❌ SHA hashing requires openssl"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_md5() {
  local password="$1"
  local salt="$(openssl rand -base64 8 2>/dev/null)"

  if __cmd_exists openssl; then
    echo -n "${password}${salt}" | openssl dgst -md5 2>/dev/null | awk -v salt="$salt" '{print "md5$"salt"$"$2}'
  else
    printf_red "❌ MD5 hashing requires openssl"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_sha3() {
  local password="$1"
  local variant="${2:-sha3-256}"
  local salt="$(openssl rand -base64 16 2>/dev/null)"

  if __openssl_supports "$variant" "dgst"; then
    echo -n "${password}${salt}" | openssl dgst -"$variant" 2>/dev/null | awk -v salt="$salt" -v var="$variant" '{print var"$"salt"$"$2}'
  else
    printf_red "❌ SHA-3 ($variant) not supported by this OpenSSL version"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_blake2() {
  local password="$1"
  local variant="${2:-blake2b512}"
  local salt="$(openssl rand -base64 16 2>/dev/null)"

  if __openssl_supports "$variant" "dgst"; then
    echo -n "${password}${salt}" | openssl dgst -"$variant" 2>/dev/null | awk -v salt="$salt" -v var="$variant" '{print var"$"salt"$"$2}'
  else
    printf_red "❌ Blake2 ($variant) not supported by this OpenSSL version"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_crypt() {
  local password="$1"
  local algorithm="${2:-6}"

  case "$algorithm" in
  6 | sha512)
    if __cmd_exists mkpasswd; then
      mkpasswd -m sha-512 "$password" 2>/dev/null
    elif __openssl_supports "6" "passwd"; then
      openssl passwd -6 "$password" 2>/dev/null
    else
      printf_red "❌ SHA512 crypt requires mkpasswd (whois package) or OpenSSL"
      return 1
    fi
    ;;
  5 | sha256)
    if __cmd_exists mkpasswd; then
      mkpasswd -m sha-256 "$password" 2>/dev/null
    elif __openssl_supports "5" "passwd"; then
      openssl passwd -5 "$password" 2>/dev/null
    else
      printf_red "❌ SHA256 crypt requires mkpasswd (whois package) or OpenSSL"
      return 1
    fi
    ;;
  1 | md5)
    if __cmd_exists mkpasswd; then
      mkpasswd -m md5 "$password" 2>/dev/null
    elif __openssl_supports "1" "passwd"; then
      openssl passwd -1 "$password" 2>/dev/null
    else
      printf_red "❌ MD5 crypt requires mkpasswd (whois package) or OpenSSL"
      return 1
    fi
    ;;
  apr1)
    if __openssl_supports "apr1" "passwd"; then
      openssl passwd -apr1 "$password" 2>/dev/null
    elif __cmd_exists mkpasswd; then
      # mkpasswd doesn't support apr1, fallback to md5
      mkpasswd -m md5 "$password" 2>/dev/null
    else
      printf_red "❌ Apache MD5 crypt requires OpenSSL or mkpasswd (whois package)"
      return 1
    fi
    ;;
  *)
    if __cmd_exists mkpasswd; then
      mkpasswd -m sha-512 "$password" 2>/dev/null
    elif __openssl_supports "6" "passwd"; then
      openssl passwd -6 "$password" 2>/dev/null
    else
      printf_red "❌ Default SHA512 crypt requires mkpasswd (whois package) or OpenSSL"
      return 1
    fi
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_whirlpool() {
  local password="$1"
  local salt="$(openssl rand -base64 16 2>/dev/null)"

  if __openssl_supports "whirlpool" "dgst"; then
    echo -n "${password}${salt}" | openssl dgst -whirlpool 2>/dev/null | awk -v salt="$salt" '{print "whirlpool$"salt"$"$2}'
  else
    printf_red "❌ Whirlpool not supported by this OpenSSL version"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hash_unix() {
  local password="$1"
  local algorithm="${2:-sha512}"
  
  if __cmd_exists openssl; then
    case "$algorithm" in
    sha512|6)
      openssl passwd -6 "$password" 2>/dev/null
      ;;
    sha256|5)
      openssl passwd -5 "$password" 2>/dev/null
      ;;
    md5|1)
      openssl passwd -1 "$password" 2>/dev/null
      ;;
    apr1)
      openssl passwd -apr1 "$password" 2>/dev/null
      ;;
    *)
      openssl passwd -6 "$password" 2>/dev/null
      ;;
    esac
  else
    printf_red "❌ Unix crypt requires openssl"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_hash() {
  local hash_type="$1"
  local password="$2"
  local raw_password=""
  local hashed_password=""

  # If no password provided, generate one
  if [ -z "$password" ]; then
    raw_password="$(__generator)"
    password="$raw_password"
  else
    raw_password="$password"
  fi

  # Generate hash based on type
  case "$hash_type" in
  bcrypt)
    hashed_password="$(__hash_bcrypt "$password")"
    ;;
  argon2 | argon2id)
    hashed_password="$(__hash_argon2 "$password" "argon2id")"
    ;;
  argon2i)
    hashed_password="$(__hash_argon2 "$password" "argon2i")"
    ;;
  argon2d)
    hashed_password="$(__hash_argon2 "$password" "argon2d")"
    ;;
  pbkdf2)
    hashed_password="$(__hash_pbkdf2 "$password")"
    ;;
  scrypt)
    hashed_password="$(__hash_scrypt "$password")"
    ;;
  sha256)
    hashed_password="$(__hash_sha "$password" "sha256")"
    ;;
  sha512)
    hashed_password="$(__hash_sha "$password" "sha512")"
    ;;
  sha1)
    hashed_password="$(__hash_sha "$password" "sha1")"
    ;;
  md5)
    hashed_password="$(__hash_md5 "$password")"
    ;;
  sha3-256 | sha3)
    hashed_password="$(__hash_sha3 "$password" "sha3-256")"
    ;;
  sha3-224)
    hashed_password="$(__hash_sha3 "$password" "sha3-224")"
    ;;
  sha3-384)
    hashed_password="$(__hash_sha3 "$password" "sha3-384")"
    ;;
  sha3-512)
    hashed_password="$(__hash_sha3 "$password" "sha3-512")"
    ;;
  blake2b | blake2)
    hashed_password="$(__hash_blake2 "$password" "blake2b512")"
    ;;
  blake2s)
    hashed_password="$(__hash_blake2 "$password" "blake2s256")"
    ;;
  whirlpool)
    hashed_password="$(__hash_whirlpool "$password")"
    ;;
  crypt | crypt-sha512)
    hashed_password="$(__hash_crypt "$password" "6")"
    ;;
  crypt-sha256)
    hashed_password="$(__hash_crypt "$password" "5")"
    ;;
  crypt-md5)
    hashed_password="$(__hash_crypt "$password" "1")"
    ;;
  crypt-apr1)
    hashed_password="$(__hash_crypt "$password" "apr1")"
    ;;
  unix-sha512|passwd-sha512)
    hashed_password="$(__hash_unix "$password" "sha512")"
    ;;
  unix-sha256|passwd-sha256)
    hashed_password="$(__hash_unix "$password" "sha256")"
    ;;
  unix-md5|passwd-md5)
    hashed_password="$(__hash_unix "$password" "md5")"
    ;;
  unix-apr1|passwd-apr1)
    hashed_password="$(__hash_unix "$password" "apr1")"
    ;;
  *)
    printf_red "❌ Unsupported hash type: $hash_type"
    printf_cyan "Modern secure: bcrypt, argon2, argon2i, argon2d, pbkdf2, scrypt"
    printf_cyan "SHA family: sha256, sha512, sha1, sha3-256, sha3-384, sha3-512"
    printf_cyan "Blake2: blake2b, blake2s"
    printf_cyan "Crypt: crypt-sha512, crypt-sha256, crypt-md5, crypt-apr1"
    printf_cyan "Unix: unix-sha512, unix-sha256, unix-md5, unix-apr1"
    printf_cyan "Legacy: md5, whirlpool"
    return 1
    ;;
  esac

  # Output results
  if [ -n "$hashed_password" ]; then
    printf_blue "🔐 Generated password: $raw_password"
    # Remove prefix by default, add only if --prefix is used
    if [ "$GEN_PASSWD_WITH_PREFIX" != "true" ]; then
      hashed_password="$(echo "$hashed_password" | cut -d'$' -f2- 2>/dev/null || echo "$hashed_password")"
    fi

    # Format for Docker if requested
    if [ "$GEN_PASSWD_DOCKER_FORMAT" = "true" ]; then
      local docker_hash="$(echo "$hashed_password" | sed 's/\$/\$\$/g')"
      printf_green "# Add to docker-compose.yml environment section:"
      printf_cyan "PASSWORD_HASH=$docker_hash"
      printf_green "# Or add to .env file:"
      printf_cyan "PASSWORD_HASH=\"$hashed_password\""
    else
      printf_green "🔒 Hash ($hash_type): $hashed_password"
    fi

    # Copy to clipboard if not silent
    if [ -z "$GEN_PASSWD_SILENT" ] && builtin type -P clipboard | grep -q 'clipboard'; then
      if [ "$GEN_PASSWD_DOCKER_FORMAT" = "true" ]; then
        printf_blue "📋 Docker environment format copied to clipboard"
        echo "PASSWORD_HASH=\"$hashed_password\"" | clipboard
      else
        #printf_blue "📋 Hash copied to clipboard"
        echo "$hashed_password" | clipboard
      fi
    fi

    return 0
  else
    printf_red "❌ Failed to generate $hash_type hash"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_PASSWD_CONFIG_FILE="${GEN_PASSWD_CONFIG_FILE:-settings.conf}"
GEN_PASSWD_CONFIG_DIR="${GEN_PASSWD_CONFIG_DIR:-$HOME/.config/myscripts/gen-passwd}"
GEN_PASSWD_CONFIG_BACKUP_DIR="${GEN_PASSWD_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-passwd/backups}"
GEN_PASSWD_LOG_DIR="${GEN_PASSWD_LOG_DIR:-$HOME/.local/log/gen-passwd}"
GEN_PASSWD_TEMP_DIR="${GEN_PASSWD_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-passwd}"
GEN_PASSWD_CACHE_DIR="${GEN_PASSWD_CACHE_DIR:-$HOME/.cache/gen-passwd}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_PASSWD_OUTPUT_COLOR_1="${GEN_PASSWD_OUTPUT_COLOR_1:-33}"
GEN_PASSWD_OUTPUT_COLOR_2="${GEN_PASSWD_OUTPUT_COLOR_2:-5}"
GEN_PASSWD_OUTPUT_COLOR_GOOD="${GEN_PASSWD_OUTPUT_COLOR_GOOD:-2}"
GEN_PASSWD_OUTPUT_COLOR_ERROR="${GEN_PASSWD_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_PASSWD_NOTIFY_ENABLED="${GEN_PASSWD_NOTIFY_ENABLED:-yes}"
GEN_PASSWD_GOOD_NAME="${GEN_PASSWD_GOOD_NAME:-Great:}"
GEN_PASSWD_ERROR_NAME="${GEN_PASSWD_ERROR_NAME:-Error:}"
GEN_PASSWD_GOOD_MESSAGE="${GEN_PASSWD_GOOD_MESSAGE:-No errors reported}"
GEN_PASSWD_ERROR_MESSAGE="${GEN_PASSWD_ERROR_MESSAGE:-Errors were reported}"
GEN_PASSWD_NOTIFY_CLIENT_NAME="${GEN_PASSWD_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_PASSWD_NOTIFY_CLIENT_ICON="${GEN_PASSWD_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_PASSWD_NOTIFY_CLIENT_URGENCY="${GEN_PASSWD_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_PASSWD_DEFAULT_LENGTH="${GEN_PASSWD_DEFAULT_LENGTH:-32}"
GEN_PASSWD_DEFAULT_OPTIONS_UPPER="$(echo {A..Z})"
GEN_PASSWD_DEFAULT_OPTIONS_LOWER="$(echo {a..z})"
GEN_PASSWD_DEFAULT_OPTIONS_NUMBERS="$(echo {0..9})"
GEN_PASSWD_DEFAULT_OPTIONS_SPECIAL="$(echo '_ @ -')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE" ] && . "$GEN_PASSWD_CONFIG_DIR/$GEN_PASSWD_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_PASSWD_LOG_DIR" ] || mkdir -p "$GEN_PASSWD_LOG_DIR" |& __devnull
[ -d "$GEN_PASSWD_TEMP_DIR" ] || mkdir -p "$GEN_PASSWD_TEMP_DIR" |& __devnull
[ -d "$GEN_PASSWD_CACHE_DIR" ] || mkdir -p "$GEN_PASSWD_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_PASSWD_TEMP_FILE="${GEN_PASSWD_TEMP_FILE:-$(mktemp $GEN_PASSWD_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_PASSWD_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_PASSWD_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_PASSWD_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_PASSWD_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_PASSWD_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_PASSWD_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",no-numbers,no-chars,no-upper,no-lower,length:,docker,prefix"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="hash app"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_PASSWD_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_PASSWD_CWD="$2"
    [ -d "$GEN_PASSWD_CWD" ] || mkdir -p "$GEN_PASSWD_CWD" |& __devnull
    shift 2
    ;;
  --no-numbers)
    shift 1
    GEN_PASSWD_REMOVE="$GEN_PASSWD_REMOVE $GEN_PASSWD_DEFAULT_OPTIONS_NUMBERS"
    GEN_PASSWD_DEFAULT_OPTIONS_NUMBERS=""
    ;;
  --no-chars)
    shift 1
    GEN_PASSWD_REMOVE="$GEN_PASSWD_REMOVE $GEN_PASSWD_DEFAULT_OPTIONS_SPECIAL"
    GEN_PASSWD_DEFAULT_OPTIONS_SPECIAL=""
    ;;
  --no-lower)
    shift 1
    GEN_PASSWD_REMOVE="$GEN_PASSWD_REMOVE $GEN_PASSWD_DEFAULT_OPTIONS_LOWER"
    GEN_PASSWD_DEFAULT_OPTIONS_LOWER=""
    ;;
  --no-upper)
    shift 1
    GEN_PASSWD_REMOVE="$GEN_PASSWD_REMOVE $GEN_PASSWD_DEFAULT_OPTIONS_UPPER"
    GEN_PASSWD_DEFAULT_OPTIONS_UPPER=""
    ;;
  --length)
    GEN_PASSWD_DEFAULT_LENGTH="$2"
    shift 2
    ;;
  --docker)
    shift 1
    GEN_PASSWD_DOCKER_FORMAT="true"
    ;;
  --prefix)
    shift 1
    GEN_PASSWD_WITH_PREFIX="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_PASSWD_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_PASSWD_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && GEN_PASSWD_CWD="$1" && shift 1 || GEN_PASSWD_CWD="${GEN_PASSWD_CWD:-$PWD}"
GEN_PASSWD_CWD="$(realpath "${GEN_PASSWD_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$GEN_PASSWD_CWD" ] && cd "$GEN_PASSWD_CWD"; then
# if [ "$GEN_PASSWD_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_PASSWD_CWD"
# fi
# else
# printf_exit "💔 $GEN_PASSWD_CWD does not exist 💔"
# fi
export GEN_PASSWD_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides - Build character set
GEN_PASSWD_CHARACTERS=""
[ -n "$GEN_PASSWD_DEFAULT_OPTIONS_UPPER" ] && GEN_PASSWD_CHARACTERS+="$GEN_PASSWD_DEFAULT_OPTIONS_UPPER"
[ -n "$GEN_PASSWD_DEFAULT_OPTIONS_LOWER" ] && GEN_PASSWD_CHARACTERS+="$GEN_PASSWD_DEFAULT_OPTIONS_LOWER"
[ -n "$GEN_PASSWD_DEFAULT_OPTIONS_SPECIAL" ] && GEN_PASSWD_CHARACTERS+="$GEN_PASSWD_DEFAULT_OPTIONS_SPECIAL"
[ -n "$GEN_PASSWD_DEFAULT_OPTIONS_NUMBERS" ] && GEN_PASSWD_CHARACTERS+="$GEN_PASSWD_DEFAULT_OPTIONS_NUMBERS"
# Remove duplicates and ensure we have characters
GEN_PASSWD_CHARACTERS="$(printf '%s' "$GEN_PASSWD_CHARACTERS" | fold -w1 | sort -u | tr -d '\n' | grep '^' || echo 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_@-')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Presets
__preset_wg_easy() {
  local password="$1"
  printf_blue "🔧 Generating wg-easy compatible password"
  
  if [ -z "$password" ]; then
    password="$(__generator)"
    printf_blue "🔐 Generated password: $password"
  fi
  
  local hash="$(__hash_unix "$password" "sha512")"
  
  printf_green "# WireGuard Easy Setup:"
  printf_cyan "Plain password: $password"
  printf_cyan "Hashed password: $hash"
  printf_green "# Add to docker-compose.yml:"
  printf_cyan "PASSWORD: \"$hash\""
  printf_green "# Or use environment variable:"
  printf_cyan "WG_PASSWORD=\"$hash\""
  
  if [ -z "$GEN_PASSWD_SILENT" ] && builtin type -P clipboard | grep -q 'clipboard'; then
    printf_blue "📋 Hash copied to clipboard"
    echo "$hash" | clipboard
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__preset_nginx() {
  local password="$1"
  local username="${2:-admin}"
  printf_blue "🔧 Generating nginx HTTP auth compatible password"
  
  if [ -z "$password" ]; then
    password="$(__generator)"
    printf_blue "🔐 Generated password: $password"
  fi
  
  local hash=""
  if __cmd_exists htpasswd; then
    hash="$(htpasswd -nb "$username" "$password" 2>/dev/null)"
  else
    hash="$username:$(__hash_unix "$password" "sha512")"
  fi
  
  printf_green "# Nginx HTTP Basic Auth:"
  printf_cyan "Username: $username"
  printf_cyan "Password: $password"
  printf_cyan "Auth line: $hash"
  printf_green "# Add to .htpasswd file or nginx config"
  
  if [ -z "$GEN_PASSWD_SILENT" ] && builtin type -P clipboard | grep -q 'clipboard'; then
    printf_blue "📋 Auth line copied to clipboard"
    echo "$hash" | clipboard
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__preset_traefik() {
  local password="$1"
  local username="${2:-admin}"
  printf_blue "🔧 Generating Traefik basic auth compatible password"
  
  if [ -z "$password" ]; then
    password="$(__generator)"
    printf_blue "🔐 Generated password: $password"
  fi
  
  local hash=""
  if __cmd_exists htpasswd; then
    hash="$(htpasswd -nb "$username" "$password" 2>/dev/null)"
  else
    hash="$username:$(__hash_unix "$password" "sha512")"
  fi
  
  # Traefik needs escaped format for labels
  local traefik_escaped="$(echo "$hash" | sed 's/\$/\$\$/g')"
  
  printf_green "# Traefik Basic Auth:"
  printf_cyan "Username: $username"
  printf_cyan "Password: $password"
  printf_green "# Add to docker-compose.yml labels:"
  printf_cyan "- \"traefik.http.middlewares.auth.basicauth.users=$traefik_escaped\""
  
  if [ -z "$GEN_PASSWD_SILENT" ] && builtin type -P clipboard | grep -q 'clipboard'; then
    printf_blue "📋 Traefik label copied to clipboard"
    echo "- \"traefik.http.middlewares.auth.basicauth.users=$traefik_escaped\"" | clipboard
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__preset_postgres() {
  local password="$1"
  printf_blue "🔧 Generating PostgreSQL compatible password"
  
  if [ -z "$password" ]; then
    # PostgreSQL passwords: no special shell chars, reasonable length
    local old_chars="$GEN_PASSWD_CHARACTERS"
    GEN_PASSWD_CHARACTERS="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    GEN_PASSWD_DEFAULT_LENGTH="24"
    password="$(__generator)"
    GEN_PASSWD_CHARACTERS="$old_chars"
    printf_blue "🔐 Generated password: $password"
  fi
  
  printf_green "# PostgreSQL Setup:"
  printf_cyan "Plain password: $password"
  printf_green "# Add to docker-compose.yml:"
  printf_cyan "POSTGRES_PASSWORD: \"$password\""
  printf_green "# Or connection string:"
  printf_cyan "postgresql://username:$password@hostname:5432/database"
  
  if [ -z "$GEN_PASSWD_SILENT" ] && builtin type -P clipboard | grep -q 'clipboard'; then
    printf_blue "📋 Password copied to clipboard"
    echo "$password" | clipboard
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__preset_mysql() {
  local password="$1"
  printf_blue "🔧 Generating MySQL/MariaDB compatible password"
  
  if [ -z "$password" ]; then
    # MySQL passwords: avoid quotes and backslashes
    local old_chars="$GEN_PASSWD_CHARACTERS"
    GEN_PASSWD_CHARACTERS="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#%^&*()-_=+"
    GEN_PASSWD_DEFAULT_LENGTH="20"
    password="$(__generator)"
    GEN_PASSWD_CHARACTERS="$old_chars"
    printf_blue "🔐 Generated password: $password"
  fi
  
  printf_green "# MySQL/MariaDB Setup:"
  printf_cyan "Plain password: $password"
  printf_green "# Add to docker-compose.yml:"
  printf_cyan "MYSQL_ROOT_PASSWORD: \"$password\""
  printf_cyan "MYSQL_PASSWORD: \"$password\""
  
  if [ -z "$GEN_PASSWD_SILENT" ] && builtin type -P clipboard | grep -q 'clipboard'; then
    printf_blue "📋 Password copied to clipboard"
    echo "$password" | clipboard
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
app)
  shift 1
  app_type="${1:-wg-easy}"
  shift 1
  password="$*"
  
  case "$app_type" in
  wg-easy|wireguard)
    __preset_wg_easy "$password"
    ;;
  nginx)
    __preset_nginx "$password" "${2:-admin}"
    ;;
  traefik)
    __preset_traefik "$password" "${2:-admin}"
    ;;
  postgres|postgresql)
    __preset_postgres "$password"
    ;;
  mysql|mariadb)
    __preset_mysql "$password"
    ;;
  *)
    printf_red "❌ Unsupported app type: $app_type"
    printf_cyan "Supported apps: wg-easy, nginx, traefik, postgres, mysql"
    exitCode=1
    ;;
  esac
  ;;
hash)
  shift 1
  if echo "$1" | grep -qE '^(bcrypt|argon2|argon2i|argon2d|pbkdf2|scrypt|sha256|sha512|sha1|md5|sha3-256|sha3-224|sha3-384|sha3-512|sha3|blake2b|blake2s|blake2|whirlpool|crypt|crypt-sha512|crypt-sha256|crypt-md5|crypt-apr1|unix-sha512|unix-sha256|unix-md5|unix-apr1|passwd-sha512|passwd-sha256|passwd-md5|passwd-apr1)$'; then
    hash_type="$1"
    shift 1
  else
    hash_type="bcrypt"
  fi
  password="$*"
  __execute_hash "$hash_type" "$password"
  exitCode=$?
  ;;
*)
  __execute_gen-passwd "$@"
  exitCode=$?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
