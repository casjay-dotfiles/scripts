#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208082241-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-readme --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 08, 2022 22:41 EDT
# @@File             :  gen-readme
# @@Description      :  Create a readme from template
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208082241-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_README_REQUIRE_SUDO="${GEN_README_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE"
  fi
  [ -d "$GEN_README_CONFIG_DIR" ] || mkdir -p "$GEN_README_CONFIG_DIR"
  [ -d "$GEN_README_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_README_CONFIG_BACKUP_DIR"
  [ -f "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE" ] &&
    cp -Rf "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE" "$GEN_README_CONFIG_BACKUP_DIR/$GEN_README_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE"
# Settings for gen-readme
GEN_README_FILE_DIR="${GEN_README_FILE_DIR:-}"
GEN_README_DEFAULT_TEMPLATE="${GEN_README_DEFAULT_TEMPLATE:-}"
GEN_README_DEFAULT_USER="${GEN_README_DEFAULT_USER:-}"
GEN_README_REGISTRY_USER="${GEN_README_REGISTRY_USER:-}"
GEN_README_GIT_EMAIL="${GEN_README_GIT_EMAIL:-}"
GEN_README_GIT_BRANCH="${GEN_README_GIT_BRANCH:-}"
GEN_README_FILES_REPO="${GEN_README_FILES_REPO:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_README_OUTPUT_COLOR_1="${GEN_README_OUTPUT_COLOR_1:-}"
GEN_README_OUTPUT_COLOR_2="${GEN_README_OUTPUT_COLOR_2:-}"
GEN_README_OUTPUT_COLOR_GOOD="${GEN_README_OUTPUT_COLOR_GOOD:-}"
GEN_README_OUTPUT_COLOR_ERROR="${GEN_README_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_README_NOTIFY_ENABLED="${GEN_README_NOTIFY_ENABLED:-}"
GEN_README_GOOD_NAME="${GEN_README_GOOD_NAME:-}"
GEN_README_ERROR_NAME="${GEN_README_ERROR_NAME:-}"
GEN_README_GOOD_MESSAGE="${GEN_README_GOOD_MESSAGE:-}"
GEN_README_ERROR_MESSAGE="${GEN_README_ERROR_MESSAGE:-}"
GEN_README_NOTIFY_CLIENT_NAME="${GEN_README_NOTIFY_CLIENT_NAME:-}"
GEN_README_NOTIFY_CLIENT_ICON="${GEN_README_NOTIFY_CLIENT_ICON:-}"
GEN_README_NOTIFY_CLIENT_URGENCY="${GEN_README_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-readme:  Create a readme from template - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-readme [options] [commands]"
  __printf_line "list                            - Show all available"
  __printf_line "search                          - Search for a readme"
  __printf_line "download                        - Download readmes"
  __printf_line "custom                          - Custom readme"
  __printf_line "all                             - Fix for completions"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_README_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_README_REQUIRE_SUDO_RUN" ]; then
    export GEN_README_REQUIRE_SUDO="no"
    export GEN_README_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_README_TEMP_FILE" ] && rm -Rf "$GEN_README_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__gen_config_local() {
  __copy_templates &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_desc() {
  grep -sh '^.*@@Description' "$1" | awk -F'  :' '{print $2}' | sed -E 's|^.*#||g;s#^ ##g;s|^@||g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_vers() {
  grep -sh '^.*##@Version' "$1" | awk -F'  :' '{print $2}' | sed -E 's|^.*#||g;s#^ ##g;s|^@||g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__copy_templates() {
  mkdir -p "$GEN_README_FILE_DIR"
  if [ -d "$GEN_README_FILE_DIR/.git" ]; then
    printf_green "Updating the template files"
    git -C "$GEN_README_FILE_DIR" pull -q
  elif [ -d "${CASJAYSDEVDIR}/templates/readmes" ]; then
    printf_green "Copying $APPNAME templates $CASJAYSDEVDIR/templates/readmes"
    __cp_rf "$CASJAYSDEVDIR/templates/readmes/." "$GEN_README_FILE_DIR/"
  else
    printf_error "Can not get readme files"
    echo
    exit 1
  fi
  if [ "$(__count_files $GEN_README_FILE_DIR)" -ne 0 ]; then
    printf_green "Copying has succeeded > $GEN_README_FILE_DIR"
    exitCodeT=0
  else
    printf_error "Copying of files has failed < $GEN_README_FILE_DIR"
    exitCodeT=1
  fi
  echo ""
  return $exitCodeT
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sed() {
  sed "$*" 2>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__replace() {
  sed -i 's|'"$1"'|'"$2"'|g' "$3" &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_available() {
  printf_custom "$1" "$2: $(echo ${3:-$ARRAY} | __sed 's|:||g;s|'$4'| '$5'|g')" 2>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__file_failed() {
  printf_exit "Failed to get the readme file: $readmeFile"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__prev_readme_file() {
  local script_path script_name
  script_path="$(builtin type -P "$1" 2>/dev/null)"
  script_name="$(basename -- "$script_path" 2>/dev/null)"
  script_path --help | grep -v '\- - - ' |
    sed 's|||g;s|'$script_name'*. ||g' | grep '^'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__prev_readme_script() {
  [ -f "$1" ] || __prev_readme_file "$1" || return 1
  grep -sh '__printf_help "." "Usage:' "$1" |
    sed 's|__printf_help "." ||g' |
    sed 's|"||g'
  #
  grep -sh '__printf_help "." "' "$1" |
    sed 's|__printf_help "." ||g' |
    grep '\-' |
    sed 's|"||g' |
    sed 's|.*--|--|g'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__findcmd() {
  find "$GEN_README_FILE_DIR" -type f ${1} -not -path "${GEN_README_FILE_DIR}/*/.git/*" 2>/dev/null |
    __sed 's|'$GEN_README_FILE_DIR/'||g' | sort -u
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
create_local_file() {
  cat "$1" >"$README_DEST_FILE" 2>/dev/null
  if [ -f "$README_DEST_FILE" ]; then
    printf_green "Your README file has been created"
  else
    __file_failed "$1"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
get_remote_file() {
  __curl "$1" >"$README_DEST_FILE" 2>/dev/null
  if [ -f "$README_DEST_FILE" ]; then
    printf_green "Your README file has been created"
  else
    __file_failed "$1"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
generate_readme() {
  local readmeFile="$1"
  local readmeFileDest="$2"
  local author BaseDir getCommand projectName whichreadme REPLACE_DESCRIBE
  readmeFile="${readmeFile:-$GEN_README_DEFAULT_TEMPLATE}"
  README_DEST_FILE="${readmeFileDest:-$README_DEST_FILE}"
  whichreadme="$(__strip_ext "$readmeFile")"
  BaseDir="$GEN_README_DIR_NAME"
  appName="$GEN_README_DIR_NAME"
  author="$GEN_README_DEFAULT_USER"
  projectName=${README_CUSTOM_NAME:-$BaseDir}
  gitBranch="${GEN_README_GIT_BRANCH:-main}"
  replaceUser="$GEN_README_DEFAULT_USER"
  replaceRegistry="$GEN_README_REGISTRY_USER"
  [ -n "$whichreadme" ] || printf_exit "Failed to get readme template"
  [ -d "$GEN_README_CWD" ] || mkdir -p "$GEN_README_CWD"
  if [ -f "$GEN_README_FILE_DIR/$readmeFile" ]; then
    printf_green "Using $whichreadme for $README_DEST_FILE"
    create_local_file "$GEN_README_FILE_DIR/$readmeFile"
    [ -f "$README_DEST_FILE" ] && __replace "REPLACE_USER" "$replaceUser" "$README_DEST_FILE"
    [ -f "$README_DEST_FILE" ] && __replace "REPLACE_APPNAME" "$appName" "$README_DEST_FILE"
    [ -f "$README_DEST_FILE" ] && __replace "REPLACE_AUTHOR_NAME" "$author" "$README_DEST_FILE"
    [ -f "$README_DEST_FILE" ] && __replace "REPLACE_PROJECT_NAME" "$projectName" "$README_DEST_FILE"
    [ -f "$README_DEST_FILE" ] && __replace "REPLACE_DEFAULT_BRANCH" "$gitBranch" "$README_DEST_FILE"
    [ -f "$README_DEST_FILE" ] && __replace "REPLACE_REGISTRY_USER" "$replaceRegistry" "$README_DEST_FILE"
    if [ "$GEN_README_REPLACE_DESCRIBE" != "false" ]; then
      if [ -f "${GEN_README_CWD}/install.sh" ]; then
        REPLACE_DESCRIBE="$(__grep_desc "${GEN_README_CWD}/install.sh")"
        __replace "REPLACE_DESCRIBE" "${REPLACE_DESCRIBE:-Description}" "$README_DEST_FILE"
        REPLACE_DESCRIBE="$(__grep_vers "${GEN_README_CWD}/install.sh")"
        __replace "REPLACE_VERSION" "${REPLACE_VERSION:-$(date +'%y%m%d%M%H%S')}" "$README_DEST_FILE"
      elif [ -f "$(builtin type -P "${BaseDir}")" ]; then
        [ -d "$GEN_README_CWD/bin" ] && local PATH="$GEN_README_CWD/bin:$PATH"
        getCommand="$(builtin type -P "${BaseDir}")"
        REPLACE_DESCRIBE="$(__grep_desc "${getCommand}")"
        __replace "REPLACE_DESCRIBE" "${REPLACE_DESCRIBE:-Description}" "$README_DEST_FILE"
        REPLACE_DESCRIBE="$(__grep_vers "${GEN_README_CWD}/install.sh")"
        __replace "REPLACE_VERSION" "${REPLACE_VERSION:-$(date +'%y%m%d%M%H%S')}" "$README_DEST_FILE"
      else
        __replace "REPLACE_DESCRIBE" "$projectName README" "$README_DEST_FILE"
        __replace "REPLACE_VERSION" "$(date +'%y%m%d%M%H%S')" "$README_DEST_FILE"
      fi
    else
      __replace "REPLACE_DESCRIBE" "${REPLACE_DESCRIBE:-Description}" "$README_DEST_FILE"
    fi
  else
    printf_exit 1 1 "$GEN_README_FILE_DIR/$readmeFile does not exist"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_readme() {
  local arg1="${1//.md/}"
  local arg2="${2//.md/}"
  local arg3="${3//.md/}"
  if [ -f "$(__find "$GEN_README_FILE_DIR/$arg1/$arg2/${arg3:-default}.md")" ]; then
    template="$(__find "$GEN_README_FILE_DIR/$arg1/$arg2/${arg3:-default}.md")"
    dest="${4:-$GEN_README_CWD/README.md}"
    [ -n "$4" ] && README_CUSTOM_NAME="$(basename -- "$4" 2>/dev/null)"
    shift 3
  elif [ -f "$(__find "$GEN_README_FILE_DIR/$arg1/${arg2:-default}.md")" ]; then
    template="$(__find "$GEN_README_FILE_DIR/$arg1/${arg2:-default}.md")"
    dest="${3:-$GEN_README_CWD/README.md}"
    [ -n "$3" ] && README_CUSTOM_NAME="$(basename -- "$3" 2>/dev/null)"
    shift 2
  elif [ -f "$(__find "$GEN_README_FILE_DIR/${arg1:-default}.md")" ]; then
    template="$(__find "$GEN_README_FILE_DIR/${arg1:-default}.md")"
    dest="${2:-$GEN_README_CWD/README.md}"
    [ -n "$2" ] && README_CUSTOM_NAME="$(basename -- "$2" 2>/dev/null)"
    shift 1
  elif [ -f "$(__find "$GEN_README_FILE_DIR/$GEN_README_DEFAULT_TEMPLATE")" ]; then
    printf_green "Using the default template: $(__find "$GEN_README_FILE_DIR/$GEN_README_DEFAULT_TEMPLATE")"
    template="$(__find "$GEN_README_FILE_DIR/$GEN_README_DEFAULT_TEMPLATE")"
    dest="$GEN_README_CWD/README.md"
  else
    printf_exit 1 1 "Can not find any readmes matching $1 ${2:-$GEN_README_DEFAULT_TEMPLATE}"
  fi
  README_DEST_FILE="${dest:-$README_NAME}"
  README_DEST_TEMPLATE="${template//$GEN_README_FILE_DIR\//}"
  if [ -n "${README_SET_CUSTOM_NAME}" ]; then
    README_CUSTOM_NAME="$(basename -- "$README_SET_CUSTOM_NAME" 2>/dev/null)"
  else
    README_CUSTOM_NAME="$(basename -- "$GEN_README_CWD" 2>/dev/null)"
  fi
  export README_DEST_FILE README_DEST_TEMPLATE README_CUSTOM_NAME
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_README_CONFIG_FILE="${GEN_README_CONFIG_FILE:-settings.conf}"
GEN_README_CONFIG_DIR="${GEN_README_CONFIG_DIR:-$HOME/.config/myscripts/gen-readme}"
GEN_README_CONFIG_BACKUP_DIR="${GEN_README_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-readme/backups}"
GEN_README_LOG_DIR="${GEN_README_LOG_DIR:-$HOME/.local/log/gen-readme}"
GEN_README_TEMP_DIR="${GEN_README_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-readme}"
GEN_README_CACHE_DIR="${GEN_README_CACHE_DIR:-$HOME/.cache/gen-readme}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_README_OUTPUT_COLOR_1="${GEN_README_OUTPUT_COLOR_1:-33}"
GEN_README_OUTPUT_COLOR_2="${GEN_README_OUTPUT_COLOR_2:-5}"
GEN_README_OUTPUT_COLOR_GOOD="${GEN_README_OUTPUT_COLOR_GOOD:-2}"
GEN_README_OUTPUT_COLOR_ERROR="${GEN_README_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_README_NOTIFY_ENABLED="${GEN_README_NOTIFY_ENABLED:-yes}"
GEN_README_GOOD_NAME="${GEN_README_GOOD_NAME:-Great:}"
GEN_README_ERROR_NAME="${GEN_README_ERROR_NAME:-Error:}"
GEN_README_GOOD_MESSAGE="${GEN_README_GOOD_MESSAGE:-No errors reported}"
GEN_README_ERROR_MESSAGE="${GEN_README_ERROR_MESSAGE:-Errors were reported}"
GEN_README_NOTIFY_CLIENT_NAME="${GEN_README_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_README_NOTIFY_CLIENT_ICON="${GEN_README_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_README_NOTIFY_CLIENT_URGENCY="${GEN_README_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_README_DEFAULT_TEMPLATE="${GEN_README_DEFAULT_TEMPLATE:-default.md}"
GEN_README_GIT_EMAIL="${GEN_README_GIT_EMAIL:-$(__git_globalemail)}"
GEN_README_REGISTRY_USER="${GEN_README_REGISTRY_USER:-casjaysdevdocker}"
GEN_README_DEFAULT_USER="${GEN_README_DEFAULT_USER:-$(__git_globaluser)}"
GEN_README_FILE_DIR="${GEN_README_FILE_DIR:-$GEN_README_CONFIG_DIR/files}"
GEN_README_GIT_BRANCH="${GEN_README_GIT_BRANCH:-main}"
GEN_README_FILES_REPO="${GEN_README_FILES_REPO:-https://github.com/devenvmgr/readmes}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE" ] && . "$GEN_README_CONFIG_DIR/$GEN_README_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_README_LOG_DIR" ] || mkdir -p "$GEN_README_LOG_DIR" |& __devnull
[ -d "$GEN_README_TEMP_DIR" ] || mkdir -p "$GEN_README_TEMP_DIR" |& __devnull
[ -d "$GEN_README_CACHE_DIR" ] || mkdir -p "$GEN_README_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_README_TEMP_FILE="${GEN_README_TEMP_FILE:-$(mktemp $GEN_README_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_README_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_README_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_README_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_README_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_README_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_README_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="d:"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",copy,name:,description:,registry:,user:,repo:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="list search download custom all"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_README_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_README_CWD="$2"
    [ -d "$GEN_README_CWD" ] || mkdir -p "$GEN_README_CWD" |& __devnull
    shift 2
    ;;
  --copy)
    shift 1
    __copy_templates
    exit $?
    ;;
  --name)
    README_SET_CUSTOM_NAME="$2"
    shift 2
    ;;
  -d | --description)
    GEN_README_REPLACE_DESCRIBE="false"
    REPLACE_DESCRIBE="$2"
    shift 2
    ;;
  --registry)
    GEN_README_REGISTRY_USER="$2"
    shift 2
    ;;
  --user)
    GEN_README_DEFAULT_USER="$2"
    shift 2
    ;;
  --repo)
    GEN_README_REPO_NAME="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_README_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_README_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
[ -d "$1" ] && __is_an_option "$1" && GEN_README_CWD="$1" && shift 1 || GEN_README_CWD="${GEN_README_CWD:-$PWD}"
GEN_README_CWD="$(realpath "${GEN_README_CWD:-$PWD}" 2>/dev/null)"
if [ -d "$GEN_README_CWD" ] && cd "$GEN_README_CWD"; then
  true
# if [ "$GEN_README_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_README_CWD"
# fi
else
  printf_exit "ðŸ’” $GEN_README_CWD does not exist ðŸ’”"
fi
export GEN_README_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
GEN_README_DIR_NAME="$(basename -- "$GEN_README_CWD")"
GEN_README_REPO_NAME="${GEN_README_REPO_NAME:-$(basename -- "$GEN_README_CWD")}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
import)
  shift 1
  __prev_readme "$1"
  exit $?
  ;;

list)
  shift 1
  __findcmd "${1:-}" | printf_column "2"
  exit $?
  ;;

search)
  shift 1
  __findcmd | grep -i "${1:-*}" | printf_column "2"
  exit $?
  ;;

download)
  shift 1
  printf_green "Cloning the repo to $GEN_README_FILE_DIR/"
  if __git_clone "${1:-$GEN_README_FILES_REPO}" /tmp/readme_clone; then
    __mkd "$GEN_README_FILE_DIR/"
    __cp_rf "/tmp/readme_clone/files/." "$GEN_README_FILE_DIR/"
    __rm_rf "/tmp/readme_clone"
  else
    __copy_templates
  fi
  exit $?
  ;;

custom)
  shift 1
  __find_readme "$@"
  if [ -f "$readmeFile" ]; then
    generate_readme "$readmeFile"
  else
    get_remote_file "$1"
  fi
  exit $?
  ;;

all)
  shift 1
  __find_readme "$@"
  generate_readme "$README_DEST_TEMPLATE" "${README_DEST_FILE}"
  exit $?
  ;;

man)
  shift 1
  cmd_exists --error pandoc
  [ $# -lt 1 ] && printf_exit "Usage: $APPNAME man [man_file] [md_file] "
  [ "$1" ] && MAN="$GEN_README_CWD/man/${1%.*}.1" && shift 1 || MAN="$GEN_README_CWD/man/${TEMPLATE%.*}.1"
  [ "$1" ] && TEMPLATE="$1" && shift 1
  mkdir -p "$GEN_README_CWD/man"
  __find_readme "man/template.md"
  [ -f "${MAN}.md" ] || generate_readme "$README_DEST_TEMPLATE" "${MAN}.md"
  pandoc --standalone --from markdown --to=man "${MAN}.md" -o "$MAN"
  exit $?
  ;;

  # profiles)
  # shift 1
  # mkdir -p ""
  #
  # ;;

*)
  if [ $# = 0 ]; then
    __help
  else
    __find_readme "$@"
    generate_readme "$README_DEST_TEMPLATE" "${README_DEST_FILE}"
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
