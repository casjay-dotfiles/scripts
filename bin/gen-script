#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208082310-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-script --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 08, 2022 23:10 EDT
# @@File             :  gen-script
# @@Description      :  Create a script from template
# @@Changelog        :  Updating to use new template
# @@TODO             :  Reactor code/Group Functions/Create separate gen-header script
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208082310-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_SCRIPT_REQUIRE_SUDO="${GEN_SCRIPT_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE"
  fi
  [ -d "$GEN_SCRIPT_CONFIG_DIR" ] || mkdir -p "$GEN_SCRIPT_CONFIG_DIR"
  [ -d "$GEN_SCRIPT_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_SCRIPT_CONFIG_BACKUP_DIR"
  [ -f "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE" ] &&
    cp -Rf "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE" "$GEN_SCRIPT_CONFIG_BACKUP_DIR/$GEN_SCRIPT_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE"
# Settings for gen-script
GEN_SCRIPT_COPY_CONFIRM="${GEN_SCRIPT_COPY_CONFIRM:-yes}"
GEN_SCRIPT_EMAIL="${GEN_SCRIPT_EMAIL:-$USER@$(hostname -f)}"
GEN_SCRIPT_AUTHOR="${GEN_SCRIPT_AUTHOR:-$USER}"
GEN_SCRIPT_COMPANY="${GEN_SCRIPT_COMPANY:-}"
GEN_SCRIPT_VERSIONFMT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GEN_SCRIPT_DEFREADME="${GEN_SCRIPT_DEFREADME:-README.md}"
GEN_SCRIPT_DEFLICENSE="${GEN_SCRIPT_DEFLICENSE:-WTFPL}"
GEN_SCRIPT_DATEFMT="${GEN_SCRIPT_DATEFMT:-%A, %b %d, %Y %H:%M %Z}"
GEN_SCRIPT_TEMPLATE_DIR="${GEN_SCRIPT_TEMPLATE_DIR:-}"
GEN_SCRIPT_COPYRIGHT="Copyright: (c) \$GEN_SCRIPT_YEAR \$GEN_SCRIPT_AUTHOR, \$GEN_SCRIPT_COMPANY"
GEN_SCRIPT_CONFIG_DIR="${GEN_SCRIPT_CONFIG_DIR:-$GEN_SCRIPT_CONFIG_DIR}"
GEN_SCRIPT_CONFIG_BACKUP_DIR="${GEN_SCRIPT_CONFIG_BACKUP_DIR:-$GEN_SCRIPT_CONFIG_DIR/backups}"
GEN_SCRIPT_DEFAULT_MAN_DIR="${GEN_SCRIPT_DEFAULT_MAN_DIR:-man}"
GEN_SCRIPT_DEFAULT_COMPLETION_DIR="${GEN_SCRIPT_DEFAULT_COMPLETION_DIR:-completions}"
GEN_SCRIPT_GIT_DEFAULT_BRANCH="${GEN_SCRIPT_GIT_DEFAULT_BRANCH:-main}"
GEN_SCRIPT_DEFAULT_TEMPLATE="${GEN_SCRIPT_DEFAULT_TEMPLATE:-shell/bash}"
GEN_SCRIPT_REPLACE_ENV="\$(echo "\$GEN_SCRIPT_NEWFILE" | tr [a-z] [A-Z] | sed 's#-#_#g;s# #_#g;s/\./_/g')"
GEN_SCRIPT_REPLACE_CONFIG_FILE="\$(echo "\$GEN_SCRIPT_NEWFILE" | tr [a-z] [A-Z])_CONFIG_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Make file options
GEN_SCRIPT_OVERWRITE="${GEN_SCRIPT_OVERWRITE:-}"            # Default is to overwrite
GEN_SCRIPT_EDITFILE="${GEN_SCRIPT_EDITFILE:-}"              # Skip editing file
GEN_SCRIPT_EDIT_NEWFILE="${GEN_SCRIPT_EDIT_NEWFILE:-}"      # edit files created using the new option
GEN_SCRIPT_MAKEFILE="${GEN_SCRIPT_MAKEFILE:-}"              # This should always be Y
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_SCRIPT_OUTPUT_COLOR_1="${GEN_SCRIPT_OUTPUT_COLOR_1:-}"
GEN_SCRIPT_OUTPUT_COLOR_2="${GEN_SCRIPT_OUTPUT_COLOR_2:-}"
GEN_SCRIPT_OUTPUT_COLOR_GOOD="${GEN_SCRIPT_OUTPUT_COLOR_GOOD:-}"
GEN_SCRIPT_OUTPUT_COLOR_ERROR="${GEN_SCRIPT_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_SCRIPT_NOTIFY_ENABLED="${GEN_SCRIPT_NOTIFY_ENABLED:-}"
GEN_SCRIPT_GOOD_NAME="${GEN_SCRIPT_GOOD_NAME:-}"
GEN_SCRIPT_ERROR_NAME="${GEN_SCRIPT_ERROR_NAME:-}"
GEN_SCRIPT_GOOD_MESSAGE="${GEN_SCRIPT_GOOD_MESSAGE:-}"
GEN_SCRIPT_ERROR_MESSAGE="${GEN_SCRIPT_ERROR_MESSAGE:-}"
GEN_SCRIPT_NOTIFY_CLIENT_NAME="${GEN_SCRIPT_NOTIFY_CLIENT_NAME:-}"
GEN_SCRIPT_NOTIFY_CLIENT_ICON="${GEN_SCRIPT_NOTIFY_CLIENT_ICON:-}"
GEN_SCRIPT_NOTIFY_CLIENT_URGENCY="${GEN_SCRIPT_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-script:  Create a script from template - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-script [options] [template] [filename]"
  __printf_line "-f, --functions                 - Shows functions"
  __printf_line "-d, --description               - Creates the description for file header"
  __printf_line "-t, --todo                      - Add a TODO to file header"
  __printf_line "-c, --copyright                 - Adds a copyright to file header"
  __printf_line "-o, --other                     - Adds an other to the file header"
  __printf_line "-r, --res                       - Adds resources to the file header"
  __printf_line "-i, --type                      - Adds type to functions: user system"
  __printf_line "-p, --prev                      - Will set header based on an existing file"
  __printf_line "-u, --user                      - Generate a script suitable for local user"
  __printf_line "-l, --license                   - Adds the license type to header"
  __printf_line "-e, --no                        - Don't ask to edit file"
  __printf_line "-k, --keep                      - Will not overwrite an existing file"
  __printf_line "--replace                       - Imports and creates a new header to replace an older one"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_SCRIPT_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_SCRIPT_REQUIRE_SUDO_RUN" ]; then
    export GEN_SCRIPT_REQUIRE_SUDO="no"
    export GEN_SCRIPT_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_SCRIPT_TEMP_FILE" ] && rm -Rf "$GEN_SCRIPT_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__gen_config_local() {
  __copy_templates &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__filename() {
  basename -- "$1" 2>/dev/null
} && export -f __filename
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__dirname() {
  if [ "$(dirname "$1" 2>/dev/null)" = . ]; then echo "$PWD"; else dirname "$1" 2>/dev/null; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sed() {
  $sed -i 's|'"$1"'|'"$2"'|g' "$3" |& __devnull
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__providefilename() {
  [ -f "$(__fullfilename "${1:-$filename}")" ] || printf_exit "Please provide a filename"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__remove_opts() {
  echo "$*" | tr ' ' '\n' | grep -shv '^-' | head -n1 | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_env_vars() {
  echo "$1" | tr '[a-z]' '[A-Z]' | sed 's#-#_#g;s# #_#g;s/\./_/g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__print_wait() {
  printf_pause "$*" && printf_newline "\n"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sed_remove_empty() {
  $sed '/^\#/d;/^$/d;s#^ ##g'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sed_head_remove() {
  awk -F'  :' '{print $2}'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sed_head() { $sed -E 's|^.*#||g;s#^ ##g;s|^@||g'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_head() {
  grep -shE '[".#]?@[A-Z]' "${2:-$command}" | grep "${1:-}" | head -n 12 | __sed_head | __sed_remove_empty | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_head_remove() {
  grep -shE '[".#]?@[A-Z]' "${2:-$command}" | grep "${1:-}" | grep -Ev 'GEN_SCRIPT_*|\${|\$\(' | sed_head_remove | sed '/^\#/d;/^$/d;s#^ ##g' | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep_version() {
  grep_head ''${1:-Version}'' "${2:-$command}" | __sed_head | __sed_head_remove | __sed_remove_empty | head -n1 | grep '^'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep() {
  grep -shE ^'.*#?@'${2:-$headerfield}'.*  :' "${3:-$filename}" | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 | grep ${1:-} '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__fullfilename() {
  found_name="$(builtin type -P "$(basename -- "$1" 2>/dev/null)" || builtin command -v "$(basename -- "$1" 2>/dev/null)" || ls -A "$1" 2>/dev/null)"
  [ -n "$found_name" ] && echo "$found_name" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_header() {
  local command search
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  command="$(__fullfilename "$filename")"
  if [ -f "$command" ] && __check_header "$command"; then
    if [ "$1" = "all" ]; then
      shift 1
      printf "# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
      grep -shE '^.*#.@'*'.*  :' "$command" 2>/dev/null | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n${1:-20} | grep '^' || return 1
      printf "# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
    elif [ "$1" = "prev" ]; then
      shift 1
      grep -shE '^.*#.@'*'.*  :' -B1 -A1 "$command" 2>/dev/null | head -n${1:-20} | grep -Ev '${.*}|\$|GEN_SCRIPT_' | grep '^' || return 1
    else
      search="$1"
      command="${2:-$command}"
      #grep -shE '^.*#.@'$1'' "$command" 2>/dev/null | grep ' :' | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 | sed 's/.*#.@'*'.*  ://g;s#^ ##g' | grep '^' || return 1
      __grep_head_remove "$search" "$command" | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 || return 1
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_header() {
  local command
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin:$PWD"
  command="$(__fullfilename "${command:-$filename}")"
  grep -sh ^'.*##@Version.*:' "${command:-$filename}" 2>/dev/null | grep -Ev '${.*}|\$|GEN_SCRIPT_' | head -n1 | grep -q '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#__update_header "$file" "$search" "$replace"
__update_header() {
  local filename headerfield replace search
  filename="$1"
  headerfield="$2"
  replace="$3"
  if __grep -q; then
    search="$(__grep | head -n1 | awk -F': ' '{print $2}' | grep '^')"
    if [ -z "$search" ]; then
      search="$(__grep)"
      replace="$search$replace"
    fi
    #sed -i 's#'"$search"'#'"$replace"'#g' "$filename" 2>/dev/null
    __sed "$search" "$replace" "$filename" &&
      printf_green "Changed $headerfield to $replace" ||
      printf_red "Change $headerfield to $replace has failed"
  else
    printf_exit "Failed to change $search to $3 pattern was not found"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_prev() {
  local filename command
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  filename="${1:-$filename}"
  command="$(__fullfilename "$filename")"
  if [ -f "$command" ] && __check_header "$command"; then
    if [ -z "$get_prev_shown" ]; then
      [ "$GEN_SCRIPT_SILENT" = "true" ] || printf_green "setting desc todo other and res from $(basename -- "$command" 2>/dev/null)"
    fi
    get_desc="$(__get_header 'Description' || echo)"
    get_changelog="$(__get_header 'Changelog' || echo)"
    get_todo="$(__get_header 'TODO' || echo)"
    get_other="$(__get_header 'Other' || echo)"
    get_res="$(__get_header 'Resource' || echo)"
    get_template="$(__get_header 'Template' || echo 'no')"
    get_terminal="$(__get_header 'Terminal App' || echo 'no')"
    get_sudo="$(__get_header 'sudo/root' || echo 'no')"
  fi
  get_prev_shown=true
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Current file info
__prev_header() {
  __get_header "prev" #|| __no_header
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__no_header() {
  unset gen_header_prev gen_header_replace exitCode
  rerun=true
  printf_red "No header info was found: Using default"
  __gen_header "${filename:-command}"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_header() {
  __header_opts "$@"
  [ "$GEN_SCRIPT_SILENT" = "true" ] || printf_blue "Setting header options for ${header_type:-system}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set up options
__header_opts() {
  set -- "${SETARGS[@]}"
  local LONGOPTS SHORTOPTS parsed
  LONGOPTS="all:,no,help,user,raw,desc:,todo:,copyright:,other:,res:"
  LONGOPTS+=",type:,functions:,name:,prev,replace,keep,pause,system"
  LONGOPTS+=",silent,license:"
  SHORTOPTS="a:,e,h,d:,t:,c:,o:,r:,i:,f:,n:,u,l:,p,k,s"
  parsed=$(getopt --options="$SHORTOPTS" --longoptions="$LONGOPTS" -- "$@" 2>/dev/null)
  eval set -- "${parsed[@]}" 2>/dev/null
  while :; do
    case "$1" in
    -a | --all)
      if [ "$1" = "--long" ]; then echo "--$LONGOPTS " | sed 's#:##g;s#,# --#g'; fi
      if [ "$1" = "--short" ]; then echo "-$SHORTOPTS " | sed 's#:##g;s#,# -#g'; fi
      if [ "$1" = "--all" ]; then
        echo -n "-$SHORTOPTS " | sed 's#:##g;s#,# -#g'
        echo -n "--$LONGOPTS " | sed 's#:##g;s#,# --#g'
      fi
      return 0
      shift 2
      ;;
    -f | --functions)
      shift 1
      showFunctions=true
      header_type="${2:-system}"
      shift 2
      ;;
    -d | --desc)
      desc="$2"
      shift 2
      ;;
    -t | --todo)
      todo="$2"
      shift 2
      ;;
    -c | --copyright)
      GEN_SCRIPT_COPYRIGHT="$2"
      shift 2
      ;;
    -o | --other)
      other="$2"
      shift 2
      ;;
    -r | --res)
      res="$2"
      shift 2
      ;;
    -i | --type)
      default_type="$2"
      header_type="$2"
      new_type="$2"
      shift 2
      ;;
    -p | --prev)
      gen_header_prev=true
      ;;
    -n | --name)
      GEN_FILENAME="$(basename -- "$2")"
      shift 2
      ;;
    -u | --user)
      header_type=user
      gen_header_user=true
      shift 1
      ;;
    -s | --system)
      header_type=system
      shift 1
      ;;
    -l | --license)
      GEN_SCRIPT_CUSTOM_LICENSE="true"
      GEN_SCRIPT_DEFLICENSE="$2"
      shift 2
      ;;
    --clip | --silent)
      GEN_SCRIPT_SILENT="true"
      shift 1
      ;;
    -e | --no)
      printf_red "Setting overwrite to yes and edit to no"
      GEN_SCRIPT_OVERWRITE="Y"
      GEN_SCRIPT_EDITFILE="N"
      GEN_SCRIPT_MAKEFILE="${MAKEFILE:-yes}"
      shift 1
      ;;
    -k | --keep)
      printf_red "Setting overwrite to no and edit to no"
      GEN_SCRIPT_OVERWRITE="N"
      GEN_SCRIPT_EDITFILE="N"
      GEN_SCRIPT_MAKEFILE="N"
      shift 1
      ;;
    --replace)
      gen_header_replace=true
      shift 1
      ;;
    --pause)
      pause=true
      shift 1
      ;;
    --)
      shift
      break
      ;;
    esac
  done
  HEADER_ARGS="$*"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__copy_files() {
  if [ "$(__count_dir $GEN_SCRIPT_TEMPLATE_DIR)" -eq 0 ]; then
    printf_exit "1" "1" "No scripts exist in $CASJAYSDEVDIR/templates/scripts"
  else
    printf_green "Copying $APPNAME templates $CASJAYSDEVDIR/templates/scripts"
    [ -d "$GEN_SCRIPT_TEMPLATE_DIR" ] || mkdir -p "$GEN_SCRIPT_TEMPLATE_DIR"
    rsync -avhP "$CASJAYSDEVDIR/templates/scripts/." "$GEN_SCRIPT_TEMPLATE_DIR/" |& __devnull
    if [ "$(__count_dir $GEN_SCRIPT_TEMPLATE_DIR)" -ne 0 ]; then
      printf_green "Copying has succeeded > $GEN_SCRIPT_TEMPLATE_DIR"
      exitCodeT=0
    else
      printf_error "Copying of files has failed < $GEN_SCRIPT_TEMPLATE_DIR"
      exitCodeT=1
    fi
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__copy_templates() {
  if [ -d "$GEN_SCRIPT_TEMPLATE_DIR/.git" ]; then
    printf_green "Updating the templates $GEN_SCRIPT_TEMPLATE_DIR"
    am_i_online && git -C "$GEN_SCRIPT_TEMPLATE_DIR" pull -q |& __devnull && true || false
    if [ "$(__count_dir $GEN_SCRIPT_TEMPLATE_DIR)" -ne 0 ]; then
      printf_green "Copying has succeeded > $GEN_SCRIPT_TEMPLATE_DIR"
      exitCodeT=0
    else
      printf_error "Copying of files has failed < $GEN_SCRIPT_TEMPLATE_DIR"
      exitCodeT=1
    fi
  elif [ "$(__count_dir $GEN_SCRIPT_TEMPLATE_DIR "3")" -ne 0 ]; then
    if [ "$GEN_SCRIPT_COPY_CONFIRM" != "no" ]; then
      printf_read_question 6 "Would you like overwrite current files" "1" "COPY" ""
      if printf_answer_yes "$COPY"; then
        __copy_files
        exitCodeT=$?
      else
        printf_red "User cancelled"
        echo ""
        exit 1
      fi
    else
      __copy_files
      exitCodeT=$?
    fi
  else
    __copy_files
    exitCodeT=$?
  fi
  echo ""
  return $exitCodeT
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__file_is() {
  if [ "$filetype" = "$1" ]; then
    if [ -f "$newcmd" ]; then
      local GEN_SCRIPT_REPLACE_license="$(__get_header 'License' "$new" || echo)"
      local GEN_SCRIPT_REPLACE_readme="$(__get_header 'ReadME' "$new" || echo)"
      local GEN_SCRIPT_REPLACE_desc="$(__get_header 'Description ' "$new" || echo)"
      local GEN_SCRIPT_REPLACE_todo="$(__get_header 'TODO ' "$new" || echo)"
      local GEN_SCRIPT_REPLACE_other="$(__get_header 'Other ' "$new" || echo)"
      local GEN_SCRIPT_REPLACE_resource="$(__get_header 'Resource ' "$new" || echo)"
      local GEN_SCRIPT_REPLACE_changelong="$(__get_header 'Changelog ' "$new" || echo)"
      local GEN_SCRIPT_REPLACE_sudo="$(__get_header 'sudo/root ' "$new" || echo)"
      local license="$(__get_header 'License ' "$newcmd" || echo)"
      local readme="$(__get_header 'ReadME ' "$newcmd" || echo)"
      local desc="$(__get_header 'Description ' "$newcmd" || echo)"
      local todo="$(__get_header 'TODO ' "$newcmd" || echo)"
      local other="$(__get_header 'Other ' "$newcmd" || echo)"
      local resource="$(__get_header 'Resource' "$newcmd" || echo)"
      local changelog="$(__get_header 'Changelog' "$newcmd" || echo)"
      local sudo="$(__get_header 'sudo/root' "$newcmd" || echo)"
    fi
    [ -n "$license" ] && [ -n "$GEN_SCRIPT_REPLACE_license" ] && __sed "$GEN_SCRIPT_REPLACE_license" "$license" "$new"
    [ -n "$readme" ] && [ -n "$GEN_SCRIPT_REPLACE_readme" ] && __sed "$GEN_SCRIPT_REPLACE_readme" "$readme" "$new"
    [ -n "$desc" ] && [ -n "$GEN_SCRIPT_REPLACE_desc" ] && __sed "$GEN_SCRIPT_REPLACE_desc" "$desc" "$new"
    [ -n "$todo" ] && [ -n "$GEN_SCRIPT_REPLACE_todo" ] && __sed "$GEN_SCRIPT_REPLACE_todo" "$todo" "$new"
    [ -n "$other" ] && [ -n "$GEN_SCRIPT_REPLACE_other" ] && __sed "$GEN_SCRIPT_REPLACE_other" "$other" "$new"
    [ -n "$resource" ] && [ -n "$GEN_SCRIPT_REPLACE_resource" ] && __sed "$GEN_SCRIPT_REPLACE_resource" "$resource" "$new"
    [ -n "$changelog" ] && [ -n "$GEN_SCRIPT_REPLACE_changelong" ] && __sed "$GEN_SCRIPT_REPLACE_changelong" "$resource" "$new"
    [ -n "$sudo" ] && [ -n "$GEN_SCRIPT_REPLACE_sudo" ] && __sed "$GEN_SCRIPT_REPLACE_sudo" "$resource" "$new"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__makefile() {
  local temp new newdir newfile newcmd compfile entrypointfile manfile
  temp="$1"
  new="${newfile:-$2}"
  newdir="$(__dirname "$new")"
  newfile="$(basename -- "$2" 2>/dev/null)"
  shift $#
  __mkd "$newdir"
  __vars "$new"
  __cp_rf "$temp" "$new" || return 1
  __get_prev "$new" || return 1
  __edit_header "$new" || return 1
  newcmd="$(command -v "$new" || type -P "$new" || ls -A "$new")"
  chmod -f 755 "$new" || return 1
  if __file_is "completion"; then
    compfile="_$(basename -- "$new" 2>/dev/null)_completions"
    filename="$(basename -- "$destfolder/$compfile" 2>/dev/null)"
    destfolder="$(dirname "$destfolder/$compfile" 2>/dev/null)"
    printf_cyan "Creating and moving the completion file:"
    printf_yellow "$destfolder/$compfile"
    __mkd "$destfolder" &&
      __mv_f "$new" "$destfolder/$compfile" &&
      new="$destfolder/$compfile" &&
      filename="$compfile" &&
      chmod 664 "$destfolder/$filename" && exitCode=0 || exitCode=1
  elif __file_is "entrypoint-docker"; then
    entrypointfile="$(basename -- "$new" 2>/dev/null)"
    filename="$(basename -- "$destfolder/$entrypointfile" 2>/dev/null)"
    destfolder="$(dirname "$destfolder/$entrypointfile" 2>/dev/null)"
    printf_cyan "Creating and moving the completion file:"
    printf_yellow "$destfolder/$entrypointfile"
    __mkd "$destfolder" &&
      new="$destfolder/$entrypointfile" &&
      filename="$entrypointfile" &&
      chmod 755 "$destfolder/$filename" && exitCode=0 || exitCode=1
  elif __file_is "manual"; then
    manfile="$(basename -- "$new" 2>/dev/null).1"
    filename="$(basename -- "$destfolder/$manfile" 2>/dev/null)"
    destfolder="$(dirname "$destfolder/$manfile" 2>/dev/null)"
    printf_cyan "Creating and moving the completion file:"
    printf_yellow "$destfolder/$manfile"
    __mkd "$destfolder" &&
      __mv_f "$new" "$destfolder/$manfile" &&
      new="$destfolder/$manfile" &&
      chmod 664 "$destfolder/$manfile" && exitCode=0 || exitCode=1
  else
    exitCode=0
  fi
  [ ${exitCode:-0} -ne 0 ] && printf_red "Failed to create $new" || printf_green "Your ${filetype:-script} has been created"
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__edit_header() {
  # Get variables
  local GEN_SCRIPT_NEWFILE="$1"
  local GEN_SCRIPT_NEWFILE_FULL="$(__get_full_file "$1")"
  local GEN_SCRIPT_NEWFILE_SHORT="$(basename -- "$1" 2>/dev/null)"
  local GEN_SCRIPT_FULLPATH="$(__fullfilename "$1")"
  if [ -n "$GEN_FILENAME" ]; then
    local GEN_SCRIPT_NEWFILEDIR="$(basename -- "${GEN_FILENAME}")"
    local GEN_SCRIPT_APPENV_NAME="$(basename -- "${GEN_FILENAME##*/}")"
    local GEN_SCRIPT_REPLACE_APPENV_NAME="$(__gen_env_vars "$GEN_FILENAME")"
    local GEN_SCRIPT_REPLACE_CONFIG_DIR="$(__gen_env_vars "$GEN_FILENAME")_CONFIG_DIR"
    local GEN_SCRIPT_REPLACE_CONFIG_DIR="$(__gen_env_vars "$GEN_FILENAME")_CONFIG_DIR"
    local GEN_SCRIPT_REPLACE_CONFIG_FILE="$(__gen_env_vars "$GEN_FILENAME")_CONFIG_FILE"
    local GEN_SCRIPT_REPLACE_ENV="$(__gen_env_vars "$GEN_FILENAME")"
  else
    local GEN_SCRIPT_NEWFILEDIR="$(__dirname $GEN_SCRIPT_NEWFILE_FULL)"
    local GEN_SCRIPT_APPENV_NAME="$(basename -- "${GEN_SCRIPT_NEWFILEDIR##*/}")"
    local GEN_SCRIPT_REPLACE_APPENV_NAME="$(__gen_env_vars "$GEN_SCRIPT_APPENV_NAME")"
    local GEN_SCRIPT_REPLACE_CONFIG_DIR="$(__gen_env_vars "$GEN_SCRIPT_NEWFILE_SHORT")_CONFIG_DIR"
    local GEN_SCRIPT_REPLACE_CONFIG_DIR="$(__gen_env_vars "$GEN_SCRIPT_NEWFILE_SHORT")_CONFIG_DIR"
    local GEN_SCRIPT_REPLACE_CONFIG_FILE="$(__gen_env_vars "$GEN_SCRIPT_NEWFILE_SHORT")_CONFIG_FILE"
    local GEN_SCRIPT_REPLACE_ENV="$(__gen_env_vars "$GEN_SCRIPT_NEWFILE_SHORT")"
  fi
  # Set defaults
  local get_desc="${get_desc:-}"
  local get_changelog="${get_changelog:-New script}"
  local get_todo="${get_todo:-Better documentation}"
  local get_other="${get_other:-}"
  local get_res="${get_res:-}"
  local get_terminal="${get_terminal:-no}"
  local get_sudo="${get_sudo:-no}"
  local get_template="${get_template:-$template}"
  # Set variables
  __vars "$@"
  # Rename header info
  [ -f "$GEN_SCRIPT_NEWFILE" ] && printf_green "Editing the header info" || printf_exit 1 1 "Failed to created the file"
  [ -z "$GEN_FILENAME" ] || __sed "REPLACE_SERVICE_NAME" "$GEN_SCRIPT_APPENV_NAME" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_NEWFILE_SHORT" "$GEN_SCRIPT_NEWFILE_SHORT" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_APPNAME" "${GEN_SCRIPT_NEWFILEDIR##*/}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_DEFAULT_BRANCH" "$GEN_SCRIPT_GIT_DEFAULT_BRANCH" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_CONFIG_DIR" "$GEN_SCRIPT_REPLACE_CONFIG_DIR" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_CONFIG_FILE" "$GEN_SCRIPT_REPLACE_CONFIG_FILE" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_APPENV_NAME" "$GEN_SCRIPT_REPLACE_APPENV_NAME" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_ENV_CONFIG_DIR" "$GEN_SCRIPT_REPLACE_CONFIG_DIR" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_ENV_CONFIG_FILE" "$GEN_SCRIPT_REPLACE_CONFIG_FILE" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_ENV" "$GEN_SCRIPT_REPLACE_ENV" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_COPYRIGHT" "$GEN_SCRIPT_COPYRIGHT" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_VERSION" "$GEN_SCRIPT_VERSION" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_FILENAME" "$(__filename "$GEN_SCRIPT_NEWFILE")" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_FULLFILENAME" "$GEN_SCRIPT_FULLPATH" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_DATE" "$GEN_SCRIPT_CREATED" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_LICENSE" "$GEN_SCRIPT_DEFLICENSE" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_README" "$GEN_SCRIPT_DEFREADME" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_AUTHOR" "$GEN_SCRIPT_AUTHOR" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_EMAIL" "$GEN_SCRIPT_EMAIL" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_YEAR" "$GEN_SCRIPT_YEAR" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_CHANGELOG" "${changelog:-$get_changelog}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_DESC" "${desc:-$get_desc}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_TODO" "${todo:-$get_todo}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_OTHER" "${other:-$get_other}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_RES" "${res:-$get_res}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_TERMINAL" "${terminal:-$get_terminal}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_SUDO" "${sudo:-$get_sudo}" "$GEN_SCRIPT_NEWFILE"
  __sed "GEN_SCRIPT_REPLACE_TEMPLATE" "${template:-$get_template}" "$GEN_SCRIPT_NEWFILE"
  __sed '     :   ' '     :  ' "$GEN_SCRIPT_NEWFILE"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_header() {
  local GEN_SCRIPT_DEFREADME GEN_SCRIPT_NEWFILE GEN_SCRIPT_REPLACE_ENV
  [ -z "$pause" ] || { clear && printf_newline "\n\n\n"; }
  rerun() {
    unset gen_header_replace exitCode
    rerun=true
    __gen_header
    exit $?
  }
  if [ "$rerun" != "true" ]; then
    __set_header "$@"
    __vars "$filename"
    [ "$GEN_SCRIPT_SILENT" = "true" ] || printf_green "New header info for $filename"
    __get_prev "$filename"
    GEN_SCRIPT_DEFREADME="$(__filename $filename 2>/dev/null) --help"
    GEN_SCRIPT_NEWFILE="$filename"
    GEN_SCRIPT_REPLACE_ENV="$(__gen_env_vars "$filename")"
    [ "$GEN_SCRIPT_SILENT" = "true" ] || [ -n "${desc:-$get_desc}" ] ||
      printf_yellow "Description: ${desc:-None provided}"
    [ "$GEN_SCRIPT_SILENT" = "true" ] || [ -n "${todo:-$get_todo}" ] ||
      printf_yellow "TODO: ${todo:-None provided}"
  fi
  if [ -n "$gen_header_prev" ]; then
    __check_header "$filename" || __no_header
    __providefilename "$filename"
    printf_blue "Imported header from $(__fullfilename "$filename")"
    printf_newline
    __prev_header
  elif [ "$gen_header_replace" = "true" ]; then
    __check_header "$filename" || __no_header
    __providefilename "$filename"
    printf_blue "Imported header from $(__fullfilename "$filename")"
    printf_newline
    __replace_header "$filename"
  elif [ -f "$GEN_SCRIPT_CONFIG_DIR/templates/gen-script/header/default.tmpl" ] && [ -z "$gen_header_user" ]; then
    printf_blue "Using header from $GEN_SCRIPT_CONFIG_DIR/templates/gen-script/header/default.tmpl"
    printf_newline
    cat <<EOF | tee
$(. "$GEN_SCRIPT_CONFIG_DIR/templates/gen-script/header/default.tmpl.sh")
EOF
  elif [ -n "$gen_header_user" ]; then
    printf_newline
    __gen_template_user | sed "s|GEN_SCRIPT_REPLACE_ENV|$GEN_SCRIPT_REPLACE_ENV|g"
  else
    printf_newline
    __gen_template_system | sed "s|GEN_SCRIPT_REPLACE_ENV|$GEN_SCRIPT_REPLACE_ENV|g"
  fi
  if [ "$showFunctions" = "true" ]; then
    __gen_functions "$@"
  fi
  printf_newline
  [ ${exitCode:-0} -ne 0 ] || [ "$GEN_SCRIPT_SILENT" = "true" ] || printf_blue "Your header is ready for use"
  [ -z "$pause" ] || __print_wait "Press any key when done"
  printf_newline
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_template_user() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-template} 2>/dev/null)"
  [ "$header_type" = "user" ] && PROG="PROG" || PROG="APPNAME"
  cat <<EOF | tee
$(. $CASJAYSDEVDIR/templates/gen-script/script/user.tmpl.sh)
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_template_system() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-template} 2>/dev/null)"
  cat <<EOF
$(. $CASJAYSDEVDIR/templates/gen-script/script/system.tmpl.sh)
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_functions() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-template} 2>/dev/null)"
  __vars "$@"
  if [ -n "$gen_header_user" ] || [ "$header_type" = "profile" ]; then
    cat <<EOF | tee
$(. $CASJAYSDEVDIR/templates/gen-script/functions/profile.tmpl.sh)
EOF
  elif [ -n "$gen_header_user" ] || [ "$header_type" = "user" ]; then
    cat <<EOF | tee
$(. $CASJAYSDEVDIR/templates/gen-script/functions/user.tmpl.sh)
EOF
  else
    header_type="${header_type:-system}"
    cat <<EOF | tee
$(. $CASJAYSDEVDIR/templates/gen-script/functions/system.tmpl.sh)
EOF
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__replace_header() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-template} 2>/dev/null)"
  local PATH="/usr/local/bin:/usr/bin:/usr/sbin:/$HOME/.local/bin"
  __get_prev
  if [ -n "$filename" ]; then
    printf "Version: %s | Created: %s\n" "$GEN_SCRIPT_VERSION" "$GEN_SCRIPT_CREATED"
    __get_header "all"
  else
    [ -n "$desc" ] || get_desc="${get_desc:-newScript_${GEN_SCRIPT_NEWFILE}}"
    [ -n "$todo" ] || get_todo="${get_todo:-Refactor code}"
    [ -n "$other" ] || get_other="${get_other:-N/A}"
    [ -n "$res" ] || get_res="${get_other:-N/A}"
    [ -n "$changelog" ] || get_changelog="${get_changelog:-newScript}"
    [ -n "$terminal" ] || get_terminal="${get_terminal:-no}"
    [ -n "$sudo" ] || get_sudo="${get_sudo:-no}"
    [ -n "$template" ] || get_template="${get_template:-bash/user}"
    cat <<EOF | tee
$(. $CASJAYSDEVDIR/templates/gen-script/header/replace.tmpl.sh)
EOF
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_header_raw() {
  GEN_SCRIPT_NEWFILE="$(__filename ${GEN_SCRIPT_NEWFILE:-template} 2>/dev/null)"
  if [ "$header_type" = "user" ]; then
    GEN_SCRIPT_REPLACE_APPNAME="APPNAME"
  else
    GEN_SCRIPT_REPLACE_APPNAME="APPNAME"
  fi
  cat <<EOF | tee
$(. $CASJAYSDEVDIR/templates/gen-script/header/raw.tmpl.sh)
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__backup_file() {
  local BASEDIR BACKUPDIR NAME BACKUP_NAME
  file="$(realpath "${1:-$filename}")"
  NAME="$(basename -- "${1:-$file}")"
  file_dirname="$(dirname "$file")"
  date="$(date +'%m%d%Y%H%M%S' 2>/dev/null)"
  BACKUPDIR="$GEN_SCRIPT_BACKUP_DIR/$file_dirname"
  [ -d "$BACKUPDIR" ] || __mkd "$BACKUPDIR"
  [ "$NAME" = "install.sh" ] && NAME="$(basename -- "$file_dirname")"
  BACKUP_NAME="${NAME%.*}-$date.${NAME##*.}.sh.bak"
  cp -Rf "$file" "$file_dirname/$BACKUP_NAME" |& __devnull
  if mv -f "$file" "$BACKUPDIR/$NAME" |& __devnull; then
    if [ -f "$file" ]; then __rm_rf "$file"; fi
    printf_blue "copied $file to ${BACKUPDIR/$GEN_SCRIPT_CONFIG_DIR\//}/$NAME"
  else
    printf_red "Failed to copy $file $BACKUPDIR/$NAME"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__vars() {
  if [ -f "$GEN_SCRIPT_TOP_DIR/README.md" ]; then
    GEN_SCRIPT_DEFREADME="README.md"
  else
    GEN_SCRIPT_DEFREADME="$(basename -- "$1" 2>/dev/null) --help"
  fi
  if [ -f "$GEN_SCRIPT_TOP_DIR/LICENSE.md" ] && [ -z "$GEN_SCRIPT_CUSTOM_LICENSE" ]; then
    GEN_SCRIPT_DEFLICENSE="LICENSE.md"
  else
    GEN_SCRIPT_DEFLICENSE="${GEN_SCRIPT_DEFLICENSE:-}"
  fi
  if [ -f "$GEN_SCRIPT_TOP_DIR/version.txt" ]; then
    GEN_SCRIPT_VERSION="$(cat $GEN_SCRIPT_TOP_DIR/version.txt 2>/dev/null)"
  else
    GEN_SCRIPT_VERSION="${GEN_SCRIPT_VERSION:-}"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_file() {
  arg1="$1"
  arg2="$2"
  arg3="$3"
  arg4="$4"
  filename="${filename//$GEN_SCRIPT_CWD\//}"
  if [ -f "$GEN_SCRIPT_TEMPLATE_DIR/$arg1/$arg2/$arg3/${arg4:-default}" ]; then
    template="$GEN_SCRIPT_TEMPLATE_DIR/$arg1/$arg2/$arg3/${arg4:-default}"
    dest="${5:-$filename}"
    shift 4
  elif [ -f "$GEN_SCRIPT_TEMPLATE_DIR/$arg1/$arg2/${arg3:-default}" ]; then
    template="$GEN_SCRIPT_TEMPLATE_DIR/$arg1/$arg2/${arg3:-default}"
    dest="${4:-$filename}"
    shift 3
  elif [ -f "$GEN_SCRIPT_TEMPLATE_DIR/$arg1/${arg2:-default}" ]; then
    template="$GEN_SCRIPT_TEMPLATE_DIR/$arg1/${arg2:-default}"
    dest="${3:-$filename}"
    shift 2
  elif [ -f "$GEN_SCRIPT_TEMPLATE_DIR/${arg1:-default}" ]; then
    template="$GEN_SCRIPT_TEMPLATE_DIR/${arg1:-default}"
    dest="${2:-filename}"
    shift 1
  else
    printf_cyan "Invalid template provided - Here is a list of all templates" 1>&2
    templates="$(find "$GEN_SCRIPT_TEMPLATE_DIR/" -type f | sed 's|'$GEN_SCRIPT_TEMPLATE_DIR/'||g')"
    printf '%s' "$templates" | printf_column 5 1>&2
    exit 1
  fi
  set_dest=("${@: -1}")
  dest="${dest:-newScript}"
  filename="$(realpath "$dest" 2>/dev/null)"
  destdir="$(dirname "$filename" 2>/dev/null)"
  filename="$(basename -- "$filename" 2>/dev/null)"
  case "$filename" in
  -*) filename="${filename//-/_}" ;;
  esac
  if grep -q 'local cur prev words cword opts' "$template"; then
    dest="$destdir/$GEN_SCRIPT_DEFAULT_COMPLETION_DIR/$(basename -- "$filename" 2>/dev/null)"
    filetype="completion"
  elif [[ "$template" =~ man/*.man ]] || [[ "$template" =~ man/* ]]; then
    dest="$destdir/$GEN_SCRIPT_DEFAULT_MAN_DIR/$(basename -- "$dest" 2>/dev/null)"
    filetype="manual"
  else
    filetype=""
    dest="$destdir/$filename"
    filename="$(basename -- "$filename" 2>/dev/null)"
  fi
  __set_header "$dest" "$@"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__default_name() {
  filename="${2:-$1}"
  if [ -z "$filename" ]; then
    printf_red "No filename was provided: using default $(__filename "${2:-newScript}")"
    GEN_SCRIPT_OVERWRITE=N
    filename="${filename//$GEN_SCRIPT_CWD\//}"
    filename="$(basename -- "$filename" 2>/dev/null)"
    destfolder="$(__basedir "$filename" 2>/dev/null)"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_opts() {
  local OPTS="$*"
  local OPTS_FOLDERS="bash,completions,installers,os,other,shell"
  local SHORT_OPTS="-a,c,g,f,replace"
  local LONG_OPTS="--help,version,options,copy,config,function"
  local HEADER_OPTS="--no,help,user,raw,desc,todo,copy,other,res,type"
  local HEADER_OPTSC="--functions,name,prev,replace,keep,pause,system"
  [ "$1" = --force ] && shift 1 && recreate="true" && gen_opts_seen=""
  shift
  [ -d "$GEN_SCRIPT_OPTSDIR" ] && [ -z "$recreate" ] && gen_opts_seen=yes || __mkd "$GEN_SCRIPT_OPTSDIR"
  if [ -z "$gen_opts_seen" ]; then
    #printf_green "Generating to options file for bash completion in:"
    printf_cyan "$GEN_SCRIPT_OPTSDIR"
    gen_opts_seen="true"
  fi
  if [ -z "$OPTS" ]; then
    printf_green "See $APPNAME --help or $APPNAME COMMAND --help for usage"
    printf_blue "Short: ${SHORT_OPTS//,/ -}"
    printf_yellow "Long: ${LONG_OPTS//,/ --}"
    printf_cyan "Head: ${HEADER_OPTS//,/ --}"
    printf_cyan "Head: ${HEADER_OPTSC//,/ --}"
    printf_purple "Folders: ${OPTS_FOLDERS//,/ }"
    #    __gen_opts -create |& __devnull
    printf_newline
    return
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_setup_new_added() {
  [ -d "$GEN_SCRIPT_CWD/.git" ] || return 0
  [ "$GEN_SCRIPT_GIT_ENABLED" = "yes" ] || return 0
  local commit_file="${1/$GEN_SCRIPT_CWD\//}"
  git -C "$GEN_SCRIPT_CWD" add -A "$commit_file" >/dev/null && printf_blue "Added $commit_file to git" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_setup_new_commit() {
  [ -d "$GEN_SCRIPT_CWD/.git" ] || return 0
  [ "$GEN_SCRIPT_GIT_ENABLED" = "yes" ] || return 0
  message="$1" && shift 1
  printf_blue "Committing changes to $GEN_SCRIPT_CWD"
  printf_cyan "Message: $(echo "$message" | head -n1)"
  git -C "$GEN_SCRIPT_CWD" commit --untracked=no -q -S -m "$message" "$@" 2>/dev/null || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__setup_new() {
  local file create_filename
  dir="${GEN_SCRIPT_CWD}"
  name="$(basename -- "$(readlink -f "$dir" 2>/dev/null)" 2>/dev/null)"
  action="$1" && shift 1
  [ -n "$1" ] && create_filename="$1" && shift 1 || create_filename="$name"
  [ -n "$1" ] && template="${*// /\/}" || template="bash/$action" && shift $#
  [ -f "$GEN_SCRIPT_TEMPLATE_DIR/$template" ] || printf_exit "Can not find $template in $GEN_SCRIPT_TEMPLATE_DIR"
  [ -d "$dir/bin" ] || mkdir -p "$dir/bin"
  [ -d "$dir/man" ] || mkdir -p "$dir/man"
  [ -d "$dir/completions" ] || mkdir -p "$dir/completions"
  cd "$dir" || printf_exit "Failed"
  case "$action" in
  _remove_)
    files=""
    printf_cyan "Deleting ${create_filename} from $dir"
    files="$dir/${create_filename} "
    files+="$dir/bin/$create_filename "
    files+="$dir/man/${create_filename}.1 "
    files+="$dir/completions/_${create_filename}_completions "
    for file in $files; do
      [ -f "$file" ] && printf_green "Deleting $file"
      __rm_rf "$file"
    done
    __git_setup_new_commit "$(printf '%s\n\n%s\n' "âž– Delete: ${create_filename} âž–" "Deleted ${create_filename} from $name")" -a
    printf_newline
    exit
    ;;
  user)
    files=""
    create_filename="${create_filename// /_}"
    export PATH="${SRC_DIR}:${PATH}" GEN_SCRIPT_EDITFILE="N"
    export GEN_SCRIPT_MAKEFILE="Y" GEN_SCRIPT_OVERWRITE="Y"
    { { [ -f "$dir/${create_filename}" ] || [ -f "$dir/bin/${create_filename}" ]; } ||
      { [ -f "$dir/man/${create_filename}.1" ] || [ -f "$dir/completions/_${create_filename}_completions" ]; } &&
      printf_exit "Can not create ${create_filename} due to it existing"; }
    printf_cyan "Creating ${create_filename} using $template in: $dir"
    $0 $template ${create_filename} |& __devnull
    $0 completions/${action}.bash "${create_filename}" |& __devnull
    $0 man/${action}.man "${create_filename}" |& __devnull
    files="$dir/${create_filename} "
    files+="$dir/bin/${create_filename} "
    files+="$dir/man/${create_filename}.1 "
    files+="$dir/completions/_${create_filename}_completions "
    [ -f "$dir/man/${create_filename}" ] && mv -f "$dir/man/${create_filename}" "$dir/man/${create_filename}.1" && chmod 644 "$dir/man/${create_filename}.1"
    [ -d "$dir/bin" ] && [ -f "$dir/${create_filename}" ] && __mv_f "$dir/${create_filename}" "$dir/bin/${create_filename}"
    for file in $files; do
      [ -f "$file" ] && printf_green "Created $file" && __git_setup_new_added "$file"
    done
    __git_setup_new_commit "$(printf '%s\n' "âž• Added: ${create_filename} to $name âž•")" -a
    printf '\n'
    exit
    ;;
  system)
    files=""
    create_filename="${create_filename// /_}"
    export PATH="${SRC_DIR}:${PATH}" GEN_SCRIPT_EDITFILE="N"
    export GEN_SCRIPT_MAKEFILE="Y" GEN_SCRIPT_OVERWRITE="Y"
    { { [ -f "$dir/${create_filename}" ] || [ -f "$dir/bin/${create_filename}" ]; } ||
      { [ -f "$dir/man/${create_filename}.1" ] || [ -f "$dir/completions/_${create_filename}_completions" ]; } &&
      printf_exit "Can not create ${create_filename} due to it existing"; }
    printf_cyan "Creating ${create_filename} for $action using $template in: $dir"
    $0 $template "$create_filename" |& __devnull
    $0 completions/${action}.bash "${create_filename}" |& __devnull
    $0 man/${action}.man "${create_filename}" |& __devnull
    files="$dir/${create_filename} "
    files+="$dir/bin/${create_filename} "
    files+="$dir/man/${create_filename}.1 "
    files+="$dir/completions/_${create_filename}_completions "
    [ -f "$dir/man/${create_filename}" ] && mv -f "$dir/man/${create_filename}" "$dir/man/${create_filename}.1" && chmod 644 "$dir/man/${create_filename}.1"
    [ -d "$dir/bin" ] && [ -f "$dir/${create_filename}" ] && __mv_f "$dir/${create_filename}" "$dir/bin/${create_filename}"
    for file in $files; do
      [ -f "$file" ] && printf_green "Created $file" && __git_setup_new_added "$file"
    done
    __git_setup_new_commit "$(printf '%s\n' "âž• Added: ${create_filename} to $name âž•")" -a
    printf '\n'
    exit
    ;;
  *)
    printf_exit "Usage: $APPNAME new [user|system|_remove_] [name] [template] -- [options]"
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__shellcheck() {
  local file=""
  local retVal=0
  local exitCode=0
  __cmd_exists shellcheck || printf_exit "shellcheck does not exist"
  if [ $# -eq 0 ]; then
    for file in ./*; do
      printf '\r%b%s%b ' "$CYAN" "Testing: $file" "$NC"
      shellcheck "$file"
      retVal=$?
      exitCode=$((exitCode + retval))
      printf '\r                                                            '
    done
  else
    for file in "$@"; do
      if [ -f "$file" ]; then
        printf '\r%b%s%b ' "$CYAN" "Testing: $file" "$NC"
        shellcheck "$file"
        retVal=$?
        exitCode=$((exitCode + retval))
        printf '\r                                                            '
      fi
    done
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__shfmt() {
  local file
  local info
  local retVal=0
  local exitCode=0
  __cmd_exists shfmt || printf_exit "shfmt does not exist"
  if [ $# -eq 0 ]; then
    for s in ./*; do
      if [ -f "$s" ]; then
        shfmt -w "$s" >/dev/null 2>&1
        retVal=$?
      else
        retVal=1
      fi
      if [ $retVal -eq 0 ]; then
        printf_green "Fixed formatting in $s"
      fi
      exitCode=$((exitCode + retval))
    done
  else
    for file in "$@"; do
      if [ -f "$file" ]; then
        shfmt -w "$file" >/dev/null 2>&1
        retVal=$?
      else
        retVal=1
        printf_red "$file does not exist"
      fi
      if [ $retVal -eq 0 ]; then
        printf_green "Fixed formatting in $file"
      fi
      exitCode=$((exitCode + retval))
    done
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_SCRIPT_CONFIG_FILE="${GEN_SCRIPT_CONFIG_FILE:-settings.conf}"
GEN_SCRIPT_CONFIG_DIR="${GEN_SCRIPT_CONFIG_DIR:-$HOME/.config/myscripts/gen-script}"
GEN_SCRIPT_CONFIG_BACKUP_DIR="${GEN_SCRIPT_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-script/backups}"
GEN_SCRIPT_LOG_DIR="${GEN_SCRIPT_LOG_DIR:-$HOME/.local/log/gen-script}"
GEN_SCRIPT_TEMP_DIR="${GEN_SCRIPT_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-script}"
GEN_SCRIPT_CACHE_DIR="${GEN_SCRIPT_CACHE_DIR:-$HOME/.cache/gen-script}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_SCRIPT_OUTPUT_COLOR_1="${GEN_SCRIPT_OUTPUT_COLOR_1:-33}"
GEN_SCRIPT_OUTPUT_COLOR_2="${GEN_SCRIPT_OUTPUT_COLOR_2:-5}"
GEN_SCRIPT_OUTPUT_COLOR_GOOD="${GEN_SCRIPT_OUTPUT_COLOR_GOOD:-2}"
GEN_SCRIPT_OUTPUT_COLOR_ERROR="${GEN_SCRIPT_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_SCRIPT_NOTIFY_ENABLED="${GEN_SCRIPT_NOTIFY_ENABLED:-yes}"
GEN_SCRIPT_GOOD_NAME="${GEN_SCRIPT_GOOD_NAME:-Great:}"
GEN_SCRIPT_ERROR_NAME="${GEN_SCRIPT_ERROR_NAME:-Error:}"
GEN_SCRIPT_GOOD_MESSAGE="${GEN_SCRIPT_GOOD_MESSAGE:-No errors reported}"
GEN_SCRIPT_ERROR_MESSAGE="${GEN_SCRIPT_ERROR_MESSAGE:-Errors were reported}"
GEN_SCRIPT_NOTIFY_CLIENT_NAME="${GEN_SCRIPT_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_SCRIPT_NOTIFY_CLIENT_ICON="${GEN_SCRIPT_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_SCRIPT_NOTIFY_CLIENT_URGENCY="${GEN_SCRIPT_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_SCRIPT_EDIT_NEWFILE="${GEN_SCRIPT_EDIT_NEWFILE:-N}" # Open editor
GEN_SCRIPT_OVERWRITE="${GEN_SCRIPT_OVERWRITE:-A}"       # Default ask to overwrite
GEN_SCRIPT_EDITFILE="${GEN_SCRIPT_EDITFILE:-A}"         # Skip editing file
GEN_SCRIPT_MAKEFILE="${GEN_SCRIPT_MAKEFILE:-Y}"         # This should always be Y
GEN_SCRIPT_TOP_DIR="$(__git_top_dir "$GEN_SCRIPT_CWD" || echo $GEN_SCRIPT_CWD 2>/dev/null)"
GEN_SCRIPT_YEAR="${GEN_SCRIPT_YEAR:-$(date +%Y 2>/dev/null)}"
GEN_SCRIPT_EMAIL="${GEN_SCRIPT_EMAIL:-${USER}@$(hostname -f 2>/dev/null)}"
GEN_SCRIPT_AUTHOR="${GEN_SCRIPT_AUTHOR:-$USER}"
GEN_SCRIPT_COMPANY="${GEN_SCRIPT_AUTHOR:-$USER}"
GEN_SCRIPT_VERSIONFMT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GEN_SCRIPT_DEFREADME="${GEN_SCRIPT_DEFREADME:-README.md}"
GEN_SCRIPT_DEFLICENSE="${GEN_SCRIPT_DEFLICENSE:-WTFPL}"
GEN_SCRIPT_DEFAULT_MAN_DIR="${GEN_SCRIPT_DEFAULT_MAN_DIR:-man}"
GEN_SCRIPT_DEFAULT_COMPLETION_DIR="${GEN_SCRIPT_DEFAULT_COMPLETION_DIR:-completions}"
GEN_SCRIPT_DATEFMT="${GEN_SCRIPT_DATEFMT:-%A, %b %d, %Y %H:%M %Z}"
GEN_SCRIPT_COPYRIGHT="${GEN_SCRIPT_COPYRIGHT:-Copyright: (c) $GEN_SCRIPT_YEAR $GEN_SCRIPT_AUTHOR, $GEN_SCRIPT_COMPANY}"
GEN_SCRIPT_OPTSDIR="${GEN_SCRIPT_OPTSDIR:-$HOME/.local/share/gen-script}"
GEN_SCRIPT_CONFIG_BACKUP_DIR="${GEN_SCRIPT_CONFIG_BACKUP_DIR:-$GEN_SCRIPT_CONFIG_DIR/backups}"
GEN_SCRIPT_COPY_CONFIRM="${GEN_SCRIPT_COPY_CONFIRM:-yes}"
GEN_SCRIPT_GIT_DEFAULT_BRANCH="${GEN_SCRIPT_GIT_DEFAULT_BRANCH:-main}"
GEN_SCRIPT_DEFAULT_TEMPLATE="${GEN_SCRIPT_DEFAULT_TEMPLATE:-shell/bash}"
GEN_SCRIPT_GIT_ENABLED="yes"
GEN_SCRIPT_TEMPLATE_DIR="${GEN_SCRIPT_TEMPLATE_DIR:-$HOME/.config/gen-script/templates}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE" ] && . "$GEN_SCRIPT_CONFIG_DIR/$GEN_SCRIPT_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_SCRIPT_LOG_DIR" ] || mkdir -p "$GEN_SCRIPT_LOG_DIR" |& __devnull
[ -d "$GEN_SCRIPT_TEMP_DIR" ] || mkdir -p "$GEN_SCRIPT_TEMP_DIR" |& __devnull
[ -d "$GEN_SCRIPT_CACHE_DIR" ] || mkdir -p "$GEN_SCRIPT_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_SCRIPT_TEMP_FILE="${GEN_SCRIPT_TEMP_FILE:-$(mktemp $GEN_SCRIPT_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_SCRIPT_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_SCRIPT_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_SCRIPT_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_SCRIPT_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_SCRIPT_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_SCRIPT_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="e,h,d:,t:,c:,o:,r:,i:,f:,n:,u,l:,p,k,s"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",copy,no,help,raw,desc:,todo:,changelog:,copyright:,other:,res:"
LONGOPTS+=",type:,functions,name:,prev,replace,keep,pause,system,user"
LONGOPTS+=",silent,license:,skip,profile,sudo:,nogit"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="bash completions installers man new os other shell"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_SCRIPT_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_SCRIPT_CWD="$2"
    [ -d "$GEN_SCRIPT_CWD" ] || mkdir -p "$GEN_SCRIPT_CWD" |& __devnull
    shift 2
    ;;
  --nogit)
    shift 1
    GEN_SCRIPT_GIT_ENABLED="no"
    ;;
  -g | --copy)
    shift 1
    __copy_templates "$@"
    exit $?
    ;;
  --folders)
    shift 1
    showFolders="true"
    ;;
  -f | --functions)
    shift 1
    showFunctions="true"
    header_type="${header_type:-system}"
    ;;
  --changelog)
    changelog="$2"
    shift 2
    ;;
  -d | --desc)
    desc="$2"
    shift 2
    ;;
  -t | --todo)
    todo="$2"
    shift 2
    ;;
  -c | --copyright)
    GEN_SCRIPT_COPYRIGHT="$2"
    shift 2
    ;;
  -o | --other)
    other="$2"
    shift 2
    ;;
  -r | --res)
    res="$2"
    shift 2
    ;;
  --sudo)
    sudo="$2"
    shift 2
    ;;
  -i | --type)
    default_type="$2"
    header_type="$2"
    new_type="$2"
    shift 2
    ;;
  -p | --prev)
    gen_header_prev="true"
    shift 1
    ;;
  -n | --name)
    CUSTOM_NAME="true"
    GEN_FILENAME="$(basename -- "$2")"
    shift 2
    ;;
  -l | --license)
    GEN_SCRIPT_CUSTOM_LICENSE="true"
    GEN_SCRIPT_DEFLICENSE="$2"
    shift 2
    ;;
  --clip)
    GEN_SCRIPT_SILENT="true"
    shift 1
    ;;
  -e | --no)
    printf_red "Setting overwrite to yes and edit to no"
    GEN_HEADER_OVERWRITE="Y"
    GEN_HEADER_EDITFILE="N"
    GEN_HEADER_MAKEFILE="${MAKEFILE:-yes}"
    shift 1
    ;;
  -k | --keep)
    printf_red "Setting overwrite to no and edit to no"
    GEN_HEADER_OVERWRITE="N"
    GEN_HEADER_EDITFILE="N"
    GEN_HEADER_MAKEFILE="N"
    shift 1
    ;;
  --replace)
    gen_header_replace="true"
    shift 1
    ;;
  --pause)
    pause="true"
    shift 1
    ;;
  --skip)
    GEN_HEADER_OVERWRITE="Y"
    OPENEDIT="N"
    shift 1
    ;;
  -u | --user)
    showFunctions="true"
    showFolders="true"
    header_type="user"
    gen_header_user="true"
    shift 1
    ;;
  -s | --system)
    showFunctions="true"
    showFolders="true"
    header_type="system"
    shift 1
    ;;
  --profile)
    showFunctions="true"
    showFolders="true"
    header_type="profile"
    shift 1
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_SCRIPT_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_SCRIPT_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
[ -d "$1" ] && __is_an_option "$1" && GEN_SCRIPT_CWD="$1" && shift 1 || GEN_SCRIPT_CWD="${GEN_SCRIPT_CWD:-$PWD}"
GEN_SCRIPT_CWD="$(realpath "${GEN_SCRIPT_CWD:-$PWD}" 2>/dev/null)"
if [ -d "$GEN_SCRIPT_CWD" ] && cd "$GEN_SCRIPT_CWD"; then
  true
# if [ "$GEN_SCRIPT_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_SCRIPT_CWD"
# fi
else
  printf_exit "ðŸ’” $GEN_SCRIPT_CWD does not exist ðŸ’”"
fi
export GEN_SCRIPT_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
GEN_SCRIPT_OPTS=("${SETARGS[@]}")
GEN_SCRIPT_VERSION="$(date +"${GEN_SCRIPT_VERSIONFMT}" 2>/dev/null)"
GEN_SCRIPT_CREATED="$(date +"${GEN_SCRIPT_DATEFMT}" 2>/dev/null)"
GEN_SCRIPT_MAKEFILE="${GEN_SCRIPT_MAKEFILE:-Y}"
GEN_SCRIPT_EDITFILE="${EDITFILE:-$GEN_SCRIPT_EDITFILE}"
GEN_SCRIPT_OVERWRITE="${OVERWRITE:-$GEN_SCRIPT_OVERWRITE}"
GEN_SCRIPT_EDIT_NEWFILE="${EDITFILE:-$GEN_SCRIPT_EDIT_NEWFILE}"
GEN_SCRIPT_BACKUP_DIR="${GEN_SCRIPT_CONFIG_BACKUP_DIR:-$GEN_SCRIPT_CONFIG_DIR/backups}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
[ -d "$GEN_SCRIPT_BACKUP_DIR" ] || mkdir -p "$GEN_SCRIPT_BACKUP_DIR"
[ "$GEN_SCRIPT_OVERWRITE" = "Y" ] && GEN_SCRIPT_OVERWRITE="Y" && OPENEDIT="N"
if [ "$(__count_files $GEN_SCRIPT_TEMPLATE_DIR "3")" -eq 0 ] && [ "$(__count_files "$CASJAYSDEVDIR/templates/scripts" "2")" -ne 0 ]; then
  __copy_templates
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
shfmt)
  shift 1
  __shfmt "$@"
  exit $?
  ;;
shellcheck)
  shift 1
  __shellcheck "$@"
  exit $?
  ;;
all) ## Bash Completion list
  shift 1
  { [ -z "$1" ] || [ "$1" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME [templateName] [fileName] [options]" && printf_newline
  filename="${2:-$1}"
  __default_name "${2:-$1}" "${filename}"
  __find_file "$@"
  ;;

completions)
  { [ -z "$2" ] || [ "$2" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME $1 [templateName] [fileName] [options]" && printf_newline
  filename="${3:-$2}"
  __default_name "${3:-$2}" "${filename}"
  __find_file "$@"
  ;;

bash)
  { [ -z "$2" ] || [ "$2" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME $1 [templateName] [fileName] [options]" && printf_newline
  filename="${3:-$2}"
  __default_name "${3:-$2}" "${filename}"
  __find_file "$@"
  ;;

installers)
  { [ -z "$2" ] || [ "$2" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME $1 [templateName] [fileName] [options]" && printf_newline
  [ -n "$3" ] && filename="${3:-$2}" || filename="install.sh"
  __default_name "${3:-$2}" "${filename}"
  __find_file "$@"
  ;;

os)
  { [ -z "$2" ] || [ "$2" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME $1 [templateName] [fileName] [options]" && printf_newline
  filename="${3:-$2}"
  __default_name "${3:-$2}" "${filename}"
  __find_file "$@"
  ;;

shell)
  { [ -z "$2" ] || [ "$2" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME $1 [templateName] [fileName] [options]" && printf_newline
  filename="${3:-$2}"
  __default_name "${3:-$2}" "${filename}"
  __find_file "$@"
  ;;

functions)
  { [ -z "$2" ] || [ "$2" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME $1 [templateName] [fileName] [options]" && printf_newline
  filename="${3:-$2}"
  __default_name "${3:-$2}" "${filename}"
  __find_file "$@"
  ;;

man)
  { [ -z "$2" ] || [ "$2" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME $1 [templateName] [fileName] [options]" && printf_newline
  filename="${3:-$2}"
  __default_name "${3:-$2}" "${filename}"
  __find_file "$@"
  ;;

new)
  shift 1
  { [ $# -lt 1 ] || [ "$1" = "help" ]; } && printf_exit "Usage: $APPNAME new [user|system|_remove_] [name] [template]"
  __setup_new "$@"
  exit
  ;;

*) ## Allows drop in without need to update this
  { [ -z "$1" ] || [ "$1" = "help" ]; } && printf_exit "6" "2" "Usage: $APPNAME [templateName] [fileName] [options]" && printf_newline
  __find_file "$@"
  ;;
esac
shift $#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Sanity check
[ -n "$filename" ] || filename="newScript"
[ -n "$dest" ] || dest="$GEN_SCRIPT_CWD/${filename//$GEN_SCRIPT_CWD\//}"
[ -f "$template" ] || printf_exit 1 1 "The template file doesn't exist: $template"
[ -n "$dest" ] || printf_exit 1 1 "Something went wrong while setting up $dest"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# file and folder setup
filename="$(basename -- "$filename" 2>/dev/null)"
destfolder="$(__basedir "$dest" 2>/dev/null)"
templatename="$(basename -- "$template" 2>/dev/null)"
# # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate the file
if [ "$filename" = "newScript" ]; then
  newscript_name="$(basename -- "${filename:-$destfolder}")"
  printf_read_question "3" "What should we name this? " "120" "tmpfilename"
  tmpfilename="$(basename -- "${tmpfilename:-$newscript_name}")"
else
  tmpfilename="$(basename -- "$filename")"
fi
filename="${tmpfilename// /_}"
filename="${filename//$GEN_SCRIPT_CWD\//}"
[ -f "$destfolder/$filename" ] && __backup_file "$destfolder/$filename"
if [ -f "$destfolder/$filename" ] && [ "$GEN_SCRIPT_OVERWRITE" != "Y" ]; then
  printf_read_question "3" "Should we overwrite this file?" "1" "YN" ""
  if printf_answer_yes "$YN"; then
    printf_read_question "3" "Should i display file before overwrite?" "1" "SHOW" ""
    printf_answer_yes "$SHOW" && cat "$destfolder/$filename"
  else
    printf_exit 1 1 "Refusing to overwrite existing file!"
  fi
fi
if [ "$GEN_SCRIPT_MAKEFILE" != "N" ]; then
  printf_green "Copying the file ${template//$GEN_SCRIPT_TEMPLATE_DIR\//} to $destfolder/$filename"
  __makefile "${template:?printf_exit "Invalid template"}" "$destfolder/$filename"
  exitCode=$?
elif printf_read_question "3" "Should we just display this file?" "1" "YN" "" && printf_answer_yes "$YN"; then
  __makefile "${template:?printf_exit "Invalid template"}" "${TMPDIR:-/tmp}/template.$$.sh"
  cat "${TMPDIR:-/tmp}/template.$$.sh"
  __rm_rf "${TMPDIR:-/tmp}/template.$$.sh"
else
  printf_red "Not creating the file due to the GEN_SCRIPT_MAKEFILE=no being set"
  false
fi
if [ "$GEN_SCRIPT_EDITFILE" != "N" ]; then
  [ -n "$OPENEDIT" ] || printf_read_question "3" "Should we edit this file?" "1" "EDIT" ""
  printf_answer_yes "$EDIT" && $EDITOR "$destfolder/$filename" || true
fi
[ -f "$destfolder/$filename" ] && exitCode=0 || exitCode=2
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
