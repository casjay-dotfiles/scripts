#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202509152129-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  LICENSE.md
# @@ReadME           :  gen-traefik --help
# @@Copyright        :  Copyright: (c) 2025 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Sep 15, 2025 23:53 EDT
# @@File             :  gen-traefik
# @@Description      :  Generate a new traefik host configuration
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202509152129-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_TRAEFIK_REQUIRE_SUDO="${GEN_TRAEFIK_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && GEN_TRAEFIK_EXIT_STATUS=0 || GEN_TRAEFIK_EXIT_STATUS=1
  return ${GEN_TRAEFIK_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && GEN_TRAEFIK_EXIT_STATUS=0 || GEN_TRAEFIK_EXIT_STATUS=1
  return ${GEN_TRAEFIK_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  GEN_TRAEFIK_EXIT_STATUS=0
  [ -n "$1" ] && local GEN_TRAEFIK_EXIT_STATUS="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && GEN_TRAEFIK_EXIT_STATUS+=$(($GEN_TRAEFIK_EXIT_STATUS + 0)) || GEN_TRAEFIK_EXIT_STATUS+=$(($GEN_TRAEFIK_EXIT_STATUS + 1))
  done
  [ $GEN_TRAEFIK_EXIT_STATUS -eq 0 ] || GEN_TRAEFIK_EXIT_STATUS=3
  return ${GEN_TRAEFIK_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local GEN_TRAEFIK_EXIT_STATUS=0
  curl -q -LSsfI --max-time 1 --retry 0 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || GEN_TRAEFIK_EXIT_STATUS=4
  return ${GEN_TRAEFIK_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE"
  fi
  [ -d "$GEN_TRAEFIK_CONFIG_DIR" ] || mkdir -p "$GEN_TRAEFIK_CONFIG_DIR"
  [ -d "$GEN_TRAEFIK_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_TRAEFIK_CONFIG_BACKUP_DIR"
  [ -f "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE" ] &&
    cp -Rf "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE" "$GEN_TRAEFIK_CONFIG_BACKUP_DIR/$GEN_TRAEFIK_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE"
# Settings for gen-traefik
GEN_TRAEFIK_AUTHOR="${GEN_TRAEFIK_AUTHOR:-}"
GEN_TRAEFIK_PORT_SSL="${GEN_TRAEFIK_PORT_SSL:-}"
GEN_TRAEFIK_PORT_NONSSL="${GEN_TRAEFIK_PORT_NONSSL:-}"
GEN_TRAEFIK_WWW_USER_DIR="${GEN_TRAEFIK_WWW_USER_DIR:-}"
GEN_TRAEFIK_VHOST_USER_DIR="${GEN_TRAEFIK_VHOST_USER_DIR:-}"
GEN_TRAEFIK_WWW_SYSTEM_DIR_ROOT="${GEN_TRAEFIK_WWW_SYSTEM_DIR_ROOT:-}"
GEN_TRAEFIK_VHOST_SYSTEM_DIR="${GEN_TRAEFIK_VHOST_DIR_ROOT:-}"
GEN_TRAEFIK_LOCAL_IP="${GEN_TRAEFIK_LOCAL_IP:-}"
GEN_TRAEFIK_BACKEND_URL="${GEN_TRAEFIK_BACKEND_URL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_TRAEFIK_OUTPUT_COLOR_1="${GEN_TRAEFIK_OUTPUT_COLOR_1:-}"
GEN_TRAEFIK_OUTPUT_COLOR_2="${GEN_TRAEFIK_OUTPUT_COLOR_2:-}"
GEN_TRAEFIK_OUTPUT_COLOR_GOOD="${GEN_TRAEFIK_OUTPUT_COLOR_GOOD:-}"
GEN_TRAEFIK_OUTPUT_COLOR_ERROR="${GEN_TRAEFIK_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_TRAEFIK_SYSTEM_NOTIFY_ENABLED="${GEN_TRAEFIK_SYSTEM_NOTIFY_ENABLED:-}"
GEN_TRAEFIK_GOOD_NAME="${GEN_TRAEFIK_GOOD_NAME:-}"
GEN_TRAEFIK_ERROR_NAME="${GEN_TRAEFIK_ERROR_NAME:-}"
GEN_TRAEFIK_GOOD_MESSAGE="${GEN_TRAEFIK_GOOD_MESSAGE:-}"
GEN_TRAEFIK_ERROR_MESSAGE="${GEN_TRAEFIK_ERROR_MESSAGE:-}"
GEN_TRAEFIK_NOTIFY_CLIENT_NAME="${GEN_TRAEFIK_NOTIFY_CLIENT_NAME:-}"
GEN_TRAEFIK_NOTIFY_CLIENT_ICON="${GEN_TRAEFIK_NOTIFY_CLIENT_ICON:-}"
GEN_TRAEFIK_NOTIFY_CLIENT_URGENCY="${GEN_TRAEFIK_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE"
    GEN_TRAEFIK_EXIT_STATUS=0
  else
    printf_red "Failed to create the config file"
    GEN_TRAEFIK_EXIT_STATUS=1
  fi
  return ${GEN_TRAEFIK_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-traefik:  Generate a new traefik host configuration - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-traefik [options] [domain]"
  __printf_line "list                            - List configured services"
  __printf_line "mydomain                        - Create a new Traefik service configuration"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_line "--no                            - No options"
  __printf_line "--yes                           - Yes options"
  __printf_line ""
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep() { grep "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_TRAEFIK_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_TRAEFIK_REQUIRE_SUDO_RUN" ]; then
    export GEN_TRAEFIK_REQUIRE_SUDO="no"
    export GEN_TRAEFIK_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    GEN_TRAEFIK_EXIT_STATUS=$?
  else
    printf '%s\n' "This requires root to run"
    GEN_TRAEFIK_EXIT_STATUS=1
  fi
  return ${GEN_TRAEFIK_EXIT_STATUS:-0}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__how_long_did_it_take() {
  local retprev=$?
  local retval=${1:-$retprev}
  __cmd_exists bc || return $retval
  [ -n "$GEN_TRAEFIK_START_TIMER" ] || return 0
  local stop_time="$(date +%s.%N)"
  local dt=$(echo "$stop_time - $GEN_TRAEFIK_START_TIMER" | bc)
  local dd=$(echo "$dt/86400" | bc)
  local dt2=$(echo "$dt-86400*$dd" | bc)
  local dh=$(echo "$dt2/3600" | bc)
  local dt3=$(echo "$dt2-3600*$dh" | bc)
  local dm=$(echo "$dt3/60" | bc)
  local ds=$(echo "$dt3-60*$dm" | bc)
  printf_purple "$(LC_NUMERIC=C printf "Total runtime: %d Days, %02d Hours, %02d Minutes, %02.4f Seconds\n" $dd $dh $dm $ds)"
  return $retval
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit_gen-traefik() {
  GEN_TRAEFIK_EXIT_STATUS=${GEN_TRAEFIK_EXIT_STATUS:-0}
  [ -f "$GEN_TRAEFIK_TEMP_FILE" ] && rm -Rf "$GEN_TRAEFIK_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $GEN_TRAEFIK_EXIT_STATUS
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a --no-* options function
__options_function_no() {
  local options="${1//=*/}"
  local argument="${1//*=/}"
  case "$options" in
  *) echo "${argument:-No argument provided}" && shift ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a --yes-* options function
__options_function_yes() {
  local options="${1//=*/}"
  local argument="${1//*=/}"
  case "$options" in
  *) echo "${argument:-No argument provided}" && shift ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_TRAEFIK_SYSTEM_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_TRAEFIK_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_TRAEFIK_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_TRAEFIK_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_TRAEFIK_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_TRAEFIK_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__notify_remote() {
  local cmd="$(echo "$GEN_TRAEFIK_REMOTE_NOTIFY_COMMAND" | awk -F ' ' '{print $1}')"
  if [ "$GEN_TRAEFIK_REMOTE_NOTIFY_ENABLED" = "yes" ]; then
    if [ -n "$(command -v "$cmd")" ]; then
      eval $GEN_TRAEFIK_REMOTE_NOTIFY_COMMAND "$@"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit_gen-traefik' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# start timer
GEN_TRAEFIK_START_TIMER="${GEN_TRAEFIK_START_TIMER:-$(date +%s.%N)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__get_traefik_domains() {
  local fileName="${1:-$GEN_TRAEFIK_VHOST_USER_DIR}"
  find "$fileName" -name "*.yml" -type f -exec grep -l "Host(" {} \; 2>/dev/null | while read -r file; do
    grep "Host(" "$file" 2>/dev/null | sed 's/.*Host(\`\([^`]*\)`.*/\1/' | grep -v '^$'
  done
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_replace() {
  sed="$(builtin type -P gsed || builtin type -P sed)"
  find -L "$3" -type f -exec "$sed" -i 's#'$1'#'$2'#g' {} \; 2>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_traefik_conf() {
  local DomainName="${GEN_TRAEFIK_DOMAIN//,*/}"
  local ServerNames="${GEN_TRAEFIK_DOMAIN//,/ }"
  local template_file="${GEN_TRAEFIK_TEMPLATE_NAME:-standard}"
  local DomainName="${DomainName:-$HOSTNAME}"
  local ServerNames="${ServerNames:-$HOSTNAME}"
  local backend_url="${GEN_TRAEFIK_BACKEND_URL:-http://localhost:3000}"
  
  [ -n "$DomainName" ] && [ -n "$ServerNames" ] || printf_exit "Can not determine env: GEN_TRAEFIK_DOMAIN"
  [ -d "$GEN_TRAEFIK_CONFIG_DIR" ] || mkdir -p "$GEN_TRAEFIK_CONFIG_DIR"
  
  if [ "$template_file" = "ssl" ]; then
    cat <<EOF | tee
# Traefik configuration for $GEN_TRAEFIK_DOMAIN with SSL
# Generated on $(date)

http:
  routers:
    ${DomainName//\./-}-https:
      rule: "Host(\`$DomainName\`)"
      service: "${DomainName//\./-}"
      entryPoints:
        - "websecure"
      tls:
        certResolver: "letsencrypt"
    ${DomainName//\./-}-http:
      rule: "Host(\`$DomainName\`)"
      service: "${DomainName//\./-}"
      entryPoints:
        - "web"
      middlewares:
        - "redirect-to-https"

  services:
    ${DomainName//\./-}:
      loadBalancer:
        servers:
          - url: "$backend_url"

  middlewares:
    redirect-to-https:
      redirectScheme:
        scheme: "https"
        permanent: true

EOF
  else
    cat <<EOF | tee
# Traefik configuration for $GEN_TRAEFIK_DOMAIN
# Generated on $(date)

http:
  routers:
    ${DomainName//\./-}:
      rule: "Host(\`$DomainName\`)"
      service: "${DomainName//\./-}"
      entryPoints:
        - "web"

  services:
    ${DomainName//\./-}:
      loadBalancer:
        servers:
          - url: "$backend_url"

EOF
  fi
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configuration wizard
__configure_traefik_vhosts() {
  printf_cyan "Configuring the traefik vhost"
  __traefik_dom || __return__error
  __traefik_backend || __return__error
  __traefik_www || __return__error
  __traefik_confdir || __return__error
  __traefik_conf || __return__error

  printf_newline
  if [ -f "$GEN_TRAEFIK_VHOST_USER_DIR/$GEN_TRAEFIK_DOMAIN.yml" ]; then
    printf_green "Successfully created your configuration for $GEN_TRAEFIK_DOMAIN"
    printf_cyan "$GEN_TRAEFIK_VHOST_USER_DIR/$GEN_TRAEFIK_DOMAIN.yml"
  else
    printf_error "Failed to create $GEN_TRAEFIK_VHOST_USER_DIR/$GEN_TRAEFIK_DOMAIN.yml"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure domain
__traefik_dom() {
  if [ -n "$GEN_TRAEFIK_DOMAIN" ]; then
    GEN_TRAEFIK_DOMAIN="${GEN_TRAEFIK_DOMAIN:-}"
  else
    printf_read_input "4" "What is your domain name? [example.com]" "120" "GEN_TRAEFIK_DOMAIN" ""
    if [ -z "$GEN_TRAEFIK_DOMAIN" ]; then
      printf_red "domain name is required"
      return 1
    fi
  fi
  if [ -n "$GEN_TRAEFIK_SSL" ]; then
    [ "$GEN_TRAEFIK_SSL" = "yes" ] && GEN_TRAEFIK_TEMPLATE_NAME="ssl" || GEN_TRAEFIK_TEMPLATE_NAME="standard"
  else
    printf_read_input "4" "Does your site support ssl? " "1" "SSL"
    [ "$SSL" = "y" ] && GEN_TRAEFIK_TEMPLATE_NAME="ssl" || GEN_TRAEFIK_TEMPLATE_NAME="standard"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure backend URL
__traefik_backend() {
  printf_read_input "4" "What is your backend URL? [http://localhost:3000]" "120" "GEN_TRAEFIK_BACKEND_URL" "-i $GEN_TRAEFIK_BACKEND_URL"
  if [ -n "$GEN_TRAEFIK_BACKEND_URL" ]; then
    GEN_TRAEFIK_BACKEND_URL="${GEN_TRAEFIK_BACKEND_URL:-}"
  else
    printf_exit "Backend URL is required"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# configure document root
__traefik_www() {
  printf_read_input "4" "What is your DocumentRoot? " "120" "GEN_TRAEFIK_WWW_USER_DIR" "-i $GEN_TRAEFIK_WWW_USER_DIR"
  if [ -n "$GEN_TRAEFIK_WWW_USER_DIR" ]; then
    GEN_TRAEFIK_WWW_USER_DIR="${GEN_TRAEFIK_WWW_USER_DIR:-}"
    [ -d "$GEN_TRAEFIK_WWW_USER_DIR" ] || mkdir -p "$GEN_TRAEFIK_WWW_USER_DIR"
  else
    printf_exit "DocumentRoot is required"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# determine traefik configuration directory
__traefik_confdir() {
  if [ -z "$GEN_TRAEFIK_VHOST_SYSTEM_DIR" ]; then
    printf_read_input "4" "Where are your traefik config files located? " "120" "GEN_TRAEFIK_VHOST_SYSTEM_DIR" "-i $GEN_TRAEFIK_VHOST_SYSTEM_DIR"
    if [ ! -d "$GEN_TRAEFIK_VHOST_SYSTEM_DIR" ]; then
      if __user_is_root; then
        printf_read_question_nt "4" "The directory doesn't exist should I try to create it?"
        if printf_answer_yes; then sudo mkdir -p "$GEN_TRAEFIK_VHOST_SYSTEM_DIR"; fi
      else
        printf_read_question_nt "4" "The directory doesn't exist should I try to create it?"
        if printf_answer_yes; then mkdir -p "$GEN_TRAEFIK_VHOST_SYSTEM_DIR"; fi
      fi
    fi
  fi
  [ -d "$GEN_TRAEFIK_VHOST_SYSTEM_DIR" ] || printf_exit "Can not create $GEN_TRAEFIK_VHOST_SYSTEM_DIR"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the configuration file
__traefik_conf() {
  printf_newline
  printf_cyan "Generating traefik conf using the template $GEN_TRAEFIK_TEMPLATE_NAME in: $GEN_TRAEFIK_VHOST_USER_DIR"
  cat <<EOF >"$GEN_TRAEFIK_DEFAULT_VHOST_FILE"
$(__create_traefik_conf)
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# error function
__return__error() {
  printf_error "Something seems to have gone very wrong" 1>&2
  printf_yellow "File has been saved to $GEN_TRAEFIK_DEFAULT_VHOST_FILE" 1>&2
  exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__setup_traefik() {
  GEN_TRAEFIK_DOMAIN="${1:-$(hostname -f)}"
  GEN_TRAEFIK_VHOST_USER_DIR="${2:-$GEN_TRAEFIK_VHOST_USER_DIR}"
  GEN_TRAEFIK_WWW_USER_DIR="${3:-$GEN_TRAEFIK_WWW_USER_DIR}"
  GEN_TRAEFIK_DEFAULT_VHOST_FILE="$GEN_TRAEFIK_VHOST_USER_DIR/$GEN_TRAEFIK_DOMAIN.yml"
  GEN_TRAEFIK_VHOST_SYSTEM_DIR="${GEN_TRAEFIK_VHOST_SYSTEM_DIR:-$GEN_TRAEFIK_VHOST_USER_DIR}"
  [ -d "$GEN_TRAEFIK_WWW_USER_DIR" ] || mkdir -p "$GEN_TRAEFIK_WWW_USER_DIR" |& __devnull
  [ -d "$GEN_TRAEFIK_VHOST_USER_DIR" ] || mkdir -p "$GEN_TRAEFIK_VHOST_USER_DIR" |& __devnull
  __configure_traefik_vhosts
  exitCode=${exitCode:-0}
  if [ $exitCode -ne 0 ]; then
    __return__error
  else
    exitCode=0
  fi
  return $exitCode
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default exit code
GEN_TRAEFIK_EXIT_STATUS=0
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_TRAEFIK_CONFIG_DIR="${GEN_TRAEFIK_CONFIG_DIR:-$HOME/.config/myscripts/gen-traefik}"
GEN_TRAEFIK_CONFIG_BACKUP_DIR="${GEN_TRAEFIK_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-traefik/backups}"
GEN_TRAEFIK_LOG_DIR="${GEN_TRAEFIK_LOG_DIR:-$HOME/.local/log/gen-traefik}"
GEN_TRAEFIK_RUN_DIR="${GEN_TRAEFIK_RUN_DIR:-$HOME/.local/run/system_scripts/$GEN_TRAEFIK_SCRIPTS_PREFIX}"
GEN_TRAEFIK_TEMP_DIR="${GEN_TRAEFIK_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-traefik}"
GEN_TRAEFIK_CACHE_DIR="${GEN_TRAEFIK_CACHE_DIR:-$HOME/.cache/gen-traefik}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# File settings
GEN_TRAEFIK_CONFIG_FILE="${GEN_TRAEFIK_CONFIG_FILE:-settings.conf}"
GEN_TRAEFIK_LOG_ERROR_FILE="${GEN_TRAEFIK_LOG_ERROR_FILE:-$GEN_TRAEFIK_LOG_DIR/error.log}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_TRAEFIK_OUTPUT_COLOR_1="${GEN_TRAEFIK_OUTPUT_COLOR_1:-33}"
GEN_TRAEFIK_OUTPUT_COLOR_2="${GEN_TRAEFIK_OUTPUT_COLOR_2:-5}"
GEN_TRAEFIK_OUTPUT_COLOR_GOOD="${GEN_TRAEFIK_OUTPUT_COLOR_GOOD:-2}"
GEN_TRAEFIK_OUTPUT_COLOR_ERROR="${GEN_TRAEFIK_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_TRAEFIK_REMOTE_NOTIFY_ENABLED="${GEN_TRAEFIK_REMOTE_NOTIFY_ENABLED:-yes}"
GEN_TRAEFIK_REMOTE_NOTIFY_COMMAND="${GEN_TRAEFIK_REMOTE_NOTIFY_COMMAND:-web-notify telegram}"
# System
GEN_TRAEFIK_SYSTEM_NOTIFY_ENABLED="${GEN_TRAEFIK_SYSTEM_NOTIFY_ENABLED:-yes}"
GEN_TRAEFIK_GOOD_NAME="${GEN_TRAEFIK_GOOD_NAME:-Great:}"
GEN_TRAEFIK_ERROR_NAME="${GEN_TRAEFIK_ERROR_NAME:-Error:}"
GEN_TRAEFIK_GOOD_MESSAGE="${GEN_TRAEFIK_GOOD_MESSAGE:-No errors reported}"
GEN_TRAEFIK_ERROR_MESSAGE="${GEN_TRAEFIK_ERROR_MESSAGE:-Errors were reported}"
GEN_TRAEFIK_NOTIFY_CLIENT_NAME="${GEN_TRAEFIK_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_TRAEFIK_NOTIFY_CLIENT_ICON="${GEN_TRAEFIK_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_TRAEFIK_NOTIFY_CLIENT_URGENCY="${GEN_TRAEFIK_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_TRAEFIK_AUTHOR="${GEN_TRAEFIK_AUTHOR:-$USER}"
GEN_TRAEFIK_PORT_SSL="${GEN_TRAEFIK_PORT_SSL:-443}"
GEN_TRAEFIK_PORT_NONSSL="${GEN_TRAEFIK_PORT_NONSSL:-80}"
GEN_TRAEFIK_DOMAIN="${GEN_TRAEFIK_DOMAIN:-$(hostname -f)}"
GEN_TRAEFIK_WWW_USER_DIR="${GEN_TRAEFIK_WWW_USER_DIR:-$GEN_TRAEFIK_CONFIG_DIR/files/www}"
GEN_TRAEFIK_VHOST_USER_DIR="${GEN_TRAEFIK_VHOST_USER_DIR:-$GEN_TRAEFIK_CONFIG_DIR/files/vhosts}"
GEN_TRAEFIK_WWW_SYSTEM_DIR_ROOT="${GEN_TRAEFIK_WWW_SYSTEM_DIR_ROOT:-/var/www/html}"
GEN_TRAEFIK_VHOST_SYSTEM_DIR="${GEN_TRAEFIK_VHOST_DIR_ROOT:-/etc/traefik/dynamic}"
GEN_TRAEFIK_BACKEND_URL="${GEN_TRAEFIK_BACKEND_URL:-http://localhost:3000}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE" ] && . "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_TRAEFIK_RUN_DIR" ] || mkdir -p "$GEN_TRAEFIK_RUN_DIR" |& __devnull
[ -d "$GEN_TRAEFIK_LOG_DIR" ] || mkdir -p "$GEN_TRAEFIK_LOG_DIR" |& __devnull
[ -d "$GEN_TRAEFIK_TEMP_DIR" ] || mkdir -p "$GEN_TRAEFIK_TEMP_DIR" |& __devnull
[ -d "$GEN_TRAEFIK_CACHE_DIR" ] || mkdir -p "$GEN_TRAEFIK_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_TRAEFIK_TEMP_FILE="${GEN_TRAEFIK_TEMP_FILE:-$(mktemp $GEN_TRAEFIK_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GET_OPTIONS_NO="no-*"
GET_OPTIONS_YES="yes-*"
LONGOPTS="completions:,config,reset-config,debug,dir:,help,options,raw,version,silent,force,"
LONGOPTS+=",template:,ssl:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="list"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --reset-config)
    shift 1
    [ -f "$GEN_TRAEFIK_CONFIG_DIR/$GEN_TRAEFIK_CONFIG_FILE" ] && rm -Rf "${GEN_TRAEFIK_CONFIG_DIR:?}/$GEN_TRAEFIK_CONFIG_FILE"
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_TRAEFIK_SILENT="true"
    ;;
  --force)
    shift 1
    export FORCE_INSTALL="true"
    GEN_TRAEFIK_FORCE_INSTALL="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_TRAEFIK_CWD="$2"
    [ -d "$GEN_TRAEFIK_CWD" ] || mkdir -p "$GEN_TRAEFIK_CWD" |& __devnull
    shift 2
    ;;
  --no-*)
    __options_function_no "$@"
    shift 1
    ;;
  --yes-*)
    __options_function_yes "$@"
    shift 1
    ;;
  --template)
    GEN_TRAEFIK_TEMPLATE_NAME="$2"
    [ "$GEN_TRAEFIK_TEMPLATE_NAME" = "ssl" ] || [ "$GEN_TRAEFIK_TEMPLATE_NAME" = "standard" ] || printf_exit "Usage: $APPNAME --template [ssl,standard]"
    shift 2
    ;;
  --ssl)
    GEN_TRAEFIK_SSL="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_TRAEFIK_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_TRAEFIK_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && GEN_TRAEFIK_CWD="$1" && shift 1 || GEN_TRAEFIK_CWD="${GEN_TRAEFIK_CWD:-$PWD}"
GEN_TRAEFIK_CWD="$(realpath "${GEN_TRAEFIK_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$GEN_TRAEFIK_CWD" ] && cd "$GEN_TRAEFIK_CWD"; then
# if [ "$GEN_TRAEFIK_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_TRAEFIK_CWD"
# fi
# else
# printf_exit "ðŸ’” $GEN_TRAEFIK_CWD does not exist ðŸ’”"
# fi
export GEN_TRAEFIK_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Export variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
list)
  shift 1
  if [ -d "$GEN_TRAEFIK_VHOST_USER_DIR" ]; then
    for f in "$GEN_TRAEFIK_VHOST_USER_DIR"/*.yml; do
      [ -f "$f" ] || continue
      confFile="$(basename -- "$f")"
      domain_list="$(__get_traefik_domains "$f")"
      for domain in $domain_list; do
        column=$((90 - ${#domain}))
        col="$(for i in $(seq 1 $column); do printf '%s' " "; done)"
        [ -n "$domain" ] && printf '%s: %s\n' "$domain$col" " $confFile" | printf_readline "$GEN_TRAEFIK_OUTPUT_COLOR_1" || printf_red "traefik doesn't seem to have any configured domains in $f"
      done
    done
  else
    printf_exit "The directory $GEN_TRAEFIK_VHOST_USER_DIR does not exist"
  fi
  exit
  ;;

*)
  __setup_traefik "$@"
  exitCode=$?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
