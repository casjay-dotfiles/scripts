#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208082340-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gitcommit --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 08, 2022 23:40 EDT
# @@File             :  gitcommit
# @@Description      :  Commit changes to a git repo
# @@Changelog        :  Updated random API url
# @@TODO             :  Fix/re-write variables
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208082340-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GITCOMMIT_REQUIRE_SUDO="${GITCOMMIT_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE"
  fi
  [ -d "$GITCOMMIT_CONFIG_DIR" ] || mkdir -p "$GITCOMMIT_CONFIG_DIR"
  [ -d "$GITCOMMIT_CONFIG_BACKUP_DIR" ] || mkdir -p "$GITCOMMIT_CONFIG_BACKUP_DIR"
  [ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ] &&
    cp -Rf "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" "$GITCOMMIT_CONFIG_BACKUP_DIR/$GITCOMMIT_CONFIG_FILE.$$"
  cat <<EOF >"$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE"
# Settings for gitcommit
GITCOMMIT_NO_CONFIRM="${GITCOMMIT_NO_CONFIRM:-true}"
GITCOMMIT_PROJECT_DIR="${GIT_PROJECT_DIR:-$HOME/Projects}"
GITCOMMIT_CHANGELOG_FILE_NAME="${GITCOMMIT_CHANGELOG_FILE_NAME:-CHANGELOG.md}"
GITCOMMIT_VERSION_FILE="${GIT_VERSION_FILE:-version.txt}"
GITCOMMIT_MAIN_CONFIG=${GITCOMMIT_MAIN_CONFIG:-gitmainconfig}
GITCOMMIT_VERSION_FORMAT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GITCOMMIT_RELEASE_FORMAT="${GITCOMMIT_RELEASE_FORMAT:-%Y.%m.%d}"
GITCOMMIT_RANDOM_API_URL="${GITCOMMIT_RANDOM_API_URL:-https://api.casjay.vercel.app/api/v1/commit/txt/}"
GITCOMMIT_CHANGELOG_ICON="${GITCOMMIT_CHANGELOG_ICON:-}"
GITCOMMIT_DEFAULT_COMMIT_FILE="${GITCOMMIT_DEFAULT_COMMIT_FILE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GITCOMMIT_OUTPUT_COLOR_1="${GITCOMMIT_OUTPUT_COLOR_1:-}"
GITCOMMIT_OUTPUT_COLOR_2="${GITCOMMIT_OUTPUT_COLOR_2:-}"
GITCOMMIT_OUTPUT_COLOR_GOOD="${GITCOMMIT_OUTPUT_COLOR_GOOD:-}"
GITCOMMIT_OUTPUT_COLOR_ERROR="${GITCOMMIT_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GITCOMMIT_NOTIFY_ENABLED="${GITCOMMIT_NOTIFY_ENABLED:-}"
GITCOMMIT_GOOD_NAME="${GITCOMMIT_GOOD_NAME:-}"
GITCOMMIT_ERROR_NAME="${GITCOMMIT_ERROR_NAME:-}"
GITCOMMIT_GOOD_MESSAGE="${GITCOMMIT_GOOD_MESSAGE:-}"
GITCOMMIT_ERROR_MESSAGE="${GITCOMMIT_ERROR_MESSAGE:-}"
GITCOMMIT_NOTIFY_CLIENT_NAME="${GITCOMMIT_NOTIFY_CLIENT_NAME:-}"
GITCOMMIT_NOTIFY_CLIENT_ICON="${GITCOMMIT_NOTIFY_CLIENT_ICON:-}"
GITCOMMIT_NOTIFY_CLIENT_URGENCY="${GITCOMMIT_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gitcommit:  Commit changes to a git repo - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gitcommit [options] [directory] [commands] [message]"
  __printf_line "search [query]                  - Search through the commit history"
  __printf_line "amend                           - Amend a previous commit"
  __printf_line "status                          - Show git status"
  __printf_line "log                             - Show the log"
  __printf_line "init                            - Initialize a repo"
  __printf_line "setup                           - Initialize a repo"
  __printf_line "reset                           - Reset a git repo"
  __printf_line "tag                             - Create a tag"
  __printf_line "tar                             - Create a tar release"
  __printf_line "branch                          - Create a new branch"
  __printf_line "push                            - Push changes to remote repo"
  __printf_line "version                         - Bump the version"
  __printf_line "all                             - Commit all files"
  __printf_line "files                           - Commit files based on status"
  __printf_line "modified                        - Commit only modified files"
  __printf_line "updated                         - Commit only updated files"
  __printf_line "deleted                         - Commit only deleted files"
  __printf_line "added                           - Commit only added files"
  __printf_line "renamed                         - Commit only renamed files"
  __printf_line "changed                         - Commit only changed files"
  __printf_line "new                             - New files"
  __printf_line "improved                        - Improved files"
  __printf_line "fixes                           - File fixes"
  __printf_line "release                         - New release"
  __printf_line "deploy                          - Deploy"
  __printf_line "docs                            - Docs"
  __printf_line "test                            - Test"
  __printf_line "breaking                        - Breaking changes were made"
  __printf_line "refactor                        - Refactoring code"
  __printf_line "performance                     - Performance improvement"
  __printf_line "permissions                     - Permission fixes"
  __printf_line "bugs                            - Bug fixes"
  __printf_line "alot                            - Lazy message"
  __printf_line "docker                          - Docker project"
  __printf_line "node                            - NodeJS project"
  __printf_line "ruby                            - Ruby project"
  __printf_line "php                             - PHP project"
  __printf_line "perl                            - Perl project"
  __printf_line "python                          - Python project"
  __printf_line "scratchpad                      - Scratchpad repo"
  __printf_line "todo                            - TODO repo"
  __printf_line "notes                           - Notes repo"
  __printf_line "blog                            - Blog repo"
  __printf_line "recipe                          - Recipe repo"
  __printf_line "random                          - Generate a random commit message"
  __printf_line "emojify                         - emojify a commit"
  __printf_line "custom                          - Specify custom message"
  __printf_line "--message                       - Specify custom message"
  __printf_line "--amend                         - Amend a commit"
  __printf_line "--force                         - Force changes and push [This will overwrite existing repo]"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GITCOMMIT_REQUIRE_SUDO" = "yes" ] && [ -z "$GITCOMMIT_REQUIRE_SUDO_RUN" ]; then
    export GITCOMMIT_REQUIRE_SUDO="no"
    export GITCOMMIT_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%b\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GITCOMMIT_TEMP_FILE" ] && rm -Rf "$GITCOMMIT_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__trap_exit_local() {
  local commit_file="$GITCOMMIT_ROOT_DIR/.git/COMMIT_EDITMSG"
  local message_file="${GITCOMMIT_MESSAGE_FILE}"
  [ -n "$commit_file" ] && [ -f "$commit_file" ] && rm -Rf "$commit_file" || true
  [ -n "$message_file" ] && [ -f "$message_file" ] && rm -Rf "$message_file" || true
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_s_added() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -Ew ^'\?\?|^A|^AA|^ A' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
__git_s_renamed() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -Ew ^'R|^RM|^ R' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
__git_s_modified() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -Ew ^'M|^MM|^ M' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
__git_s_updated() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -Ew ^'U|^UU|^ U' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
__git_s_deleted() { git -C "$GEN_CHANGELOG_CWD" status -s 2>/dev/null | grep -E ^'[M, ]D|DD' | awk '{print $2}' | sort -u | grep -v '^$' | grep '^' || return 1; }
__git_s_message() { __git_s_added || __git_s_renamed || __git_s_modified || __git_s_deleted || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__changelog_commit() { gen-changelog --amend --dir "$GITCOMMIT_ROOT_DIR" || return; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sanitize_url() { sed 's|://*.*:|://|g'; }
__emj_check() { sed 's/\xf0\x9f/\r&/g; s/\s*\r.//g'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_push() {
  [ -f "$GITCOMMIT_ROOT_DIR/.no_push" ] && printf_yellow "㊗️ Push is disabled for $GITCOMMIT_ROOT_DIR ㊗️ " && exit 0
  export PUSH_ENABLE="${PUSH_ENABLE:-true}"
  __changelog_commit
  __update_version
  if [ "$PUSH_ENABLE" = "true" ]; then
    __git_push "$@" && export PUSH_ENABLE="" && export GITCOMMIT_PUSH="TRUE"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_tag_add() {
  local eCode=""
  local message=""
  local release=""
  local repo="$REMOTE_REPO"
  release="${1:-$(date +'%Y.%m')}"
  message="${2:-🚀🌟 Updated to version $release 🚀🌟}"
  [ -n "$release" ] || printf_exit "Usage: $APPNAME release [version] [message]"
  if git -C "$GITCOMMIT_ROOT_DIR" tag -a "$release" -m "$message" >/dev/null 2>/dev/null; then
    printf_green "Added tag $release"
    if git -C "$GITCOMMIT_ROOT_DIR" push origin "$release" >/dev/null 2>/dev/null; then
      printf_cyan "Pushed $release to $repo"
    fi
    return 0
  else
    return 1
  fi
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_tag_del() {
  local repo="$REMOTE_REPO"
  if git -C "$GITCOMMIT_ROOT_DIR" tag -d "$1" >/dev/null 2>/dev/null; then
    printf_green "Deleted tag $1"
    if git -C "$GITCOMMIT_ROOT_DIR" push origin --delete "$1" >/dev/null 2>/dev/null; then
      printf_cyan "Deleted $1 from $repo"
    fi
    return 0
  else
    return 1
  fi
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tar_release() {
  local release="" backup_dir="" eCode=""
  release="${1:-$(date +'%Y.%m.%d')}"
  backup_dir="$HOME/.local/backups/$APPNAME"
  eCode="1"
  [ -d "$backup_dir" ] || mkdir -p "$backup_dir"
  printf_cyan "Creating backup from $GITCOMMIT_ROOT_DIR to $backup_dir/$release.tar.gz "
  tar -cvf "$backup_dir/$release.tar.gz" "$GITCOMMIT_ROOT_DIR" && eCode=0
  if [ "$eCode" = 0 ]; then
    printf_green "Successfully created tar file"
  else
    printf_red "Failed to create archive"
  fi
  return $eCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# TODO: Turn this into a seperate script
__changelog_create() {
  __cmd_exists gen-changelog || return 0
  local get_changed_files="$1"
  local git_commit_mess="${2:-$GITCOMMIT_MESSAGE_SHORT}"
  local custom_action="$3"
  local changed_icon="${icon:-$GITCOMMIT_CHANGELOG_ICON}"
  local changed_files="${get_changed_files:-$(__changed_files "all")}"
  local changelog_file="$GITCOMMIT_ROOT_DIR/${GITCOMMIT_CHANGELOG_FILE_NAME:-CHANGELOG.md}"
  [ -f "$changelog_file" ] || return 0
  if [ -n "$custom_action" ]; then
    gen-changelog --silent --message "$git_commit_mess" --files "$changed_files" --icon "$changed_icon"
    GITCOMMIT_AMEND=""
  elif [ -s "${GITCOMMIT_MESSAGE_FILE}.log" ]; then
    git_commit_mess="$(<"${GITCOMMIT_MESSAGE_FILE}.log")"
    rm -Rf "${GITCOMMIT_MESSAGE_FILE}.log"
    gen-changelog --silent --changelog "$git_commit_mess" --icon "$changed_icon"
    GITCOMMIT_AMEND=""
  else
    gen-changelog --silent --message "$git_commit_mess" --files "$changed_files" --icon "$changed_icon"
    GITCOMMIT_AMEND=""
  fi
  gen-changelog --silent --amend
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gitmessage() {
  GITCOMMIT_MESSAGE_FULL=""
  GITCOMMIT_MESSAGE_SHORT="${1:-$GITCOMMIT_MESSAGE_SHORT}"
  GITCOMMIT_MESSAGE_LONG="${2:-$GITCOMMIT_MESSAGE_LONG}"
  test_long_message="$(echo "$GITCOMMIT_MESSAGE_LONG" | grep -v '^$' | head -n1 | grep '^' || false)"
  test_short_message="$(echo "$GITCOMMIT_MESSAGE_SHORT" | grep -v '^$' | head -n1 | grep '^' || false)"
  if [ ${#GITCOMMIT_MESSAGE_SHORT} -ge 75 ]; then
    nomessage="true"
    GITCOMMIT_MESSAGE_SHORT="...${GITCOMMIT_MESSAGE_SHORT:0:69}..."
    printf '%s  \n' "${GITCOMMIT_MESSAGE_SHORT}" | sed 's|[ ] *| |g;s|^ ||g' >"$GITCOMMIT_MESSAGE_FILE"
  else
    nomessage="true"
    printf '%s  \n' "$GITCOMMIT_MESSAGE_SHORT" | sed 's|[ ] *| |g;s|^ ||g' >"$GITCOMMIT_MESSAGE_FILE"
  fi
  if [ -n "$test_long_message" ]; then
    GITCOMMIT_MESSAGE_LONG="$(printf '%b\n' "$GITCOMMIT_MESSAGE_LONG")"
    printf '%s  \n\n\n%s  \n' "$GITCOMMIT_MESSAGE_SHORT" "$GITCOMMIT_MESSAGE_LONG" | sed 's|[ ] *| |g;s|^ ||g' >"$GITCOMMIT_MESSAGE_FILE"
  fi
  if [ -f "$GITCOMMIT_MESSAGE_FILE" ]; then
    GITCOMMIT_MESSAGE_FULL="$(<"$GITCOMMIT_MESSAGE_FILE")"
    cat "$GITCOMMIT_MESSAGE_FILE" >>"${GITCOMMIT_MESSAGE_FILE}.log"
  fi
  [ -n "$GITCOMMIT_MESSAGE_LONG" ] || unset GITCOMMIT_MESSAGE_LONG
  [ -n "$GITCOMMIT_MESSAGE_SHORT" ] || unset GITCOMMIT_MESSAGE_SHORT
  [ "$GITCOMMIT_MESSAGE_LONG" = "$GITCOMMIT_MESSAGE_SHORT" ] && unset GITCOMMIT_MESSAGE_LONG
  unset test_short_message test_long_message test_full_message
  export nomessage message_set="TRUE"
  export GITCOMMIT_MESSAGE_FULL GITCOMMIT_MESSAGE_SHORT GITCOMMIT_MESSAGE_LONG GITCOMMIT_MESSAGE_FILE
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gitcommit_cmd() {
  export GITCOMMIT_RAN="" GITADMIN_NO_ERROR_MESSAGE=""
  if [ -s "$GITCOMMIT_MESSAGE_FILE" ]; then
    git -C "$GITCOMMIT_ROOT_DIR" commit -q -S -m "$(<"$GITCOMMIT_MESSAGE_FILE")" &>"$GITCOMMIT_TEMP_FILE" || return 1
  else
    git -C "$GITCOMMIT_ROOT_DIR" commit -q -S -m "$GITCOMMIT_MESSAGE_FULL" &>"$GITCOMMIT_TEMP_FILE" || return 1
  fi
  export GITCOMMIT_RAN="true" GITADMIN_NO_ERROR_MESSAGE="true"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gitcommit() {
  __git_porcelain "$GITCOMMIT_ROOT_DIR" &>/dev/null && return
  local mess="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  local succ="Successfully committed the changes to"
  local fail="Failed to commit the changes to"
  local column_length=$(($(tput cols) - 20))
  local removemess="${mess:10:30}"
  local add_changelog_to_commit=""
  GITCOMMIT_EXITCODE="${GITCOMMIT_EXITCODE:-0}"
  [ -n "$message_set" ] || __gitmessage "$mess"
  [ -n "$message_set" ] || [ -s "$GITCOMMIT_MESSAGE_FILE" ] || printf_exit "The commit message is empty"
  [ -n "$nomessage" ] || show_message="$(grep -shvE "$removemess" "$GITCOMMIT_MESSAGE_FILE" | grep -v '^$' | tr '\n' ' ' | grep '^')"
  printf_cyan "👊 Committing Changes with the following message: 👊"
  printf_yellow "$mess"
  [ -n "$show_message" ] && [ "$show_message" != "$mess" ] && printf_blue "${show_message:0:$column_length}"
  if __gitcommit_cmd; then
    if [ "$NO_MESSAGE" != "true" ]; then
      if __getexitcode "$GITCOMMIT_EXITCODE" "🔗 $succ $(__git_repobase "$GITCOMMIT_ROOT_DIR") 🔗" "🚫 $fail $(__git_repobase "$GITCOMMIT_ROOT_DIR") 🚫"; then
        COMMIT_ID="$(__git_commitid "$GITCOMMIT_ROOT_DIR")"
      fi
    fi
  else
    printf_readline "5" <"$GITCOMMIT_TEMP_FILE"
    printf_exit "Failed to commit the changes"
  fi
  export GITCOMMIT_RAN="true" GITADMIN_NO_ERROR_MESSAGE="true"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_init() {
  local exitCode=""
  is_url "$1" && REPO="$1" && shift 1
  message="$*"
  icon="${set_icon:-📂} "
  action="${set_action:-📂}"
  timem="$(date +'%H:%M')"
  datem="$(date +'%Y-%m-%d')"
  initm="New repo created on $datem at $timem"
  message="${setmess:-$(printf '%b\n' "$initm")}"
  setmess="$(printf '%b\n' "$action $message $icon")"
  GITCOMMIT_MESSAGE_LONG="${GITCOMMIT_MESSAGE_LONG:-$(printf '%b\n' "$setmess\n\n$message\n")}"
  __gitmessage "$setmess"
  __gitignore_init "$GITCOMMIT_ROOT_DIR" &>/dev/null
  gitadmin --dir "$GITCOMMIT_ROOT_DIR" setup "${REPO:-}" --message="$setmess" && exitCode=0 || exitCode=1
  exit ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__changed_files() {
  local files=""
  while :; do
    case $1 in
    message)
      shift
      __git_s_message || return 1
      ;;
    added)
      shift
      __git_s_added | grep -v '^CHANGELOG.md' || return 1
      ;;
    renamed)
      shift
      __git_s_renamed | grep -v '^CHANGELOG.md' || return 1
      ;;
    modified)
      shift
      (__git_s_updated || __git_s_modified) | grep -v '^CHANGELOG.md' || return 1
      ;;
    deleted)
      shift
      __git_s_deleted || return 1
      ;;
    changelog)
      shift
      files+="$(__git_s_added | grep '^CHANGELOG.md') "
      files+="$(__git_s_deleted | grep '^CHANGELOG.md') "
      files+="$(__git_s_renamed | grep '^CHANGELOG.md') "
      files+="$(__git_s_modified | grep '^CHANGELOG.md') "
      results="$(printf '%b\n' "$files" | tr ' ' '\n' | sort -u | grep -v '^$' | grep '^')"
      [ -n "$results" ] && echo "$results"
      ;;
    all)
      shift 1
      files+="$(__changed_files added) "
      files+="$(__changed_files modified) "
      files+="$(__changed_files deleted) "
      files+="$(__changed_files renamed) "
      printf '%b\n' "$files" | tr ' ' '\n' | sort -u | grep -v '^$' | grep '^'
      ;;
    *)
      break
      ;;
    esac
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__default_git_action() {
  export PUSH_ENABLE="false"
  local modified added deleted message
  if [ "$1" = "--add-all-files" ]; then
    shift 1
    message="$(printf '%b\n' "$*")"
    export PUSH_ENABLE="true"
    __git_all "$message"
  else
    message="$(printf '%b\n' "$*")"
    added="$(__changed_files added)"
    deleted="$(__changed_files deleted)"
    renamed="$(__changed_files renamed)"
    modified="$(__changed_files modified)"
    files_have_been_changed="$(__changed_files all)"
    [ -n "$added" ] && for a in $added; do __git_add "$message"; done
    [ -n "$modified" ] && for m in $modified; do __git_mod "$message"; done
    [ -n "$deleted" ] && for d in $deleted; do __git_del "$message"; done
    [ -n "$renamed" ] && for r in $renamed; do __git_mod "$message"; done
    [ -n "$files_have_been_changed" ] && export PUSH_ENABLE="true" || export PUSH_ENABLE=""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_updated() {
  exitCode="${exitCode:-0}"
  local message="$*"
  prepend="${prepend_name:-$prepend}"
  changelog_message="${prepend:-Updated}"
  changed_files="$(__changed_files modified)"
  __git_add "$(printf '%b\n' "$message")" || exitCode=$((exitCode + 1))
  __git_mod "$(printf '%b\n' "$message")" || exitCode=$((exitCode + 1))
  unset prepend
  export GITADMIN_NO_ERROR="${GITADMIN_NO_ERROR:-true}"
  [ $exitCode -eq 0 ] && export PUSH_ENABLE="${PUSH_ENABLE:-true}" || export PUSH_ENABLE=""
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_all() {
  local message="$*"
  local exitCode=0
  local icon="${set_icon:-🗃} "
  local action="${set_action:-🗃}"
  local prepend="${prepend_name:-}"
  local local_set_mess="$(printf '%b\n' "$message")"
  changed_files="$(__changed_files all)"
  if [ -z "$changed_files" ] || [ "$GITADMIN_NO_ERROR" != "true" ]; then
    [ "$GITADMIN_NO_ERROR_MESSAGE" = "true" ] || printf_return "🙁 No files have changed in $GITCOMMIT_ROOT_DIR 🙁"
    export GITADMIN_NO_ERROR_MESSAGE="true"
    return 1
  fi
  [ -n "$local_set_mess" ] || local_set_mess="$prepend"
  changelog_message="$prepend"
  setmess="$(printf '%b\n' "$action $local_set_mess $icon")"
  GITCOMMIT_MESSAGE_LONG="$changed_files"
  __gitmessage "$setmess" "$changed_files"
  if git -C "$GITCOMMIT_ROOT_DIR" add . &>/dev/null && __gitcommit "$setmess"; then
    __changelog_create "$setmess" "$changed_files"
  else
    exitCode+=$((exitCode + 1))
  fi
  unset changed_files prepend
  [ $exitCode -eq 0 ] && export PUSH_ENABLE="${PUSH_ENABLE:-true}" || export PUSH_ENABLE=""
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_mod() {
  local message="$*"
  local exitCode=0
  local local_set_mess=""
  local icon="${set_icon:-🗃}"
  local action="${set_action:-🗃} "
  local prepend="${prepend_name:-Modified}:"
  changed_files="$(__changed_files all)"
  if [ -z "$changed_files" ] || [ "$GITADMIN_NO_ERROR" != "true" ]; then
    [ "$GITADMIN_NO_ERROR_MESSAGE" = "true" ] || printf_return "🙁 No files have changed in $GITCOMMIT_ROOT_DIR 🙁"
    export GITADMIN_NO_ERROR_MESSAGE="true"
    return 1
  fi
  for file in $changed_files; do
    f="$file"
    changelog_message="$prepend"
    local_set_mess="$prepend $f"
    setmess="$(printf '%b\n' "$action $local_set_mess $icon")"
    GITCOMMIT_MESSAGE_LONG="$(printf '%b\n' "$prepend $f" | sed "s|$f.*.$f|$f|g")"
    __gitmessage "$setmess"
    if git -C "$GITCOMMIT_ROOT_DIR" add "$f" &>/dev/null && __gitcommit "$setmess"; then
      __changelog_create "$f"
    else
      exitCode+=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] && export PUSH_ENABLE="${PUSH_ENABLE:-true}" || export PUSH_ENABLE=""
  unset changed_files prepend
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_add() {
  local message="$*"
  local exitCode=0
  local icon="${set_icon:-❓}"
  local action="${set_action:-❓} "
  local prepend="${prepend_name:-Added}:"
  changed_files="$(__changed_files all)"
  if [ -z "$changed_files" ] || [ "$GITADMIN_NO_ERROR" != "true" ]; then
    [ "$GITADMIN_NO_ERROR_MESSAGE" = "true" ] || printf_return "🙁 No files have been added in $GITCOMMIT_ROOT_DIR 🙁"
    export GITADMIN_NO_ERROR_MESSAGE="true"
    return 1
  fi
  for file in $changed_files; do
    f="$file"
    setmess="$(printf '%b\n' "$action $prepend $f $icon")"
    GITCOMMIT_MESSAGE_LONG="$(printf '%b\n' "$prepend $f" | sed "s|$f.*.$f|$f|g")"
    __gitmessage "$setmess"
    git -C "$GITCOMMIT_ROOT_DIR" add "$f" &>/dev/null
    __gitcommit "$setmess" || exitCode+=$((exitCode + 1))
    __changelog_create "$f"
  done
  unset changed_files prepend
  [ $exitCode -eq 0 ] && export PUSH_ENABLE="${PUSH_ENABLE:-true}" || export PUSH_ENABLE=""
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_del() {
  local message="$*"
  local exitCode=0
  local local_set_mess=""
  local icon="${set_icon:-➖}"
  local action="${set_action:-➖} "
  local prepend="${prepend_name:-Deleted}:"
  changed_files="$(__changed_files deleted)"
  if [ -z "$changed_files" ] || [ "$GITADMIN_NO_ERROR" != "true" ]; then
    [ "$GITADMIN_NO_ERROR_MESSAGE" = "true" ] || printf_return "🙁 No files have been deleted in $GITCOMMIT_ROOT_DIR 🙁"
    export GITADMIN_NO_ERROR_MESSAGE="true"
    return 1
  fi
  for file in $changed_files; do
    f="$file"
    setmess="$(printf '%b\n' "$action $prepend $f $icon")"
    GITCOMMIT_MESSAGE_LONG="$(printf '%b\n' "$prepend $f" | sed "s|$f.*.$f|$f|g")"
    __gitmessage "$setmess"
    if git -C "$GITCOMMIT_ROOT_DIR" rm "$f" &>/dev/null && __gitcommit "$setmess"; then
      __changelog_create "$f"
    else
      exitCode+=$((exitCode + 1))
    fi
  done
  unset changed_files prepend
  [ $exitCode -eq 0 ] && export PUSH_ENABLE="${PUSH_ENABLE:-true}" || export PUSH_ENABLE=""
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_renamed() {
  local file_from="${1//$GITCOMMIT_ROOT_DIR\//}" && shift 1
  local file_move="${1//$GITCOMMIT_ROOT_DIR\//}" && shift 1
  local message="$*"
  local exitCode=0
  local local_set_mess=""
  local icon="${set_icon:-✔️}"
  local action="${set_action:-✔️} "
  local prepend="${prepend_name:-Renamed}:"
  local create_dir="$(dirname "$(realpath "$file_move")")"
  [ -n "$file_from" ] && [ -n "$file_move" ] || return 1
  [ -d "$create_dir" ] || mkdir -p "$(dirname "$create_dir")"
  [ -e "$file_move" ] && mv -f "$file_from" "$file_move" &>/dev/null
  setmess="$(printf '%b\n' "$action $prepend $file_from ➡ $file_move $icon")"
  GITCOMMIT_MESSAGE_LONG="$(printf '%b\n%b\n' "Deleted: $file_from" "Added: $file_move" | sed "s|$f.*.$f|$f|g")"
  __gitmessage "$setmess"
  if git -C "$GITCOMMIT_ROOT_DIR" rm "$file_from" -rf &>/dev/null; then
    __changelog_create "$file_from" "$action Deleted: $file_from $icon\n\n\nDeleted $file_from" "custom"
    if git -C "$GITCOMMIT_ROOT_DIR" add "$file_move" &>/dev/null; then
      __changelog_create "$file_move" "$action Added: $file_from $icon\n\n\nAdded $file_move" "custom"
      __gitcommit "$setmess" || exitCode+=$((exitCode + 1))
    fi
  fi
  unset prepend
  [ $exitCode -eq 0 ] && export PUSH_ENABLE="${PUSH_ENABLE:-true}" || export PUSH_ENABLE=""
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__files() {
  local message="$*"
  local exitCode=0
  local icon="${set_icon:-➖}"
  local action="${set_action:-➖} "
  local local_set_mess="$(printf '%b\n' "$message")"
  local added_files="$(__changed_files added)"
  local deleted_files="$(__changed_files deleted)"
  local all_files="$(printf '%s\n%s\n' "$added_files" "$deleted_files" | grep -v '^$' | grep '^')"
  setmess="$(printf '%b\n' "$action $local_set_mess $icon")"
  GITCOMMIT_MESSAGE_LONG="$(printf '%b\n' "$all_files")"
  if [ -n "$added_files" ]; then
    __gitmessage "$setmess" "$added_files"
    if git -C "$GITCOMMIT_ROOT_DIR" add $added_files &>/dev/null; then
      __changelog_create "$added_files"
    else
      unset added_files
    fi
  fi
  if [ -n "$deleted_files" ]; then
    __gitmessage "$setmess" "$deleted_files"
    if git -C "$GITCOMMIT_ROOT_DIR" rm $deleted_files &>/dev/null; then
      __changelog_create "$deleted_files"
    else
      unset deleted_files
    fi
  fi
  { [ -n "$added_files" ] || [ -n "$deleted_files" ]; } && __gitcommit "$setmess"
  unset prepend
  [ $exitCode -eq 0 ] && export PUSH_ENABLE="${PUSH_ENABLE:-true}" || export PUSH_ENABLE=""
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gitignore_init() {
  local exitCode=0
  [ -e "${1:-$GITCOMMIT_ROOT_DIR}/.gitignore" ] && return
  if [ -d "${1:-$GITCOMMIT_ROOT_DIR}/node_modules" ]; then
    gitignore --dir "${1:-$GITCOMMIT_ROOT_DIR}" dirignore default node
  else
    gitignore --dir "${1:-$GITCOMMIT_ROOT_DIR}" dirignore default
  fi
  __test_gitignore
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__test_gitignore() {
  if ! grep -sh -A1 '# ignore commit message' "${1:-$GITCOMMIT_ROOT_DIR}/.gitignore" | grep -q ^'**/.gitcommit'; then
    printf '%s\n%s\n' '# ignore commit message' '**/.gitcommit' >>"$GITCOMMIT_ROOT_DIR/.gitignore"
  fi
  if [ -d "${1:-$GITCOMMIT_ROOT_DIR}/.git" ]; then
    git -C "${1:-$GITCOMMIT_ROOT_DIR}" add .gitignore &>/dev/null && git -C "${1:-$GITCOMMIT_ROOT_DIR}" commit -q -S -m "🤖 Added .gitignore 🤖" ".gitignore" || return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_root() {
  if git -C "${1:-$GITCOMMIT_ROOT_DIR}" rev-parse --show-toplevel >/dev/null 2>&1; then
    git -C "${1:-$GITCOMMIT_ROOT_DIR}" rev-parse --show-toplevel 2>/dev/null
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_dir() {
  local git_dir="" makerepo=""
  git_dir="${1:-$GITCOMMIT_ROOT_DIR}"
  makerepo=""
  if [ "$(git -C "$git_dir" rev-parse --is-inside-work-tree 2>/dev/null)" == "" ]; then
    printf_read_question "4" "$git_dir is not a repo! Would you like to turn into a git repo? y/N" "1" "makerepo"
    if printf_answer_yes "$makerepo"; then
      __gitignore_init "$git_dir"
      gen-gitattr --dir "$git_dir" save &>/dev/null
      gitadmin --dir "$git_dir" setup
      exit $?
    else
      printf_error "You are not in a git repo"
      exit 1
    fi
  fi
  [ -d "$git_dir" ] || printf_exit "$git_dir doesn't seem to be a directory"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_commitid() {
  echo -n "$(git -C "${1:-$GITCOMMIT_ROOT_DIR}" rev-parse --short HEAD)"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_check_cherry() {
  git -C "$GITCOMMIT_ROOT_DIR" cherry -v 2>&1 | wc -l | grep -q '0' && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_check_ahead() {
  git -C "$GITCOMMIT_ROOT_DIR" log --oneline origin..HEAD 2>&1 | wc -l | grep -q '0' && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_check_branch() {
  git -C "$GITCOMMIT_ROOT_DIR" branch -avvv 2>&1 | grep -q ': ahead ' && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_check_push() {
  local exitCode=1
  if [ "$GITCOMMIT_PUSH_VERSION" = "true" ]; then
    exitCode=0
  elif [ "$(git -C "$GITCOMMIT_ROOT_DIR" diff --stat origin/main 2>/dev/null | wc -l)" -ne 0 ]; then
    exitCode=0
  elif __git_check_ahead; then
    exitCode=0
  else
    exitCode=1
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_push_check() {
  if __git_check_push; then
    return 0
  elif __git_check_cherry; then
    return 0
  elif __git_check_ahead; then
    return 0
  elif __git_check_branch; then
    return 0
  elif git s | grep -v '## ' | grep -q '^'; then
    return 0
  elif [ -n "$GITCOMMIT_RAN" ]; then
    return 0
  elif [ "$PUSH_ENABLE" = "true" ]; then
    return 0
  elif [ -n "$FORCE_PUSH" ]; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_custom_pull() {
  [ -d "${1:-GITCOMMIT_ROOT_DIR}/.git" ] && gitadmin --dir "${1:-GITCOMMIT_ROOT_DIR}" pull 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_custom_push() {
  if [ -d "${1:-GITCOMMIT_ROOT_DIR}/.git" ]; then
    printf_custom "4" "🐛 Pushing the repo in ${1:-GITCOMMIT_ROOT_DIR} 🐛"
    git -C "${1:-GITCOMMIT_ROOT_DIR}" push $url -q
    exitCode=$?
    if [ -f "${1:-GITCOMMIT_ROOT_DIR}/.gitmirror" ]; then
      while read -r url; do
        printf '%b' "$(printf_blue "👾 Pushing to $url: ")" && git -C "${1:-GITCOMMIT_ROOT_DIR}" push $url -q 2>/dev/null
        retVal=$?
        if [ $retVal -eq 0 ]; then
          retVal=0
          printf_green "success 👾"
        else
          printf_red "Failed ⚠️"
          exitCode=$((exitCode + retVal))
        fi
      done <"${1:-GITCOMMIT_ROOT_DIR}/.gitmirror"
    fi
  else
    exitCode=1
  fi
  if [ $exitCode -eq 0 ]; then
    printf_green "👾 Push to $(__git_remote_origin "${GITADMIN_NEW_PROJECT_DIR:-$GITCOMMIT_ROOT_DIR}") has completed 👾"
  else
    printf_red "😿 Push to $(__git_remote_origin "${GITADMIN_NEW_PROJECT_DIR:-$GITCOMMIT_ROOT_DIR}") has failed 😿"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_push() {
  local GITCOMMIT_EXITCODE=0 git_dir="" git_repo="" git_remote=""
  local git_failed="" git_succes="" git_push="" git_repo_clean=""
  git_dir="${1:-$GITCOMMIT_ROOT_DIR}"
  errorlog="$GITCOMMIT_ERROR_LOG"
  git_icon_succes="㊗️ "
  git_icon_failed="😿 "
  git_repo="$(__git_remote_fetch "$GITCOMMIT_ROOT_DIR" || echo "$REMOTE_REPO")"
  git_repo_clean="$(echo "$git_repo" | __sanitize_url)"
  git_failed="Failed to push the changes to $git_repo:"
  git_succes="Successfully pushed the changes for commit ID:"
  git_remote="$(__git_remote_push || false)"
  remote_formatted="$(echo "$git_remote" | sed 's|\.git$||g' | grep '^' || false)"
  if __git_push_check; then
    [ -n "$git_remote" ] || return 0
    [ -f "$git_dir/.nopush" ] && return
    am_i_online --error -m "🚫 No internet connection. Skipping push 🚫" || exit 1
    if [ "$git_repo" != "localdir" ]; then
      if echo "$git_remote" | grep -F 'github\.com'; then
        __github_create_repo "${git_repo_clean}"
      fi
      if [ -n "$FORCE_PUSH" ]; then
        printf_green "🔼 Pushing the changes to $git_repo_clean 🔼"
        git -C "$git_dir" push -f -q 2>"$GITCOMMIT_ERROR_LOG" >/dev/null && GITCOMMIT_EXITCODE=0 || GITCOMMIT_EXITCODE=1
        __getexitcode $GITCOMMIT_EXITCODE "$git_icon_succes $git_succes $(__git_commitid "$git_dir")$git_icon_succes" "$git_icon_failed$git_failed $(<"$errorlog") $git_icon_failed"
      elif [[ "$*" =~ --automated ]] || [[ "$*" =~ --force ]]; then
        printf_green "🔼 Pushing the changes to $git_repo_clean 🔼"
        git -C "$git_dir" push -q 2>"$GITCOMMIT_ERROR_LOG" >/dev/null && GITCOMMIT_EXITCODE=0 || GITCOMMIT_EXITCODE=1
        __getexitcode $GITCOMMIT_EXITCODE "$git_icon_succes $git_succes $(__git_commitid "$git_dir")$git_icon_succes" "$git_icon_failed$git_failed $(<"$errorlog") $git_icon_failed"
      else
        if [ "$GITCOMMIT_NO_CONFIRM" != "true" ]; then
          printf_read_question "3" "Should I push to $git_repo_clean? [y/n]" "1" "git_push"
        else
          git_push="Y"
        fi
        if printf_answer_yes "$git_push"; then
          printf_green "📍 Pushing the changes to $git_repo_clean 📍"
          git -C "$git_dir" push -q 2>"$GITCOMMIT_ERROR_LOG" >/dev/null && GITCOMMIT_EXITCODE=0 || GITCOMMIT_EXITCODE=1
          __getexitcode $GITCOMMIT_EXITCODE "$git_icon_succes$git_succes $(__git_commitid "$git_dir") $git_icon_succes" "$git_icon_failed $git_failed $git_icon_failed"
        fi
      fi
    else
      printf_red "⚠️ Doesn't seem to have a remote setup ⚠️"
      GITCOMMIT_EXITCODE=0
    fi
  else
    printf_red "🛠 No changes to push in $GITCOMMIT_ROOT_DIR 🛠"
    GITCOMMIT_EXITCODE=1
  fi
  return $GITCOMMIT_EXITCODE
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__commit_custom_cmd() {
  if [ "$1" = "update_version" ]; then
    shift 1
    version_update="update_version"
    version_file="${1:-$GITCOMMIT_ROOT_DIR/$GITCOMMIT_VERSION_FILE}"
  else
    op="${*:-.}"
  fi
  if [ "$version_update" = "update_version" ]; then
    git -C "$GITCOMMIT_ROOT_DIR" add "$version_file" &&
      git -C "$GITCOMMIT_ROOT_DIR" commit -q -S -m "$GITCOMMIT_MESSAGE_VERSION" "$version_file" &>/dev/null && return 0 || return 1
  elif [ -n "$GITCOMMIT_MESSAGE_FULL" ]; then
    git -C "$GITCOMMIT_ROOT_DIR" add $op &>/dev/null &&
      git -C "$GITCOMMIT_ROOT_DIR" commit -q -S -m "$GITCOMMIT_MESSAGE_FULL" &>/dev/null && return 0 || return 1
  else
    git -C "$GITCOMMIT_ROOT_DIR" add $op &>/dev/null &&
      git -C "$GITCOMMIT_ROOT_DIR" commit -q -S -m "$GITCOMMIT_MESSAGE_SHORT" &>/dev/null && return 0 || return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__commit_custom() {
  local git_repo=""
  local git_failed=""
  local git_succes=""
  local git_repo_clean=""
  local sicon="㊗️"
  local ficon="😿"
  local icon="${set_icon:-🗃️}"
  local action="${set_action:-🗃️} "
  local prepend="${prepend_name:-All}:"
  local message="${GITCOMMIT_MESSAGE_SHORT:-Committing everything that changed}"
  local local_set_mess="$(printf '%b\n' "$message")"
  changed_files="$(__changed_files all)"
  if [ -z "$changed_files" ] || [ "$GITADMIN_NO_ERROR" != "true" ]; then
    [ "$GITADMIN_NO_ERROR_MESSAGE" = "true" ] || printf_return "🙁 No files have changed in $GITCOMMIT_ROOT_DIR 🙁"
    export GITADMIN_NO_ERROR_MESSAGE="true"
    return 1
  fi
  [ "$FORCE_PUSH" ] && ARGS="-f"
  [ -n "$local_set_mess" ] || local_set_mess="$prepend"
  changelog_message="$prepend"
  setmess="$(printf '%b\n' "$action $local_set_mess $icon")"
  __gitmessage "$setmess" "$changed_files"
  printf_cyan "👊 Committing Changes with the following message: 👊"
  printf_yellow "$GITCOMMIT_MESSAGE_SHORT"
  __commit_custom_cmd "$@"
  exitCode=$?
  if [ "$exitCode" = 0 ]; then
    __changelog_create "$changed_files"
    __update_version
    if [ ! -f "$GITCOMMIT_ROOT_DIR/.no_push" ] && __git_check_push; then
      git_repo="$(__git_remote_fetch "$GITCOMMIT_ROOT_DIR")"
      git_failed="Failed to push the changes to $git_repo"
      git_succes="Successfully pushed the changes for commit ID:"
      git_repo_clean="$(echo "$git_repo" | __sanitize_url)"
      if echo "$git_repo_clean" | grep -qF 'github.com'; then
        __github_create_repo "${git_repo_clean}"
      fi
      printf_green "📍 Pushing the changes to $git_repo_clean 📍"
      git -C "$GITCOMMIT_ROOT_DIR" push $ARGS -q &>/dev/null && GITCOMMIT_EXITCODE=0 || GITCOMMIT_EXITCODE=1
      __getexitcode $GITCOMMIT_EXITCODE "$sicon $git_succes $(__git_commitid "$GITCOMMIT_ROOT_DIR") $sicon" "$ficon $git_failed $ficon"
    fi
  else
    printf_exit "😿 Failed to commit the changes 😿"
  fi
  unset changed_files prepend
  exit "${exitCode:-0}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__write_version() {
  local vicon="🚀"
  local eicon="⚠️"
  [ "$1" = "--force" ] && shift 1 && touch "$GITCOMMIT_ROOT_DIR/$GITCOMMIT_VERSION_FILE"
  if [ "$GITCOMMIT_NEW_VERSION" != "true" ] && [ -f "$GITCOMMIT_ROOT_DIR/$GITCOMMIT_VERSION_FILE" ]; then
    set_new_version="$(date +"$GITCOMMIT_VERSION_FORMAT")"
    get_new_version="$(<"$GITCOMMIT_ROOT_DIR/$GITCOMMIT_VERSION_FILE")"
    printf '%b\n' "$set_new_version" >"$GITCOMMIT_ROOT_DIR/$GITCOMMIT_VERSION_FILE"
    if [ "$set_new_version" = "$get_new_version" ]; then
      set_new_version="$get_new_version"
      GITCOMMIT_MESSAGE_VERSION="$eicon The version did not change $eicon"
    fi
    [ -n "$GITCOMMIT_MESSAGE_VERSION" ] || GITCOMMIT_MESSAGE_VERSION="$vicon Version Bump: $set_new_version $vicon"
    [ -n "$GITCOMMIT_NEW_VERSION" ] || printf_blue "$GITCOMMIT_MESSAGE_VERSION"
  fi
  export GITCOMMIT_NEW_VERSION="true" GITCOMMIT_MESSAGE_VERSION
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_version() {
  local exitCode=0
  if [ -f "$GITCOMMIT_ROOT_DIR/$GITCOMMIT_VERSION_FILE" ]; then
    local dir_name="$(basename -- "$GITCOMMIT_ROOT_DIR")"
    local git_succes="Successfully committed version:"
    local git_failed="Failed to commit the version change in"
    __commit_custom_cmd "update_version" "$GITCOMMIT_VERSION_FILE"
    if [ "$GITCOMMIT_NEW_VERSION" = "true" ]; then
      GITCOMMIT_PUSH_VERSION="true"
    fi
  fi
  export NO_MESSAGE="true" GITCOMMIT_PUSH_VERSION
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_version() { __write_version && __set_version || exit 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__rename_branch() {
  local fromBranch="" toBranch="" USER="" REPO=""
  fromBranch="$1" && shift 1
  toBranch="$1" && shift 1
  if [ $# -eq 1 ] && echo "$1" | grep -q '/'; then
    USER_REPO="$1"
  elif echo "$*" | grep -q ' '; then
    USER_REPO="$2/$3"
  else
    USER_REPO="$(basename -- "$(dirname "$GITCOMMIT_ROOT_DIR")")/$(basename -- "$GITCOMMIT_ROOT_DIR")"
  fi
  echo $USER_REPO | awk -F'/' '{print $2}' | grep -q '^' || printf_exit "Usage:"
  # changelog_message="Renamed branch from $fromBranch to $toBranch"
  printf_blue "Changing git $fromBranch to $toBranch on $USER_REPO"
  git -C "$GITCOMMIT_ROOT_DIR" branch -m $fromBranch "$toBranch" &>/dev/null
  git -C "$GITCOMMIT_ROOT_DIR" push -u origin "$toBranch" -fq &>/dev/null
  if curl -q -LSs -X PATCH -H "Accept: application/vnd.github.v3+json" \
    -H "Authorization: token $GITCOMMIT_GITHUB_TOKEN" "https://api.github.com/repos/$USER_$REPO" \
    -d '{"default_branch":"'$toBranch'"}' | grep -q '"default_branch": "'$fromBranch'"' &>/dev/null; then
    git -C "$GITCOMMIT_ROOT_DIR" push --delete origin $fromBranch -fq &>/dev/null
    printf_green "Changed the default branch on github.com/$USER_$REPO"
  fi &&
    printf_green "Successfully renamed the default branch" ||
    printf_exit 1 1 "Failed to rename the default branch"
  git config --global init.defaultBranch "$toBranch" &>/dev/null
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_branch() {
  local branch="" USER="" REPO="" GITCOMMIT_EXITCODE=""
  branch="$1"
  if [ $# -eq 1 ] && echo "$1" | grep -q '/'; then
    USER_REPO="$1"
  elif echo "$*" | grep -q ' '; then
    USER_REPO="$2/$3"
  else
    USER_REPO="$(basename -- "$(dirname "$GITCOMMIT_ROOT_DIR")")/$(basename -- "$GITCOMMIT_ROOT_DIR")"
  fi
  echo $USER_REPO | awk -F'/' '{print $2}' | grep -q '^' || printf_exit "Usage:"
  GITCOMMIT_EXITCODE=0
  printf_exit "$USER"/"$REPO"
  curl -q -LSs -X PATCH -H "Accept: application/vnd.github.v3+json" \
    -H "Authorization: token $GITCOMMIT_GITHUB_TOKEN" "https://api.github.com/repos/$USER_REPO" \
    -d '{"default_branch":"'$branch'"}' &>/dev/null || GITCOMMIT_EXITCODE=1
  return $GITCOMMIT_EXITCODE
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__search() {
  [ -n "$1" ] || printf_exit "Usage: $APPNAME search [query] [optionalPath]"
  printf '\r%b ' "${YELLOW}Searching for $1${NC}"
  results="$(git grep -w -p --cached "$1" $2 | grep '^')"
  printf '\n'
  [ -n "$results" ] && printf_blue "$results" || printf_exit "Your search provided not results"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_random_message() {
  local random_message="$(curl -q -LSsf --max-time 3 "$GITCOMMIT_RANDOM_API_URL" 2>/dev/null || curl -q -LSsf --max-time 3 "$GITCOMMIT_RANDOM_API_BAK_URL" 2>/dev/null || false)"
  if [ -n "$random_message" ]; then
    echo "$random_message"
  else
    echo "Well I did things"
  fi
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_repo_init() {
  __git_dir "$GITCOMMIT_ROOT_DIR"
  __gitignore_init "$GITCOMMIT_ROOT_DIR"
  [ -n "$REMOTE_REPO" ] || REMOTE_REPO="localdir"
  GITCOMMIT_ROOT_DIR="${GITCOMMIT_ROOT_DIR:-$(__git_root "$GITCOMMIT_ROOT_DIR")}"
  [ -f "$GITCOMMIT_VERSION_FILE" ] && GITCOMMIT_VERSION_CURRENT="$(<"$GITCOMMIT_VERSION_FILE")"
  [ -f "$GITCOMMIT_ROOT_DIR/.git/prev_commit_files.txt" ] || touch "$GITCOMMIT_ROOT_DIR/.git/prev_commit_files.txt"
  if [ "$GITCOMMIT_RUN_AMEND" = "true" ]; then
    [ -n "$1" ] && GITCOMMIT_AMEND_MESS="${1:-Amended commit}"
    changelog_message="$GITCOMMIT_AMEND_MESS"
    if [ -f "$GITCOMMIT_ROOT_DIR/.git/prev_commit_files.txt" ]; then
      changed_files="$(<"$GITCOMMIT_ROOT_DIR/.git/prev_commit_files.txt")"
      rm -Rf "$GITCOMMIT_ROOT_DIR/.git/prev_commit_files.txt"
    fi
    git commit --amend -m "➕ $GITCOMMIT_AMEND_MESS ➕ "
    git push --force &>/dev/null
    exit $?
  fi
  if [ ! -f "$GITCOMMIT_ROOT_DIR/.git/.init" ]; then
    if [ -f "$GITCOMMIT_ROOT_DIR/$GITCOMMIT_MAIN_CONFIG" ] && [ -d "$GITCOMMIT_ROOT_DIR/.git" ]; then
      cp -Rf "$GITCOMMIT_ROOT_DIR/$GITCOMMIT_MAIN_CONFIG" "$GITCOMMIT_ROOT_DIR/.git/config"
      touch "$GITCOMMIT_ROOT_DIR/.git/.init"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_status() { git -C "${1:-.}" status -b -s 2>/dev/null && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_log() { git -C "${1:-.}" log --pretty='%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)' 2>/dev/null && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__is_clean() { __git_status "$1" | grep -v '##' | grep -q '^' && return 1 || return 0; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__is_dirty() { __git_status "$1" | grep -v '##' | grep -q '^' && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__git_remote_push() {
  git -C "${1:-${GITCOMMIT_ROOT_DIR:-.}}" remote -v 2>/dev/null | grep 'push' | grep -E 'http://|https://|git://|ssh://' | head -n 1 | awk '{print $2}' 2>/dev/null | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__github_create_repo() {
  if echo "$1" | grep -q '/'; then
    git_user="$(echo "$1" | awk -F '/' '{print $(NF-1)}')"
    git_repo="$(echo "$1" | awk -F '/' '{print $NF}')"
  elif [ $# -eq 2 ]; then
    git_user="$1"
    git_repo="$2"
  else
    return 1
  fi
  __cmd_exists gitadmin || return 1
  __github_api_repo_verify "$git_user" "$git_repo" || gitadmin create "$git_user" "$git_repo" | grep -qi 'Success:'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__github_api_repo_verify() {
  curl -q -LSsf -X GET -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITCOMMIT_GITHUB_TOKEN}" "https://api.github.com/repos/${1}/${2}" 2>/dev/null | jq -r '.html_url' 2>/dev/null | grep -qF "${1}/${2}" &>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GITCOMMIT_CONFIG_FILE="${GITCOMMIT_CONFIG_FILE:-settings.conf}"
GITCOMMIT_CONFIG_DIR="${GITCOMMIT_CONFIG_DIR:-$HOME/.config/myscripts/gitcommit}"
GITCOMMIT_CONFIG_BACKUP_DIR="${GITCOMMIT_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gitcommit/backups}"
GITCOMMIT_LOG_DIR="${GITCOMMIT_LOG_DIR:-$HOME/.local/log/gitcommit}"
GITCOMMIT_TEMP_DIR="${GITCOMMIT_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gitcommit}"
GITCOMMIT_CACHE_DIR="${GITCOMMIT_CACHE_DIR:-$HOME/.cache/gitcommit}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GITCOMMIT_OUTPUT_COLOR_1="${GITCOMMIT_OUTPUT_COLOR_1:-33}"
GITCOMMIT_OUTPUT_COLOR_2="${GITCOMMIT_OUTPUT_COLOR_2:-5}"
GITCOMMIT_OUTPUT_COLOR_GOOD="${GITCOMMIT_OUTPUT_COLOR_GOOD:-2}"
GITCOMMIT_OUTPUT_COLOR_ERROR="${GITCOMMIT_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GITCOMMIT_NOTIFY_ENABLED="${GITCOMMIT_NOTIFY_ENABLED:-yes}"
GITCOMMIT_GOOD_NAME="${GITCOMMIT_GOOD_NAME:-Great:}"
GITCOMMIT_ERROR_NAME="${GITCOMMIT_ERROR_NAME:-Error:}"
GITCOMMIT_GOOD_MESSAGE="${GITCOMMIT_GOOD_MESSAGE:-No errors reported}"
GITCOMMIT_ERROR_MESSAGE="${GITCOMMIT_ERROR_MESSAGE:-Errors were reported}"
GITCOMMIT_NOTIFY_CLIENT_NAME="${GITCOMMIT_NOTIFY_CLIENT_NAME:-$APPNAME}"
GITCOMMIT_NOTIFY_CLIENT_ICON="${GITCOMMIT_NOTIFY_CLIENT_ICON:-notification-new}"
GITCOMMIT_NOTIFY_CLIENT_URGENCY="${GITCOMMIT_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GITCOMMIT_NO_CONFIRM="${GITCOMMIT_NO_CONFIRM:-true}"
GITCOMMIT_PROJECT_DIR="${GIT_PROJECT_DIR:-$HOME/Projects}"
GITCOMMIT_VERSION_FILE="${GIT_VERSION_FILE:-version.txt}"
GITCOMMIT_MAIN_CONFIG="${GITCOMMIT_MAIN_CONFIG:-gitmainconfig}"
GITCOMMIT_VERSION_FORMAT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
GITCOMMIT_RELEASE_FORMAT="${GITCOMMIT_RELEASE_FORMAT:-%Y.%m.%d}"
GITCOMMIT_ERROR_LOG="${GITCOMMIT_ERROR_LOG:-$GITCOMMIT_LOG_DIR/error.log}"
GITCOMMIT_RANDOM_API_URL="${GITCOMMIT_RANDOM_API_URL:-https://api.casjay.vercel.app/api/v1/commit}"
GITCOMMIT_RANDOM_API_BAK_URL="${GITCOMMIT_RANDOM_API_BAK_URL:-https://commitment-6jyr.onrender.com/txt}"
GITCOMMIT_GITHUB_TOKEN="${GITCOMMIT_GITHUB_TOKEN:-$GITHUB_ACCESS_TOKEN}"
GITCOMMIT_SILENT="${GITCOMMIT_SILENT:-true}"
GITCOMMIT_CHANGELOG_FILE_NAME="${GITCOMMIT_CHANGELOG_FILE_NAME:-CHANGELOG.md}"
GITCOMMIT_CHANGELOG_ICON="${GITCOMMIT_CHANGELOG_ICON:-🚀}"
GITCOMMIT_DEFAULT_COMMIT_FILE="${GITCOMMIT_DEFAULT_COMMIT_FILE:-.git/COMMIT_MESS}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE" ] && . "$GITCOMMIT_CONFIG_DIR/$GITCOMMIT_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GITCOMMIT_LOG_DIR" ] || mkdir -p "$GITCOMMIT_LOG_DIR" |& __devnull
[ -d "$GITCOMMIT_TEMP_DIR" ] || mkdir -p "$GITCOMMIT_TEMP_DIR" |& __devnull
[ -d "$GITCOMMIT_CACHE_DIR" ] || mkdir -p "$GITCOMMIT_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GITCOMMIT_TEMP_FILE="${GITCOMMIT_TEMP_FILE:-$(mktemp $GITCOMMIT_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GITCOMMIT_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GITCOMMIT_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GITCOMMIT_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GITCOMMIT_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GITCOMMIT_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GITCOMMIT_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions
GITCOMMIT_GITHUB_TOKEN="${GITCOMMIT_GITHUB_TOKEN:-$GITHUB_ACCESS_TOKEN}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",mess:,message:,amend,force,all"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="all amend is status log reset branch push init "
ARRAY+="search version files modified updated deleted added renamed changed new "
ARRAY+="improved fixed release deploy docs test breaking refactor performance permissions "
ARRAY+="bugs docker node ruby php perl python scratchpad todo notes blog recipe "
ARRAY+="emojify random notes blog emojify random custom tag tar spelling "
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GITCOMMIT_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GITCOMMIT_CWD="$2"
    [ -d "$GITCOMMIT_CWD" ] || mkdir -p "$GITCOMMIT_CWD" |& __devnull
    shift 2
    ;;
  -m | --mess | --message)
    shift 1
    GITCOMMIT_MESSAGE_SHORT="$2"
    shift 1
    ;;
  --amend)
    shift 1
    GITCOMMIT_RUN_AMEND="true"
    ;;
  --force)
    FORCE_PUSH="true"
    shift 1
    ;;
  --all)
    shift 1
    GITCOMMIT_EVERYTHING="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GITCOMMIT_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GITCOMMIT_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
[ -d "$1" ] && __is_an_option "$1" && GITCOMMIT_CWD="$1" && shift 1 || GITCOMMIT_CWD="${GITCOMMIT_CWD:-$PWD}"
GITCOMMIT_CWD="$(realpath "${GITCOMMIT_CWD:-$PWD}" 2>/dev/null)"
if [ -d "$GITCOMMIT_CWD" ] && cd "$GITCOMMIT_CWD"; then
  true
# if [ "$GITCOMMIT_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GITCOMMIT_CWD"
# fi
else
  printf_exit "💔 $GITCOMMIT_CWD does not exist 💔"
fi
export GITCOMMIT_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
GITCOMMIT_RAN=""
GITCOMMIT_CWD="${GITCOMMIT_CWD:-$PWD}"
GITCOMMIT_ROOT_DIR="$(__git_root "$GITCOMMIT_CWD" || echo "$GITCOMMIT_CWD")"
REMOTE_REPO="$(__git_remote_fetch "$GITCOMMIT_ROOT_DIR")"
BASE_DIR="$(basename $GITCOMMIT_ROOT_DIR)"
GIT_USERNAME="$(basename -- "$(dirname "$GITCOMMIT_ROOT_DIR")")"
GIT_VERSION="$GITCOMMIT_VERSION_FORMAT"
GIT_PROJECT_DIR="$GITCOMMIT_PROJECT_DIR"
GITADMIN_NO_ERROR="true"
GITADMIN_NO_ERROR_MESSAGE=""
GITCOMMIT_MESSAGE_FILE="$GITCOMMIT_ROOT_DIR/$GITCOMMIT_DEFAULT_COMMIT_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
amend)
  shift 1
  GITCOMMIT_AMEND="true"
  ;;
esac

case "$1" in
s | status)
  shift 1
  __git_status "$GITCOMMIT_ROOT_DIR"
  exit $?
  ;;

l | log)
  shift 1
  __git_log "$GITCOMMIT_ROOT_DIR"
  exit $?
  ;;

# repo status is? clean,dirty
is)
  shift 1
  case "$1" in
  # returns 1 if repo changed
  clean)
    shift 1
    __is_clean "${1:-$GITCOMMIT_ROOT_DIR}"
    exit $?
    ;;
    # returns 0 if repo changed
  dirty)
    shift 1
    __is_dirty "${1:-$GITCOMMIT_ROOT_DIR}"
    exit $?
    ;;
    # same as clean
  *)
    __is_clean "${1:-$GITCOMMIT_ROOT_DIR}"
    exit $?
    ;;
  esac
  ;;

search)
  shift 1
  __search "$1" "$2"
  ;;

init)
  shift 1
  set_action="🏠"
  set_icon="🏠"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT:-Initial commit}"
  __git_init "${GITCOMMIT_MESSAGE_SHORT:-}"
  ;;

setup)
  shift 1
  if [ "$1" = "all" ]; then
    shift 1
    GITCOMMIT_CWD="${1:-${GITCOMMIT_CWD:-$PWD}}"
    repos="$(ls -A "$GITCOMMIT_CWD" | sort -ru)"
    for repo in $repos; do
      if [ -d "$GITCOMMIT_CWD/$repo/.git" ]; then
        gitadmin --dir "$GITCOMMIT_CWD/$repo" setup --automated
      fi
    done
  elif [ "$1" = "org" ]; then
    shift 1
    GITCOMMIT_CWD="${1:-${GITCOMMIT_CWD:-$PWD}}"
    repos="$(ls -A "$GITCOMMIT_CWD" | sort -ru)"
    for repo in $repos; do
      if [ -d "$GITCOMMIT_CWD/$repo/.git" ]; then
        gitadmin --dir "$GITCOMMIT_CWD/$repo" setup --automated
      fi
    done
  else
    gitadmin --dir "$GITCOMMIT_CWD" setup "$@"
  fi
  exit $?
  ;;

reset)
  shift 1
  printf_read_question "3" "Should I reset? [y/n]" "1" "git_reset"
  if printf_answer_yes "$git_reset"; then
    git -C "$GITCOMMIT_ROOT_DIR" reset --hard
  else
    printf_return "Not resetting: user aborted"
  fi
  exit $?
  ;;

tag)
  shift 1
  case "$1" in
  add)
    shift 1
    [ $# -ne 0 ] || printf_exit "$APPNAME tag add [tag] [message]"
    if __git_tag_add "$@"; then
      printf_blue "Tag has been add to your project"
    else
      printf_return "Failed to add the to your project"
    fi
    exit
    ;;
  remove)
    shift 1
    [ $# -ne 0 ] || printf_exit "$APPNAME tag remove [tag]"
    if __git_tag_del "$@"; then
      printf_green "The tag ha been deleted from your project"
    else
      printf_return "Failed to delete the tag from your project"
    fi
    exit
    ;;
  esac
  ;;
tar)
  shift 1
  __tar_release "$@"
  ;;

branch)
  shift 1
  __rename_branch "${1:-master}" "${2:-main}" $3 $4
  exit $?
  ;;

pull)
  shift 1
  __git_custom_pull "$GITCOMMIT_ROOT_DIR"
  exit $?
  ;;

push)
  shift 1
  __git_custom_push "$GITCOMMIT_ROOT_DIR"
  exit $?
  ;;

version)
  shift 1
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  __write_version
  __set_version --force
  __run_push "$GITCOMMIT_ROOT_DIR" --automated
  exit $?
  ;;

all)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME all [message]"
  set_action="🗃️"
  set_icon="🗃️"
  changelog_message="All"
  GITCOMMIT_MESSAGE_SHORT="${*:-Committing everything that changed}"
  repo_has_changed="$(__changed_files message)"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __commit_custom "."
  ;;

restored)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME restored [message]"
  set_action="🗃️"
  set_icon="🗃️"
  prepend_name="Restored"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-Committing restored files}}"
  repo_has_changed="$(__changed_files all)"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __commit_custom "."
  ;;

files)
  shift
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME files"
  set_action="🗃️"
  set_icon="🗃️"
  changelog_message="File"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-Committing all file changes}}"
  repo_has_changed="$(__changed_files deleted added modified)"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_del "$(printf '%b\n' "$GITCOMMIT_MESSAGE_SHORT")" || exitCode=$((${exitCode:-0} + 1))
  __git_add "$(printf '%b\n' "$GITCOMMIT_MESSAGE_SHORT")" || exitCode=$((${exitCode:-0} + 1))
  __git_mod "$(printf '%b\n' "$GITCOMMIT_MESSAGE_SHORT")" || exitCode=$((${exitCode:-0} + 1))
  __run_push
  exit ${exitCode:-0}
  ;;

modified)
  shift
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME modified"
  set_action="🗃️"
  set_icon="🗃️"
  prepend_name="Modified"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_mod "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

updated)
  shift
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME updated"
  set_action="📁"
  set_icon="📁"
  prepend_name="Updated"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

deleted)
  shift
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME deleted"
  set_action="➖"
  set_icon="➖"
  prepend_name="Deleted"
  repo_has_changed="$(__changed_files deleted)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been deleted 😿"
  __git_del "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

added)
  shift
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME added"
  set_action="➕"
  set_icon="➕"
  prepend_name="Added"
  repo_has_changed="$(__changed_files added)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been added 😿"
  __git_add "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

renamed)
  shift 1
  [ $# -ne 2 ] && printf_exit "Usage: $APPNAME renamed oldfile newfile"
  set_action="✔️"
  set_icon="✔️"
  prepend_name="Renamed"
  repo_has_changed="$(__changed_files renamed)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || [ $# -eq 2 ] || printf_exit "😿 No files have been renamed 😿"
  __git_renamed "$1" "$2" "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

changed)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME changed filename[s]"
  set_action="✔️"
  set_icon="✔️"
  prepend_name="Changed"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been changed 😿"
  __git_mod "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

spelling)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME changed filename[s]"
  set_action="⚔️"
  set_icon="⚔️"
  prepend_name="Fixed spelling"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_mod "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

new)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME new filename[s]"
  set_action="🆕"
  set_icon="🆕"
  prepend_name="New"
  repo_has_changed="$(__changed_files added)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been added 😿"
  __git_add "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

improved)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME improved filename[s]"
  set_action="👌"
  set_icon="👌"
  prepend_name="IMPROVE"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been improved 😿"
  __git_mod "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

fixed | fixes)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME fixed filename[s]"
  set_action="✔️"
  set_icon="✔️"
  prepend_name="FIXED"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_mod "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

release)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME release filename[s]"
  set_action="🚀"
  set_icon="🚀"
  prepend_name="RELEASE"
  repo_has_changed="$(__changed_files deleted added modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been changed 😿"
  __set_version
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

deploy)
  shift
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME deploy"
  set_action="📃"
  set_icon="📃"
  prepend_name="Deployed"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __write_version
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

docs)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME docs filename[s]"
  set_action="📖"
  set_icon="📖"
  prepend_name="Docs"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

test)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME test filename[s]"
  set_action="🤖"
  set_icon="🤖"
  prepend_name="TEST"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

breaking)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME breaking filename[s]"
  set_action="⚒️"
  set_icon="⚒️"
  prepend_name="BREAKING"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

refactor)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME refactor filename[s]"
  set_action="〰️"
  set_icon="〰️"
  prepend_name="Refactor Code"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

performance)
  shift 1
  [ "$1" = "help" ] && printf_exit "Usage: $APPNAME performance filename[s]"
  set_action="🚤"
  set_icon="🚤"
  prepend_name="Performance boost"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

permission | permissions)
  shift 1
  set_action="❗"
  set_icon="❗"
  prepend_name="Fixed Permissions"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

bug | bugs)
  shift 1
  set_action="🐛"
  set_icon="🐛"
  prepend_name="Bug Fixes"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

alot)
  shift 1
  set_action="🏠"
  set_icon="🏠"
  prepend_name="Fixes and Updates"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

docker)
  shift 1
  set_action="❇"
  set_icon="❇"
  prepend_name="Added Docker Workflow"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

node)
  shift 1
  set_action="🦈"
  set_icon="🦈"
  prepend_name="Added nodejs Workflow"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

ruby)
  shift 1
  set_action="🐜"
  set_icon="🐜"
  prepend_name="Added ruby Workflow"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

php)
  shift 1
  set_action="🦈"
  set_icon="🦈"
  prepend_name="Added php Workflow"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

perl)
  shift 1
  set_action="🦈"
  set_icon="🦈"
  prepend_name="Added perl Workflow"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

python)
  shift 1
  set_action="🦈"
  set_icon="🦈"
  prepend_name="Added python Workflow"
  repo_has_changed="$(__changed_files modified)"
  GITCOMMIT_MESSAGE_SHORT="${*:-$GITCOMMIT_MESSAGE_SHORT}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __git_updated "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

scratchpad)
  shift 1
  set_action="📓"
  set_icon="📓"
  prepend_name="Scratchpad"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-Modified my scratchpad}}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action --add-all-files "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

todo)
  shift 1
  set_action="📓"
  set_icon="📓"
  prepend_name="TODO"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-Modified my todo list}}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action --add-all-files "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

notes)
  shift 1
  set_action="📓"
  set_icon="📓"
  prepend_name="Notes"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-Modified my notes}}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action --add-all-files "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

blog)
  shift 1
  set_action="🐜"
  set_icon="🐜"
  prepend_name="Blog"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-New post}}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

recipe)
  shift 1
  set_action="🍕"
  set_icon="🍕"
  prepend_name="Recipes"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-Updated my recipes}}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

random)
  shift 1
  set_action="⬅️"
  set_icon="⬅️"
  prepend_name="Random"
  set_message="$(__get_random_message)"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-$set_message}}"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action "--add-all-files" "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

emj | emojy | emojify)
  shift 1
  set_action="${setemj:-🐜}"
  set_icon="${setemj:-🐜}"
  repo_has_changed="$(__changed_files all)"
  GITCOMMIT_MESSAGE_SHORT="$(printf '%b\n' "${*:-$GITCOMMIT_MESSAGE_SHORT}" | __emj_check)"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __cmd_exists emojify && setemj="$(emojify "$(printf '%b\n' "$GITCOMMIT_MESSAGE_SHORT")")"
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  __run_push
  exit $?
  ;;

custom)
  shift 1
  GITCOMMIT_MESSAGE_SHORT="${1:-${GITCOMMIT_MESSAGE_SHORT:-$GITCOMMIT_DEFAULT_MESSAGE}}"
  if [ -n "$GITCOMMIT_MESSAGE_SHORT" ]; then
    prepend_name=""
    repo_has_changed="$(__changed_files all)"
    [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
    __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
    __run_push
  else
    printf_exit "You must specify your commit message"
  fi
  exit $?
  ;;

*)
  [ $# -ne 0 ] || printf_exit "Usage: $APPNAME [option] [message]"
  GITCOMMIT_MESSAGE_SHORT="${*:-${GITCOMMIT_MESSAGE_SHORT:-$GITCOMMIT_DEFAULT_MESSAGE}}"
  shift $#
  if [ -n "$GITCOMMIT_MESSAGE_SHORT" ]; then
    [ "${#GITCOMMIT_MESSAGE_SHORT}" -gt "4" ] || printf_exit "Message must be longer than 4 characters"
  fi
  repo_has_changed="$(__changed_files all)"
  [ -n "$repo_has_changed" ] || printf_exit "😿 No files have been modified in $GITCOMMIT_ROOT_DIR 😿"
  __default_git_action "$GITCOMMIT_MESSAGE_SHORT"
  ;;
esac
#
if __git_porcelain "$GITCOMMIT_ROOT_DIR"; then
  if [ -z "$GITCOMMIT_RAN" ]; then
    [ "$GITADMIN_NO_ERROR_MESSAGE" = "true" ] || printf_red "There are no changes to commit in ${BASE_DIR}"
    export PUSH_ENABLE="no"
    false
  fi
else
  if [ -z "$GITCOMMIT_MESSAGE_SHORT" ]; then
    if [ -z "$GITCOMMIT_RAN" ]; then
      __gitcommit "🐜 Fixes and Updates 🐜 "
      GITCOMMIT_EXITCODE=0 || GITCOMMIT_EXITCODE=1
    else
      GITCOMMIT_EXITCODE=1
    fi
  else
    if [ -z "$GITCOMMIT_RAN" ]; then
      __gitcommit "$GITCOMMIT_MESSAGE_SHORT" && GITCOMMIT_EXITCODE=0 || GITCOMMIT_EXITCODE=1
    else
      GITCOMMIT_EXITCODE=1
    fi
  fi
  if [ -n "$exitCode" ] && [ -n "$GITCOMMIT_EXITCODE" ]; then
    exitCode=$(($exitCode + $GITCOMMIT_EXITCODE))
  else
    exitCode="${exitCode:-0}"
  fi
fi
#
__run_push && exitCode=${exitCode:-0} || exitCode=1
printf_newline
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
