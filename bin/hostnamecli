#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208102023-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  hostnamecli --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Wednesday, Aug 10, 2022 20:23 EDT
# @@File             :  hostnamecli
# @@Description      :  Set system hostname
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208102023-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
HOSTNAMECLI_REQUIRE_SUDO="${HOSTNAMECLI_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE"
  fi
  [ -d "$HOSTNAMECLI_CONFIG_DIR" ] || mkdir -p "$HOSTNAMECLI_CONFIG_DIR"
  [ -d "$HOSTNAMECLI_CONFIG_BACKUP_DIR" ] || mkdir -p "$HOSTNAMECLI_CONFIG_BACKUP_DIR"
  [ -f "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE" ] &&
    cp -Rf "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE" "$HOSTNAMECLI_CONFIG_BACKUP_DIR/$HOSTNAMECLI_CONFIG_FILE.$$"
  cat <<EOF >"$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE"
# Settings for hostnamecli

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
HOSTNAMECLI_OUTPUT_COLOR_1="${HOSTNAMECLI_OUTPUT_COLOR_1:-}"
HOSTNAMECLI_OUTPUT_COLOR_2="${HOSTNAMECLI_OUTPUT_COLOR_2:-}"
HOSTNAMECLI_OUTPUT_COLOR_GOOD="${HOSTNAMECLI_OUTPUT_COLOR_GOOD:-}"
HOSTNAMECLI_OUTPUT_COLOR_ERROR="${HOSTNAMECLI_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
HOSTNAMECLI_NOTIFY_ENABLED="${HOSTNAMECLI_NOTIFY_ENABLED:-}"
HOSTNAMECLI_GOOD_NAME="${HOSTNAMECLI_GOOD_NAME:-}"
HOSTNAMECLI_ERROR_NAME="${HOSTNAMECLI_ERROR_NAME:-}"
HOSTNAMECLI_GOOD_MESSAGE="${HOSTNAMECLI_GOOD_MESSAGE:-}"
HOSTNAMECLI_ERROR_MESSAGE="${HOSTNAMECLI_ERROR_MESSAGE:-}"
HOSTNAMECLI_NOTIFY_CLIENT_NAME="${HOSTNAMECLI_NOTIFY_CLIENT_NAME:-}"
HOSTNAMECLI_NOTIFY_CLIENT_ICON="${HOSTNAMECLI_NOTIFY_CLIENT_ICON:-}"
HOSTNAMECLI_NOTIFY_CLIENT_URGENCY="${HOSTNAMECLI_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  remove,full,domain,short
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "hostnamecli:  Set system hostname - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: hostnamecli [options] [commands]"
  __printf_line "full                            - Show full information"
  __printf_line "short                           - show hostname"
  __printf_line "domain                          - Show domain"
  __printf_line "-r, --remove                    - Remove the cached files"
  __printf_line "-f, --full                      - Show full hostname.domainname"
  __printf_line "-s, --short                     - Show the hostname"
  __printf_line "-d, --domain                    - Show domain name"
  __printf_line "-I, --                          - Show the IP address"
  __printf_line "-S, --                          - Save the settings"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$HOSTNAMECLI_REQUIRE_SUDO" = "yes" ] && [ -z "$HOSTNAMECLI_REQUIRE_SUDO_RUN" ]; then
    export HOSTNAMECLI_REQUIRE_SUDO="no"
    export HOSTNAMECLI_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$HOSTNAMECLI_TEMP_FILE" ] && rm -Rf "$HOSTNAMECLI_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__hostname_check() {
  [ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"
  __cmd_exists hostname || ln -sf "$0" "$HOME/.local/bin/hostname"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__hostname() {
  local hostnamecli hostnamecmd hostnamefcmd hostnamescmd hostnamedcmd PATH
  PATH="$SCRIPT_SRC_DIR:/usr/bin:/usr/sbin:/bin:/sbin"
  if [ -f "$(type -P hostname 2>/dev/null)" ]; then
    hostnamecli="$(type -P hostname 2>/dev/null)"
    hostnamecmd="$($hostnamecli "-f" | grep '^')"
    hostnamefcmd="$($hostnamecli "-f" | grep '^')"
    hostnamescmd="$($hostnamecli "-s" | grep '^')"
    if echo "$hostnamecmd" | grep -qv '.*\.' || [[ "$hostnamecmd" =~ .local$ ]]; then
      hostnamedcmd="local"
    else
      hostnamedcmd="$($hostnamecli "-d" 2>/dev/null | grep '^')"
    fi
    [[ -n "$hostnamedcmd" ]] || hostnamedcmd="local"
    [ -f "$HOSTNAMECLI_CACHE_DIR/name" ] || printf '%s\n' "$hostnamecmd" >"$HOSTNAMECLI_CACHE_DIR/name"
    [ -f "$HOSTNAMECLI_CACHE_DIR/full" ] || printf '%s\n' "$hostnamefcmd" >"$HOSTNAMECLI_CACHE_DIR/full"
    [ -f "$HOSTNAMECLI_CACHE_DIR/short" ] || printf '%s\n' "$hostnamescmd" >"$HOSTNAMECLI_CACHE_DIR/short"
    [ -f "$HOSTNAMECLI_CACHE_DIR/domain" ] || printf '%s\n' "$hostnamedcmd" >"$HOSTNAMECLI_CACHE_DIR/domain"
    $hostnamecli "$@" 2>/dev/null | grep '^'
  elif [ -f "$(type -P hostnamectl 2>/dev/null)" ]; then
    shift $#
    hostnamecli="$(type -P hostnamectl)"
    hostnamecmd="$($hostnamecli | grep 'hostname:' | grep -v '^n/a' | awk -F ':' '{print $2}' 2>/dev/null | sed 's| ||g' | grep '^')"
    hostnamefcmd="$($hostnamecli | grep 'hostname:' | grep -v '^n/a' | awk -F ':' '{print $2}' 2>/dev/null | sed 's| ||g' | grep '^')"
    hostnamescmd="$($hostnamecli | grep 'hostname:' | grep -v '^n/a' | awk -F ':' '{print $2}' 2>/dev/null | sed 's| ||g' | sed 's#\..*##g' 2>/dev/null | grep '^')"
    if echo "$hostnamecmd" | grep -qv '.*\.' || [[ "$hostnamecmd" =~ .local$ ]]; then
      hostnamedcmd="local"
    else
      hostnamedcmd="$($hostnamecli 2>/dev/null | grep 'hostname:' | awk -F': ' '{print $2}' | sed "s|${HOSTNAME/.*/}.||g" | grep '^')"
    fi
    [[ -n "$hostnamedcmd" ]] || hostnamedcmd="local"
    [ -f "$HOSTNAMECLI_CACHE_DIR/name" ] || printf '%s\n' "$hostnamecmd" >"$HOSTNAMECLI_CACHE_DIR/name"
    [ -f "$HOSTNAMECLI_CACHE_DIR/full" ] || printf '%s\n' "$hostnamefcmd" >"$HOSTNAMECLI_CACHE_DIR/full"
    [ -f "$HOSTNAMECLI_CACHE_DIR/short" ] || printf '%s\n' "$hostnamescmd" >"$HOSTNAMECLI_CACHE_DIR/short"
    [ -f "$HOSTNAMECLI_CACHE_DIR/domain" ] || printf '%s\n' "$hostnamedcmd" >"$HOSTNAMECLI_CACHE_DIR/domain"
    $hostnamecli 2>/dev/null | grep 'hostname:' | grep -v '^n/a' | awk '{print $3}' | grep '^'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__remove_files() {
  [ ! -f "$HOSTNAMECLI_CACHE_DIR/name" ] || rm -Rf "$HOSTNAMECLI_CACHE_DIR/name"
  [ ! -f "$HOSTNAMECLI_CACHE_DIR/full" ] || rm -Rf "$HOSTNAMECLI_CACHE_DIR/full"
  [ ! -f "$HOSTNAMECLI_CACHE_DIR/short" ] || rm -Rf "$HOSTNAMECLI_CACHE_DIR/short"
  [ ! -f "$HOSTNAMECLI_CACHE_DIR/domain" ] || rm -Rf "$HOSTNAMECLI_CACHE_DIR/domain"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_ip_addr() {
  if type -P route &>/dev/null || type -P ip &>/dev/null; then
    if [[ "$OSTYPE" =~ ^darwin ]]; then
      NETDEV="$(route get default 2>/dev/null | grep interface | awk '{print $2}')"
    else
      NETDEV="$(ip route 2>/dev/null | grep default | sed -e "s/^.*dev.//" -e "s/.proto.*//" | awk '{print $1}')"
    fi
    if type -P ifconfig &>/dev/null; then
      CURRENT_IP_4="$(/sbin/ifconfig $NETDEV 2>/dev/null | grep -E "venet|inet" | grep -v "127.0.0." | grep 'inet' | grep -v inet6 | awk '{print $2}' | sed s/addr://g | head -n1)"
      CURRENT_IP_6="$(/sbin/ifconfig $NETDEV 2>/dev/null | grep -E "venet|inet" | grep 'inet6' | grep -i global | awk '{print $2}' | head -n1)"
    else
      CURRENT_IP_4="$(ip addr | grep inet 2>/dev/null | grep -vE "127|inet6" | tr '/' ' ' | awk '{print $2}' | head -n 1)"
      CURRENT_IP_6="$(ip addr | grep inet6 2>/dev/null | grep -v "::1/" -v | tr '/' ' ' | awk '{print $2}' | head -n 1)"
    fi
  else
    NETDEV="lo"
    CURRENT_IP_4="127.0.0.1"
    CURRENT_IP_6="::1"
  fi
  NETDEV="${NETDEV:-lo}"
  CURRENT_IP_4="${CURRENT_IP_4:-127.0.0.1}"
  CURRENT_IP_6="${CURRENT_IP_6:-}"
  CURRENT_IP_4="$(ip addr | grep -w inet | grep -E 'en|eth|wlan' | grep -vE '127.*/8|10.*/*|172.16.*/*|192.168.*/*' | awk -F'/' '{print $1}' | awk '{print $NF}' | head -n 1 | grep '^' || echo "$CURRENT_IP_4")"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_hostnamecli() {
  [ -f "/etc/hostname" ] && hostnamesys="$(</etc/hostname)"
  [ -f "$HOSTNAMECLI_CACHE_DIR/name" ] && hostname="$(<"$HOSTNAMECLI_CACHE_DIR/name")" || hostname="$HOSTNAME"
  [ -f "$HOSTNAMECLI_CACHE_DIR/full" ] && hostnamef="$(<"$HOSTNAMECLI_CACHE_DIR/full")" || hostnamef=""
  [ -f "$HOSTNAMECLI_CACHE_DIR/short" ] && hostnames="$(<"$HOSTNAMECLI_CACHE_DIR/short")" || hostnames=""
  [ -f "$HOSTNAMECLI_CACHE_DIR/domain" ] && hostnamed="$(<"$HOSTNAMECLI_CACHE_DIR/domain")" || hostnamed=""
  hostname="${hostname:-$hostnamesys}"
  case "${OPTS:-$1}" in
  ip)
    [[ -n "$OPTS" ]] || shift 1
    _ip_addr
    if [[ "$1" = "4" ]]; then
      echo "$CURRENT_IP_4"
    elif [[ "$1" = "6" ]]; then
      echo "$CURRENT_IP_6"
    else
      echo "$CURRENT_IP_4"
    fi
    exit
    ;;
  full)
    [[ -n "$OPTS" ]] || shift 1
    { [ -n "$hostnamef" ] && printf '%s\n' "$hostnamef"; } || __hostname "-f"
    exit
    ;;
  short)
    [[ -n "$OPTS" ]] || shift 1
    { [ -n "$hostnames" ] && printf '%s\n' "$hostnames"; } || __hostname "-s"
    exit
    ;;
  domain)
    [[ -n "$OPTS" ]] || shift 1
    { [ -n "$hostnamed" ] && printf '%s\n' "$hostnamed"; } || __hostname "-d"
    exit
    ;;
  save)
    [[ -n "$OPTS" ]] || shift 1
    [[ -n "$1" ]] || printf_exit "Usage: $APPNAME -S fullhostname"
    sudo -n true || printf_exit "Requires sudo"
    grep -shq "$1" /etc/hosts || echo "$1" | sudo tee -p -a /etc/hosts &>/dev/null
    echo "$1" | sudo tee -p /etc/hostname &>/dev/null
    __remove_files &>/dev/null
    printf '%s\n' "$1" >"$HOSTNAMECLI_CACHE_DIR/full"
    exit
    ;;
  *)
    { [ -n "$hostname" ] && printf '%s\n' "$hostname"; } || __hostname "$@"
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
HOSTNAMECLI_CONFIG_FILE="${HOSTNAMECLI_CONFIG_FILE:-settings.conf}"
HOSTNAMECLI_CONFIG_DIR="${HOSTNAMECLI_CONFIG_DIR:-$HOME/.config/myscripts/hostnamecli}"
HOSTNAMECLI_CONFIG_BACKUP_DIR="${HOSTNAMECLI_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/hostnamecli/backups}"
HOSTNAMECLI_LOG_DIR="${HOSTNAMECLI_LOG_DIR:-$HOME/.local/log/hostnamecli}"
HOSTNAMECLI_TEMP_DIR="${HOSTNAMECLI_TEMP_DIR:-$HOME/.local/tmp/system_scripts/hostnamecli}"
HOSTNAMECLI_CACHE_DIR="${HOSTNAMECLI_CACHE_DIR:-$HOME/.cache/hostnamecli}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
HOSTNAMECLI_OUTPUT_COLOR_1="${HOSTNAMECLI_OUTPUT_COLOR_1:-33}"
HOSTNAMECLI_OUTPUT_COLOR_2="${HOSTNAMECLI_OUTPUT_COLOR_2:-5}"
HOSTNAMECLI_OUTPUT_COLOR_GOOD="${HOSTNAMECLI_OUTPUT_COLOR_GOOD:-2}"
HOSTNAMECLI_OUTPUT_COLOR_ERROR="${HOSTNAMECLI_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
HOSTNAMECLI_NOTIFY_ENABLED="${HOSTNAMECLI_NOTIFY_ENABLED:-yes}"
HOSTNAMECLI_GOOD_NAME="${HOSTNAMECLI_GOOD_NAME:-Great:}"
HOSTNAMECLI_ERROR_NAME="${HOSTNAMECLI_ERROR_NAME:-Error:}"
HOSTNAMECLI_GOOD_MESSAGE="${HOSTNAMECLI_GOOD_MESSAGE:-No errors reported}"
HOSTNAMECLI_ERROR_MESSAGE="${HOSTNAMECLI_ERROR_MESSAGE:-Errors were reported}"
HOSTNAMECLI_NOTIFY_CLIENT_NAME="${HOSTNAMECLI_NOTIFY_CLIENT_NAME:-$APPNAME}"
HOSTNAMECLI_NOTIFY_CLIENT_ICON="${HOSTNAMECLI_NOTIFY_CLIENT_ICON:-notification-new}"
HOSTNAMECLI_NOTIFY_CLIENT_URGENCY="${HOSTNAMECLI_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE" ] && . "$HOSTNAMECLI_CONFIG_DIR/$HOSTNAMECLI_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$HOSTNAMECLI_LOG_DIR" ] || mkdir -p "$HOSTNAMECLI_LOG_DIR" |& __devnull
[ -d "$HOSTNAMECLI_TEMP_DIR" ] || mkdir -p "$HOSTNAMECLI_TEMP_DIR" |& __devnull
[ -d "$HOSTNAMECLI_CACHE_DIR" ] || mkdir -p "$HOSTNAMECLI_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HOSTNAMECLI_TEMP_FILE="${HOSTNAMECLI_TEMP_FILE:-$(mktemp $HOSTNAMECLI_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$HOSTNAMECLI_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$HOSTNAMECLI_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$HOSTNAMECLI_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$HOSTNAMECLI_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$HOSTNAMECLI_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$HOSTNAMECLI_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="r,f,s,d,I,S"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,help,options,raw,version,silent,"
LONGOPTS+=",remove,full,domain,short"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="full short domain ip"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    HOSTNAMECLI_SILENT="true"
    ;;
  -r | --remove)
    __remove_files
    [ "$(find "$HOSTNAMECLI_CACHE_DIR" -type f | wc -l)" = 0 ] &&
      printf_exit 2 0 "Removed the files from $HOSTNAMECLI_CACHE_DIR" ||
      printf_exit 1 1 "failed to remove the cache files"
    ;;
  -d | --domain) shift 1 && OPTS=domain ;;
  -s | --short) shift 1 && OPTS=short ;;
  -f | --full) shift 1 && OPTS=full ;;
  -I) shift 1 && OPTS=ip ;;
  -S) shift 1 && OPTS=save ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# HOSTNAMECLI_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# HOSTNAMECLI_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && HOSTNAMECLI_CWD="$1" && shift 1 || HOSTNAMECLI_CWD="${HOSTNAMECLI_CWD:-$PWD}"
HOSTNAMECLI_CWD="$(realpath "${HOSTNAMECLI_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$HOSTNAMECLI_CWD" ] && cd "$HOSTNAMECLI_CWD"; then
# if [ "$HOSTNAMECLI_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $HOSTNAMECLI_CWD"
# fi
# else
# printf_exit "ðŸ’” $HOSTNAMECLI_CWD does not exist ðŸ’”"
# fi
export HOSTNAMECLI_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
if ! echo "$HOSTNAME" | grep '.*\..*\..*'; then
  if [ -f "/etc/hostname" ]; then
    export HOSTNAME="$(<"/etc/hostname")"
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__hostname_check
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_hostnamecli "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
