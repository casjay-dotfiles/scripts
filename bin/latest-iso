#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208121505-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  latest-iso --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Friday, Aug 12, 2022 15:05 EDT
# @@File             :  latest-iso
# @@Description      :  Find and download the latest ISO for a given distro
# @@Changelog        :  Added nixos
# @@TODO             :  Refactor code
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208121505-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
LATEST_ISO_REQUIRE_SUDO="${LATEST_ISO_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | __sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | __sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE"
  fi
  [ -d "$LATEST_ISO_CONFIG_DIR" ] || mkdir -p "$LATEST_ISO_CONFIG_DIR"
  [ -d "$LATEST_ISO_CONFIG_BACKUP_DIR" ] || mkdir -p "$LATEST_ISO_CONFIG_BACKUP_DIR"
  [ -f "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE" ] &&
    cp -Rf "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE" "$LATEST_ISO_CONFIG_BACKUP_DIR/$LATEST_ISO_CONFIG_FILE.$$"
  cat <<EOF >"$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE"
# Settings for latest-iso
LATEST_ISO_DOWNLOAD_DIR="${LATEST_ISO_DOWNLOAD_DIR:-}"
LATEST_ISO_DOWNLOAD_LIVE_DIR="${LATEST_ISO_DOWNLOAD_LIVE_DIR:-}"
LATEST_ISO_DOWNLOAD_UTILS_DIR="${LATEST_ISO_DOWNLOAD_UTILS_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# URLs to ISOs
LATEST_ISO_ALMA_URL="${LATEST_ISO_ALMA_URL:-}"
LATEST_ISO_ALPINE_URL="${LATEST_ISO_ALPINE_URL:-}"
LATEST_ISO_ARCHLINUX_URL="${LATEST_ISO_ARCHLINUX_URL:-}"
LATEST_ISO_ARCHCRAFT_URL="${LATEST_ISO_ARCHCRAFT_URL:-}"
LATEST_ISO_ARCOLINUX_URL="${LATEST_ISO_ARCOLINUX_URL:-}"
LATEST_ISO_CACHYOS_URL="${LATEST_ISO_CACHYOS_URL:-}"
LATEST_ISO_BLACKARCH_URL="${LATEST_ISO_BLACKARCH_URL:-}"
LATEST_ISO_CENTOS_URL="${LATEST_ISO_CENTOS_URL:-}"
LATEST_ISO_DEBIAN_URL="${LATEST_ISO_DEBIAN_URL:-}"
LATEST_ISO_ENDEAVOUR_URL="${LATEST_ISO_ENDEAVOUR_URL:-}"
LATEST_ISO_FEDORA_URL="${LATEST_ISO_FEDORA_URL:-}"
LATEST_ISO_FLATCAR_URL="${LATEST_ISO_FLATCAR_URL:-}"
LATEST_ISO_FREENAS_URL="${LATEST_ISO_FREENAS_URL:-}"
LATEST_ISO_GARUDA_URL="${LATEST_ISO_GARUDA_URL:-}"
LATEST_ISO_HEADS_URL="${LATEST_ISO_HEADS_URL:-}"
LATEST_ISO_KALI_URL="${LATEST_ISO_KALI_URL:-}"
LATEST_ISO_MANJARO_FLAVOR="${LATEST_ISO_MANJARO_FLAVOR:-}"
LATEST_ISO_OPENSUSE_URL="${LATEST_ISO_OPENSUSE_URL:-}"
LATEST_ISO_OPENVZ_URL="${LATEST_ISO_OPENVZ_URL:-}"
LATEST_ISO_PARROT_URL="${LATEST_ISO_PARROT_URL:-}"
LATEST_ISO_PEPPERMINT_URL="${LATEST_ISO_PEPPERMINT_URL:-}"
LATEST_ISO_PFSENSE_URL="${LATEST_ISO_PFSENSE_URL:-}"
LATEST_ISO_PHOTON_URL="${LATEST_ISO_PHOTON_URL:-}"
LATEST_ISO_PROXMOX_URL="${LATEST_ISO_PROXMOX_URL:-}"
LATEST_ISO_REDCORE_URL="${LATEST_ISO_REDCORE_URL:-}"
LATEST_ISO_ROCKY_URL="${LATEST_ISO_ROCKY_URL:-}"
LATEST_ISO_UBUNTU_URL="${LATEST_ISO_UBUNTU_URL:-}"
LATEST_ISO_VOID_URL="${LATEST_ISO_VOID_URL:-}"
LATEST_ISO_TAILS_URL="${LATEST_ISO_TAILS_URL:-}"
LATEST_ISO_TINYCORE_URL="${LATEST_ISO_TINYCORE_URL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LATEST_ISO_ALMA_RELEASE="${LATEST_ISO_ALMA_RELEASE:-}"
LATEST_ISO_ALPINE_RELEASE="${LATEST_ISO_ALPINE_RELEASE:-}"
LATEST_ISO_ENDEAVOUR_RELEASE="${LATEST_ISO_ENDEAVOUR_RELEASE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LATEST_ISO_VOID_FLAVOR="${LATEST_ISO_VOID_FLAVOR:-xfce}"
LATEST_ISO_KALI_FLAVOR="${LATEST_ISO_KALI_FLAVOR:-live}"
LATEST_ISO_RHEL_FLAVOR="${LATEST_ISO_RHEL_FLAVOR:-minimal}"
LATEST_ISO_ALMA_FLAVOR="${LATEST_ISO_ALMA_FLAVOR:-minimal}"
LATEST_ISO_FEDORA_FLAVOR="${LATEST_ISO_FEDORA_FLAVOR:-xfce}"
LATEST_ISO_GARUDA_FLAVOR="${LATEST_ISO_GARUDA_FLAVOR:-xfce}"
LATEST_ISO_ROCKY_FLAVOR="${LATEST_ISO_ROCKY_FLAVOR:-minimal}"
LATEST_ISO_MANJARO_FLAVOR="${LATEST_ISO_MANJARO_FLAVOR:-xfce}"
LATEST_ISO_PARROT_FLAVOR="${LATEST_ISO_PARROT_FLAVOR:-security}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
LATEST_ISO_OUTPUT_COLOR_1="${LATEST_ISO_OUTPUT_COLOR_1:-}"
LATEST_ISO_OUTPUT_COLOR_2="${LATEST_ISO_OUTPUT_COLOR_2:-}"
LATEST_ISO_OUTPUT_COLOR_GOOD="${LATEST_ISO_OUTPUT_COLOR_GOOD:-}"
LATEST_ISO_OUTPUT_COLOR_ERROR="${LATEST_ISO_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
LATEST_ISO_NOTIFY_ENABLED="${LATEST_ISO_NOTIFY_ENABLED:-}"
LATEST_ISO_GOOD_NAME="${LATEST_ISO_GOOD_NAME:-}"
LATEST_ISO_ERROR_NAME="${LATEST_ISO_ERROR_NAME:-}"
LATEST_ISO_GOOD_MESSAGE="${LATEST_ISO_GOOD_MESSAGE:-}"
LATEST_ISO_ERROR_MESSAGE="${LATEST_ISO_ERROR_MESSAGE:-}"
LATEST_ISO_NOTIFY_CLIENT_NAME="${LATEST_ISO_NOTIFY_CLIENT_NAME:-}"
LATEST_ISO_NOTIFY_CLIENT_ICON="${LATEST_ISO_NOTIFY_CLIENT_ICON:-}"
LATEST_ISO_NOTIFY_CLIENT_URGENCY="${LATEST_ISO_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "latest-iso:  Find and download the latest ISO for a given distro - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: latest-iso [options] [commands]"
  __printf_line "iso [url] [name.iso]            - Set custom iso url and iso name"
  __printf_line "alma                            - Download almalinux"
  __printf_line "alpine                          - Download alpinelinux"
  __printf_line "arch                            - Download archlinux"
  __printf_line "archcraft                       - Download archcraft"
  __printf_line "arco                            - Download arcolinux"
  __printf_line "blackarch                       - Download blackarch"
  __printf_line "cachy                           - Download cachylinux"
  __printf_line "centos                          - Download centos"
  __printf_line "clear                           - Download clearlinux"
  __printf_line "debian                          - Download debian"
  __printf_line "endeavour                       - Download endeavour"
  __printf_line "fedora                          - Download fedora"
  __printf_line "flatcar                         - Download flatcar"
  __printf_line "freenas                         - Download freenas"
  __printf_line "garuda                          - Download garuda"
  __printf_line "heads                           - Download heads"
  __printf_line "kali                            - Download kali"
  __printf_line "manjaro                         - Download manjaro"
  __printf_line "nixos                           - Download nixos"
  __printf_line "openvz                          - Download openvz"
  __printf_line "parrot                          - Download parrot"
  __printf_line "peppermint                      - Download peppermint"
  __printf_line "pfsense                         - Download pfsense"
  __printf_line "photon                          - Download photon"
  __printf_line "proxmox                         - Download proxmox"
  __printf_line "rocky                           - Download rockylinux"
  __printf_line "ubuntu                          - Download ubuntu"
  __printf_line "void                            - Download voidlinux"
  __printf_line "tails                           - Download tails"
  __printf_line "tiny                            - Download tiny"
  __printf_line "--all                           - Download all ISOs"
  __printf_line "--force                         - Force overwriting of ISO"
  __printf_line "--release                       - Sets the release to search for"
  __printf_line "--dir                           - Sets the download directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$LATEST_ISO_REQUIRE_SUDO" = "yes" ] && [ -z "$LATEST_ISO_REQUIRE_SUDO_RUN" ]; then
    export LATEST_ISO_REQUIRE_SUDO="no"
    export LATEST_ISO_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$LATEST_ISO_TEMP_FILE" ] && rm -Rf "$LATEST_ISO_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__sed() { sed "$@" 2>/dev/null; }
__grep() { grep "$@" 2>/dev/null; }
__cd() { [ -d "$iso_dir" ] && builtin cd "$1" || return 1; }
__strip_href() { __sed 's|.*href="||g;s|".*||g' | __grep -v 'data:image/png' | __grep '^' 2>/dev/null || return 1; }
__rm_rf() { if [ -e "$1" ]; then rm -Rf "$1" && return 0 || return 1; fi; }
__curl() { \curl -q -LSsf --fail-early --connect-timeout 2 --retry 5 --retry-delay 3 "$@" 2>/dev/null || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__test_arch() {
  local test_arch="" a=""
  local arch="$(uname -m | tr '[:upper:]' '[:lower:]')"
  local -a input=("$@")
  if [ "$arch" = "x86_64" ]; then
    test_arch="amd64 x86_64 x64"
  elif [ "$arch" = "aarch64" ]; then
    test_arch="aarch64 arm64"
  elif [ "$arch" = "arm64" ]; then
    test_arch="arm64 aarch64"
  else
    test_arch="$arch"
  fi
  for a in $test_arch; do
    output="$(printf '%s\n' "${input[@]}" | tr ' ' '\n' | __grep "$a" | head -n1 | __grep '^' || false)"
    [ -n "$output" ] && echo "$output" && break
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__extractor() {
  local archive="${archive_file:-$1}"
  if echo "$archive" | __grep -qE '.tar$|.tar.gz$'; then
    tar xfvz "$archive"
    return $?
  elif echo "$archive" | __grep -q '.gz$'; then
    gzip -fd "$archive"
    return $?
  elif echo "$archive" | __grep -q '.zip$'; then
    unzip "$archive"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__strip_url() { __grep -v '^$' | head -n1 | __grep '^'; }
__set_filename() { echo "$1" | __sed "s|.iso$|.$2.iso|g" | __grep '^' || echo "$1"; }
__get_filename() { __grep -E '\.iso$|\.tar$|\.gz$|\.zip$' | __grep $1 '^' || return 2; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ex() {
  local name=""
  local d="$PWD"
  local archive="$(realpath "$1")"
  local iso_dir="$(dirname "$archive")"
  local archive_iso_name="${2:-$archive_iso_name}"
  archive_iso_name="${archive_iso_name%%.*}"
  if [ -f "$archive" ]; then
    __cd "$iso_dir"
    printf_cyan "extracting $archive"
    echo "extracting $archive" >"$LATEST_ISO_LOG_DIR/ex.log"
    __extractor "$archive" &>>"$LATEST_ISO_LOG_DIR/ex.log"
    iso_file="$(find "$iso_dir" -type f -name '*.iso' | __grep '.iso$' | head -n1 || echo '')"
    if [ -n "$iso_file" ] && [ -f "$iso_file" ]; then
      name="$(__set_filename "$archive_iso_name.iso" "$LATEST_ISO_SYSTEM_ARCH")"
      download_file="$LATEST_ISO_DOWNLOAD_DIR/$(basename -- "$name")"
      iso_dirname="$(dirname "$download_file")"
      [ -d "$iso_dirname" ] || mkdir -p "$iso_dirname"
      printf_cyan "moving $iso_file to $download_file"
      if mv -f "$iso_file" "$download_file"; then
        __cd "$d"
        [ -f "$archive" ] && rm -Rf "$archive"
        [ -d "$iso_dir" ] && rm -Rf "$iso_dir"
        [ -f "$LATEST_ISO_LOG_DIR/ex.log" ] && rm -Rf "$LATEST_ISO_LOG_DIR/ex.log"
      else
        printf_red "Failed to move $iso_file to $download_file"
        return 1
      fi
    else
      printf_red "Can not locate extracted ISO in $iso_dir"
      return 1
    fi
  else
    printf_red "Can not find file $archive"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gui() {
  [ -n "$DISPLAY" ] || return 1
  [ -z "$SSH_CONNECTION" ] || return 1
  url="$(INPUT_NAME="$APPNAME" ask_for_input "What is the url to the iso?" || echo '')"
  iso="$(INPUT_NAME="$APPNAME" ask_for_input "Saved name relative to\n$LATEST_ISO_DOWNLOAD_DIR" || echo '')"
  file=$LATEST_ISO_DOWNLOAD_DIR/${iso%.*}.iso
  [ -n "$url" ] || printf_exit "URL is missing or invalid"
  [ -n "$iso" ] || printf_exit "Filename is missing"
  __notifications "Downloading from $url"
  if [ -n "$url" ] && [ -n "$iso" ]; then
    __latest_iso "$url" "$file" &>"$LATEST_ISO_LOG_DIR/gui.log"
    exitCode=$?
  else
    __notifications "Failed to get file from\n$url"
  fi
  if [ "$exitCode" -eq 0 ]; then
    __notifications "Download saved to $file"
  else
    __notifications "Download has failed"
  fi
  exit $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_all() {
  local statusCode=0
  isos="$(echo "$ARRAY" | tr ' ' '\n' | sort -u | __grep -Ev 'iso|gui' | tr '\n' ' ')"
  for iso in $isos; do
    export LATEST_ISO_FORCE_INST="$LATEST_ISO_FORCE_INST"
    export LATEST_ISO_SYSTEM_ARCH="$LATEST_ISO_SYSTEM_ARCH"
    eval "$0 $iso" || statusCode=$((statusCode + 1))
  done
  return $statusCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__test_iso() {
  local test=""
  local verify=""
  local get_status=""
  [ -n "$1" ] && test="$(echo "$1" | __grep -E 'https://|http://|ftp://' | __get_filename | __grep '^' || echo '')"
  [ -n "$test" ] && get_status="$(curl -q -LSsfI --max-time 5 --retry 2 "$test" 2>/dev/null || return 1)"
  verify="$(echo "$get_status" | __grep -q 'HTTP/.* 200' && echo 'valid' || echo '')"
  if [ "$verify" = "valid" ]; then
    return 0
  else
    verify=""
    test=""
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tr_split() { tr '=' '\n' 2>/dev/null | __strip_tags; }
__sort_rv() { __strip_tags 2>/dev/null | sort -rV | head -n1 | __sed 's|/$||g' | __sed 's|//|/|g' | __grep '^' 2>/dev/null || false; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sort_v() { __strip_tags 2>/dev/null | __grep '^[0-9]' | sort -rV | __sed 's|/$||g' | __sed 's|//|/|g' | __grep '^' 2>/dev/null || false; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__strip_iso() { __grep -aE '[_|-|.]*.*[_|-|.]' | __grep -Ev 'torrent|target|ti-download|^$' | __get_filename | head -n1 | __grep '^' || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_iso() {
  local get_iso="" set_get_iso=""
  set_get_iso="$(echo "$1" | __grep '^' || return 1)"
  get_iso="$(__test_arch "$set_get_iso")"
  [ -n "$get_iso" ] && echo "$get_iso" | head -n1 | __grep '^' || echo "$set_get_iso" | head -n1 | __grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_link() { __grep 'href=' | __sed 's/<\/\?[^>]\+>//g;s|(.*)||g' | awk -F ' ' '{print $1}' | __grep '\.iso$'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__strip_tags() {
  iso="${iso:-}"
  __sed -r 's/.*href="([^"]+).*/\1/g' |
    __sed 's|^<a href=||g;s|"||g' |
    __sed 's/<..*=//g' |
    __sed 's|>$||g' |
    __sed 's|\\/|/|g' |
    __sed 's|&#x2F;&#x2F;|//|g;s|&#x2F;|/|g' |
    __sed 's|<.*||g' |
    __sed 's|>.*||g' |
    __sed "s|$iso/download$|$iso|g" |
    __sed 's|.iso.torrent|.iso|g' |
    __sed 's|\t||g' |
    __sed 's| *||g' |
    __sed 's|/index.html||g' |
    __sed "s|'||g" | __grep -v '^$' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__verify_arch() {
  latest="${1:-$latest}"
  if echo "$latest" | __grep -wq 'x86_64'; then
    verify_arch="x86_64"
  elif echo "$latest" | __grep -wq 'amd64'; then
    verify_arch="x86_64"
  elif echo "$latest" | __grep -wq 'aarch64'; then
    verify_arch="aarch64"
  elif echo "$latest" | __grep -wq 'arm64'; then
    verify_arch="aarch64"
  elif echo "$latest" | __grep -wq 'arm.*'; then
    verify_arch="arm"
  elif echo "$latest" | __grep -wqE 'i[1-9]86|x86'; then
    verify_arch="i386"
  else
    verify_arch="x86_64"
  fi
  echo "$verify_arch"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_arch() {
  get_arch=$(uname -i | __grep -v 'unknown' | __grep '^' || uname -m | __grep '^' || uname -p | __grep '^')
  if [[ "$get_arch" =~ x86_64* ]]; then
    echo "x86_64"
  elif [[ "$get_arch" =~ i*86 ]]; then
    echo "i386"
  elif [[ "$get_arch" =~ aarch64 ]]; then
    echo "aarch64"
  elif [[ "$get_arch" =~ arm* ]]; then
    echo "$get_arch"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sf_version() {
  local file_dirs=""
  file_dirs="$1/files/$2"
  get_folder="$(__curl "$file_dirs" | __grep 'net.sf.files =' | __sed 's|net.sf.files =||g' | jq -r '.[]' 2>/dev/null | __grep 'download_url' | __sed 's|"download_url": ||g;s|"||g;s|,||g;s|/download$||g' | __grep 'v[0-9]' | sort -Vr | head -n1 | __sed 's| ||g')"
  get_isos="$(__curl $get_folder | __grep 'net.sf.files' | __sed 's|.*= ||g' | jq -rc '.[]|.name' 2>/dev/null | sort -rV | __grep 'iso$')"
  get_isos="$(__test_arch "$get_isos")"
  [ -n "$get_isos" ] && echo "$get_folder/$get_isos"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sourceforge() {
  local get_dirs="" get_isos=""
  file_dirs="$1/files/$2"
  get_dirs="$(__curl https://sourceforge.net/projects/$file_dirs | __grep 'net.sf.files' | __sed 's|.*= ||g' | jq -rc '.[]|.name' 2>/dev/null | __grep -E 'stable|[0-9].[0-9]|[a-z].*[0-9]' | __grep -v '^$' | sort -rV | head -n1 | __grep '^')"
  get_isos="$(__curl https://sourceforge.net/projects/$file_dirs/$get_dirs | __grep 'net.sf.files' | __sed 's|.*= ||g' | jq -rc '.[]|.name' 2>/dev/null | sort -rV | __grep 'iso$')"
  [ -n "$get_isos" ] || get_isos="$(__curl https://sourceforge.net/projects/$file_dirs/$get_dirs | __grep -i '.iso' | __sed 's/<[^>]*>//g' | __sed 's|/download$||g' | sort -rV)"
  get_isos="$(__test_arch "$get_isos")"
  [ -n "$get_isos" ] && echo "https://sourceforge.net/projects/$file_dirs/$get_dirs/$get_isos"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_iso() {
  url="$1"
  iso_url=""
  LATEST_ISO_SYSTEM_ARCH="${LATEST_ISO_SYSTEM_ARCH:-$(__get_arch)}"
  if __test_iso "$url"; then
    iso_url="$url"
  else
    iso_url="$(__curl "$url" 2>/dev/null | __grep -i "${LATEST_ISO_SYSTEM_ARCH:-^}" | __grep 'href=".*"' | __grep -E '[http,ftp]*.*\.iso' | __strip_tags | __strip_iso || echo '')"
    [ -n "$iso_url" ] && __test_iso "$iso_url" || iso_url=""
    if [ -z "$iso_url" ]; then
      iso_url="$(__curl "$url" 2>/dev/null | __grep -i "${LATEST_ISO_SYSTEM_ARCH:-^}" | __grep 'href=".*"' | __strip_tags | __strip_iso || echo '')"
      [ -n "$iso_url" ] && __test_iso "$iso_url" || iso_url=""
    fi
    if [ -z "$iso_url" ]; then
      iso_url="$(__curl "$url" 2>/dev/null | __grep -E 'x86_64|amd64' | __strip_tags | __strip_iso || echo '')"
      [ -n "$iso_url" ] && __test_iso "$iso_url" || iso_url=""
    fi
    if [ -z "$iso_url" ]; then
      iso_url="$(__curl "$url" 2>/dev/null | __strip_tags | __strip_iso || echo '')"
      [ -n "$iso_url" ] && __test_iso "$iso_url" || iso_url=""
    fi
    if [ -z "$iso_url" ]; then
      isor="$(__curl "$url" 2>/dev/null | __grep '\.iso' | __strip_tags | __strip_iso || echo '')"
      iso_url="$url/$isor"
      [ -n "$iso_url" ] && __test_iso "$iso_url" || iso_url=""
    fi
    if [ -z "$iso_url" ]; then
      iso_url="$(__curl "$url" 2>/dev/null | __strip_tags | __strip_iso || echo '')"
      [ -n "$iso_url" ] && __test_iso "$iso_url" || iso_url=""
    fi
  fi
  if [ -n "$iso_url" ]; then
    echo "$iso_url"
    return 0
  else
    echo ""
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__latest_iso() {
  local exitCode="0"
  __get_torrent || exitCode=3
  if LATEST_ISO_IS_TORRENT="no"; then
    url="${1:-$url}"
    file="${2:-$file}"
    archive_iso_name="${3:-$archive_iso_name}"
    latest=$(__find_iso "$url")
    localname=$(basename -- "$latest" 2>/dev/null)
    download_dir=$(dirname "${2:-$LATEST_ISO_DOWNLOAD_DIR/$localname}" 2>/dev/null)
    download_file="$download_dir/${file//$download_dir\//}"
    [ -d "$download_file" ] && rm -Rf "$download_file"
    [ -d "$download_dir" ] || mkdir -p "$download_dir"
    [ -d "$LATEST_ISO_DOWNLOAD_DIR" ] || mkdir -p "$LATEST_ISO_DOWNLOAD_DIR"
    [ -d "$LATEST_ISO_DOWNLOAD_DIR" ] || { printf_red "The download file should not be a directory: $LATEST_ISO_DOWNLOAD_DIR\n" && return 1; }
    [ -n "$latest" ] || { printf_red "No iso found on ${url:-$real_url}\n" && return 1; }
    echo "$latest" | __get_filename -q || { printf_red "$latest seems to be invalid\n" && return 1; }
    __grab_iso "$latest" "$download_file" "$archive_iso_name" && exitCode="0" || exitCode="2"
  fi
  if [ "$exitCode" = 0 ]; then
    exitCode=0
  else
    exitCode=2
  fi
  unset url latest latest_file remote_filesize system_arch iso_arch download_file save_message iso_name save_message ISOFILE LATEST_ISO_NAME LATEST_RELEASE_VERSION iso_name
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grab_iso() {
  trap 'exitCode=$?;[ $exitCode -ne 0 ] && [ -f "$download_file" ] && rm -Rf $download_file;exit $exitCode' ERR SIGINT
  local exitCode="" url="" latest="" latest_file="" remote_filesize=""
  local system_arch="" iso_arch="" download_file="" save_message="" iso_name="" save_message=""
  exitCode="10"
  url="${url:-$1}"
  latest="${1:-$latest}"
  latest_file="${2:-$download_file}"
  archive_iso_name="${3:-$archive_iso_name}"
  system_arch="$(__get_arch)"
  iso_name="$(basename -- "$latest")"
  iso_arch="$(__verify_arch "$latest")"
  download_file="$(__set_filename ${latest_file:-$download_file} "$iso_arch")"
  latest_file_dir="$(dirname "$latest_file")"
  log_file="$LATEST_ISO_LOG_DIR/$iso_name"
  __remote_filesize "$latest"
  [ -d "$latest_file_dir" ] || mkdir -p "$latest_file_dir"
  [ -d "$LATEST_ISO_DOWNLOAD_DIR" ] || mkdir -p "$LATEST_ISO_DOWNLOAD_DIR"
  [ -f "$download_file" ] && [ "$LATEST_ISO_FORCE_INST" = "true" ] && __rm_rf "$download_file"
  [ "$system_arch" = "$iso_arch" ] && LATEST_ISO_SYSTEM_ARCH="$system_arch" || LATEST_ISO_SYSTEM_ARCH="$iso_arch"
  if [ "$remote_filesize" = "0" ] || [ "$remote_filesize" = "0B" ]; then
    printf_red "URL: $latest"
    printf_error "doesn't seem to be a valid ISO image"
    exitCode="4"
  elif [ -f "$download_file" ] && [ "$LATEST_ISO_OVERWRITE" != "yes" ]; then
    __filesize_local "$download_file" "silent" &>/dev/null
    printf_cyan "File already exists in: ${PURPLE}$download_file : $local_file_size"
    [ -n "$latest" ] && printf_blue "$latest : $remote_filesize"
    exitCode="0"
  elif [ -n "$latest" ]; then
    if { [ "$LATEST_ISO_OVERWRITE" = "yes" ] || [ ! -f "$file" ] || [ "$LATEST_ISO_FORCE_INST" = "yes" ]; }; then
      if echo "$url" | __grep -qE '.tar$|.gz$|.zip$' &>/dev/null; then
        save_message="Attempting to download the compressed ISO from: $url"
        download_message="Size of $iso_name is $remote_filesize and saving it to: $download_file"
      elif echo "$url" | __grep -qE '.iso$' &>/dev/null; then
        save_message="Attempting to download the ISO from: $(dirname "$url")"
        download_message="Size of $iso_name is $remote_filesize and saving it to: $download_file"
      else
        save_message="Attempting to download the file from: $(dirname "$url")"
        download_message="Size of $iso_name is $remote_filesize and saving it to: $download_file"
      fi
    fi
    printf_cyan "$save_message"
    printf_purple "$download_message"
    if [ -f "$download_file" ] && [ "$LATEST_ISO_OVERWRITE" = "yes" ]; then
      __curl -o "$download_file" -C - "$latest" 2>"$log_file" && success="true" || success=""
    else
      __curl -o "$download_file" "$latest" 2>"$log_file" && success="true" || success=""
    fi
    [ "$success" = "true" ] && exitCode=0 || printf_exit "Failed to download $latest\n"
    if echo "$latest" | __grep -qE '.gz$|.tar$'; then __ex "$download_file" "$archive_iso_name"; fi
    [ -f "$download_file" ] && downloadStatus=0 && __filesize_local "$download_file" || downloadStatus=1
    if __verify_filesizes "$local_file_size_raw" "$remote_file_size_raw"; then
      printf_green "Downloading of the ISO was successful"
      exitCode=0
    elif __verify_filesizes "$local_file_size" "$remote_file_size"; then
      printf_green "Downloading of the ISO was successful"
      exitCode=0
    elif ! __verify_filesizes "$local_file_size_raw" "$remote_file_size_raw"; then
      printf_red "Downloading of the ISO was unsuccessful"
      exitCode="1"
    else
      printf_red "Error downloading from: $url"
      exitCode="2"
    fi
  fi
  if [ "$exitCode" -eq 0 ]; then
    __notifications "Downloading of the ISO was successful:\n$latest"
  elif [ "$exitCode" -eq 1 ]; then
    __notifications "Downloading of the ISO was unsuccessful:\n$download_file"
  elif [ "$exitCode" -eq 2 ]; then
    __notifications "Error downloading the ISO:\n$download_file"
  fi
  echo ""
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__verify_filesizes() {
  local local_size="" remote_size=""
  local_size="$(__get_numbers "$1")"
  remote_size="$(__get_numbers "$2")"
  if [ "$local_size" -ge "$remote_size" ]; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__filesize_local() {
  set -o pipefail
  local filename="${1:-$download_file}"
  if [ -f "$filename" ]; then
    local_file_size="$(find "$filename" -type f -exec du -h {} \; | awk '{print $1}' | __grep -v '^$' || echo '0')"
    local_file_size_raw="$(find "$filename" -type f -exec du -b {} \; | awk '{print $1}' | __grep -v '^$' || echo '0')"
    if [ -n "$local_file_size" ]; then
      [ -n "$2" ] && printf_cyan "The size of the local file is: $local_file_size"
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__remote_filesize() {
  set -o pipefail
  local head="" content_length="" content_length_count=""
  head="$(__curl -I "$1" 2>/dev/null)"
  content_length_count="$(echo "$head" | __grep -ic 'content-length' || echo 1)"
  if [ $content_length_count = 1 ]; then
    content_length="$(echo "$head" | __grep -ai 'content-length' | head -n1 | awk -v IGNORECASE=1 'BEGIN{RS="\r\n"} /^content-length/ { print $2 }')"
  elif [ "$content_length_count" != 1 ]; then
    content_length="$(echo "$head" | __grep -ai 'content-length' | tail -n1 | awk -v IGNORECASE=1 'BEGIN{RS="\r\n"} /^content-length/ { print $2 }')"
  fi
  if [ "$content_length" = 0B ]; then
    content_length=""
    remote_file_size_raw="0"
  fi
  [ -n "$content_length" ] || content_length=0
  [ -n "$remote_file_size_raw" ] || remote_file_size_raw="$content_length"
  if cmd_exists numfmt; then
    remote_filesize="$(numfmt --to=iec-i --suffix=B "$content_length" | __sed 's|iB$||g')"
  elif cmd_exists gnumfmt; then
    remote_filesize="$(gnumfmt --to=iec-i --suffix=B "$content_length" | __sed 's|iB$||g')"
  else
    remote_filesize="$(printf '%s\n' "$content_length")"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_torrent() {
  local exitTCode=0
  LATEST_ISO_IS_TORRENT="no"
  if echo "$1" | __grep -qE 'magnet:|.torrent$'; then
    LATEST_ISO_IS_TORRENT="yes"
    if __cmd_exists transadd; then
      printf_yellow "This appears to be a torrent"
      printf_blue "Downloading torrent via transmission"
      transadd "$1"
      exitTCode=$?
    elif __cmd_exists aria2c; then
      aria2c --enable-dht=true "$1"
      exitTCode=$?
    else
      printf_red "The program transadd is not installed"
      exitTCode=1
    fi
  else
    exitTCode=0
  fi
  return $exitTCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__github_api() {
  local repo=""
  repo="$(echo "$1" | __sed 's|.*://||g;s|.*.github.com/||g' | __grep '^' || echo "$1")"
  if echo "$repo" | __grep -q 'api.github.com'; then
    api="$1"
  else
    api="https://api.github.com/repos/${repo:-$1}/releases/latest"
  fi
  results="$(__curl -H "Accept: application/vnd.github+json" "$api" | jq -r '.[]' | __grep 'browser_download_url' | __sed 's|"||g;s|browser_download_url.* ||g;s|^  *||g;s|  *| |g' | __get_filename | __grep "${2:-^}" | __grep -v "${3:-^$}")"
  [ -n "$results" ] && echo "$results" | head -n1 | __grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__latest_list() {
  local statusCode=0
  case "$1" in
  alma)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/alma.iso"
    real_url="$LATEST_ISO_ALMA_URL"
    iso_url="$(__curl "$LATEST_ISO_ALMA_URL" | __grep "$LATEST_ISO_ALMA_RELEASE" | __strip_tags | __sort_v | __strip_url)/isos/${LATEST_ISO_SYSTEM_ARCH:-x86_64}"
    iso_name="$(__curl "$LATEST_ISO_ALMA_URL/$iso_url" | __grep -i "$LATEST_ISO_ALMA_FLAVOR" | __strip_tags | __strip_iso)"
    [ -n "$iso_name" ] || iso_name="$(__curl "$LATEST_ISO_ALMA_URL/$iso_url" | __grep -i "$LATEST_ISO_ALMA_FLAVOR" | __strip_tags | __strip_iso)"
    __latest_iso "$LATEST_ISO_ALMA_URL/$iso_url/$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  alpine)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/alpine.iso"
    real_url="https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/${LATEST_ISO_SYSTEM_ARCH:-x86_64}"
    iso_url="$(__curl "$real_url" | __strip_tags | sort -rV | __grep -Ei "$LATEST_ISO_ALPINE_FLAVOR" | __strip_iso)"
    [ -z "$iso_url" ] && iso_url="$(__curl "$real_url" | __strip_tags | sort -rV | __grep -E "standard" | __strip_iso)"
    __latest_iso "$LATEST_ISO_ALPINE_URL/${LATEST_ISO_SYSTEM_ARCH:-x86_64}/$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  arch)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/arch.iso"
    real_url="$LATEST_ISO_ARCHLINUX_URL"
    iso_url="$(__curl "$LATEST_ISO_ARCHLINUX_URL" | __strip_tags | __strip_iso)"
    __latest_iso "$LATEST_ISO_ARCHLINUX_URL/$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  archcraft)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/archcraft.iso"
    real_url="$LATEST_ISO_ARCHCRAFT_URL"
    iso_name="$(__sf_version "$LATEST_ISO_ARCHCRAFT_URL")"
    __latest_iso "$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  arco)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/arco.iso"
    real_url="$LATEST_ISO_ARCOLINUX_URL"
    latest_arcov="$(__curl "$LATEST_ISO_ARCOLINUX_URL" | __strip_tags | __grep '[0-9]' | sort -ruV | __strip_url)"
    iso_name="$(__curl "$LATEST_ISO_ARCOLINUX_URL/$latest_arcov" | __strip_tags | __grep -i "$LATEST_ISO_ARCOLINUX_FLAVOR" | __strip_url)"
    __latest_iso "$LATEST_ISO_ARCOLINUX_URL/$latest_arcov/$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  blackarch)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/blackarch.iso"
    real_url="$LATEST_ISO_BLACKARCH_URL"
    iso_url="$(__curl "$LATEST_ISO_BLACKARCH_URL" | __strip_tags | __grep -i "$LATEST_ISO_BLACKARCH_FLAVOR" | __strip_iso)"
    __latest_iso "$LATEST_ISO_BLACKARCH_URL/$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  cachy)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/cachy.iso"
    real_url="${LATEST_ISO_CACHYOS_URL//\/best_release.json/}"
    iso_url="$(__curl "$LATEST_ISO_CACHYOS_URL" | jq -rc '.release|.url' | __sed 's|/download$||g')"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  centos)
    shift 1
    printf_red "This should be avoided unless you have a good reason"
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/centos.iso"
    real_url="https://archive.kernel.org/centos-vault/centos"
    release="${LATEST_ISO_CENTOS_RELEASE:-$(__curl "$LATEST_ISO_CENTOS_URL" | __strip_href | __sort_v | head -n1)}"
    iso_url="$release/isos/${LATEST_ISO_SYSTEM_ARCH:-x86_64}"
    iso_name="$(__curl "$LATEST_ISO_CENTOS_URL/$iso_url" | __strip_href | __grep -i "$LATEST_ISO_CENTOS_FLAVOR" | __strip_iso)"
    __latest_iso "$LATEST_ISO_CENTOS_URL/$iso_url/$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  clear)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/clear.iso"
    real_url="$LATEST_ISO_CLEAR_URL"
    release="$(__curl "$LATEST_ISO_CLEAR_URL" | __sort_v | head -n1)"
    iso_name="$(__curl "$LATEST_ISO_CLEAR_URL/$release/clear/" | __strip_href | __grep -i "$LATEST_ISO_CACHY_FLAVOR" | __strip_iso)"
    __latest_iso "$LATEST_ISO_CLEAR_URL/$release/clear/$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  debian)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/debian.iso"
    { [ "$LATEST_ISO_SYSTEM_ARCH" = "aarch64" ] || [ "$LATEST_ISO_SYSTEM_ARCH" = "arm64" ]; } && arch="arm64" || { [ "$LATEST_ISO_SYSTEM_ARCH" = "x86_64" ] && arch="amd64"; }
    real_url="$LATEST_ISO_DEBIAN_URL/$arch/${LATEST_ISO_DEBIAN_FLAVOR}"
    iso_url="$(__curl "$LATEST_ISO_DEBIAN_URL/$arch/${LATEST_ISO_DEBIAN_FLAVOR}" | __strip_tags | __grep -i ".iso$" | __strip_iso)"
    iso_name="$LATEST_ISO_DEBIAN_URL/$arch/${LATEST_ISO_DEBIAN_FLAVOR}/$iso_url"
    __latest_iso "$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  endeavour)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/endeavour.iso"
    real_url="$LATEST_ISO_ENDEAVOUR_URL"
    iso_url="$(__curl "$LATEST_ISO_ENDEAVOUR_URL" | __tr_split | __grep 'mirrors.gigenet.com' | __strip_iso)"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  fedora)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/fedora.iso"
    real_url="$LATEST_ISO_FEDORA_URL"
    release="$(__curl "$LATEST_ISO_FEDORA_URL" | __sort_v | __strip_tags | head -n1)"
    iso_name="$(__curl "$LATEST_ISO_FEDORA_URL/$release/Spins/$LATEST_ISO_SYSTEM_ARCH/iso" | __grep -i "$LATEST_ISO_FEDORA_FLAVOR" | __strip_tags)"
    url="$LATEST_ISO_FEDORA_URL/$release/Spins/$LATEST_ISO_SYSTEM_ARCH/iso/$iso_name"
    __latest_iso "$url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  flatcar)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/flatcar.iso"
    real_url="$LATEST_ISO_FLATCAR_URL"
    __latest_iso "$LATEST_ISO_FLATCAR_URL/flatcar_production_iso_image.iso" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  garuda)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/garuda.iso"
    real_url="$LATEST_ISO_GARUDA_URL/$LATEST_ISO_GARUDA_FLAVOR"
    __latest_iso "$LATEST_ISO_GARUDA_URL/$LATEST_ISO_GARUDA_FLAVOR/latest.iso" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  gentoo)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/gentoo.iso"
    [ $LATEST_ISO_SYSTEM_ARCH = x86_64 ] && LATEST_ISO_SYSTEM_ARCH=amd64
    [ $LATEST_ISO_SYSTEM_ARCH = aarch64 ] && LATEST_ISO_SYSTEM_ARCH=arm64
    real_url="https://distfiles.gentoo.org/releases/$LATEST_ISO_SYSTEM_ARCH/autobuilds/current-livegui-$LATEST_ISO_SYSTEM_ARCH"
    iso_url="https://distfiles.gentoo.org/releases/$LATEST_ISO_SYSTEM_ARCH/autobuilds/current-livegui-$LATEST_ISO_SYSTEM_ARCH"
    iso_name="$(__curl "$iso_url" | __strip_href | __strip_iso)"
    __latest_iso "$iso_url/$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  kali)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/kali.iso"
    real_url="$LATEST_ISO_KALI_URL"
    iso_file="$LATEST_ISO_KALI_URL/$(__curl "$LATEST_ISO_KALI_URL" | __strip_href | __grep "$LATEST_ISO_KALI_FLAVOR" | __strip_iso)"
    __latest_iso "$iso_file" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  manjaro)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/manjaro.iso"
    real_url="https://github.com/manjaro/release-review/releases/latest"
    iso_url="$(__github_api "manjaro/release-review" "$LATEST_ISO_MANJARO_FLAVOR" 'minimal')"
    __latest_iso "$iso_url" "$ISOFILE" ""
    statusCode=$(($? + $statusCode))
    ;;
  nixos)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/nixos.iso"
    real_url="https://github.com/nix-community/nixos-images/releases/latest"
    iso_url="$(__github_api "nix-community/nixos-images" "linux.iso")"
    __latest_iso "$iso_url" "$ISOFILE" ""
    statusCode=$(($? + $statusCode))
    ;;
  opensuse)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/opensuse.iso"
    real_url="$LATEST_ISO_OPENSUSE_URL"
    __latest_iso "$LATEST_ISO_OPENSUSE_URL" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  parrot)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/parrot.iso"
    real_url="$LATEST_ISO_PARROT_URL"
    release="$(__curl "$LATEST_ISO_PARROT_URL" | __sort_v | __grep -vi '[a-z]' | head -n1)"
    iso_name="$(__curl "$LATEST_ISO_PARROT_URL/$release" | __strip_href | __grep -i "$LATEST_ISO_PARROT_FLAVOR" | __strip_iso)"
    iso_url="$LATEST_ISO_PARROT_URL/$release/$iso_name"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  peppermint)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/peppermint.iso"
    real_url="$LATEST_ISO_PEPPERMINT_URL"
    iso_name="$(__curl "$LATEST_ISO_PEPPERMINT_URL/" | __strip_tags | __grep -E 'Debian-64.iso' | __strip_iso)"
    __latest_iso "$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  photon)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/photon.iso"
    real_url="$LATEST_ISO_PHOTON_URL"
    __latest_iso "$LATEST_ISO_PHOTON_URL" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  redcore)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/redcore.iso"
    real_url="$LATEST_ISO_REDCORE_URL"
    iso_url="$LATEST_ISO_REDCORE_URL/$(__curl "$LATEST_ISO_REDCORE_URL/" | __strip_tags | __grep -E 'x86_64|amd64' | __strip_iso)"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  rocky)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/rocky.iso"
    RELEASE="${LATEST_RELEASE_VERSION:-${LATEST_ISO_ROCKY_RELEASE:-9}}"
    LATEST_ISO_ROCKY_FLAVOR="${LATEST_ISO_ROCKY_FLAVOR:-$LATEST_ISO_RHEL_FLAVOR}"
    real_url="$LATEST_ISO_ROCKY_URL/$RELEASE"
    iso_url="${RELEASE:-$(__curl "$LATEST_ISO_ROCKY_URL" | __strip_tags | __sort_v | __strip_url)}/isos/${LATEST_ISO_SYSTEM_ARCH:-x86_64}"
    iso_name="$(__curl "$LATEST_ISO_ROCKY_URL/$iso_url" | __grep -i "$LATEST_ISO_ROCKY_FLAVOR" | __strip_tags | __strip_iso)"
    [ -n "$iso_name" ] || iso_name="$(__curl "$LATEST_ISO_ROCKY_URL/$iso_url" | __grep -i "$LATEST_ISO_ROCKY_FLAVOR" | __strip_tags | __strip_iso)"
    __latest_iso "$LATEST_ISO_ROCKY_URL/$iso_url/$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  tiny)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/tiny.iso"
    real_url="http://tinycorelinux.net/downloads.html"
    isoversion="$(__curl "http://tinycorelinux.net/downloads.html" | __strip_tags | __grep '.iso$' | __grep -i 'plus' | __strip_iso)"
    iso_name="$LATEST_ISO_TINYCORE_URL/$isoversion"
    __latest_iso "$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  ubuntu)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/ubuntu.iso"
    real_url="$LATEST_ISO_UBUNTU_URL"
    iso_url="$LATEST_ISO_UBUNTU_URL/$(__curl "$LATEST_ISO_UBUNTU_URL" | __sort_v | head -n1)/release"
    iso_name="$iso_url/$(__curl "$iso_url" | __strip_tags | __strip_iso)"
    __latest_iso "$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  void)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/voidlinux.iso"
    real_url="$LATEST_ISO_VOID_URL"
    iso_url="$LATEST_ISO_VOID_URL/$(__curl "$LATEST_ISO_VOID_URL" | __strip_tags | __grep -v 'musl' | __grep "$LATEST_ISO_SYSTEM_ARCH" | __grep '.*'$LATEST_ISO_VOID_FLAVOR'' | __strip_iso)"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  openvz)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/openvz.iso"
    real_url="$LATEST_ISO_OPENVZ_URL"
    iso_url="$(__curl "$LATEST_ISO_OPENVZ_URL" | __sort_v | __strip_url)"
    iso_name="$(__curl "$LATEST_ISO_OPENVZ_URL/$iso_url/x86_64/iso/" | __strip_tags | __strip_iso)"
    __latest_iso "$LATEST_ISO_OPENVZ_URL/$iso_url/x86_64/iso/$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  proxmox)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/proxmox.iso"
    real_url="$LATEST_ISO_PROXMOX_URL"
    iso_url="$(__curl "$LATEST_ISO_PROXMOX_URL" | __sort_rv | __grep -i 'proxmox-ve_' | __strip_iso)"
    __latest_iso "$LATEST_ISO_PROXMOX_URL/$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  freenas)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/freenas.iso"
    real_url="$LATEST_ISO_FREENAS_URL"
    iso_name="$(__curl "$LATEST_ISO_FREENAS_URL" | __strip_href | __strip_iso)"
    __latest_iso "$iso_name" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  pfsense)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_DIR/pfsense.iso"
    ISOARCHIVE="$LATEST_ISO_TEMP_DIR/pfsense/archive.iso.gz"
    real_url="$LATEST_ISO_PFSENSE_URL"
    iso_name="$(curl -q -LSs "$LATEST_ISO_PFSENSE_URL" | __strip_tags | __grep '.iso.gz$' | __sort_rv)"
    __latest_iso "$LATEST_ISO_PFSENSE_URL/$iso_name" "$ISOFILE" "pfsense"
    statusCode=$(($? + $statusCode))
    ;;
  heads)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_LIVE_DIR/heads.iso"
    real_url="$LATEST_ISO_HEADS_URL"
    __latest_iso "$LATEST_ISO_HEADS_URL" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  tails)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_LIVE_DIR/tails.iso"
    real_url="$LATEST_ISO_TAILS_URL"
    __latest_iso "$LATEST_ISO_TAILS_URL" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  clonezilla)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_UTILS_DIR/clonezilla.iso"
    real_url="https://sourceforge.net/projects/clonezilla/files/clonezilla_live_stable"
    iso_url="$(__sourceforge "clonezilla" "clonezilla_live_stable")"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  gparted)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_UTILS_DIR/gparted.iso"
    real_url="https://sourceforge.net/projects/gparted/files/gparted-live-stable"
    iso_url="$(__sourceforge "gparted" "gparted-live-stable")"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  hirens)
    shift 1
    ISOFILE="$LATEST_ISO_DOWNLOAD_UTILS_DIR/hirens.iso"
    real_url="https://www.hirensbootcd.org/download"
    iso_url="https://www.hirensbootcd.org/files/$(__curl "https://www.hirensbootcd.org/download" | __get_link | __grep '.iso')"
    __latest_iso "$iso_url" "$ISOFILE"
    statusCode=$(($? + $statusCode))
    ;;
  *) printf_red "$1 is not a valid option" ;;
  esac
  exitCode=$statusCode
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_numbers() {
  printf '%s' "$1" | __sed 's/[^0-9]*//g' | tr -d '\n' | __grep '^' 3>/dev/null || printf '0'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
LATEST_ISO_CONFIG_FILE="${LATEST_ISO_CONFIG_FILE:-settings.conf}"
LATEST_ISO_CONFIG_DIR="${LATEST_ISO_CONFIG_DIR:-$HOME/.config/myscripts/latest-iso}"
LATEST_ISO_CONFIG_BACKUP_DIR="${LATEST_ISO_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/latest-iso/backups}"
LATEST_ISO_LOG_DIR="${LATEST_ISO_LOG_DIR:-$HOME/.local/log/latest-iso}"
LATEST_ISO_TEMP_DIR="${LATEST_ISO_TEMP_DIR:-$HOME/.local/tmp/system_scripts/latest-iso}"
LATEST_ISO_CACHE_DIR="${LATEST_ISO_CACHE_DIR:-$HOME/.cache/latest-iso}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
LATEST_ISO_OUTPUT_COLOR_1="${LATEST_ISO_OUTPUT_COLOR_1:-33}"
LATEST_ISO_OUTPUT_COLOR_2="${LATEST_ISO_OUTPUT_COLOR_2:-5}"
LATEST_ISO_OUTPUT_COLOR_GOOD="${LATEST_ISO_OUTPUT_COLOR_GOOD:-2}"
LATEST_ISO_OUTPUT_COLOR_ERROR="${LATEST_ISO_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
LATEST_ISO_NOTIFY_ENABLED="${LATEST_ISO_NOTIFY_ENABLED:-yes}"
LATEST_ISO_GOOD_NAME="${LATEST_ISO_GOOD_NAME:-Great:}"
LATEST_ISO_ERROR_NAME="${LATEST_ISO_ERROR_NAME:-Error:}"
LATEST_ISO_GOOD_MESSAGE="${LATEST_ISO_GOOD_MESSAGE:-No errors reported}"
LATEST_ISO_ERROR_MESSAGE="${LATEST_ISO_ERROR_MESSAGE:-Errors were reported}"
LATEST_ISO_NOTIFY_CLIENT_NAME="${LATEST_ISO_NOTIFY_CLIENT_NAME:-$APPNAME}"
LATEST_ISO_NOTIFY_CLIENT_ICON="${LATEST_ISO_NOTIFY_CLIENT_ICON:-notification-new}"
LATEST_ISO_NOTIFY_CLIENT_URGENCY="${LATEST_ISO_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
LATEST_ISO_DOWNLOAD_DIR="${LATEST_ISO_DOWNLOAD_DIR:-$HOME/Downloads/ISOs/OS}"
LATEST_ISO_DOWNLOAD_LIVE_DIR="${LATEST_ISO_DOWNLOAD_LIVE_DIR:-$HOME/Downloads/ISOs/Live}"
LATEST_ISO_DOWNLOAD_UTILS_DIR="${LATEST_ISO_DOWNLOAD_UTILS_DIR:-$HOME/Downloads/ISOs/Utils}"
LATEST_ISO_ALMA_URL="${LATEST_ISO_ALMA_URL:-http://mirror.vtti.vt.edu/almalinux}"
LATEST_ISO_ALPINE_URL="${LATEST_ISO_ALPINE_URL:-https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases}"
LATEST_ISO_ARCHCRAFT_URL="${LATEST_ISO_ARCHCRAFT_URL:-https://sourceforge.net/projects/archcraft}"
LATEST_ISO_ARCOLINUX_URL="${LATEST_ISO_ARCOLINUX_URL:-https://ftp.belnet.be/arcolinux/iso}"
LATEST_ISO_ARCHLINUX_URL="${LATEST_ISO_ARCHLINUX_URL:-http://mirror.siena.edu/archlinux/iso/latest}"
LATEST_ISO_BLACKARCH_URL="${LATEST_ISO_BLACKARCH_URL:-https://ftp.halifax.rwth-aachen.de/blackarch/iso}"
LATEST_ISO_CACHYOS_URL="${LATEST_ISO_CACHYOS_URL:-https://sourceforge.net/projects/cachyos-arch/best_release.json}"
LATEST_ISO_CENTOS_URL="${LATEST_ISO_CENTOS_URL:-https://archive.kernel.org/centos-vault/centos}"
LATEST_ISO_CLEAR_URL="${LATEST_ISO_CLEAR_URL:-https://cdn.download.clearlinux.org/releases/}"
LATEST_ISO_DEBIAN_URL="${LATEST_ISO_DEBIAN_URL:-https://cdimage.debian.org/cdimage/release/current}"
LATEST_ISO_ENDEAVOUR_URL="${LATEST_ISO_ENDEAVOUR_URL:-https://endeavouros.com}"
LATEST_ISO_FEDORA_URL="${LATEST_ISO_FEDORA_URL:-https://fedora.mirrorservice.org/fedora/linux/releases}"
LATEST_ISO_FLATCAR_URL="${LATEST_ISO_FLATCAR_URL:-https://stable.release.flatcar-linux.net/amd64-usr/current}"
LATEST_ISO_FREENAS_URL="${LATEST_ISO_FREENAS_URL:-https://www.truenas.com/download-truenas-community-edition}"
LATEST_ISO_GARUDA_URL="${LATEST_ISO_GARUDA_URL:-https://iso.builds.garudalinux.org/iso/latest/garuda}"
LATEST_ISO_HEADS_URL="${LATEST_ISO_HEADS_URL:-https://files.dyne.org/heads}"
LATEST_ISO_KALI_URL="${LATEST_ISO_KALI_URL:-https://cdimage.debian.org/mirror/kali.org/kali-images/current}"
LATEST_ISO_OPENSUSE_URL="${LATEST_ISO_OPENSUSE_URL:-https://download.opensuse.org/tumbleweed/iso/openSUSE-Tumbleweed-DVD-x86_64-Current.iso}"
LATEST_ISO_OPENVZ_URL="${LATEST_ISO_OPENVZ_URL:-https://download.openvz.org/virtuozzo/releases}"
LATEST_ISO_PARROT_URL="${LATEST_ISO_PARROT_URL:-https://mirror.math.princeton.edu/pub/parrot/iso}"
LATEST_ISO_PEPPERMINT_URL="${LATEST_ISO_PEPPERMINT_URL:-https://sourceforge.net/projects/peppermintos/files/isos/XFCE/}"
LATEST_ISO_PFSENSE_URL="${LATEST_ISO_PFSENSE_URL:-https://atxfiles.netgate.com/mirror/downloads}"
LATEST_ISO_PHOTON_URL="${LATEST_ISO_PHOTON_URL:-https://github.com/vmware/photon/wiki/Downloading-Photon-OS}"
LATEST_ISO_PROXMOX_URL="${LATEST_ISO_PROXMOX_URL:-http://download.proxmox.com/iso}"
LATEST_ISO_REDCORE_URL="${LATEST_ISO_REDCORE_URL:-https://mirror.math.princeton.edu/pub/redcorelinux/amd64/iso}"
LATEST_ISO_ROCKY_URL="${LATEST_ISO_ROCKY_URL:-https://download.rockylinux.org/pub/rocky}"
LATEST_ISO_UBUNTU_URL="${LATEST_ISO_UBUNTU_URL:-https://mirror.us.leaseweb.net/ubuntu-cdimage/xubuntu/releases}"
LATEST_ISO_VOID_URL="${LATEST_ISO_VOID_URL:-https://repo-default.voidlinux.org/live/current}"
LATEST_ISO_TAILS_URL="${LATEST_ISO_TAILS_URL:-https://tails.boum.org/install/dvd/index.en.html}"
LATEST_ISO_TINYCORE_URL="${LATEST_ISO_TINYCORE_URL:-https://mirror.math.princeton.edu/pub/tinycorelinux}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LATEST_ISO_ALMA_RELEASE="${LATEST_ISO_ALMA_RELEASE:-}"
LATEST_ISO_ROCKY_RELEASE="${LATEST_ISO_ROCKY_RELEASE:-}"
LATEST_ISO_CENTOS_RELEASE="${LATEST_ISO_CENTOS_RELEASE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LATEST_ISO_CENTOS_FLAVOR="${LATEST_ISO_CENTOS_FLAVOR:-dvd}"
LATEST_ISO_DEBIAN_FLAVOR="${LATEST_ISO_DEBIAN_FLAVOR:-iso-dvd}"
LATEST_ISO_ALPINE_FLAVOR="${LATEST_ISO_ALPINE_FLAVOR:-extended}"
LATEST_ISO_BLACKARCH_FLAVOR="${LATEST_ISO_BLACKARCH_FLAVOR:-slim}"
LATEST_ISO_ARCOLINUX_FLAVOR="${LATEST_ISO_ARCOLINUX_FLAVOR:-arconet}"
LATEST_ISO_VOID_FLAVOR="${LATEST_ISO_VOID_FLAVOR:-xfce}"
LATEST_ISO_KALI_FLAVOR="${LATEST_ISO_KALI_FLAVOR:-live}"
LATEST_ISO_RHEL_FLAVOR="${LATEST_ISO_RHEL_FLAVOR:-minimal}"
LATEST_ISO_ALMA_FLAVOR="${LATEST_ISO_ALMA_FLAVOR:-minimal}"
LATEST_ISO_FEDORA_FLAVOR="${LATEST_ISO_FEDORA_FLAVOR:-xfce}"
LATEST_ISO_GARUDA_FLAVOR="${LATEST_ISO_GARUDA_FLAVOR:-xfce}"
LATEST_ISO_ROCKY_FLAVOR="${LATEST_ISO_ROCKY_FLAVOR:-minimal}"
LATEST_ISO_CACHY_FLAVOR="${LATEST_ISO_CACHY_FLAVOR:-desktop}"
LATEST_ISO_MANJARO_FLAVOR="${LATEST_ISO_MANJARO_FLAVOR:-xfce}"
LATEST_ISO_PARROT_FLAVOR="${LATEST_ISO_PARROT_FLAVOR:-security}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE" ] && . "$LATEST_ISO_CONFIG_DIR/$LATEST_ISO_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$LATEST_ISO_LOG_DIR" ] || mkdir -p "$LATEST_ISO_LOG_DIR" |& __devnull
[ -d "$LATEST_ISO_TEMP_DIR" ] || mkdir -p "$LATEST_ISO_TEMP_DIR" |& __devnull
[ -d "$LATEST_ISO_CACHE_DIR" ] || mkdir -p "$LATEST_ISO_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LATEST_ISO_TEMP_FILE="${LATEST_ISO_TEMP_FILE:-$(mktemp $LATEST_ISO_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$LATEST_ISO_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$LATEST_ISO_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$LATEST_ISO_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$LATEST_ISO_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$LATEST_ISO_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$LATEST_ISO_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="C"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",force,all,ask,filename:,arch:,release:,name:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="alma,alpine,arch,archcraft,arco,blackarch,cachy,centos,clear,clonezilla,debian,endeavour,fedora,"
ARRAY+="flatcar,freenas,garuda,gentoo,gparted,heads,hirens,kali,manjaro,nixos,opensuse,openvz,parrot,peppermint,"
ARRAY+="pfsense,photon,proxmox,redcore,rocky,tails,tiny,ubuntu,void"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | __grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | __sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | __sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | __sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | __sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | __sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    LATEST_ISO_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    LATEST_ISO_DOWNLOAD_DIR="$2"
    [ -d "$LATEST_ISO_DOWNLOAD_DIR" ] || mkdir -p "$LATEST_ISO_DOWNLOAD_DIR" |& __devnull
    shift 2
    ;;
  --force)
    shift 1
    LATEST_ISO_FORCE_INST="true"
    ;;
  --all)
    shift 1
    RUN_ALL="true"
    ;;
  --ask)
    shift 1
    echo "$ARRAY"
    exit
    ;;
  -C)
    shift 1
    export LATEST_ISO_OVERWRITE="yes"
    ;;
  --filename)
    LATEST_ISO_FILENAME="$2"
    shift 2
    ;;
  --arch)
    LATEST_ISO_SYSTEM_ARCH="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# LATEST_ISO_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# LATEST_ISO_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && LATEST_ISO_CWD="$1" && shift 1 || LATEST_ISO_CWD="${LATEST_ISO_CWD:-$PWD}"
LATEST_ISO_CWD="$(realpath "${LATEST_ISO_DOWNLOAD_DIR:-$PWD}" 2>/dev/null)"
# if [ -d "$LATEST_ISO_CWD" ] && cd "$LATEST_ISO_CWD"; then
# if [ "$LATEST_ISO_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $LATEST_ISO_CWD"
# fi
# else
# printf_exit "ðŸ’” $LATEST_ISO_CWD does not exist ðŸ’”"
# fi
export LATEST_ISO_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions __based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
__user_is_root && [ -d "/var/lib/vz/template/iso" ] && LATEST_ISO_DOWNLOAD_DIR="/var/lib/vz/template/iso"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions __based on env
LATEST_ISO_SYSTEM_ARCH="${LATEST_ISO_SYSTEM_ARCH:-$(__get_arch)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
gui)
  shift 1
  __gui
  ;;
iso)
  shift 1
  if [ $# -eq 0 ]; then
    printf_exit "Usage: $APPNAME iso <url> <filename>"
  elif [ $# -eq 1 ]; then
    LATEST_ISO_FILENAME="${LATEST_ISO_FILENAME:-$(basename -- "$1")}"
    __grab_iso "$1" "$LATEST_ISO_DOWNLOAD_DIR/$LATEST_ISO_FILENAME"
    exitCode=$?
  elif [ $# -eq 2 ]; then
    LATEST_ISO_FILENAME="${LATEST_ISO_FILENAME:-$(basename -- "$2")}"
    __grab_iso "$1" "$LATEST_ISO_DOWNLOAD_DIR/$LATEST_ISO_FILENAME"
    exitCode=$?
  fi
  exit ${exitCode:-1}
  ;;
all)
  shift 1
  exitStatus=0
  for iso in ${ARRAY//,/ }; do
    eval $0 $iso
    exitStatus=$((exitStatus + 1))
  done
  exit $exitStatus
  ;;
*)
  if [ "$RUN_ALL" = "true" ]; then
    eval $0 all
    exit $?
  elif [ $# -eq 1 ]; then
    __latest_list "$1"
    exit $?
  elif [ $# -gt 1 ]; then
    exitStatus=0
    for iso in "$@"; do
      eval $0 $iso
      exitStatus=$((exitStatus + 1))
    done
    exit $exitStatus
  else
    __help
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
