#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208131959-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  myip --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Saturday, Aug 13, 2022 19:59 EDT
# @@File             :  myip
# @@Description      :  Show IP address
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208131959-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
MYIP_REQUIRE_SUDO="${MYIP_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE"
  fi
  [ -d "$MYIP_CONFIG_DIR" ] || mkdir -p "$MYIP_CONFIG_DIR"
  [ -d "$MYIP_CONFIG_BACKUP_DIR" ] || mkdir -p "$MYIP_CONFIG_BACKUP_DIR"
  [ -f "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE" ] &&
    cp -Rf "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE" "$MYIP_CONFIG_BACKUP_DIR/$MYIP_CONFIG_FILE.$$"
  cat <<EOF >"$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE"
# Settings for myip
MYIP_DEFAULT_NETWORK_DEVICE="${MYIP_DEFAULT_NETWORK_DEVICE:-}"
MYIP_API_URL_IP="${MYIP_API_URL_IP:-}"
MYIP_API_URL_INFO="${MYIP_API_URL_INFO:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
MYIP_OUTPUT_COLOR_1="${MYIP_OUTPUT_COLOR_1:-}"
MYIP_OUTPUT_COLOR_2="${MYIP_OUTPUT_COLOR_2:-}"
MYIP_OUTPUT_COLOR_GOOD="${MYIP_OUTPUT_COLOR_GOOD:-}"
MYIP_OUTPUT_COLOR_ERROR="${MYIP_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
MYIP_NOTIFY_ENABLED="${MYIP_NOTIFY_ENABLED:-}"
MYIP_GOOD_NAME="${MYIP_GOOD_NAME:-}"
MYIP_ERROR_NAME="${MYIP_ERROR_NAME:-}"
MYIP_GOOD_MESSAGE="${MYIP_GOOD_MESSAGE:-}"
MYIP_ERROR_MESSAGE="${MYIP_ERROR_MESSAGE:-}"
MYIP_NOTIFY_CLIENT_NAME="${MYIP_NOTIFY_CLIENT_NAME:-}"
MYIP_NOTIFY_CLIENT_ICON="${MYIP_NOTIFY_CLIENT_ICON:-}"
MYIP_NOTIFY_CLIENT_URGENCY="${MYIP_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "myip:  Show IP address - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: myip [options] [commands]"
  __printf_line "*                               - Show local and public ip v4 and v6"
  __printf_line "local [4]                       - Show local ip v4"
  __printf_line "local [6]                       - Show local ip v6"
  __printf_line "public [4]                      - Show public ip v4"
  __printf_line "public [6]                      - Show public ip v6"
  __printf_line "6                               - Show local and public ip v4"
  __printf_line "6                               - Show local and public ip v4"
  __printf_line "info                            - Show info regarding your ip address"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$MYIP_REQUIRE_SUDO" = "yes" ] && [ -z "$MYIP_REQUIRE_SUDO_RUN" ]; then
    export MYIP_REQUIRE_SUDO="no"
    export MYIP_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$MYIP_TEMP_FILE" ] && rm -Rf "$MYIP_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
myip-local4() {
  local dev="${MYIP_DEFAULT_NETWORK_DEVICE:-$NETDEV}"
  ifconfig ${dev:-eth0} | grep -E "venet|inet" |
    grep -Ev "lxc|docker|127.0.0." | grep 'inet' |
    grep -v 'inet6' | awk '{print $2}' | sed 's#addr:##g' |
    sed '/^$/d' | head -n1 | grep '^' || { echo '127.0.0.1' && false; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myip-local6() {
  local dev="${MYIP_DEFAULT_NETWORK_DEVICE:-$NETDEV}"
  ifconfig ${dev:-eth0} | grep -E "venet|inet" |
    grep -Ev "lxc|docker|fe:" | grep 'inet6' | grep -i 'global' |
    awk '{print $2}' | sed '/^$/d' | head -n1 | grep '^' || { echo '' && false; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myip-public4() {
  curl -q -4 -LSsf --max-time 2 "$MYIP_API_URL_IP" 2>/dev/null | sed '/^$/d' | head -n1 | grep '^'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myip-public6() {
  curl -q -6 -LSsf --max-time 2 "$MYIP_API_URL_IP" 2>/dev/null | sed '/^$/d' | head -n1 | grep '^'
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myip4() {
  local public="" local=""
  local="$(myip-local4 2>/dev/null)"
  public="$(myip-public4 2>/dev/null)"
  echo -e "$local" | sed '/^$/d' | grep '^'
  echo -e "$public" | sed '/^$/d' | grep '^'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myip6() {
  local public="" local=""
  local="$(myip-local6 2>/dev/null)"
  public="$(myip-public6 2>/dev/null)"
  echo -e "$local" | sed '/^$/d' | grep '^'
  echo -e "$public" | sed '/^$/d' | grep '^'
}
__show_ip() {
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ "$CURRENT_IP_6_LOC" = "$CURRENT_IP_6_WAN" ] && CURRENT_IP_6_LOC=""
  [ -z "$CURRENT_IP_4_LOC" ] || printf_green "local ip  v4:            $CURRENT_IP_4_LOC"
  [ -z "$CURRENT_IP_6_LOC" ] || printf_green "local ip  v6:            $CURRENT_IP_6_LOC"
  [ -z "$CURRENT_IP_4_WAN" ] || printf_green "Public ip v4:            $CURRENT_IP_4_WAN"
  [ -z "$CURRENT_IP_6_WAN" ] || printf_green "Public ip v6:            $CURRENT_IP_6_WAN"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
myip_info() {
  printf_purple "Retrieving information about your ip address"
  local ip="" version="" city="" region="" region_code="" country_code_iso3=""
  local postal="" latitude="" longitude="" timezone="" utc_offset="" currency=""
  local country_population="" asn="" org="" res=""
  if [ "$1" = 4 ]; then
    ip="$(myip-public4)"
  elif [ "$1" = 6 ]; then
    ip="$(myip-public6)"
  else
    ip4="$(myip-public4)"
    ip6="$(myip-public6)"
  fi
  res="$(curl -q -LSsf -H "Accept: application/json" "$MYIP_API_URL_INFO" 2>/dev/null | jq -r | grep '^' || echo '')"
  if [ -z "$res" ]; then
    printf_exit "Failed to get info for your IP"
  else
    ip4="$(echo "$ip4")"
    ip6="$(echo "$ip6")"
    ip_api="$(echo "$res" | jq -r '.ip')"
    version="$(echo "$res" | jq -r '.version')"
    city="$(echo "$res" | jq -r '.city')"
    region="$(echo "$res" | jq -r '.region')"
    postal="$(echo "$res" | jq -r '.postal')"
    latitude="$(echo "$res" | jq -r '.latitude')"
    longitude="$(echo "$res" | jq -r '.longitude')"
    timezone="$(echo "$res" | jq -r '.timezone')"
    region_code="$(echo "$res" | jq -r '.region_code')"
    country_code_iso3="$(echo "$res" | jq -r '.country_code_iso3')"
    country_calling_code="$(echo "$res" | jq -r '.country_calling_code')"
    country_area="$(echo "$res" | jq -r '.country_area')"
    country_population="$(echo "$res" | jq -r '.country_population')"
    utc_offset="$(echo "$res" | jq -r '.utc_offset')"
    currency="$(echo "$res" | jq -r '.currency')"
    asn="$(echo "$res" | jq -r '.asn')"
    org="$(echo "$res" | jq -r '.org')"
    eu="$(echo "$res" | jq -r '.in_eu' | sed 's|true|Yes|g;s|false|No|g')"
    [ "$ip4" = "$ip_api" ] && CURRENT_IP_4_WAN="" || [ -z "$ip4" ] || echo "IP4:              $ip4" | printf_readline $MYIP_OUTPUT_COLOR_1
    [ "$ip6" = "$ip_api" ] && CURRENT_IP_6_WAN="" || [ -z "$ip6" ] || echo "IP6:              $ip6" | printf_readline $MYIP_OUTPUT_COLOR_1
    [ -n "$country_area" ] && country_area="$(printf "%'d" "${country_area//\.*/}")" || country_area="Unknown"
    [ -n "$country_population" ] && country_population="$(printf "%'d" "$country_population")" || country_population="Unknown"
    echo "External IP:             $ip_api" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "External IP version:     $version" | printf_readline $MYIP_OUTPUT_COLOR_1
    __show_ip
    echo "city:                    $city" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "region:                  $region_code" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "postal:                  $postal" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "latitude:                $latitude" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "longitude:               $longitude" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "utc_offset:              $utc_offset" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "country:                 $country_code_iso3" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "Calling Code:            $country_calling_code" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "currency:                $currency" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "Country area:            $country_area" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "population:              $country_population" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "asn:                     $asn" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "org:                     $org" | printf_readline $MYIP_OUTPUT_COLOR_1
    echo "IN EU:                   $eu" | printf_readline $MYIP_OUTPUT_COLOR_1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_myip() {
  local CURRENT_IP_4_LOC CURRENT_IP_4_WAN CURRENT_IP_6_LOC CURRENT_IP_6_WAN
  __getlipaddr
  CURRENT_IP_4_LOC="$(myip-local4)"
  CURRENT_IP_6_LOC="$(myip-local6)"
  CURRENT_IP_4_WAN="$(myip-public4)"
  CURRENT_IP_6_WAN="$(myip-public6)"
  case "$1" in
  local)
    case "$2" in
    4)
      myip-local4 | printf_readline $MYIP_OUTPUT_COLOR_1
      ;;
    6)
      myip-local6 | printf_readline $MYIP_OUTPUT_COLOR_1
      ;;
    *)
      myip-local4 | printf_readline $MYIP_OUTPUT_COLOR_1
      myip-local6 | printf_readline $MYIP_OUTPUT_COLOR_1
      ;;
    esac
    ;;
  public)
    case "$2" in
    4)
      myip-public4 | printf_readline $MYIP_OUTPUT_COLOR_1
      ;;
    6)
      myip-public6 | printf_readline $MYIP_OUTPUT_COLOR_1
      ;;
    *)
      myip-public4 | printf_readline $MYIP_OUTPUT_COLOR_1
      myip-public6 | printf_readline $MYIP_OUTPUT_COLOR_1
      ;;
    esac
    ;;
  4)
    myip-local4 | printf_readline $MYIP_OUTPUT_COLOR_1
    myip-public4 | printf_readline $MYIP_OUTPUT_COLOR_1
    ;;
  6)
    myip-local6 | printf_readline $MYIP_OUTPUT_COLOR_1
    myip-public6 | printf_readline $MYIP_OUTPUT_COLOR_1
    ;;
  info)
    shift 1
    myip_info ${1:-}
    ;;
  *)
    __show_ip
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
MYIP_CONFIG_FILE="${MYIP_CONFIG_FILE:-settings.conf}"
MYIP_CONFIG_DIR="${MYIP_CONFIG_DIR:-$HOME/.config/myscripts/myip}"
MYIP_CONFIG_BACKUP_DIR="${MYIP_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/myip/backups}"
MYIP_LOG_DIR="${MYIP_LOG_DIR:-$HOME/.local/log/myip}"
MYIP_TEMP_DIR="${MYIP_TEMP_DIR:-$HOME/.local/tmp/system_scripts/myip}"
MYIP_CACHE_DIR="${MYIP_CACHE_DIR:-$HOME/.cache/myip}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
MYIP_OUTPUT_COLOR_1="${MYIP_OUTPUT_COLOR_1:-33}"
MYIP_OUTPUT_COLOR_2="${MYIP_OUTPUT_COLOR_2:-5}"
MYIP_OUTPUT_COLOR_GOOD="${MYIP_OUTPUT_COLOR_GOOD:-2}"
MYIP_OUTPUT_COLOR_ERROR="${MYIP_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
MYIP_NOTIFY_ENABLED="${MYIP_NOTIFY_ENABLED:-yes}"
MYIP_GOOD_NAME="${MYIP_GOOD_NAME:-Great:}"
MYIP_ERROR_NAME="${MYIP_ERROR_NAME:-Error:}"
MYIP_GOOD_MESSAGE="${MYIP_GOOD_MESSAGE:-No errors reported}"
MYIP_ERROR_MESSAGE="${MYIP_ERROR_MESSAGE:-Errors were reported}"
MYIP_NOTIFY_CLIENT_NAME="${MYIP_NOTIFY_CLIENT_NAME:-$APPNAME}"
MYIP_NOTIFY_CLIENT_ICON="${MYIP_NOTIFY_CLIENT_ICON:-notification-new}"
MYIP_NOTIFY_CLIENT_URGENCY="${MYIP_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
MYIP_API_URL_IP="${MYIP_API_URL_IP:-https://ifcfg.us/ip}"
MYIP_API_URL_INFO="${MYIP_API_URL_INFO:-https://ipapi.co/json}"
MYIP_DEFAULT_NETWORK_DEVICE="${MYIP_DEFAULT_NETWORK_DEVICE:-$NETDEV}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE" ] && . "$MYIP_CONFIG_DIR/$MYIP_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$MYIP_LOG_DIR" ] || mkdir -p "$MYIP_LOG_DIR" |& __devnull
[ -d "$MYIP_TEMP_DIR" ] || mkdir -p "$MYIP_TEMP_DIR" |& __devnull
[ -d "$MYIP_CACHE_DIR" ] || mkdir -p "$MYIP_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MYIP_TEMP_FILE="${MYIP_TEMP_FILE:-$(mktemp $MYIP_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$MYIP_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$MYIP_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$MYIP_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYIP_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$MYIP_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$MYIP_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="info local public 4 6"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST="4 6"
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    MYIP_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    MYIP_CWD="$2"
    [ -d "$MYIP_CWD" ] || mkdir -p "$MYIP_CWD" |& __devnull
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# MYIP_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# MYIP_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && MYIP_CWD="$1" && shift 1 || MYIP_CWD="${MYIP_CWD:-$PWD}"
MYIP_CWD="$(realpath "${MYIP_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$MYIP_CWD" ] && cd "$MYIP_CWD"; then
# if [ "$MYIP_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $MYIP_CWD"
# fi
# else
# printf_exit "ðŸ’” $MYIP_CWD does not exist ðŸ’”"
# fi
export MYIP_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_myip "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
