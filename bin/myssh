#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208141246-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  myssh --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 14, 2022 12:46 EDT
# @@File             :  myssh
# @@Description      :  This is a WIP
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208141246-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
MYSSH_REQUIRE_SUDO="${MYSSH_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE"
  fi
  [ -d "$MYSSH_CONFIG_DIR" ] || mkdir -p "$MYSSH_CONFIG_DIR"
  [ -d "$MYSSH_CONFIG_BACKUP_DIR" ] || mkdir -p "$MYSSH_CONFIG_BACKUP_DIR"
  [ -f "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE" ] &&
    cp -Rf "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE" "$MYSSH_CONFIG_BACKUP_DIR/$MYSSH_CONFIG_FILE.$$"
  cat <<EOF >"$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE"
# Settings for myssh
MYSSH_SSH_CONFIG_FILE="${MYSSH_SSH_CONFIG_FILE:-}"
MYSSH_SSH_CONFIG_EDITOR="${MYSSH_SSH_CONFIG_EDITOR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
MYSSH_OUTPUT_COLOR_1="${MYSSH_OUTPUT_COLOR_1:-}"
MYSSH_OUTPUT_COLOR_2="${MYSSH_OUTPUT_COLOR_2:-}"
MYSSH_OUTPUT_COLOR_GOOD="${MYSSH_OUTPUT_COLOR_GOOD:-}"
MYSSH_OUTPUT_COLOR_ERROR="${MYSSH_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
MYSSH_NOTIFY_ENABLED="${MYSSH_NOTIFY_ENABLED:-}"
MYSSH_GOOD_NAME="${MYSSH_GOOD_NAME:-}"
MYSSH_ERROR_NAME="${MYSSH_ERROR_NAME:-}"
MYSSH_GOOD_MESSAGE="${MYSSH_GOOD_MESSAGE:-}"
MYSSH_ERROR_MESSAGE="${MYSSH_ERROR_MESSAGE:-}"
MYSSH_NOTIFY_CLIENT_NAME="${MYSSH_NOTIFY_CLIENT_NAME:-}"
MYSSH_NOTIFY_CLIENT_ICON="${MYSSH_NOTIFY_CLIENT_ICON:-}"
MYSSH_NOTIFY_CLIENT_URGENCY="${MYSSH_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "myssh:  This is a WIP - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: myssh [options] [username] [host]"
  __printf_line "[username] [host]               - Connect to host with username"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$MYSSH_REQUIRE_SUDO" = "yes" ] && [ -z "$MYSSH_REQUIRE_SUDO_RUN" ]; then
    export MYSSH_REQUIRE_SUDO="no"
    export MYSSH_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$MYSSH_TEMP_FILE" ] && rm -Rf "$MYSSH_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__ssh_retry() {
  trap -- 'retVal=$?;kill -9 $$ &>/dev/null;exit $retVal' SIGINT
  local exitCode=0 count=1 message="" connection="$*"
  local hostname="${*//*@/}"
  local username="${*//@*/}"
  [ -n "$username" ] && message="$hostname as $username" || message="$hostname"
  while :; do
    printf '\r%b' "Attempting to connect to $message: try number $count "
    ping -c 1 "$hostname" &>/dev/null && break
    exitCode=$?
    count=$((1 + count))
  done
  clear
  eval $MYSSH_SSH_BIN_FILE $connection 2>"$MYSSH_TEMP_FILE"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ssh_cli() {
  local hostname="${1:-$hostname}" connection="" exitCode=0
  [ -n "$username" ] || username=
  clear
  if [ -n "$username" ]; then
    connect_notify="Attempting to connect to $hostname as $username"
    failed_notify="Failed to connect to $hostname as $username"
    connection="${username}@${hostname}"
  elif [ -n "$hostname" ]; then
    connect_notify="Attempting to connect to $hostname"
    failed_notify="Failed to connect to $hostname"
    connection="${hostname}"
  else
    printf_red "No hostname specified"
    exitCode=1
  fi
  if [ "$MYSSH_RETRY" = "true" ]; then
    __notifications "$connect_notify"
    __ssh_retry ${connection}
    MYSSH_MESSAGE="false"
  else
    __notifications "$connect_notify"
    $MYSSH_SSH_BIN_FILE ${connection} || {
      exitCode=1
      __notifications "$failed_notify"
      printf_pause "Press any key to continue"
    }
  fi
  if [ "$MYSSH_MESSAGE" != "false" ]; then
    clear
    printf_newline '\n\n\n\n'
    printf_yellow "Connection closed with status code ${exitCode:-0}"
    printf_pause "Press any key to continue"
    clear
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ssh_new_host() {
  [ -d "$HOME/.ssh/known_hosts.d" ] || mkdir -p "$HOME/.ssh/known_hosts.d" &>/dev/null
  if [ ! -f "${1:-$MYSSH_SSH_CONFIG_FILE}" ]; then
    cat <<EOF | tee -p >"${1:-$MYSSH_SSH_CONFIG_FILE}"
Host *
UserKnownHostsFile ~/.ssh/known_hosts.d/%k
IdentityFile ~/.ssh/id_rsa

EOF
  fi
  cat <<EOF | tee -p -a "${1:-$MYSSH_SSH_CONFIG_FILE}" &>/dev/null
Host $name     #$comment
    Hostname $address
    User $user

EOF
  if grep -shq "Hostname $address" "${1:-$MYSSH_SSH_CONFIG_FILE}"; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sshto() {
  if [ -t 0 ]; then
    sshto 2>"$MYSSH_TEMP_FILE"
  else
    myterminal -e "sshto" &
    disown
    exit
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_hosts() {
  IFSOLD=$IFS
  IFS=$'\n'
  known_hosts="$(grep -shh "Host " "$HOME/.ssh/config"* 2>/dev/null | sed '/\*/d; s/Host //g;' || false)"
  if [ -n "$known_hosts" ]; then
    for host in $known_hosts; do
      name="${host// #*/}" # Get HostName
      desc="${host//*#/}"  # Get Description
      case $name in
      '#DUMMY')
        host_desc="${host%\#*}"
        desc="${host_desc##*\#}"
        name="{ $desc }"
        length=$(((40 - ${#name}) / 2))
        name=$(
          line - $length
          printf "$name"
          line - $length
        )
        [ ${#name} -lt 40 ] && name=-$name
        content+=("$desc")
        desc=$(line - 20)
        ;;
      '#'*) continue ;;
      esac
      fullist+=("$name" "$desc") #Add HostName and Description to the list
      printf '%s    %s\n' "$name" "$desc"
    done
    IFS=$IFSOLD
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ssh_host() {
  local get_hosts=""
  if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
    printf_pause "This isn't available"
  elif __cmd_exists zenity; then
    get_hosts="$(__gen_hosts | zenity --list --title "Select a ssh server" --text "SSH Hostnames" --column "Hosts" --print-column=ALL --height 400 --width 800 || echo '')"
    [ -n "$get_hosts" ] || return 1
  else
    myterminal -e "$APPNAME --term"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__addhost() {
  clear
  printf_newline '\n\n'
  printf_read_input "5" "Enter a name" "180" "name" "-e"
  grepin="$(grep -w "[H]ost.* $name" "$MYSSH_SSH_CONFIG_FILE" | head -n1 | grep '^' || echo '')"
  __add_error
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__add_error() {
  if [ -n "${grepin}" ]; then
    printf_red "$grepin is already in your confg file"
    printf_pause "Press any key to continue"
    __addhost
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__term() {
  trap '$APPNAME --term' SIGINT
  if [ ! -t 0 ]; then
    myterminal -e "$APPNAME" &
    disown
    exit
  fi
  # show menu
  while :; do
    clear
    shift 1
    hostname="${hostname:-}"
    username="${username:-$USER}"
    [ -f "$MYSSH_KILL_FILE" ] && break
    printf_newline "\n\n\n\n"
    printf_head "SSH Menu"
    printf_green "a. sshto: ncurses based ssh client"
    printf_green "b. connect to host"
    printf_green "c. gui menu from ssh config"
    printf_green "d. enter shell"
    printf_green "e. edit config"
    printf_green "n. add new host"
    printf_green "p. connect to proxmox vm"
    printf_green "r. remove known host"
    printf_green "s. show config"
    printf_green "x. show error log"
    printf_green "z. Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [a-z] : " "1" "main"
    printf_newline

    # take action
    case "$main" in
    a)
      shift 1
      clear
      __sshto
      ;;
    b)
      shift 1
      clear
      printf_read_input "What is your username?" "120" "username"
      printf_read_input "What is your server address?" "120" "hostname"
      [ -n "$username" ] && [ -n "$hostname" ] && __ssh_cli "$hostname" "${username:-$USER}" || printf_yellow "Something went wrong"
      ;;
    c)
      shift 1
      clear
      if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
        printf_read_input "What is your server address?" "120" "hostname"
      else
        hostname="$(__ssh_host | awk '{print $1}')"
      fi
      [ -n "$hostname" ] && __ssh_cli "$hostname"
      ;;
    d)
      shift 1
      clear
      $SHELL -l
      ;;
    e)
      shift 1
      clear
      $MYSSH_SSH_CONFIG_EDITOR "$MYSSH_SSH_CONFIG_FILE"
      ;;
    n)
      shift 1
      __addhost
      printf_read_input "5" "Enter a comment" "180" "comment" "-e"
      printf_read_input "5" "Enter the server address" "180" "address" "-e"
      printf_read_input "5" "Enter the username" "180" "user" "-e"
      __cp_rf "$MYSSH_SSH_CONFIG_FILE" "$MYSSH_CONFIG_BACKUP_DIR/ssh_config.$$"
      if __ssh_new_host "$MYSSH_SSH_CONFIG_FILE"; then
        printf_newline
        printf_green "Added $name with the address of $address to $MYSSH_SSH_CONFIG_FILE"
        printf_pause "Press any key to continue"
      else
        printf_red "Failed to add $name to $MYSSH_SSH_CONFIG_FILE"
        printf_pause "Press any key to continue"
        return 1
      fi
      ;;
    p)
      clear
      printf_read_input "What is your username?" "120" "username"
      printf_read_input "What is your servers ID? [100]" "120" "host_id"
      [ -n "$host_id" ] || host_id="100"
      [ -n "$username" ] && [ -n "$host_id" ] && proxmox-cli --user "${username:-$USER}" ssh "$host_id" || printf_yellow "Something went wrong"
      ;;
    r)
      shift 1
      clear
      printf_newline '\n\n'
      [ -d "$HOME/.ssh/known_hosts.d" ] || mkdir -p "$HOME/.ssh/known_hosts.d"
      find -L "$HOME/.ssh/known_hosts.d" -type f -printf '%P\n' | printf_column 2>/dev/null
      printf_read_input "5" "Enter filename" "180" "file" "-e"
      if [ -f "$HOME/.ssh/known_hosts.d/$file" ]; then
        rm -f "$HOME/.ssh/known_hosts.d/$file" &&
          printf_green "Removed $file" || printf_return "Failed to remove $file"
      else
        printf_return "$HOME/.ssh/known_hosts.d/$file doesn't exist"
      fi
      printf_pause "Press any key to continue"
      ;;
    s)
      shift 1
      clear
      if [ -f "$MYSSH_SSH_CONFIG_FILE" ]; then
        less <"$MYSSH_SSH_CONFIG_FILE" #| printf_readline $MYSSH_OUTPUT_COLOR
        printf_pause
      else
        printf_red "There isn't a ssh config file"
      fi
      ;;
    x)
      shift 1
      clear
      [ -s "$MYSSH_TEMP_FILE" ] && cat "$MYSSH_TEMP_FILE" | printf_readline || printf_cyan "The log file seems to be empty"
      printf_pause "Press any key to continue"
      ;;
    z)
      shift 1
      clear
      break
      ;;
    *) shift ;;
    esac
    clear
    #printf_counter "5" "1" "Re-loading menu in"
  done
  clear
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_myssh() {
  if echo "$1" | grep -q '@'; then
    username="$(echo $1 | awk -F'@' '{print $1}' | grep '^' || false)"
    hostname="$(echo ${2:-$1} | awk -F'@' '{print $2}' | grep '^' || false)"
  else
    hostname="${1:-}"
    username="${2:-}"
  fi
  [ -n "$username" ] || username="root"
  if [ "$MYSSH_TERMINAL" = "yes" ] || [ $# -eq 0 ]; then
    __term
  elif [ -n "$hostname" ]; then
    if [ ! -t 0 ]; then
      __notifications "Attempting to connect to $hostname"
      myterminal -e "$MYSSH_SSH_BIN_FILE $username@$hostname" || __notifications "Failed to connect to $hostname"
    else
      __ssh_cli $hostname $username
    fi
  else
    __notifications "No host was provided for me to connect to"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
MYSSH_CONFIG_FILE="${MYSSH_CONFIG_FILE:-settings.conf}"
MYSSH_CONFIG_DIR="${MYSSH_CONFIG_DIR:-$HOME/.config/myscripts/myssh}"
MYSSH_CONFIG_BACKUP_DIR="${MYSSH_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/myssh/backups}"
MYSSH_LOG_DIR="${MYSSH_LOG_DIR:-$HOME/.local/log/myssh}"
MYSSH_TEMP_DIR="${MYSSH_TEMP_DIR:-$HOME/.local/tmp/system_scripts/myssh}"
MYSSH_CACHE_DIR="${MYSSH_CACHE_DIR:-$HOME/.cache/myssh}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
MYSSH_OUTPUT_COLOR_1="${MYSSH_OUTPUT_COLOR_1:-33}"
MYSSH_OUTPUT_COLOR_2="${MYSSH_OUTPUT_COLOR_2:-5}"
MYSSH_OUTPUT_COLOR_GOOD="${MYSSH_OUTPUT_COLOR_GOOD:-2}"
MYSSH_OUTPUT_COLOR_ERROR="${MYSSH_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
MYSSH_NOTIFY_ENABLED="${MYSSH_NOTIFY_ENABLED:-yes}"
MYSSH_GOOD_NAME="${MYSSH_GOOD_NAME:-Great:}"
MYSSH_ERROR_NAME="${MYSSH_ERROR_NAME:-Error:}"
MYSSH_GOOD_MESSAGE="${MYSSH_GOOD_MESSAGE:-No errors reported}"
MYSSH_ERROR_MESSAGE="${MYSSH_ERROR_MESSAGE:-Errors were reported}"
MYSSH_NOTIFY_CLIENT_NAME="${MYSSH_NOTIFY_CLIENT_NAME:-$APPNAME}"
MYSSH_NOTIFY_CLIENT_ICON="${MYSSH_NOTIFY_CLIENT_ICON:-notification-new}"
MYSSH_NOTIFY_CLIENT_URGENCY="${MYSSH_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
MYSSH_SSH_CONFIG_FILE="${MYSSH_SSH_CONFIG_FILE:-$HOME/.ssh/config}"
MYSSH_SSH_CONFIG_EDITOR="${MYSSH_SSH_CONFIG_EDITOR:-$(builtin type -P nvim || builtin type -P nano || builtin type -P vim)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE" ] && . "$MYSSH_CONFIG_DIR/$MYSSH_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$MYSSH_LOG_DIR" ] || mkdir -p "$MYSSH_LOG_DIR" |& __devnull
[ -d "$MYSSH_TEMP_DIR" ] || mkdir -p "$MYSSH_TEMP_DIR" |& __devnull
[ -d "$MYSSH_CACHE_DIR" ] || mkdir -p "$MYSSH_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MYSSH_TEMP_FILE="${MYSSH_TEMP_FILE:-$(mktemp $MYSSH_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$MYSSH_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$MYSSH_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$MYSSH_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYSSH_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$MYSSH_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$MYSSH_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",term,loop,kill:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    MYSSH_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    MYSSH_CWD="$2"
    [ -d "$MYSSH_CWD" ] || mkdir -p "$MYSSH_CWD" |& __devnull
    shift 2
    ;;
  --term)
    shift 1
    MYSSH_TERMINAL="true"
    ;;
  --loop)
    shift 1
    MYSSH_RETRY="true"
    ;;
  --kill)
    MYSSH_KILL_FILE="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# MYSSH_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# MYSSH_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && MYSSH_CWD="$1" && shift 1 || MYSSH_CWD="${MYSSH_CWD:-$PWD}"
MYSSH_CWD="$(realpath "${MYSSH_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$MYSSH_CWD" ] && cd "$MYSSH_CWD"; then
# if [ "$MYSSH_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $MYSSH_CWD"
# fi
# else
# printf_exit "ðŸ’” $MYSSH_CWD does not exist ðŸ’”"
# fi
export MYSSH_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
MYSSH_SSH_BIN_FILE="$(type -P ssh || echo 'false')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_myssh "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
