#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208141259-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  myterminal --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 14, 2022 12:59 EDT
# @@File             :  myterminal
# @@Description      :  Open up terminal emulator with expanded support and install functionality
# @@Changelog        :  Expanded terminal detection, added GPU check and install function
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208141259-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
MYTERMINAL_REQUIRE_SUDO="${MYTERMINAL_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}";#[ -z "$CASJAYSDEV_TITLE_SET" ] && echo -ne '\033]2;'${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME'\007' && export CASJAYSDEV_TITLE_SET="$APPNAME"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE"
  fi
  [ -d "$MYTERMINAL_CONFIG_DIR" ] || mkdir -p "$MYTERMINAL_CONFIG_DIR"
  [ -d "$MYTERMINAL_CONFIG_BACKUP_DIR" ] || mkdir -p "$MYTERMINAL_CONFIG_BACKUP_DIR"
  [ -f "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE" ] &&
    cp -Rf "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE" "$MYTERMINAL_CONFIG_BACKUP_DIR/$MYTERMINAL_CONFIG_FILE.$$"
  cat <<EOF >"$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE"
# Settings for myterminal
MYTERMINAL_BIN="${MYTERMINAL_BIN:-}"
MYTERMINAL_NAME="${MYTERMINAL_NAME:-}"
MYTERMINAL_PREV="${MYTERMINAL_PREV:-}"
MYTERMINAL_MULTIPLEX="${MYTERMINAL_MULTIPLEX:-}"
MYTERMINAL_MULTIPLEX_OPTS="${MYTERMINAL_MULTIPLEX_OPTS:-}"
MYTERMINAL_NOTIFICATIONS="${MYTERMINAL_NOTIFICATIONS:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
MYTERMINAL_OUTPUT_COLOR_1="${MYTERMINAL_OUTPUT_COLOR_1:-}"
MYTERMINAL_OUTPUT_COLOR_2="${MYTERMINAL_OUTPUT_COLOR_2:-}"
MYTERMINAL_OUTPUT_COLOR_GOOD="${MYTERMINAL_OUTPUT_COLOR_GOOD:-}"
MYTERMINAL_OUTPUT_COLOR_ERROR="${MYTERMINAL_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
MYTERMINAL_NOTIFY_ENABLED="${MYTERMINAL_NOTIFY_ENABLED:-}"
MYTERMINAL_GOOD_NAME="${MYTERMINAL_GOOD_NAME:-}"
MYTERMINAL_ERROR_NAME="${MYTERMINAL_ERROR_NAME:-}"
MYTERMINAL_GOOD_MESSAGE="${MYTERMINAL_GOOD_MESSAGE:-}"
MYTERMINAL_ERROR_MESSAGE="${MYTERMINAL_ERROR_MESSAGE:-}"
MYTERMINAL_NOTIFY_CLIENT_NAME="${MYTERMINAL_NOTIFY_CLIENT_NAME:-}"
MYTERMINAL_NOTIFY_CLIENT_ICON="${MYTERMINAL_NOTIFY_CLIENT_ICON:-}"
MYTERMINAL_NOTIFY_CLIENT_URGENCY="${MYTERMINAL_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "myterminal:  Open up terminal emulator with expanded support - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: myterminal [options] [commands]"
  __printf_line "Detects and launches the best available terminal emulator"
  __printf_line "Supports 60+ terminals with developer-focused prioritization"
  __printf_line ""
  __printf_line "Main Options:"
  __printf_line "--dir [path]                    - Sets the working directory"
  __printf_line "--install [terminal]            - Install a supported terminal"
  __printf_line "--tmux                          - Launch with tmux session"
  __printf_line "--screen                        - Launch with screen session"
  __printf_line "--silent                        - Suppress output messages"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Install Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Supported terminals for --install:"
  __printf_line "ghostty                         - Modern terminal by Mitchell Hashimoto"
  __printf_line "alacritty                       - GPU-accelerated cross-platform"
  __printf_line "rio                             - Hardware-accelerated Rust terminal"
  __printf_line "wezterm                         - Feature-rich Rust-based terminal"
  __printf_line "foot                            - Lightweight Wayland terminal"
  __printf_line ""
  __printf_line "Note: GPU terminals require OpenGL/Vulkan support"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Examples"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "myterminal                      - Launch best available terminal"
  __printf_line "myterminal --install ghostty    - Install ghostty terminal"
  __printf_line "myterminal --dir /tmp           - Launch in /tmp directory"
  __printf_line "myterminal --tmux               - Launch with tmux session"
  __printf_line "myterminal vim file.txt         - Launch terminal running vim"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  [ "$(id -u)" -eq 0 ]
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  [ "$(id -u)" -ne 0 ]
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Validate user exists
__validate_user() {
  local user="${1:-$USER}"
  if ! id "$user" >/dev/null 2>&1; then
    echo "Error: User '$user' does not exist" >&2
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  local user="${1:-$USER}"

  __validate_user "$user" || return 1

  if __cmd_exists id; then
    id -Gn "$user" 2>/dev/null | grep -Eq '\b(wheel|adm|sudo|admin|staff|root)\b'
  else
    grep -sh "$user" "/etc/group" | grep -Eq 'wheel|adm|sudo|admin|staff|root'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  if __sudoif && __cmd_exists sudo; then
    sudo -HE "$@"
  elif __sudoif; then
    eval "$@"
  else
    return 1
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  local user="${1:-$USER}"

  __validate_user "$user" || return 1

  if timeout 5 sudo -vn 2>/dev/null && timeout 5 sudo -ln 2>&1 | grep -vq 'may not' >/dev/null; then
    return 0
  fi

  if __sudo_group "$user"; then
    return 0
  fi

  if timeout 5 sudo true &>/dev/null; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  if __user_is_root; then
    return 0
  elif __can_i_sudo "${RUN_USER:-$USER}"; then
    return 0
  elif __user_is_not_root && __sudoask; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
__requiresudo() {
  if [ "$MYTERMINAL_REQUIRE_SUDO" = "yes" ] && [ -z "$MYTERMINAL_REQUIRE_SUDO_RUN" ]; then
    export MYTERMINAL_REQUIRE_SUDO="no"
    export MYTERMINAL_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="$*"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"

  if __sudoif; then
    export PATH="$PATH"
    if $SUDO ${OPTS:-} $CMD $CMD_ARGS; then
      exitCode=0
    else
      exitCode=$?
    fi
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$MYTERMINAL_TEMP_FILE" ] && rm -Rf "$MYTERMINAL_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__detect_gpu_acceleration() {
  local has_gpu=false

  # Check for GPU acceleration support
  if [ -n "$DISPLAY" ]; then
    # Check for OpenGL support
    if __cmd_exists glxinfo; then
      if glxinfo 2>/dev/null | grep -qi "direct rendering: yes"; then
        has_gpu=true
      fi
    fi

    # Check for Vulkan support
    if __cmd_exists vulkaninfo; then
      if vulkaninfo 2>/dev/null | grep -qi "deviceName"; then
        has_gpu=true
      fi
    fi

    # Check for dedicated GPU (NVIDIA/AMD)
    if __cmd_exists lspci; then
      if lspci 2>/dev/null | grep -iE "(vga|3d|display)" | grep -iE "(nvidia|amd|radeon)"; then
        has_gpu=true
      # Check for modern Intel with GPU acceleration
      elif lspci 2>/dev/null | grep -iE "(vga|3d|display)" | grep -iE "intel.*iris|intel.*xe|intel.*arc"; then
        has_gpu=true
      fi
    fi

    # Check for GPU device files
    if [ -d "/dev/dri" ] && [ -n "$(ls /dev/dri/ 2>/dev/null)" ]; then
      has_gpu=true
    fi

    # macOS GPU check
    if [ "$(uname -s)" = "Darwin" ]; then
      if __cmd_exists system_profiler && system_profiler SPDisplaysDataType 2>/dev/null | grep -qi "Metal"; then
        has_gpu=true
      fi
    fi
  fi

  # SSH/headless environments typically don't have GPU acceleration
  if [ -n "$SSH_CONNECTION" ] || [ -z "$DISPLAY" ]; then
    has_gpu=false
  fi

  echo "$has_gpu"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_github_release_url() {
  local repo="$1"
  local pattern="$2"
  local api_url="https://api.github.com/repos/${repo}/releases/latest"

  if __am_i_online && __cmd_exists curl; then
    local api_response=$(curl -s "$api_url" 2>/dev/null)
    if echo "$api_response" | grep -q '"browser_download_url"'; then
      echo "$api_response" | grep -o "\"browser_download_url\": *\"[^\"]*${pattern}[^\"]*\"" | cut -d'"' -f4 | head -1
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__download_and_extract() {
  local download_url="$1"
  local archive_name="$2"
  local temp_dir="$3"

  if [ -z "$download_url" ]; then
    return 1
  fi

  printf_green "Found release: $download_url"
  cd "$temp_dir" && curl -L "$download_url" -o "$archive_name" 2>/dev/null || return 1

  # Extract based on file extension
  local extracted=false
  if echo "$download_url" | grep -q "\.tar\.gz\|\.tgz"; then
    tar -xzf "$archive_name" 2>/dev/null && extracted=true
  elif echo "$download_url" | grep -q "\.tar\.xz"; then
    tar -xf "$archive_name" 2>/dev/null && extracted=true
  elif echo "$download_url" | grep -q "\.zip" && __cmd_exists unzip; then
    unzip "$archive_name" 2>/dev/null && extracted=true
  fi

  [ "$extracted" = "true" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__install_binary() {
  local binary_name="$1"
  local temp_dir="$2"
  local bin_dir="$3"
  local install_location="$4"

  local binary_path=$(find "$temp_dir" -name "$binary_name" -type f -executable 2>/dev/null | head -1)
  if [ -n "$binary_path" ]; then
    if [ "$install_location" = "system" ]; then
      __sudorun cp "$binary_path" "$bin_dir/"
      __sudorun chmod +x "$bin_dir/$binary_name"
    else
      cp "$binary_path" "$bin_dir/"
      chmod +x "$bin_dir/$binary_name"
    fi
    printf_green "Successfully installed $binary_name"
    return 0
  fi
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__install_terminal() {
  local terminal_name="$1"
  local install_location=""
  local bin_dir=""
  local share_dir=""
  local temp_dir="$(mktemp -d)"
  local requires_gpu=false

  # Check if terminal requires GPU acceleration
  case "$terminal_name" in
  "ghostty" | "alacritty" | "rio" | "wezterm")
    requires_gpu=true
    ;;
  "foot" | "kitty")
    requires_gpu=false # These can fallback to software rendering
    ;;
  esac

  # Check GPU support if required
  if [ "$requires_gpu" = "true" ]; then
    local has_gpu="$(__detect_gpu_acceleration)"
    if [ "$has_gpu" = "false" ]; then
      printf_red "❌ Cannot install $terminal_name: GPU acceleration required but not available"
      printf_yellow "📋 This terminal needs:"
      printf_yellow "   • OpenGL or Vulkan support"
      printf_yellow "   • Graphics drivers installed"
      printf_yellow "   • Display server running (not SSH/headless)"
      printf_yellow ""
      printf_yellow "💡 Try installing instead:"
      printf_yellow "   • foot (lightweight, software rendering)"
      printf_yellow "   • xterm (basic, always works)"
      printf_yellow "   • gnome-terminal (widely supported)"
      printf_yellow ""
      printf_yellow "🔧 To enable GPU acceleration:"
      printf_yellow "   • Install graphics drivers: apt install mesa-utils"
      printf_yellow "   • Test with: glxinfo | grep 'direct rendering'"
      rm -rf "$temp_dir"
      return 1
    else
      printf_green "✅ GPU acceleration detected - proceeding with $terminal_name installation"
    fi
  fi

  # Determine install location based on permissions
  if __user_is_root || __can_i_sudo; then
    install_location="system"
    bin_dir="/usr/local/bin"
    share_dir="/usr/local/share"
  else
    install_location="user"
    bin_dir="$HOME/.local/bin"
    share_dir="$HOME/.local/share"
    mkdir -p "$bin_dir" "$share_dir"
  fi

  printf_blue "Installing $terminal_name to $install_location location ($bin_dir)"

  local arch="$(uname -m)"
  local os="$(uname -s | tr '[:upper:]' '[:lower:]')"
  local download_url=""
  local success=false

  case "$terminal_name" in
  "ghostty")
    case "$os-$arch" in
    "linux-x86_64")
      download_url=$(__get_github_release_url "ghostty-org/ghostty" "linux.*x86_64")
      ;;
    "linux-aarch64" | "linux-arm64")
      download_url=$(__get_github_release_url "ghostty-org/ghostty" "linux.*aarch64\\|arm64")
      ;;
    "darwin-x86_64")
      download_url=$(__get_github_release_url "ghostty-org/ghostty" "macos.*x86_64")
      ;;
    "darwin-arm64")
      download_url=$(__get_github_release_url "ghostty-org/ghostty" "macos.*arm64")
      ;;
    esac

    if __download_and_extract "$download_url" "ghostty.tar.gz" "$temp_dir"; then
      __install_binary "ghostty" "$temp_dir" "$bin_dir" "$install_location" && success=true
    fi
    ;;

  "rio")
    case "$os-$arch" in
    "linux-x86_64")
      download_url=$(__get_github_release_url "raphamorim/rio" "linux")
      ;;
    "darwin-x86_64" | "darwin-arm64")
      download_url=$(__get_github_release_url "raphamorim/rio" "macos")
      ;;
    esac

    if __download_and_extract "$download_url" "rio-archive" "$temp_dir"; then
      __install_binary "rio" "$temp_dir" "$bin_dir" "$install_location" && success=true
    fi
    ;;

  "alacritty")
    case "$os-$arch" in
    "linux-x86_64")
      download_url=$(__get_github_release_url "alacritty/alacritty" "linux.*gnu")
      ;;
    "darwin-x86_64" | "darwin-arm64")
      download_url=$(__get_github_release_url "alacritty/alacritty" "macos")
      ;;
    esac

    if __download_and_extract "$download_url" "alacritty-archive" "$temp_dir"; then
      __install_binary "alacritty" "$temp_dir" "$bin_dir" "$install_location" && success=true
    fi
    ;;

  "wezterm")
    case "$os-$arch" in
    "linux-x86_64")
      download_url="https://github.com/wez/wezterm/releases/latest/download/wezterm-nightly.Ubuntu20.04.tar.xz"
      ;;
    "darwin-x86_64" | "darwin-arm64")
      download_url="https://github.com/wez/wezterm/releases/latest/download/WezTerm-macos-latest.zip"
      ;;
    esac

    if __download_and_extract "$download_url" "wezterm-archive" "$temp_dir"; then
      __install_binary "wezterm" "$temp_dir" "$bin_dir" "$install_location" && success=true
    fi
    ;;

  "foot")
    # Foot is typically available in package managers
    printf_yellow "Foot is best installed via package manager (apt install foot, pacman -S foot, etc.)"
    printf_yellow "Attempting to install via package manager..."

    if __cmd_exists apt && [ "$install_location" = "system" ]; then
      __sudorun apt update && __sudorun apt install -y foot && success=true
    elif __cmd_exists pacman && [ "$install_location" = "system" ]; then
      __sudorun pacman -S --noconfirm foot && success=true
    elif __cmd_exists dnf && [ "$install_location" = "system" ]; then
      __sudorun dnf install -y foot && success=true
    else
      printf_red "Package manager not found or not supported"
      rm -rf "$temp_dir"
      return 1
    fi
    ;;

  *)
    printf_red "Installation not supported for $terminal_name"
    printf_yellow "Please install manually or via your package manager"
    rm -rf "$temp_dir"
    return 1
    ;;
  esac

  # Cleanup
  rm -rf "$temp_dir"

  if [ "$success" = "true" ]; then
    printf_green "Installation completed successfully"
    # Update PATH if installing to user location
    if [ "$install_location" = "user" ]; then
      if ! echo "$PATH" | grep -q "$bin_dir"; then
        printf_yellow "Add $bin_dir to your PATH in ~/.bashrc or ~/.zshrc:"
        printf_cyan "export PATH=\"$bin_dir:\$PATH\""
      fi
    fi
    return 0
  else
    printf_red "Installation failed for $terminal_name"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_myterminal() {
  local CMD ARGS COMMAND opt="-e"

  if [ $# -eq 0 ]; then
    CMD="$(builtin type -P "${SHELL:-bash}")"
    ARGS=""
  else
    CMD="$1"
    shift
    ARGS="$*"
  fi

  [ -n "$ARGS" ] && COMMAND="$CMD $ARGS" || COMMAND="$CMD"

  # Validate command exists using existing function
  if ! __cmd_exists "$CMD"; then
    printf_red "$CMD does not seem to exist"
    __notifications "MyTerminal" "$CMD does not seem to exist\nAttempting to launch $COMMAND anyways"
  fi

  if [ "$MYTERMINAL_NOTIFY_ENABLED" = "yes" ]; then
    __notifications "MyTerminal" "Attempting to launch $MYTERMINAL_NAME"
  fi

  if [ -n "$SSH_CONNECTION" ] || [ -n "$SSH_TTY" ] || [ -z "$DISPLAY" ]; then
    printf_blue "Executing $COMMAND in shell due to no display"
    if [ "$MYTERMINAL_BIN" = "$MYTERMINAL_MULTIPLEX" ]; then
      $MYTERMINAL_MULTIPLEX $MYTERMINAL_MULTIPLEX_OPTS $COMMAND
    elif __cmd_exists screen; then
      screen "$COMMAND" &>/dev/null
    elif __cmd_exists tmux; then
      tmux new "$COMMAND" &>/dev/null
    else
      if echo "$COMMAND" | grep -shqE "bash|$SHELL"; then
        eval "$COMMAND"
      else
        eval "$COMMAND"
        eval $SHELL
      fi
    fi
  else
    if [ "$TERMINAL_APP" = "TRUE" ]; then
      export TERMINAL_APP=""
      eval $MYTERMINAL_BIN ${OPTIONS:-$opt} "$COMMAND" &>/dev/null &
    else
      $MYTERMINAL_BIN ${OPTIONS:-$opt} "$COMMAND" &>/dev/null &
      #disown
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables
MYTERMINAL_BIN="${MYTERMINAL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
MYTERMINAL_CONFIG_FILE="${MYTERMINAL_CONFIG_FILE:-settings.conf}"
MYTERMINAL_CONFIG_DIR="${MYTERMINAL_CONFIG_DIR:-$HOME/.config/myscripts/myterminal}"
MYTERMINAL_CONFIG_BACKUP_DIR="${MYTERMINAL_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/myterminal/backups}"
MYTERMINAL_LOG_DIR="${MYTERMINAL_LOG_DIR:-$HOME/.local/log/myterminal}"
MYTERMINAL_TEMP_DIR="${MYTERMINAL_TEMP_DIR:-$HOME/.local/tmp/system_scripts/myterminal}"
MYTERMINAL_CACHE_DIR="${MYTERMINAL_CACHE_DIR:-$HOME/.cache/myterminal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
MYTERMINAL_OUTPUT_COLOR_1="${MYTERMINAL_OUTPUT_COLOR_1:-33}"
MYTERMINAL_OUTPUT_COLOR_2="${MYTERMINAL_OUTPUT_COLOR_2:-5}"
MYTERMINAL_OUTPUT_COLOR_GOOD="${MYTERMINAL_OUTPUT_COLOR_GOOD:-2}"
MYTERMINAL_OUTPUT_COLOR_ERROR="${MYTERMINAL_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
MYTERMINAL_NOTIFY_ENABLED="${MYTERMINAL_NOTIFY_ENABLED:-yes}"
MYTERMINAL_GOOD_NAME="${MYTERMINAL_GOOD_NAME:-Great:}"
MYTERMINAL_ERROR_NAME="${MYTERMINAL_ERROR_NAME:-Error:}"
MYTERMINAL_GOOD_MESSAGE="${MYTERMINAL_GOOD_MESSAGE:-No errors reported}"
MYTERMINAL_ERROR_MESSAGE="${MYTERMINAL_ERROR_MESSAGE:-Errors were reported}"
MYTERMINAL_NOTIFY_CLIENT_NAME="${MYTERMINAL_NOTIFY_CLIENT_NAME:-$APPNAME}"
MYTERMINAL_NOTIFY_CLIENT_ICON="${MYTERMINAL_NOTIFY_CLIENT_ICON:-notification-new}"
MYTERMINAL_NOTIFY_CLIENT_URGENCY="${MYTERMINAL_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
MYTERMINAL_NAME="${MYTERMINAL_NAME:-config}"
MYTERMINAL_BIN="${MYTERMINAL_BIN:-$TERMINAL}"
MYTERMINAL_MULTIPLEX="${MYTERMINAL_MULTIPLEX:-tmux}"
MYTERMINAL_MULTIPLEX_OPTS="${MYTERMINAL_MULTIPLEX_OPTS:--f $CASJAYSDEVDIR/templates/tmux/simple.conf}"
MYTERMINAL_NOTIFICATIONS="${MYTERMINAL_NOTIFICATIONS:-}"
MYTERMINAL_PREV="${MYTERMINAL_PREV:-$MYTERMINAL_BIN}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE" ] && . "$MYTERMINAL_CONFIG_DIR/$MYTERMINAL_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$MYTERMINAL_LOG_DIR" ] || mkdir -p "$MYTERMINAL_LOG_DIR" |& __devnull
[ -d "$MYTERMINAL_TEMP_DIR" ] || mkdir -p "$MYTERMINAL_TEMP_DIR" |& __devnull
[ -d "$MYTERMINAL_CACHE_DIR" ] || mkdir -p "$MYTERMINAL_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MYTERMINAL_TEMP_FILE="${MYTERMINAL_TEMP_FILE:-$(mktemp $MYTERMINAL_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$MYTERMINAL_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$MYTERMINAL_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$MYTERMINAL_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$MYTERMINAL_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$MYTERMINAL_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$MYTERMINAL_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions
[ "$MYTERMINAL_NAME" != "config" ] || { MYTERMINAL_BIN="" TERMINAL=""; }
[ "$MYTERMINAL_BIN" != "myterminal" ] || { MYTERMINAL_BIN="" TERMINAL=""; }
[ -n "$(builtin type -P "$MYTERMINAL_BIN")" ] && MYTERMINAL_NAME="$(basename -- "$MYTERMINAL_BIN")" || { MYTERMINAL_BIN="" TERMINAL=""; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$MYTERMINAL_BIN" = "" ] || [ "$MYTERMINAL_NAME" = "" ]; then
  if [ -z "$DISPLAY" ] || [ -n "$SSH_CONNECTION" ]; then
    # Terminal multiplexers and CLI tools (for headless/SSH environments)
    if [ "$(builtin type -P "$MYTERMINAL_MULTIPLEX")" ]; then
      MYTERMINAL_BIN="$MYTERMINAL_MULTIPLEX $MYTERMINAL_MULTIPLEX_OPTS"
    elif __cmd_exists tmux; then
      MYTERMINAL_BIN="tmux new" # Modern multiplexer, preferred
    elif __cmd_exists screen; then
      MYTERMINAL_BIN="screen" # Classic multiplexer
    elif __cmd_exists zellij; then
      MYTERMINAL_BIN="zellij" # Modern Rust-based multiplexer
    elif __cmd_exists byobu; then
      MYTERMINAL_BIN="byobu" # Enhanced tmux/screen wrapper
    elif __cmd_exists dvtm; then
      MYTERMINAL_BIN="dvtm" # Dynamic virtual terminal manager
    elif __cmd_exists abduco; then
      MYTERMINAL_BIN="abduco" # Session management tool
    elif __cmd_exists dtach; then
      MYTERMINAL_BIN="dtach" # Simple program detacher
    elif __cmd_exists nohup; then
      MYTERMINAL_BIN="nohup" # Run commands immune to hangups
    # Advanced shells for better CLI experience
    elif __cmd_exists fish; then
      MYTERMINAL_BIN="fish" # User-friendly shell
    elif __cmd_exists zsh; then
      MYTERMINAL_BIN="zsh" # Extended Bourne shell
    elif __cmd_exists bash; then
      MYTERMINAL_BIN="bash" # GNU Bourne Again shell
    elif __cmd_exists dash; then
      MYTERMINAL_BIN="dash" # Debian Almquist shell (fast)
    elif __cmd_exists ash; then
      MYTERMINAL_BIN="ash" # Almquist shell
    elif __cmd_exists ksh; then
      MYTERMINAL_BIN="ksh" # Korn shell
    elif __cmd_exists csh; then
      MYTERMINAL_BIN="csh" # C shell
    elif __cmd_exists tcsh; then
      MYTERMINAL_BIN="tcsh" # Enhanced C shell
    elif __cmd_exists sh; then
      MYTERMINAL_BIN="sh" # POSIX shell
    else
      MYTERMINAL_BIN="$(builtin type -P "${SHELL:-bash}")" # Fallback to user's shell
    fi
  else
    # Developer-focused terminals (most useful first)
    if [ -f "/Applications/iTerm.app/Contents/MacOS/iTerm2" ]; then
      MYTERMINAL_BIN="/Applications/iTerm.app/Contents/MacOS/iTerm2" # MacOS - best for developers
    elif [ -n "$(builtin type -P ghostty 2>/dev/null)" ]; then
      MYTERMINAL_BIN="ghostty" # Fast, modern terminal by Mitchell Hashimoto
    elif [ -n "$(builtin type -P alacritty 2>/dev/null)" ]; then
      MYTERMINAL_BIN="alacritty" # Cross-platform, GPU-accelerated, highly configurable
    elif [ -n "$(builtin type -P kitty 2>/dev/null)" ]; then
      MYTERMINAL_BIN="kitty" # Fast, feature-rich, supports graphics
    elif [ -n "$(builtin type -P wezterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="wezterm" # Rust-based, powerful features
    elif [ -n "$(builtin type -P rio 2>/dev/null)" ]; then
      MYTERMINAL_BIN="rio" # Hardware-accelerated terminal built in Rust
    elif [ -n "$(builtin type -P foot 2>/dev/null)" ]; then
      MYTERMINAL_BIN="foot" # Fast, lightweight Wayland terminal
    elif [ -n "$(builtin type -P contour 2>/dev/null)" ]; then
      MYTERMINAL_BIN="contour" # Modern C++ terminal emulator
    elif [ -n "$(builtin type -P tabby 2>/dev/null)" ]; then
      MYTERMINAL_BIN="tabby" # Modern terminal with tabs and themes
    elif [ -n "$(builtin type -P hyper 2>/dev/null)" ]; then
      MYTERMINAL_BIN="hyper" # Electron-based, highly extensible
    elif [ -n "$(builtin type -P wave 2>/dev/null)" ]; then
      MYTERMINAL_BIN="wave" # Modern terminal with AI features
    elif [ -n "$(builtin type -P fig 2>/dev/null)" ]; then
      MYTERMINAL_BIN="fig" # Terminal with autocomplete and AI features
    elif [ -n "$(builtin type -P termite 2>/dev/null)" ]; then
      MYTERMINAL_BIN="termite" # Lightweight, keyboard-centric
    elif [ -n "$(builtin type -P terminator 2>/dev/null)" ]; then
      MYTERMINAL_BIN="terminator" # Multiple terminals in one window
    elif [ -n "$(builtin type -P tilix 2>/dev/null)" ]; then
      MYTERMINAL_BIN="tilix" # Tiling terminal emulator
    elif [ -n "$(builtin type -P terminology 2>/dev/null)" ]; then
      MYTERMINAL_BIN="terminology" # Enlightenment terminal
    elif [ -n "$(builtin type -P guake 2>/dev/null)" ]; then
      MYTERMINAL_BIN="guake" # Drop-down terminal
    elif [ -n "$(builtin type -P tilda 2>/dev/null)" ]; then
      MYTERMINAL_BIN="tilda" # Drop-down terminal
    elif [ -n "$(builtin type -P yakuake 2>/dev/null)" ]; then
      MYTERMINAL_BIN="yakuake" # KDE drop-down terminal
    elif [ -n "$(builtin type -P cool-retro-term 2>/dev/null)" ]; then
      MYTERMINAL_BIN="cool-retro-term" # Retro-styled terminal
    elif [ -n "$(builtin type -P deepin-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="deepin-terminal" # Deepin desktop terminal
    elif [ -n "$(builtin type -P elementary-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="elementary-terminal" # Elementary OS terminal
    elif [ -n "$(builtin type -P sakura 2>/dev/null)" ]; then
      MYTERMINAL_BIN="sakura" # Lightweight terminal
    elif [ -n "$(builtin type -P roxterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="roxterm" # Tabbed terminal emulator
    elif [ -n "$(builtin type -P st 2>/dev/null)" ]; then
      MYTERMINAL_BIN="st" # Simple terminal (suckless)
    elif [ -n "$(builtin type -P urxvt 2>/dev/null)" ]; then
      MYTERMINAL_BIN="urxvt" # rxvt-unicode
    elif [ -n "$(builtin type -P rxvt 2>/dev/null)" ]; then
      MYTERMINAL_BIN="rxvt" # Classic rxvt
    elif [ -n "$(builtin type -P mlterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="mlterm" # Multi-lingual terminal
    elif [ -n "$(builtin type -P eterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="eterm" # Enlightenment terminal
    # Desktop environment specific terminals
    elif [ -n "$(builtin type -P konsole 2>/dev/null)" ]; then
      MYTERMINAL_BIN="konsole" # KDE terminal
    elif [ -n "$(builtin type -P qterminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="qterminal" # Qt-based terminal
    elif [ -n "$(builtin type -P lxterminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="lxterminal" # LXDE terminal
    elif [ -n "$(builtin type -P xfce4-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="xfce4-terminal" # XFCE terminal
    elif [ -n "$(builtin type -P mate-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="mate-terminal" # MATE terminal
    elif [ -n "$(builtin type -P gnome-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="gnome-terminal" # GNOME terminal
    elif [ -n "$(builtin type -P kgx 2>/dev/null)" ]; then
      MYTERMINAL_BIN="kgx" # GNOME Console (new GNOME terminal)
    elif [ -n "$(builtin type -P cinnamon-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="cinnamon-terminal" # Cinnamon terminal
    elif [ -n "$(builtin type -P pantheon-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="pantheon-terminal" # Elementary OS terminal
    # Window manager specific
    elif [ -n "$(builtin type -P i3-sensible-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="i3-sensible-terminal" # i3 window manager
    elif [ -n "$(builtin type -P rofi-sensible-terminal 2>/dev/null)" ]; then
      MYTERMINAL_BIN="rofi-sensible-terminal" # rofi launcher
    elif [ -n "$(builtin type -P x-terminal-emulator 2>/dev/null)" ]; then
      MYTERMINAL_BIN="x-terminal-emulator" # Debian alternatives system
    # Chrome OS
    elif [ -n "$(builtin type -P garcon-terminal-handler 2>/dev/null)" ]; then
      MYTERMINAL_BIN="garcon-terminal-handler" # Chrome OS
    elif [ -n "$(builtin type -P crosh 2>/dev/null)" ]; then
      MYTERMINAL_BIN="crosh" # Chrome OS shell
    # macOS fallback
    elif [ -f "/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal" ]; then
      MYTERMINAL_BIN="/System/Applications/Utilities/Terminal.app/Contents/MacOS/Terminal" # macOS default
    # Generic/fallback terminals
    elif [ -n "$(builtin type -P xterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="xterm" # Classic X terminal
    elif [ -n "$(builtin type -P uxterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="uxterm" # Unicode xterm
    elif [ -n "$(builtin type -P aterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="aterm" # Afterstep terminal
    elif [ -n "$(builtin type -P Eterm 2>/dev/null)" ]; then
      MYTERMINAL_BIN="Eterm" # Enlightenment terminal (old)
    fi
  fi
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MYTERMINAL_NAME="$(basename -- "$MYTERMINAL_BIN" 2>/dev/null)"
export TERMINAL="$MYTERMINAL_BIN"
export MYTERMINAL="$MYTERMINAL_BIN"
{ [ "$MYTERMINAL_NAME" = "config" ] || [ "$MYTERMINAL_NAME" = "" ]; } && __gen_config &>/dev/null
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -z "$MYTERMINAL_BIN" ]; then
  [ "$MYTERMINAL_NOTIFICATIONS" = "yes" ] && notifications "MyTerminal" "No terminal emulators are installed"
  printf_newline "\n"
  printf_exit 1 1 "No terminal emulators are installed"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent,install:"
LONGOPTS+=",tmux,screen"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    MYTERMINAL_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    MYTERMINAL_CWD="$2"
    [ -d "$MYTERMINAL_CWD" ] || mkdir -p "$MYTERMINAL_CWD" |& __devnull
    shift 2
    ;;
  --install)
    TERMINAL_TO_INSTALL="$2"
    shift 2
    if [ -n "$TERMINAL_TO_INSTALL" ]; then
      __install_terminal "$TERMINAL_TO_INSTALL"
      exit $?
    else
      printf_red "Please specify a terminal to install"
      printf_yellow "Supported terminals: ghostty, rio, alacritty, wezterm, foot"
      printf_yellow "Example: $APPNAME --install ghostty"
      exit 1
    fi
    ;;
  --screen)
    shift 1
    if [ -f "$HOME/.config/screen/defaultrc" ]; then
      export TERMINAL_APP="true"
      exec $TERMINAL -e "screen -qR -c $HOME/.config/screen/defaultrc"
      exit $?
    else
      __notifications "Can not launch screen"
      exit 1
    fi
    ;;
  --tmux)
    shift 1
    if [ -f "$HOME/.config/tmux/windows/default.tmux" ]; then
      export TERMINAL_APP="true"
      exec $TERMINAL -e "tmux new-session -D -A -s default -f $HOME/.config/tmux/tmux.conf 'tmux source-file ~/.config/tmux/windows/default.tmux'"
      exit $?
    else
      __notifications "Can not launch tmux"
      exit 1
    fi
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# MYTERMINAL_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# MYTERMINAL_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && MYTERMINAL_CWD="$1" && shift 1 || MYTERMINAL_CWD="${MYTERMINAL_CWD:-$PWD}"
MYTERMINAL_CWD="$(realpath "${MYTERMINAL_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$MYTERMINAL_CWD" ] && cd "$MYTERMINAL_CWD"; then
# if [ "$MYTERMINAL_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $MYTERMINAL_CWD"
# fi
# else
# printf_exit "💔 $MYTERMINAL_CWD does not exist 💔"
# fi
export MYTERMINAL_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#__requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_myterminal "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
