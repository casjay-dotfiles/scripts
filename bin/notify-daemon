#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208141441-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  notify-daemon --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 14, 2022 14:41 EDT
# @@File             :  notify-daemon
# @@Description      :  Start the notification daemon
# @@Changelog        :  New script
# @@TODO             :  Clean code
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208141441-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
NOTIFY_DAEMON_REQUIRE_SUDO="${NOTIFY_DAEMON_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE"
  fi
  [ -d "$NOTIFY_DAEMON_CONFIG_DIR" ] || mkdir -p "$NOTIFY_DAEMON_CONFIG_DIR"
  [ -d "$NOTIFY_DAEMON_CONFIG_BACKUP_DIR" ] || mkdir -p "$NOTIFY_DAEMON_CONFIG_BACKUP_DIR"
  [ -f "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE" ] &&
    cp -Rf "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE" "$NOTIFY_DAEMON_CONFIG_BACKUP_DIR/$NOTIFY_DAEMON_CONFIG_FILE.$$"
  cat <<EOF >"$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE"
# Settings for notify-daemon
NOTIFY_DAEMON_HOST="${NOTIFY_DAEMON_HOST:-}"
NOTIFY_DAEMON_PORT="${NOTIFY_DAEMON_PORT:-}"
NOTIFY_DAEMON_BIN_DEFAULT="$NOTIFY_DAEMON_BIN_DEFAULT"
NOTIFY_DAEMON_BIN_CUSTOM="${NOTIFY_DAEMON_BIN_CUSTOM:-}"
NOTIFY_DAEMON_BIN_MATE="${NOTIFY_DAEMON_BIN_MATE:-}"
NOTIFY_DAEMON_BIN_DUNST="${NOTIFY_DAEMON_BIN_DUNST:-}"
NOTIFY_DAEMON_BIN_DEADD="${NOTIFY_DAEMON_BIN_DEADD:-}"
NOTIFY_DAEMON_BIN_XFCE4="${NOTIFY_DAEMON_BIN_XFCE4:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
NOTIFY_DAEMON_OUTPUT_COLOR_1="${NOTIFY_DAEMON_OUTPUT_COLOR_1:-}"
NOTIFY_DAEMON_OUTPUT_COLOR_2="${NOTIFY_DAEMON_OUTPUT_COLOR_2:-}"
NOTIFY_DAEMON_OUTPUT_COLOR_GOOD="${NOTIFY_DAEMON_OUTPUT_COLOR_GOOD:-}"
NOTIFY_DAEMON_OUTPUT_COLOR_ERROR="${NOTIFY_DAEMON_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
NOTIFY_DAEMON_NOTIFY_ENABLED="${NOTIFY_DAEMON_NOTIFY_ENABLED:-}"
NOTIFY_DAEMON_GOOD_NAME="${NOTIFY_DAEMON_GOOD_NAME:-}"
NOTIFY_DAEMON_ERROR_NAME="${NOTIFY_DAEMON_ERROR_NAME:-}"
NOTIFY_DAEMON_GOOD_MESSAGE="${NOTIFY_DAEMON_GOOD_MESSAGE:-}"
NOTIFY_DAEMON_ERROR_MESSAGE="${NOTIFY_DAEMON_ERROR_MESSAGE:-}"
NOTIFY_DAEMON_NOTIFY_CLIENT_NAME="${NOTIFY_DAEMON_NOTIFY_CLIENT_NAME:-}"
NOTIFY_DAEMON_NOTIFY_CLIENT_ICON="${NOTIFY_DAEMON_NOTIFY_CLIENT_ICON:-}"
NOTIFY_DAEMON_NOTIFY_CLIENT_URGENCY="${NOTIFY_DAEMON_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "notify-daemon:  Start the notification daemon - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: notify-daemon [options] [commands]"
  __printf_line "term                            - "
  __printf_line "show                            - "
  __printf_line "ask                             - "
  __printf_line "enable                          - "
  __printf_line "disable                         - "
  __printf_line "restart                         - "
  __printf_line "stop                            - "
  __printf_line "start                           - "
  __printf_line "status                          - "
  __printf_line "client                          - "
  __printf_line "xfce4                           - "
  __printf_line "dunst                           - "
  __printf_line "deadd                           - "
  __printf_line "--term                          - "
  __printf_line "--ask                           - "
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Server commands: server [commands]"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "server stop                     - "
  __printf_line "server start                    - "
  __printf_line "server restart                  - "
  __printf_line "server enable                   - "
  __printf_line "server disable                  - "
  __printf_line "server status                   - "
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$NOTIFY_DAEMON_REQUIRE_SUDO" = "yes" ] && [ -z "$NOTIFY_DAEMON_REQUIRE_SUDO_RUN" ]; then
    export NOTIFY_DAEMON_REQUIRE_SUDO="no"
    export NOTIFY_DAEMON_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$NOTIFY_DAEMON_TEMP_FILE" ] && rm -Rf "$NOTIFY_DAEMON_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__ask_for_notifyd_show() {
  [ -n "$NOTIFY_DAEMON_NAME" ] && echo "$NOTIFY_DAEMON_NAME" || exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ask_for_notifyd() {
  [ -n "$NOTIFY_DAEMON_NAME" ] && exit 0 || exit 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__netcat_test() {
  __cmd_exists $NOTIFY_DAEMON_NETCAT || __notifications "Daemon" "The program netcat is not installed"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__nc_send() {
  local _LOG="${3:-$_LOG}"
  $NOTIFY_DAEMON_NETCAT -c $1 $2 2>>"$_LOG" && true || $NOTIFY_DAEMON_NETCAT -w 1 $1 $2 2>>"$_LOG" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__getstatus() {
  local NOTIFY_DAEMON_NAME="${1:-$NOTIFY_DAEMON_NAME}"
  ps -ux | grep "$NOTIFY_DAEMON_NAME" | grep -qv 'grep ' && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__kill_server() {
  __netcat_kill "$NOTIFY_DAEMON_PORT" &>/dev/null && printf_blue "Server has been stopped" || printf_red "Failed to stop"
  sleep 2
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__pidof() {
  if grep -shqiE 'chromeos|Chromium OS' "/proc/version"; then
    ps -ux | grep '[n]otificationd.elf' | awk '{print $2}' | head -n1
  else
    pidof "$1"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_notifyd() {
  cat <<EOF | tee -p "$NOTIFY_DAEMON_CONFIG_DIR/notifyd" &>/dev/null
  # custom notify daemon
  #if cmd_exists ${NOTIFY_DAEMON_FILE:-false}; then
  #  NOTIFY_DAEMON_FILE="${NOTIFY_DAEMON_FILE:-}"
  #  NOTIFY_DAEMON_NAME="${NOTIFY_DAEMON_NAME:-}"
  #  return 0
  #else
  return 1
  #fi

EOF
  [ -f "$NOTIFY_DAEMON_CONFIG_DIR/notifyd" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__running() {
  local NOTIFY_DAEMON_NAME="${1:-$NOTIFY_DAEMON_NAME}"
  if [ -n "$NOTIFY_DAEMON_NAME" ] && __pidof "$NOTIFY_DAEMON_NAME" >/dev/null 2>&1; then
    printf_green "${NOTIFY_DAEMON_NAME:-$NOTIFY_DAEMON_FILE} is currently the notify daemon" &&
      __notifications "Daemon" "${NOTIFY_DAEMON_NAME:-$NOTIFY_DAEMON_FILE} is currently the notify daemon"
    return 0
  elif __pidof "$NOTIFY_DAEMON_NAME" >/dev/null 2>&1; then
    printf_error "Not running"
    __notifications "Daemon" "notify-daemon is not running\nNotify daemon should be ${NOTIFY_DAEMON_NAME:-$NOTIFY_DAEMON_FILE}"
  else
    __notifications "Daemon" "notify-daemon is not running\nNotify daemon is ${NOTIFY_DAEMON_NAME:-$NOTIFY_DAEMON_FILE}"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__kill() {
  local pid=""
  local NOTIFY_DAEMON_NAME="${1:-$NOTIFY_DAEMON_NAME}"
  __pidof "$NOTIFY_DAEMON_NAME" || return 0
  [ -d "$NOTIFY_DAEMON_SERVER_PATH" ] || __mkd "$NOTIFY_DAEMON_SERVER_PATH"
  __notifications "Daemon" "Stopping the notify-daemon"
  printf_yellow "Stopping the notify-daemon"
  pid="$(__pidof "$NOTIFY_DAEMON_NAME")"
  kill -s KILL "$pid" >/dev/null 2>&1
  sleep 3
  pid="$(__pidof "$NOTIFY_DAEMON_NAME" &>/dev/null)"
  if [ -n "$pid" ]; then
    __notifications "Daemon" "Failed to stop $NOTIFY_DAEMON_NAME"
    printf_red "Failed to stop $NOTIFY_DAEMON_NAME"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__start() {
  exec "$*" &>/dev/null &
  if [ "$?" = 0 ]; then
    __notifications "Daemon" "$NOTIFY_DAEMON_NAME has been started as the notify daemon"
    exitCode=0
    disown
  else
    exitCode=1
  fi
  sleep 3
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__restart() {
  __kill "$NOTIFY_DAEMON_NAME"
  __start "$1" || __start "$1"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__client() {
  local title="" msg="" _PATH="" _LOG=""
  __netcat_test
  title="$1"
  msg="$2"
  _PATH="$(mktemp "$NOTIFY_DAEMON_CLIENT_PATH/XXX.tmp")"
  _LOG="$NOTIFY_DAEMON_CLIENT_PATH/client.log"
  __mkd "$NOTIFY_DAEMON_CLIENT_PATH"
  printf_green "Attempting to send '$msg' to $NOTIFY_DAEMON_HOST on $NOTIFY_DAEMON_PORT" 2>>"$_LOG"
  __notifications "Daemon" "Attempting to send $msg to $NOTIFY_DAEMON_HOST on $NOTIFY_DAEMON_PORT" 2>>"$_LOG"
  printf "%s\n" "$title" "$msg" >"$_PATH" 2>>"$_LOG" &&
    cat "$_PATH" 2>>"$_LOG" | __nc_send "$NOTIFY_DAEMON_HOST" "$NOTIFY_DAEMON_PORT" 2>>"$_LOG" &&
    __rm_rf "$_PATH" && sleep 3 && return 0 || {
    __notifications "Daemon" "Failed to send message: ensure the server is running"
    return 1
  }
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__server() {
  local _PORT="" _TMP="" _PATH="" _LOG="" _KILL="" title="" msg=""
  __clean_return() { __rm_rf "$_PATH" "$_LOG" && return "$1"; }
  _PORT="$NOTIFY_DAEMON_PORT"
  _TMP="$NOTIFY_DAEMON_SERVER_PATH"
  _PATH="$NOTIFY_DAEMON_SERVER_PATH/msg.txt"
  _LOG="$NOTIFY_DAEMON_LOG_FILE"
  _KILL="$NOTIFY_DAEMON_KILL_PATH"
  echo ""
  __mkd "$_TMP"
  __netcat_test
  netstatg "$_PORT" &>/dev/null && printf_exit "Already Running" || printf_green "Launching server on port $_PORT"
  __notifications "Daemon" "Starting notify-daemon server on port $_PORT"
  __rm_rf "$_KILL" "$_LOG" "$_PATH"
  while :; do
    cmdsPID="$$"
    echo "$cmdsPID" >>"$_LOG"
    $NOTIFY_DAEMON_NETCAT -l -p "$_PORT" >"$_PATH" 2>>"$_LOG"
    echo "New notification in $_PATH" >>"$_LOG"
    title="$(head -n1 "$_PATH")"
    msg="$(tail -n1 "$_PATH")"
    __notifications "$title" "$msg"
    __clean_return $?
    if [ -f "$_KILL" ]; then
      __kill_server &>/dev/null
      __rm_rf "$_LOG" "$_PATH"
      __notifications "Daemon" "notify-daemon server is shutting down"
      break
    fi
  done
  __clean_return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__startup() {
  printf_green "Adding the Notification Daemon to startup"
  cat <<EOF | tee -p "$HOME/.config/autostart/notifyd.desktop" &>/dev/null
#!/usr/bin/env xdg-open

[Desktop Entry]
Encoding=UTF-8
Version=0.9.4
Type=Application
Name=Notification Daemon
Icon=preferences-desktop-notification
Comment=Start notifyd
Exec=notify-daemon start
RunHook=0
StartupNotify=false
Terminal=false
Hidden=false

EOF

  __start "$NOTIFY_DAEMON_FILE" && sleep 5
  [ -f "$HOME/.config/autostart/notifyd.desktop" ] &&
    printf_green "Successfully installed Notification Daemon" ||
    printf_error "Failed to install Notification Daemon"
  __running && __notifications "Daemon" "$NOTIFY_DAEMON_NAME has been enabled to start at login"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__server_enable() {
  printf_green "Enabling the Notification Daemon Server on port $NOTIFY_DAEMON_PORT"
  cat <<EOF | tee -p "$HOME/.config/autostart/notifyd-server.desktop" &>/dev/null
#!/usr/bin/env xdg-open

[Desktop Entry]
Version=1.1
Type=Application
Name=Notification Server
GenericName=NotificationServer
Comment=Start Notification Daemon Server.
Icon=preferences-desktop-notification
Exec=notify-daemon --server &
Path=~
Terminal=false
Actions=
Categories=System;GTK;X-XFCE;GNOME;
Keywords=xfce4-notify;notify;
StartupNotify=true
EOF
  sh -c "notify-daemon --server &"
  exit $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__server_disable() {
  __rm_rf "$HOME/.config/autostart/notifyd-server.desktop"
  touch "$NOTIFY_DAEMON_KILL_PATH"
  __client "Daemon" "Disabling server"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_check() {
  # mate-notification-daemon xfce4-notifyd dunst deadd-notification-center
  if [ -e "$NOTIFY_DAEMON_BIN_DEFAULT" ]; then
    NOTIFY_DAEMON_FILE="$(builtin type -P "$NOTIFY_DAEMON_BIN_DEFAULT")"
    NOTIFY_DAEMON_NAME="$(basename -- "$NOTIFY_DAEMON_FILE")"
  elif __getstatus mate-notification-daemon; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_MATE"
    NOTIFY_DAEMON_NAME="mate-notification-daemon"
  elif __getstatus xfce4-notifyd; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_XFCE4"
    NOTIFY_DAEMON_NAME="xfce4-notifyd"
  elif __getstatus dunst; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_DUNST"
    NOTIFY_DAEMON_NAME="dunst"
  elif __getstatus deadd-notification-center; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_DEADD"
    NOTIFY_DAEMON_NAME="deadd-notification-center"
  else
    return 1
  fi
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__default_notifyd() {
  if [ -e "$NOTIFY_DAEMON_BIN_DEFAULT" ]; then
    NOTIFY_DAEMON_FILE="$(builtin type -P "$NOTIFY_DAEMON_BIN_DEFAULT")"
    NOTIFY_DAEMON_NAME="$(basename -- "$NOTIFY_DAEMON_FILE")"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__chromeos_notifyd() {
  if grep -shqiE 'chromeos|Chromium OS' "/proc/version"; then
    NOTIFY_DAEMON_FILE="notificationd.elf"
    NOTIFY_DAEMON_NAME="notificationd.elf"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__custom_notifyd() {
  if [ -n "$NOTIFY_DAEMON_BIN_CUSTOM" ] && [ -f "$(builtin type -P "$NOTIFY_DAEMON_BIN_CUSTOM" 2>/dev/null)" ]; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_CUSTOM"
    NOTIFY_DAEMON_NAME="$(basename -- "$NOTIFY_DAEMON_BIN_CUSTOM")"
  elif [ -f "$NOTIFY_DAEMON_CONFIG_DIR/notifyd" ]; then
    . "$NOTIFY_DAEMON_CONFIG_DIR/notifyd"
  fi
  if [ -n "${NOTIFY_DAEMON_FILE:-$NOTIFY_DAEMON_NAME}" ]; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mate_notifyd() {
  echo "$DESKTOP_SESSION" | grep -qiE "mate.*" || return 1
  if [ -n "$NOTIFY_DAEMON_BIN_MATE" ] && [ -f "$NOTIFY_DAEMON_BIN_MATE" ]; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_MATE"
    NOTIFY_DAEMON_NAME="mate-notification-daemon"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__plasma_notifyd() {
  echo "$DESKTOP_SESSION" | grep -qiE "plasma.*|kde.*" || __pidof "plasmashell" || return 1
  if find /usr/share/dbus-1/services/ -name '*Notif*' | grep -Eq "plasma|kde"; then
    NOTIFY_DAEMON_FILE="plasmashell"
    NOTIFY_DAEMON_NAME="plasmashell"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__xfce4_notifyd() {
  [ "$DESKTOP_SESSION" = "xfce" ] || [ "$DESKTOP_SESSION" = "xfce4" ] || [ "$1" = "force" ] || return 1
  if [ -n "$NOTIFY_DAEMON_BIN_XFCE4" ] && [ -f "$NOTIFY_DAEMON_BIN_XFCE4" ]; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_XFCE4"
    NOTIFY_DAEMON_NAME="xfce4-notifyd"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__dunst_notifyd() {
  if [ -n "$NOTIFY_DAEMON_BIN_DUNST" ] && [ -f "$NOTIFY_DAEMON_BIN_DUNST" ]; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_DUNST"
    NOTIFY_DAEMON_NAME="dunst"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__deadd_notifyd() {
  if [ -n "$NOTIFY_DAEMON_BIN_DEADD" ] && [ -f "$NOTIFY_DAEMON_BIN_DEADD" ]; then
    NOTIFY_DAEMON_FILE="$NOTIFY_DAEMON_BIN_DEADD"
    NOTIFY_DAEMON_NAME="deadd-notification-center"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_notifyd() {
  if [ -n "$NOTIFY_DAEMON_NAME" ] && __getstatus "$NOTIFY_DAEMON_NAME"; then
    NOTIFY_DAEMON_FILE="${NOTIFY_DAEMON_FILE:-$NOTIFY_DAEMON_NAME}"
    NOTIFY_DAEMON_NAME="${NOTIFY_DAEMON_NAME:-$(basename -- "$NOTIFY_DAEMON_FILE")}"
    return 0
  else
    __default_notifyd || __custom_notifyd || __chromeos_notifyd || __plasma_notifyd || __mate_notifyd || __xfce4_notifyd || __dunst_notifyd || __deadd_notifyd || __xfce4_notifyd "force" || return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_start_notifyd() {
  _run() { __start "$NOTIFY_DAEMON_FILE" && return 0 || return 1; }
  if [ -z "$NOTIFY_DAEMON_NAME" ] && [ -z "$NOTIFY_DAEMON_FILE" ]; then
    printf_red "Failed to find a notify daemon"
    printf_exit 1 1 "Please install: xfce4-notifyd, dunst, deadd or custom: see settings file for custom"
  else
    if ! __getstatus "$NOTIFY_DAEMON_NAME"; then
      printf_green "Attempting to start"
      while :; do _run && __getstatus "$NOTIFY_DAEMON_NAME" && break || false; done
    fi
    exitCode=$?
    if [ "$exitCode" = 0 ]; then
      printf_green "$NOTIFY_DAEMON_NAME has been started"
      __notifications "Daemon" "$NOTIFY_DAEMON_NAME has been Started"
    else
      printf_exit "Failed to start ${NOTIFY_DAEMON_NAME:-$NOTIFY_DAEMON_FILE}"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__term() {
  trap '$APPNAME --term' SIGINT
  shift $#
  while :; do
    clear
    # show menu
    status="$(__getstatus && echo -n "Running $NOTIFY_DAEMON_NAME" || echo -e "Not Running")"
    shift
    printf_newline "\n\n\n\n"
    printf_head "Notify Daemon Menu"
    printf_green "Current Status: $status"
    printf_green "a. Start"
    printf_green "b. Stop"
    printf_green "c. Restart"
    printf_green "d. create a config file"
    printf_green "e. Status"
    printf_green "f. Test"
    printf_green "z. Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [a-z] : " "1" "main"
    printf_newline
    # take action
    clear
    printf '\n\n\n'
    case "$main" in
    a)
      shift 1
      _start_notifyd
      ;;
    b)
      shift 1
      __kill "$NOTIFY_DAEMON_NAME"
      ;;
    c)
      shift 1
      __restart "$NOTIFY_DAEMON_FILE"
      ;;
    d)
      shift 1
      __gen_config
      ;;
    e)
      shift 1
      __running "$NOTIFY_DAEMON_FILE"
      ;;
    f)
      shift 1
      printf_yellow "Sending notification"
      __notifications "Daemon" "Server is running: $NOTIFY_DAEMON_NAME"
      ;;
    z)
      shift 1
      clear
      break
      ;;
    *) shift ;;
    esac
    printf_newline "\n\n"
    printf_counter "5" "3" "Re-loading menu in"
  done
  clear
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
NOTIFY_DAEMON_CONFIG_FILE="${NOTIFY_DAEMON_CONFIG_FILE:-settings.conf}"
NOTIFY_DAEMON_CONFIG_DIR="${NOTIFY_DAEMON_CONFIG_DIR:-$HOME/.config/myscripts/notify-daemon}"
NOTIFY_DAEMON_CONFIG_BACKUP_DIR="${NOTIFY_DAEMON_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/notify-daemon/backups}"
NOTIFY_DAEMON_LOG_DIR="${NOTIFY_DAEMON_LOG_DIR:-$HOME/.local/log/notify-daemon}"
NOTIFY_DAEMON_TEMP_DIR="${NOTIFY_DAEMON_TEMP_DIR:-$HOME/.local/tmp/system_scripts/notify-daemon}"
NOTIFY_DAEMON_CACHE_DIR="${NOTIFY_DAEMON_CACHE_DIR:-$HOME/.cache/notify-daemon}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
NOTIFY_DAEMON_OUTPUT_COLOR_1="${NOTIFY_DAEMON_OUTPUT_COLOR_1:-33}"
NOTIFY_DAEMON_OUTPUT_COLOR_2="${NOTIFY_DAEMON_OUTPUT_COLOR_2:-5}"
NOTIFY_DAEMON_OUTPUT_COLOR_GOOD="${NOTIFY_DAEMON_OUTPUT_COLOR_GOOD:-2}"
NOTIFY_DAEMON_OUTPUT_COLOR_ERROR="${NOTIFY_DAEMON_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
NOTIFY_DAEMON_NOTIFY_ENABLED="${NOTIFY_DAEMON_NOTIFY_ENABLED:-yes}"
NOTIFY_DAEMON_GOOD_NAME="${NOTIFY_DAEMON_GOOD_NAME:-Great:}"
NOTIFY_DAEMON_ERROR_NAME="${NOTIFY_DAEMON_ERROR_NAME:-Error:}"
NOTIFY_DAEMON_GOOD_MESSAGE="${NOTIFY_DAEMON_GOOD_MESSAGE:-No errors reported}"
NOTIFY_DAEMON_ERROR_MESSAGE="${NOTIFY_DAEMON_ERROR_MESSAGE:-Errors were reported}"
NOTIFY_DAEMON_NOTIFY_CLIENT_NAME="${NOTIFY_DAEMON_NOTIFY_CLIENT_NAME:-$APPNAME}"
NOTIFY_DAEMON_NOTIFY_CLIENT_ICON="${NOTIFY_DAEMON_NOTIFY_CLIENT_ICON:-notification-new}"
NOTIFY_DAEMON_NOTIFY_CLIENT_URGENCY="${NOTIFY_DAEMON_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
NOTIFY_DAEMON_HOST="${NOTIFY_DAEMON_HOST:-}"
NOTIFY_DAEMON_PORT="${NOTIFY_DAEMON_PORT:-65001}"
NOTIFY_DAEMON_CLIENT_PATH="${NOTIFY_DAEMON_CLIENT_PATH:-$NOTIFY_DAEMON_TEMP_DIR/client}"
NOTIFY_DAEMON_SERVER_PATH="${NOTIFY_DAEMON_SERVER_PATH:-$NOTIFY_DAEMON_TEMP_DIR/server}"
NOTIFY_DAEMON_KILL_PATH="${NOTIFY_DAEMON_KILL_PATH:-$NOTIFY_DAEMON_SERVER_PATH/server.kill}"
NOTIFY_DAEMON_LOG_FILE="${NOTIFY_DAEMON_LOG_FILE:-$NOTIFY_DAEMON_SERVER_PATH/server.log}"
NOTIFY_DAEMON_APPNAME="${notifyAppName:-$NOTIFY_DAEMON_NOTIFY_CLIENT_NAME}"
NOTIFY_DAEMON_URGENCY="${notifyUrgency:-$NOTIFY_DAEMON_NOTIFY_CLIENT_URGENCY}"
NOTIFY_DAEMON_BIN_CUSTOM="${NOTIFY_DAEMON_BIN_CUSTOM:-}"
NOTIFY_DAEMON_BIN_DUNST="${NOTIFY_DAEMON_BIN_DUNST:-$(builtin type -P dunst || false)}"
NOTIFY_DAEMON_BIN_DEADD="${NOTIFY_DAEMON_BIN_DEADD:-$(builtin type -P deadd-notification-center || builtin type -P deadd-notification || false)}"
NOTIFY_DAEMON_BIN_XFCE4="${NOTIFY_DAEMON_BIN_XFCE4:-$(builtin type -P /lib/xfce4/notifyd/xfce4-notifyd || builtin type -P /usr/lib/xfce4/notifyd/xfce4-notifyd || builtin type -P /usr/lib/x86_64-linux-gnu/xfce4/notifyd/xfce4-notifyd || false)}"
NOTIFY_DAEMON_BIN_MATE="${NOTIFY_DAEMON_BIN_MATE:-$(builtin type -P /lib/mate-notification-daemon/mate-notification-daemon || builtin type -P /usr/lib/mate-notification-daemon/mate-notification-daemon || builtin type -P /usr/lib/x86_64-linux-gnu/mate-notification-daemon/mate-notification-daemon || false)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -n "$NOTIFY_DAEMON_FILE" ] && [ -f "$NOTIFY_DAEMON_FILE" ] || unset NOTIFY_DAEMON_FILE NOTIFY_DAEMON_NAME
if [ -n "${NOTIFY_DAEMON_FILE:-$NOTIFY_DAEMON_NAME}" ] && __getstatus "${NOTIFY_DAEMON_FILE:-$NOTIFY_DAEMON_NAME}"; then
  NOTIFY_DAEMON_NAME="$(basename -- "${NOTIFY_DAEMON_NAME:-$NOTIFY_DAEMON_FILE}")"
else
  __init_check || __init_notifyd
fi
[ -f "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE" ] && . "$NOTIFY_DAEMON_CONFIG_DIR/$NOTIFY_DAEMON_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$NOTIFY_DAEMON_LOG_DIR" ] || mkdir -p "$NOTIFY_DAEMON_LOG_DIR" |& __devnull
[ -d "$NOTIFY_DAEMON_TEMP_DIR" ] || mkdir -p "$NOTIFY_DAEMON_TEMP_DIR" |& __devnull
[ -d "$NOTIFY_DAEMON_CACHE_DIR" ] || mkdir -p "$NOTIFY_DAEMON_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NOTIFY_DAEMON_TEMP_FILE="${NOTIFY_DAEMON_TEMP_FILE:-$(mktemp $NOTIFY_DAEMON_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$NOTIFY_DAEMON_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$NOTIFY_DAEMON_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$NOTIFY_DAEMON_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$NOTIFY_DAEMON_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$NOTIFY_DAEMON_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$NOTIFY_DAEMON_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",term,ask"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    NOTIFY_DAEMON_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    NOTIFY_DAEMON_CWD="$2"
    [ -d "$NOTIFY_DAEMON_CWD" ] || mkdir -p "$NOTIFY_DAEMON_CWD" |& __devnull
    shift 2
    ;;
  --term)
    shift 1
    TERMINAL_APP="TRUE"
    ;;
  --ask)
    shift 1
    STATUS="true"
    __ask_for_notifyd
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# NOTIFY_DAEMON_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# NOTIFY_DAEMON_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && NOTIFY_DAEMON_CWD="$1" && shift 1 || NOTIFY_DAEMON_CWD="${NOTIFY_DAEMON_CWD:-$PWD}"
NOTIFY_DAEMON_CWD="$(realpath "${NOTIFY_DAEMON_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$NOTIFY_DAEMON_CWD" ] && cd "$NOTIFY_DAEMON_CWD"; then
# if [ "$NOTIFY_DAEMON_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $NOTIFY_DAEMON_CWD"
# fi
# else
# printf_exit "ðŸ’” $NOTIFY_DAEMON_CWD does not exist ðŸ’”"
# fi
export NOTIFY_DAEMON_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
NOTIFY_DAEMON_NETCAT="$(builtin type -P nc 2>/dev/null || builtin type -P netcat 2>/dev/null || false)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
if [ "$TERMINAL_APP" = "TRUE" ]; then
  __term
  exit $?
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
term)
  shift 1
  __term "$@"
  exit $?
  ;;

show)
  shift 1
  __ask_for_notifyd_show
  ;;

ask)
  shift 1
  [ "$1" = "show" ] && __ask_for_notifyd_show
  __ask_for_notifyd "$1"
  ;;

enable)
  shift 1
  __startup
  ;;

disable)
  printf_green "Disabling the notify daemon"
  __rm_rf "$HOME/.config/autostart/notifyd.desktop" &&
    __kill "$NOTIFY_DAEMON_NAME" &&
    printf_green "Successfully Disabled the notify daemon" ||
    printf_error "Failed to disable notify daemon"
  exit $?
  ;;

restart)
  shift 1
  __restart "$NOTIFY_DAEMON_FILE"
  ;;

stop)
  shift 1
  __kill "$NOTIFY_DAEMON_NAME"
  ;;

start)
  _start_notifyd
  if ! __getstatus "$NOTIFY_DAEMON_NAME"; then _start_notifyd "$NOTIFY_DAEMON_FILE"; fi
  ;;

status)
  shift 1
  [[ "$1" = "ask" ]] && shift 1 && STATUS="true"
  if [[ "$STATUS" = "true" ]]; then
    if [ -n "$NOTIFY_DAEMON_FILE" ]; then
      echo running
      exit 0
    else
      exit 1
    fi
  else
    __running "$NOTIFY_DAEMON_FILE"
  fi
  exit $?
  ;;

client)
  shift 1
  if [ -z "$NOTIFY_DAEMON_HOST" ]; then
    __notifications "Daemon" "Please set NOTIFY_DAEMON_HOST variable to your server"
    exit 1
  fi
  if [ ${#} -eq 0 ]; then
    if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
      title="${notifyAppName:-$APPNAME}"
      msg="$(</dev/stdin)"
    fi
  else
    if [ ${#} -eq 1 ]; then
      title="${notifyAppName:-$APPNAME}"
      msg="$*"
    else
      title="$1"
      shift 1
      msg="$*"
    fi
  fi
  __client "$title" "$msg" 2>/dev/null
  ;;

xfce4)
  shift 1
  NOTIFY_DAEMON_BIN_DEFAULT="${NOTIFY_DAEMON_BIN_XFCE4:-$NOTIFY_DAEMON_BIN_DEFAULT}"
  __gen_config &>/dev/null
  __xfce4_notifyd && _start_notifyd
  ;;

dunst)
  shift 1
  NOTIFY_DAEMON_BIN_DEFAULT="${NOTIFY_DAEMON_BIN_DUNST:-$NOTIFY_DAEMON_BIN_DEFAULT}"
  __gen_config &>/dev/null
  __dunst_notifyd && _start_notifyd
  ;;

deadd)
  shift 1
  NOTIFY_DAEMON_BIN_DEFAULT="${NOTIFY_DAEMON_BIN_DEADD:-$NOTIFY_DAEMON_BIN_DEFAULT}"
  __gen_config &>/dev/null
  __deadd_notifyd && _start_notifyd
  ;;

server)
  case "$2" in #### begin server
  stop | kill)
    printf_green "Attempting to stop the server"
    shift 2
    touch "$NOTIFY_DAEMON_KILL_PATH"
    __kill_server
    exit $?
    ;;
  start)
    shift 2
    __server "$@"
    ;;
  restart)
    printf_green "Attempting to restart the server"
    shift 2
    touch "$NOTIFY_DAEMON_KILL_PATH"
    __kill_server
    sleep 5
    __server "$@"
    exit $?
    ;;
  enable)
    shift 2
    __server_enable
    exit $?
    ;;
  disable)
    shift 2
    __server_disable
    exit $?
    ;;
  status)
    shift 2
    PID="$(__netcat_pids "$NOTIFY_DAEMON_PORT")"
    printf_green "The server appears to be running on $NOTIFY_DAEMON_PORT with PID: $PID"
    __notifications "Daemon" "The server appears to be running on $NOTIFY_DAEMON_PORT with PID: $PID"
    exit
    ;;
  *)
    __server "$@"
    ;;
  esac #### end server
  ;;

*) __help ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
