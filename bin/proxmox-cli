#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208150046-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  proxmox-cli --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 15, 2022 00:46 EDT
# @@File             :  proxmox-cli
# @@Description      :
# @@Changelog        :  New script
# @@TODO             :  Turn this into a full proxmox client
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208150046-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
PROXMOX_CLI_REQUIRE_SUDO="${PROXMOX_CLI_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ -d "$HOME/.config/myscripts/pve-spice" ]; then
    printf_green "Updating configuration settings"
    sed -i 's|PVE_SPICE_|PROXMOX_CLI_|g' "$HOME/.config/myscripts/pve-spice"/*
    mv -f "$HOME/.config/myscripts/pve-spice" "$PROXMOX_CLI_CONFIG_DIR"
    if [ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ]; then
      sed -i "s|PVE_SPICE_|PROXMOX_CLI_|g" "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" &>/dev/null
      . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    fi
  fi
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
  fi
  [ -d "$PROXMOX_CLI_CONFIG_DIR" ] || mkdir -p "$PROXMOX_CLI_CONFIG_DIR"
  [ -d "$PROXMOX_CLI_CONFIG_BACKUP_DIR" ] || mkdir -p "$PROXMOX_CLI_CONFIG_BACKUP_DIR"
  [ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ] &&
    cp -Rf "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" "$PROXMOX_CLI_CONFIG_BACKUP_DIR/$PROXMOX_CLI_CONFIG_FILE.$$"
  cat <<EOF >"$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
# Settings for proxmox-cli
PROXMOX_CLI_DEFAULT_USERNAME="${PROXMOX_CLI_DEFAULT_USERNAME:-}"
PROXMOX_CLI_DEFAULT_PASSWORD="${PROXMOX_CLI_DEFAULT_PASSWORD:-}"
PROXMOX_CLI_DEFAULT_NODE_ID="${PROXMOX_CLI_DEFAULT_NODE_ID:-}"
PROXMOX_CLI_DEFAULT_SERVER_HOST="${PROXMOX_CLI_DEFAULT_SERVER_HOST:-}"
PROXMOX_CLI_DEFAULT_SERVER_PORT="${PROXMOX_CLI_DEFAULT_SERVER_PORT:-}"
PROXMOX_CLI_SAVE_DIR="${PROXMOX_CLI_SAVE_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
PROXMOX_CLI_OUTPUT_COLOR_1="${PROXMOX_CLI_OUTPUT_COLOR_1:-}"
PROXMOX_CLI_OUTPUT_COLOR_2="${PROXMOX_CLI_OUTPUT_COLOR_2:-}"
PROXMOX_CLI_OUTPUT_COLOR_GOOD="${PROXMOX_CLI_OUTPUT_COLOR_GOOD:-}"
PROXMOX_CLI_OUTPUT_COLOR_ERROR="${PROXMOX_CLI_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
PROXMOX_CLI_NOTIFY_ENABLED="${PROXMOX_CLI_NOTIFY_ENABLED:-}"
PROXMOX_CLI_GOOD_NAME="${PROXMOX_CLI_GOOD_NAME:-}"
PROXMOX_CLI_ERROR_NAME="${PROXMOX_CLI_ERROR_NAME:-}"
PROXMOX_CLI_GOOD_MESSAGE="${PROXMOX_CLI_GOOD_MESSAGE:-}"
PROXMOX_CLI_ERROR_MESSAGE="${PROXMOX_CLI_ERROR_MESSAGE:-}"
PROXMOX_CLI_NOTIFY_CLIENT_NAME="${PROXMOX_CLI_NOTIFY_CLIENT_NAME:-}"
PROXMOX_CLI_NOTIFY_CLIENT_ICON="${PROXMOX_CLI_NOTIFY_CLIENT_ICON:-}"
PROXMOX_CLI_NOTIFY_CLIENT_URGENCY="${PROXMOX_CLI_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "proxmox-cli: proxmox api script - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: proxmox-cli [options] [id] [node] [hostname] [port]"
  __printf_line "config [id]                     - Get config info for vm"
  __printf_line "status [id]                     - Get the status about vm"
  __printf_line "power [on/off] [id]             - Power on or off a vm"
  __printf_line "reset                           - Reset script variables"
  __printf_line "web                             - Open the proxmox web interface"
  __printf_line "ssh                             - Connect to proxmox vm: requires qemu-agent"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "-u,--user                       - Specify the user name"
  __printf_line "-p,--password                   - Specify the user password"
  __printf_line "-m,--machine                    - Connect to a different host"
  __printf_line "--node                          - Connect to a different node"
  __printf_line "--ssh                           - Connect to proxmox server via ssh"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$PROXMOX_CLI_REQUIRE_SUDO" = "yes" ] && [ -z "$PROXMOX_CLI_REQUIRE_SUDO_RUN" ]; then
    export PROXMOX_CLI_REQUIRE_SUDO="no"
    export PROXMOX_CLI_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$PROXMOX_CLI_TEMP_FILE" ] && rm -Rf "$PROXMOX_CLI_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
printf_answer_no() {
  if [ -n "$1" ] && [ "$1" != "" ]; then
    printf_answer_yes "$1" && return 1 || return 0
  else
    printf '\n'
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_auth() {
  curl -q -f -s -S -k -b "PVEAuthCookie=$TICKET" -H "CSRFPreventionToken: $CSRF" "$@" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_get() {
  curl -q -s -S -k --fail -b "PVEAuthCookie=$TICKET" -H "CSRFPreventionToken: $CSRF" -X GET "$@" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_post() {
  curl -q -s -S -k --fail -b "PVEAuthCookie=$TICKET" -H "CSRFPreventionToken: $CSRF" -X POST "$@" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__decode_password() {
  # Decode base64 encoded password if needed
  if echo "$PROXMOX_CLI_DEFAULT_PASSWORD" | base64 -d &>/dev/null | grep -q '^'; then
    PROXMOX_CLI_DEFAULT_PASSWORD="$(echo "$PROXMOX_CLI_DEFAULT_PASSWORD" | base64 -d)"
  fi
}

__query_server() {
  __decode_password
  curl -q -LfsSk \
    --data-urlencode "username=$USERNAME" \
    --data-urlencode "password=$PASSWORD" \
    "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/access/ticket" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_config() {
  local url_lxc="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc"
  local url_qemu="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu"
  __curl_auth "$url_qemu/$PROXMOX_CLI_DEFAULT_MACHINE/config" 2>/dev/null && return 0 ||
    __curl_auth "$url_lxc/$PROXMOX_CLI_DEFAULT_MACHINE/config" && return 0
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_status() {
  local url_lxc="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc"
  local url_qemu="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu"
  local url_status="$PROXMOX_CLI_DEFAULT_MACHINE/status/current"
  if __curl_auth "$url_qemu/$url_status" 2>/dev/null | grep '^'; then
    return 0
  elif __curl_auth "$url_lxc/$url_status" 2>/dev/null | grep '^'; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_connection() {
  if [ -z "$vm_exists" ]; then
    printf_exit "$vm_name does not exist"
  elif [ "$vm_status" = "off" ]; then
    printf_read_question "4" "Would you to turn on $vm_name" "1" "power_on"
    if printf_answer_yes "$power_on"; then
      if __start_stop_vm "qemu" "start"; then
        vm_status="on"
        [ -n "$PROXMOX_CLI_SSH_IP" ] && printf_yellow "Waiting 30 seconds for the vm to boot" && sleep 30
      else
        if [ -n "$PROXMOX_CLI_SSH_IP" ]; then
          printf_exit "Failed to get ip address for $PROXMOX_CLI_DEFAULT_NODE_ID: Ensure you have qemu-guest-agent installed and running"
        else
          printf_exit "Failed to start $vm_name on $PROXMOX_CLI_DEFAULT_NODE_ID"
        fi
      fi
      sleep 2
    else
      printf_exit "User cancelled"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_spice_file() {
  __init_connection
  if [ "$vm_status" = "on" ]; then
    __save_spice_file "$url_qemu" || __save_spice_file "$url_lxc"
    return $?
  else
    printf_red ""
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file() {
  # Use modern Proxmox API endpoint for SPICE connections
  __curl_auth "$1/$PROXMOX_CLI_DEFAULT_MACHINE/spiceproxy" -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" >"$FILENAME" 2>/dev/null && return 0
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__start_stop_vm() {
  __curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/${1:-qemu}/$PROXMOX_CLI_DEFAULT_MACHINE/status/${2:-start}" |& __devnull
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__pve_agent() {
  local url="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/${1:-$PROXMOX_CLI_DEFAULT_NODE_ID}/${2:-qemu}/${3:-$PROXMOX_CLI_DEFAULT_MACHINE}/agent"
  if [ -n "$4" ]; then
    __curl_get "$url/$4" | jq -r '.data .result|.[]|.' 2>/dev/null
  else
    __curl_get "$url" | jq -rc '. | .[] | .[] | .name' 2>/dev/null
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_spice_viewer() {
  local FILE="${1:-$FILENAME}"
  local RUN="${2:-$FILENAME}.spice"
  sed -i 's|delete-this-file=1|delete-this-file=0|g' "$FILE"
  cp -Rf "$FILE" "$RUN"
  remote-viewer "$RUN" &>/dev/null &
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_nodes() {
  local logdir="$PROXMOX_CLI_TEMP_DIR"
  local USERNAME="$PROXMOX_CLI_DEFAULT_USERNAME"
  local PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD"
  local FORMAT="${PROXMOX_CLI_NODE_FORMAT:-json}"
  local TOKEN=$(curl -s -k --data-urlencode "username=$USERNAME" --data-urlencode "password=$PASSWORD" https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/access/ticket 2>/dev/null | jq -r .data.ticket)
  if [ "${PIPESTATUS[0]}" != "0" ]; then
    echo Auth failed
    exit 1
  fi
  function csv() {
    echo $VMID,$NODE,$1,$NAME,$HWADDR,$IP
  }
  function start_csv() {
    echo vmid,node,type,name,mac,ip
  }
  function end_csv() {
    echo -n
  }
  function json() {
    if [ "$2" != "0" ]; then
      echo ","
    fi
    echo "{"
    echo "\"vmid\": \"$VMID\","
    echo "\"node\": \"$NODE\","
    echo "\"type\": \"$1\","
    echo "\"name\": \"$NAME\","
    echo "\"mac\": \"$HWADDR\","
    echo "\"ip\": \"$IP\""
    echo -n "}"
  }
  function start_json() {
    echo "["
  }
  function end_json() {
    echo "]"
  }
  start_$FORMAT
  POS=0
  NODES=$(curl -s -k https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes -b "PVEAuthCookie=$TOKEN" | jq -r '.data[].node')
  for NODE in $(echo $NODES); do
    curl -s -k https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/lxc -b "PVEAuthCookie=$TOKEN" >$logdir/proxvm-lxc.json
    curl -s -k https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/qemu -b "PVEAuthCookie=$TOKEN" >$logdir/proxvm-qemu.json
    for VMID in $(cat $logdir/proxvm-lxc.json | jq -r '.data[].vmid'); do
      curl -s -k https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/lxc/$VMID/config -b "PVEAuthCookie=$TOKEN" >$logdir/proxvm-$VMID.json
      JSON=$(cat $logdir/proxvm-lxc.json | jq -r ".data[] | select(.vmid | tonumber | contains($VMID))")
      NAME=$(echo $JSON | jq -r .name)
      NET=$(cat $logdir/proxvm-$VMID.json | jq -r .data.net0)
      HWADDR=$(echo $NET | sed -re "s/.*hwaddr=([a-zA-Z0-9:]+),[a-zA-Z0-9]+=.*/\1/g")
      IP=$(arp -a | grep $HWADDR | sed -re "s/.*\(([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/g")
      $FORMAT lxc $POS
      POS=$(expr $POS + 1)
    done
    for VMID in $(cat $logdir/proxvm-qemu.json | jq -r '.data[].vmid'); do
      curl -s -k https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/qemu/$VMID/config -b "PVEAuthCookie=$TOKEN" >$logdir/proxvm-$VMID.json
      JSON=$(cat $logdir/proxvm-qemu.json | jq -r ".data[] | select(.vmid | tonumber | contains($VMID))")
      NAME=$(echo $JSON | jq -r .name)
      NET=$(cat $logdir/proxvm-$VMID.json | jq -r .data.net0)
      HWADDR=$(echo $NET | sed -re "s/[a-zA-Z0-9]+=([a-zA-Z0-9:]+),.*/\1/g")
      IP=$(arp -a | grep $HWADDR | sed -re "s/.*\(([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/g")
      $FORMAT qemu $POS
      POS=$(expr $POS + 1)
    done
  done

  end_$FORMAT
  cat $logdir/proxvm-*.json | jq -rc '.'
  rm $logdir/proxvm-*.json
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_curl() {
  DATA="${1:-$DATA}"
  FILENAME="${2:-$FILENAME}"
  TICKET="${DATA//\"/}"
  TICKET="${TICKET##*ticket:}"
  TICKET="${TICKET%%,*}"
  TICKET="${TICKET%%\}*}"
  CSRF="${DATA//\"/}"
  CSRF="${CSRF##*CSRFPreventionToken:}"
  CSRF="${CSRF%%,*}"
  CSRF="${CSRF%%\}*}"
  url_lxc="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc"
  url_qemu="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu"
  if [ -n "$CSRF" ]; then
    vm_exists="$(__get_status | grep '^' || false)"
    vm_status="$(echo "$vm_exists" | grep -q '^status=running' && echo 'on' || echo "off")"
    vm_name="$(echo "$vm_exists" | grep '^name=' | awk -F '=' '{print $2}' | grep '^' || echo "$PROXMOX_CLI_DEFAULT_MACHINE")"
    printf_cyan "Initializing the connection to $vm_name ($PROXMOX_CLI_DEFAULT_MACHINE)"
    if [ -n "$PROXMOX_CLI_GET_CONFIG" ]; then
      __get_config || printf_exit "Failed to get the configuration for $PROXMOX_CLI_DEFAULT_MACHINE"
      exit $?
    elif [ -n "$PROXMOX_CLI_GET_STATUS" ]; then
      __get_status || printf_exit "Failed to get the status for $PROXMOX_CLI_DEFAULT_MACHINE"
    elif [ -n "$PROXMOX_CLI_POWER_CYCLE" ]; then
      if [ "$PROXMOX_CLI_POWER_OPTION" = "on" ]; then
        PROXMOX_CLI_POWER_OPTION="start"
        PROXMOX_CLI_POWER_STATUS="Telling proxmox to start $PROXMOX_CLI_DEFAULT_MACHINE"
      elif [ "$PROXMOX_CLI_POWER_OPTION" = "off" ]; then
        PROXMOX_CLI_POWER_OPTION="stop"
        PROXMOX_CLI_POWER_STATUS="VM $PROXMOX_CLI_DEFAULT_MACHINE should be stopping"
      fi
      printf_cyan "Sending $PROXMOX_CLI_POWER_OPTION to vm $PROXMOX_CLI_DEFAULT_MACHINE"
      if __start_stop_vm "qemu" "$PROXMOX_CLI_POWER_OPTION"; then
        printf_green "$PROXMOX_CLI_POWER_STATUS"
        exit 0
      else
        printf_exit "Failed to send $PROXMOX_CLI_POWER_OPTION command to proxmox: $PROXMOX_CLI_DEFAULT_MACHINE"
        exit 1
      fi
    elif [ -n "$PROXMOX_CLI_GET_AGENT" ]; then
      __pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" "$PROXMOX_CLI_AGENT_OPTION"
      exit $?
    elif [ -n "$PROXMOX_CLI_SSH_IP" ]; then
      __init_connection
      host="$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" network-get-interfaces | jq -rc '.' | grep 'eth0' | jq -r '."ip-addresses"|.[]|."ip-address"' | grep -v '::' | head -n1 | grep '^' || echo '')"
      host="${host:-$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" network-get-interfaces | grep 'ip-address.*[0-9]\.' | grep -vE '127.0.0.1|172.17.0.[0-9]' | sed 's|[", ]||g;s|ip-address:||g' | head -n1 | grep '^' || echo '')}"
      [ -n "$host" ] && __open_ssh ${host:-$PROXMOX_CLI_DEFAULT_MACHINE} ${PROXMOX_CLI_SSH_USER:-$USER}
      exit $?
    else
      __get_spice_file && printf_purple "Saving to $FILENAME" || printf_exit "Failed to get the spice file"
      if __cmd_exists remote-viewer; then
        printf_yellow "Attempting to launch the client " && sleep 2
        __run_spice_viewer "$FILENAME" &>/dev/null
        return $?
      else
        printf_yellow "remote-viewer is required: 'virt-viewer' or 'remote-viewer'"
        return 1
      fi
    fi
  else
    printf_red "Failed to retrieve auth token from $PROXMOX_CLI_DEFAULT_SERVER_HOST"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_vm_id() {
  printf_read_input "What is your vm id number? " "120" "set_vmid"
  PROXMOX_CLI_DEFAULT_MACHINE="${set_vmid:-}"
  [ -n "$PROXMOX_CLI_DEFAULT_MACHINE" ] || printf_exit "VM ID is required"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_username() {
  local change_user="" option_user=""
  PROXMOX_CLI_DEFAULT_USERNAME="${PROXMOX_CLI_DEFAULT_USERNAME:-root@pam}"
  printf_read_question "5" "Is the username correct? [y/N]: [$PROXMOX_CLI_DEFAULT_USERNAME]" "1" "change_user"
  if printf_answer_no "$change_user"; then
    printf_read_input "What is your username? " "120" "option_user"
    PROXMOX_CLI_DEFAULT_USERNAME="$option_user"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_USERNAME" ] || printf_exit "Username is required"
  grep -shq "PROXMOX_CLI_DEFAULT_USERNAME=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_USERNAME="'$PROXMOX_CLI_DEFAULT_USERNAME'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_password() {
  local change_pass="" option_pass_new="" option_pass_confirm=""
  if [ -z "$get_pass_error" ]; then
    printf_read_question "5" "Is this the correct password? [y/N]: [$PROXMOX_CLI_DEFAULT_PASSWORD]" "1" "change_pass"
  fi
  if [ -n "$get_pass_error" ] || printf_answer_no "$change_pass"; then
    printf_read_password "1" "What is your password? " "option_pass_new"
    printf_read_password "1" "confirm your password? " "option_pass_confirm"
    if [ "$option_pass_new" != "$option_pass_confirm" ]; then
      while :; do
        get_pass_error="true"
        printf_red "Error: the passwords do not match"
        __get_password && break
      done
    fi
    PROXMOX_CLI_DEFAULT_PASSWORD="${option_pass_new:-}"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_PASSWORD" ] || printf_exit "Password is required"
  # Simple base64 encoding (not secure, but better than plaintext)
  if ! grep -shq "PROXMOX_CLI_DEFAULT_PASSWORD=" "$PROXMOX_CLI_NODE_CONFIG_FILE"; then
    encoded_password="$(echo "$PROXMOX_CLI_DEFAULT_PASSWORD" | base64 -w 0)"
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_PASSWORD="'$encoded_password'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
    printf_yellow "Password encoded and saved to config file"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_node_name() {
  local change_node=""
  PROXMOX_CLI_DEFAULT_NODE_ID="${PROXMOX_CLI_DEFAULT_NODE_ID:-pve}"
  printf_read_question "5" "Is the node name correct? [y/N]: [$PROXMOX_CLI_DEFAULT_NODE_ID]" "1" "change_node"
  if printf_answer_no "$change_node"; then
    printf_read_input "What is node name? " "120" "PROXMOX_CLI_DEFAULT_NODE_ID"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_NODE_ID" ] || printf_exit "The node name is required"
  grep -shq "PROXMOX_CLI_DEFAULT_NODE_ID=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_NODE_ID="'$PROXMOX_CLI_DEFAULT_NODE_ID'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_servername() {
  local change_server=""
  PROXMOX_CLI_DEFAULT_SERVER_HOST="${PROXMOX_CLI_DEFAULT_SERVER_HOST:-proxmox.local}"
  printf_read_question "5" "is the server address correct? [y/N]: [$PROXMOX_CLI_DEFAULT_SERVER_HOST]" "1" "change_server"
  if printf_answer_no "$change_server"; then
    printf_read_input "What is the server address? " "120" "PROXMOX_CLI_DEFAULT_SERVER_HOST"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_SERVER_HOST" ] || printf_exit "The host is required"
  grep -shq "PROXMOX_CLI_DEFAULT_SERVER_HOST=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_SERVER_HOST="'$PROXMOX_CLI_DEFAULT_SERVER_HOST'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_serverport() {
  local change_port=""
  PROXMOX_CLI_DEFAULT_SERVER_PORT="${PROXMOX_CLI_DEFAULT_SERVER_PORT:-8006}"
  printf_read_question "5" "is the port correct? [y/N]: [$PROXMOX_CLI_DEFAULT_SERVER_PORT]" "1" "change_port"
  if printf_answer_no "$change_port"; then
    printf_read_input "What is the port? " "120" "PROXMOX_CLI_DEFAULT_SERVER_PORT"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_SERVER_PORT" ] || printf_exit "The port is required"
  grep -shq "PROXMOX_CLI_DEFAULT_SERVER_PORT=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_SERVER_PORT="'$PROXMOX_CLI_DEFAULT_SERVER_PORT'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__initialize_app() {
  while :; do
    case "$1" in
    nodes) __get_nodes && shift 1 ;;
    reset) PROXMOX_CLI_FORCE="true" && shift 1 ;;
    web) shift 1 && __open_web && exit 0 || exit 1 ;;
    config) PROXMOX_CLI_GET_CONFIG="true" && shift 1 ;;
    status) PROXMOX_CLI_GET_STATUS="true" && shift 1 ;;
    power | turn) PROXMOX_CLI_POWER_CYCLE="true" && PROXMOX_CLI_POWER_OPTION="$2" && shift 2 ;;
    agent) PROXMOX_CLI_GET_AGENT="true" && PROXMOX_CLI_DEFAULT_MACHINE="$2" PROXMOX_CLI_AGENT_OPTION="$3" && shift $# ;;
    ssh)
      if [ "$2" = "server" ]; then PROXMOX_CLI_SSH_ROOT="yes"; else PROXMOX_CLI_SSH_IP="true"; fi
      shift 1
      ;;
    *) break ;;
    esac
  done
  if [ -n "$PROXMOX_CLI_SSH_ROOT" ]; then
    __open_ssh $PROXMOX_CLI_DEFAULT_SERVER_HOST ${PROXMOX_CLI_SSH_USER:-root}
    exit $?
  fi
  PROXMOX_CLI_DEFAULT_MACHINE="${1:-$PROXMOX_CLI_DEFAULT_MACHINE}"
  PROXMOX_CLI_DEFAULT_NODE_ID="${2:-$PROXMOX_CLI_DEFAULT_NODE_ID}"
  PROXMOX_CLI_DEFAULT_SERVER_HOST="${3:-$PROXMOX_CLI_DEFAULT_SERVER_HOST}"
  PROXMOX_CLI_DEFAULT_SERVER_PORT="${4:-$PROXMOX_CLI_DEFAULT_SERVER_PORT}"
  PROXMOX_CLI_DEFAULT_USERNAME="${5:-$PROXMOX_CLI_DEFAULT_USERNAME}"
  PROXMOX_CLI_DEFAULT_PASSWORD="${6:-$PROXMOX_CLI_DEFAULT_PASSWORD}"
  if [ "$PROXMOX_CLI_FORCE" = "true" ]; then
    PROXMOX_CLI_NEW_INSTALL="true"
    PROXMOX_CLI_FORCED="complete"
    mv -f "$PROXMOX_CLI_NODE_CONFIG_FILE" "$PROXMOX_CLI_NODE_CONFIG_FILE.$$.bak"
  fi
  if [ ! -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ]; then
    __get_username
    __get_password
    __get_node_name
    __get_servername
    __get_serverport
  fi
  # Set vm id
  [ -n "$PROXMOX_CLI_DEFAULT_MACHINE" ] || __get_vm_id
  # Get/confirm username
  [ -z "$PROXMOX_CLI_DEFAULT_USERNAME" ] && __get_username
  # Get/confirm password
  [ -z "$PROXMOX_CLI_DEFAULT_PASSWORD" ] && __get_password
  # Get/confirm servername
  [ -z "$PROXMOX_CLI_DEFAULT_NODE_ID" ] && __get_node_name
  # Get/confirm node name
  [ -z "$PROXMOX_CLI_DEFAULT_SERVER_HOST" ] && __get_servername
  # Get/confirm port
  [ -z "$PROXMOX_CLI_DEFAULT_SERVER_PORT" ] && __get_serverport
  # Write settings to file
  if [ -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ] && [ "$PROXMOX_CLI_NEW_INSTALL" = "true" ]; then
    [ -d "$PROXMOX_CLI_SAVE_DIR" ] || mkdir -p "$PROXMOX_CLI_SAVE_DIR" &>/dev/null
    printf_blue "Updating the configuration and setting permissions"
    __gen_config &>/dev/null
    touch "$PROXMOX_CLI_NODE_CONFIG_FILE"
    source "$PROXMOX_CLI_NODE_CONFIG_FILE"
    PROXMOX_CLI_FORCE="" PROXMOX_CLI_NEW_INSTALL=""
    chmod 600 "$PROXMOX_CLI_NODE_CONFIG_FILE" "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    . "$PROXMOX_CLI_NODE_CONFIG_FILE"
    return 0
  elif [ ! -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ]; then
    printf_exit "Something went wrong"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_proxmox_cli() {
  local statusCode=0
  SPICEDIR="$PROXMOX_CLI_SAVE_DIR"
  USERNAME="$PROXMOX_CLI_DEFAULT_USERNAME"
  PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD"
  FILENAME="$PROXMOX_CLI_SAVE_DIR/${PROXMOX_CLI_DEFAULT_NODE_ID}_${PROXMOX_CLI_DEFAULT_MACHINE}"
  [ -d "$SPICEDIR" ] || mkdir -p "$SPICEDIR"
  DATA="$(__query_server || echo '')"
  if [ -n "$DATA" ]; then
    # printf_blue "Authentication with server was a success"
    if __run_curl "$DATA" "$FILENAME"; then
      statusCode=0
    else
      printf_red "Failed to get spice file from server"
      statusCode=1
    fi
  else
    printf_error "Something went wrong"
    statusCode=1
  fi
  return $statusCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__open_web() {
  local url="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT"
  if __cmd_exists mybrowser; then
    mybrowser "$url"
  elif [ -f "$BROWSER" ]; then
    $BROWSER "$url"
  else
    printf_exit "Can not find browser"
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__open_ssh() {
  local user="${2:-}"
  local url="${1:-$PROXMOX_CLI_DEFAULT_SERVER_HOST}"
  [ -n "$user" ] && user="-l $user"
  ssh -X $user $url
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
PROXMOX_CLI_CONFIG_FILE="${PROXMOX_CLI_CONFIG_FILE:-settings.conf}"
PROXMOX_CLI_CONFIG_DIR="${PROXMOX_CLI_CONFIG_DIR:-$HOME/.config/myscripts/proxmox-cli}"
PROXMOX_CLI_CONFIG_BACKUP_DIR="${PROXMOX_CLI_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/proxmox-cli/backups}"
PROXMOX_CLI_LOG_DIR="${PROXMOX_CLI_LOG_DIR:-$HOME/.local/log/proxmox-cli}"
PROXMOX_CLI_TEMP_DIR="${PROXMOX_CLI_TEMP_DIR:-$HOME/.local/tmp/system_scripts/proxmox-cli}"
PROXMOX_CLI_CACHE_DIR="${PROXMOX_CLI_CACHE_DIR:-$HOME/.cache/proxmox-cli}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
PROXMOX_CLI_OUTPUT_COLOR_1="${PROXMOX_CLI_OUTPUT_COLOR_1:-33}"
PROXMOX_CLI_OUTPUT_COLOR_2="${PROXMOX_CLI_OUTPUT_COLOR_2:-5}"
PROXMOX_CLI_OUTPUT_COLOR_GOOD="${PROXMOX_CLI_OUTPUT_COLOR_GOOD:-2}"
PROXMOX_CLI_OUTPUT_COLOR_ERROR="${PROXMOX_CLI_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
PROXMOX_CLI_NOTIFY_ENABLED="${PROXMOX_CLI_NOTIFY_ENABLED:-yes}"
PROXMOX_CLI_GOOD_NAME="${PROXMOX_CLI_GOOD_NAME:-Great:}"
PROXMOX_CLI_ERROR_NAME="${PROXMOX_CLI_ERROR_NAME:-Error:}"
PROXMOX_CLI_GOOD_MESSAGE="${PROXMOX_CLI_GOOD_MESSAGE:-No errors reported}"
PROXMOX_CLI_ERROR_MESSAGE="${PROXMOX_CLI_ERROR_MESSAGE:-Errors were reported}"
PROXMOX_CLI_NOTIFY_CLIENT_NAME="${PROXMOX_CLI_NOTIFY_CLIENT_NAME:-$APPNAME}"
PROXMOX_CLI_NOTIFY_CLIENT_ICON="${PROXMOX_CLI_NOTIFY_CLIENT_ICON:-notification-new}"
PROXMOX_CLI_NOTIFY_CLIENT_URGENCY="${PROXMOX_CLI_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
PROXMOX_CLI_DEFAULT_USERNAME="${PROXMOX_CLI_DEFAULT_USERNAME:-root@pam}"
PROXMOX_CLI_DEFAULT_PASSWORD="${PROXMOX_CLI_DEFAULT_PASSWORD:-}"
PROXMOX_CLI_DEFAULT_NODE_ID="${PROXMOX_CLI_DEFAULT_NODE_ID:-pve}"
PROXMOX_CLI_DEFAULT_SERVER_HOST="${PROXMOX_CLI_DEFAULT_SERVER_HOST:-}"
PROXMOX_CLI_DEFAULT_SERVER_PORT="${PROXMOX_CLI_DEFAULT_SERVER_PORT:-8006}"
PROXMOX_CLI_SAVE_DIR="${PROXMOX_CLI_SAVE_DIR:-$HOME/Documents/Spice}"
PROXMOX_CLI_NODE_CONFIG_FILE="${PROXMOX_CLI_NODE_CONFIG_FILE:-$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_DEFAULT_NODE_ID}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ] && . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$PROXMOX_CLI_LOG_DIR" ] || mkdir -p "$PROXMOX_CLI_LOG_DIR" |& __devnull
[ -d "$PROXMOX_CLI_TEMP_DIR" ] || mkdir -p "$PROXMOX_CLI_TEMP_DIR" |& __devnull
[ -d "$PROXMOX_CLI_CACHE_DIR" ] || mkdir -p "$PROXMOX_CLI_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROXMOX_CLI_TEMP_FILE="${PROXMOX_CLI_TEMP_FILE:-$(mktemp $PROXMOX_CLI_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$PROXMOX_CLI_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$PROXMOX_CLI_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$PROXMOX_CLI_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$PROXMOX_CLI_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$PROXMOX_CLI_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$PROXMOX_CLI_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="u:,p:,m:"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",force,machine:,node:,ssh,password:,user:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="nodes ssh reset web config status power agent"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    PROXMOX_CLI_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    PROXMOX_CLI_CWD="$2"
    [ -d "$PROXMOX_CLI_CWD" ] || mkdir -p "$PROXMOX_CLI_CWD" |& __devnull
    shift 2
    ;;
  --force)
    shift 1
    PROXMOX_CLI_FORCE="true"
    ;;
  --ssh)
    shift 1
    PROXMOX_CLI_SSH_ROOT="yes"
    ;;
  --node)
    PROXMOX_CLI_DEFAULT_NODE_ID="$2"
    PROXMOX_CLI_NODE_CONFIG_FILE="$PROXMOX_CLI_CONFIG_DIR/$2"
    shift 2
    ;;
  -u | --user)
    PROXMOX_CLI_SSH_USER="$2"
    PROXMOX_CLI_DEFAULT_USERNAME="$2"
    shift 2
    ;;
  -p | --password)
    PROXMOX_CLI_DEFAULT_PASSWORD="$2"
    shift 2
    ;;
  -m | --machine)
    PROXMOX_CLI_DEFAULT_MACHINE="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# PROXMOX_CLI_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# PROXMOX_CLI_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && PROXMOX_CLI_CWD="$1" && shift 1 || PROXMOX_CLI_CWD="${PROXMOX_CLI_CWD:-$PWD}"
PROXMOX_CLI_CWD="$(realpath "${PROXMOX_CLI_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$PROXMOX_CLI_CWD" ] && cd "$PROXMOX_CLI_CWD"; then
# if [ "$PROXMOX_CLI_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $PROXMOX_CLI_CWD"
# fi
# else
# printf_exit "ðŸ’” $PROXMOX_CLI_CWD does not exist ðŸ’”"
# fi
export PROXMOX_CLI_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
[ -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ] && . "$PROXMOX_CLI_NODE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__initialize_app "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_proxmox_cli
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
