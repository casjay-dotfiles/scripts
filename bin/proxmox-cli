#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202409241700-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  proxmox-cli --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 15, 2022 00:46 EDT
# @@File             :  proxmox-cli
# @@Description      :
# @@Changelog        :  Enhanced status command with formatted output and cleaned authentication flow
# @@TODO             :  Turn this into a full proxmox client
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202409241700-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
PROXMOX_CLI_REQUIRE_SUDO="${PROXMOX_CLI_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ -d "$HOME/.config/myscripts/pve-spice" ]; then
    printf_green "Updating configuration settings"
    sed -i 's|PVE_SPICE_|PROXMOX_CLI_|g' "$HOME/.config/myscripts/pve-spice"/*
    mv -f "$HOME/.config/myscripts/pve-spice" "$PROXMOX_CLI_CONFIG_DIR"
    if [ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ]; then
      sed -i "s|PVE_SPICE_|PROXMOX_CLI_|g" "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" &>/dev/null
      . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    fi
  fi
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
  fi
  [ -d "$PROXMOX_CLI_CONFIG_DIR" ] || mkdir -p "$PROXMOX_CLI_CONFIG_DIR"
  [ -d "$PROXMOX_CLI_CONFIG_BACKUP_DIR" ] || mkdir -p "$PROXMOX_CLI_CONFIG_BACKUP_DIR"
  [ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ] &&
    cp -Rf "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" "$PROXMOX_CLI_CONFIG_BACKUP_DIR/$PROXMOX_CLI_CONFIG_FILE.$$"
  cat <<EOF >"$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
# Settings for proxmox-cli
PROXMOX_CLI_DEFAULT_USERNAME="${PROXMOX_CLI_DEFAULT_USERNAME:-}"
PROXMOX_CLI_DEFAULT_PASSWORD="${PROXMOX_CLI_DEFAULT_PASSWORD:-}"
PROXMOX_CLI_DEFAULT_NODE_ID="${PROXMOX_CLI_DEFAULT_NODE_ID:-}"
PROXMOX_CLI_DEFAULT_SERVER_HOST="${PROXMOX_CLI_DEFAULT_SERVER_HOST:-}"
PROXMOX_CLI_DEFAULT_SERVER_PORT="${PROXMOX_CLI_DEFAULT_SERVER_PORT:-}"
PROXMOX_CLI_SAVE_DIR="${PROXMOX_CLI_SAVE_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
PROXMOX_CLI_OUTPUT_COLOR_1="${PROXMOX_CLI_OUTPUT_COLOR_1:-}"
PROXMOX_CLI_OUTPUT_COLOR_2="${PROXMOX_CLI_OUTPUT_COLOR_2:-}"
PROXMOX_CLI_OUTPUT_COLOR_GOOD="${PROXMOX_CLI_OUTPUT_COLOR_GOOD:-}"
PROXMOX_CLI_OUTPUT_COLOR_ERROR="${PROXMOX_CLI_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
PROXMOX_CLI_NOTIFY_ENABLED="${PROXMOX_CLI_NOTIFY_ENABLED:-}"
PROXMOX_CLI_GOOD_NAME="${PROXMOX_CLI_GOOD_NAME:-}"
PROXMOX_CLI_ERROR_NAME="${PROXMOX_CLI_ERROR_NAME:-}"
PROXMOX_CLI_GOOD_MESSAGE="${PROXMOX_CLI_GOOD_MESSAGE:-}"
PROXMOX_CLI_ERROR_MESSAGE="${PROXMOX_CLI_ERROR_MESSAGE:-}"
PROXMOX_CLI_NOTIFY_CLIENT_NAME="${PROXMOX_CLI_NOTIFY_CLIENT_NAME:-}"
PROXMOX_CLI_NOTIFY_CLIENT_ICON="${PROXMOX_CLI_NOTIFY_CLIENT_ICON:-}"
PROXMOX_CLI_NOTIFY_CLIENT_URGENCY="${PROXMOX_CLI_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "proxmox-cli: proxmox api script - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: proxmox-cli [options] [id] [node] [hostname] [port]"
  __printf_line "check                           - Check server connectivity and API status"
  __printf_line "server                          - Same as check - server health check"
  __printf_line "iso list                        - List available ISO files"
  __printf_line "iso download <url> [storage]    - Download ISO from URL"
  __printf_line "iso delete <volid>              - Delete ISO file"
  __printf_line "iso info <volid>                - Show ISO information"
  __printf_line "lxc list [node]                 - List LXC containers"
  __printf_line "lxc templates                   - List available LXC templates"
  __printf_line "lxc create <id> <template>      - Create LXC container"
  __printf_line "lxc delete <id>                 - Delete LXC container"
  __printf_line "lxc start/stop <id>             - Start/stop LXC container"
  __printf_line "lxc status <id>                 - Show LXC status"
  __printf_line "lxc console <id>                - Access LXC console"
  __printf_line "vm list [node]                  - List VMs"
  __printf_line "vm create <id> <iso>            - Create VM with ISO"
  __printf_line "vm delete <id>                  - Delete VM"
  __printf_line "vm start/stop <id>              - Start/stop VM"
  __printf_line "vm status <id>                  - Show VM status"
  __printf_line "vm console <id>                 - Access VM console"
  __printf_line "vm clone <id> <newid> [name]    - Clone VM"
  __printf_line "vm snapshot <id> [name]         - Create VM snapshot"
  __printf_line "config [id]                     - Get config info for vm"
  __printf_line "status [id]                     - Get the status about vm"
  __printf_line "power [on/off] [id]             - Power on or off a vm"
  __printf_line "reset                           - Reset script variables"
  __printf_line "web                             - Open the proxmox web interface"
  __printf_line "ssh                             - Connect to proxmox vm: requires qemu-agent"
  __printf_line "                                  (Auto-fallback to SSH when GUI viewers unavailable)"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "-u,--user                       - Specify the user name"
  __printf_line "-p,--password                   - Specify the user password"
  __printf_line "-m,--machine                    - Connect to a different host"
  __printf_line "--node                          - Connect to a different node"
  __printf_line "--ssh                           - Connect to proxmox server via ssh"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$PROXMOX_CLI_REQUIRE_SUDO" = "yes" ] && [ -z "$PROXMOX_CLI_REQUIRE_SUDO_RUN" ]; then
    export PROXMOX_CLI_REQUIRE_SUDO="no"
    export PROXMOX_CLI_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$PROXMOX_CLI_TEMP_FILE" ] && rm -Rf "$PROXMOX_CLI_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
printf_answer_no() {
  if [ -n "$1" ] && [ "$1" != "" ]; then
    printf_answer_yes "$1" && return 1 || return 0
  else
    printf '\n'
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_auth() {
  local curl_exit
  local response
  response=$(curl -q -f -s -S -k --max-time 30 --retry 2 -b "PVEAuthCookie=$TICKET" -H "CSRFPreventionToken: $CSRF" "$@" 2>/dev/null)
  curl_exit=$?

  if [ $curl_exit -eq 0 ] && [ -n "$response" ]; then
    echo "$response"
    return 0
  else
    case $curl_exit in
    6) printf_red "✗ Cannot resolve Proxmox server hostname" >&2 ;;
    7) printf_red "✗ Cannot connect to Proxmox server" >&2 ;;
    28) printf_red "✗ Connection timeout to Proxmox server" >&2 ;;
    35) printf_red "✗ SSL certificate error" >&2 ;;
    22) printf_red "✗ HTTP error - check API endpoint or permissions" >&2 ;;
    *) printf_red "✗ API request failed (curl exit code: $curl_exit)" >&2 ;;
    esac
    return $curl_exit
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_get() {
  curl -q -s -S -k --fail --max-time 30 --retry 2 -b "PVEAuthCookie=$TICKET" -H "CSRFPreventionToken: $CSRF" -X GET "$@" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__curl_post() {
  curl -q -s -S -k --fail --max-time 30 --retry 2 -b "PVEAuthCookie=$TICKET" -H "CSRFPreventionToken: $CSRF" -X POST "$@" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__decode_password() {
  # Decode base64 encoded password if needed
  local debug_file="$PROXMOX_CLI_TEMP_DIR/debug_password_decode.log"
  echo "=== Password Decode Debug - $(date) ===" >"$debug_file"
  echo "Before decode - Password: '${PROXMOX_CLI_DEFAULT_PASSWORD:0:20}...'" >>"$debug_file"
  echo "Before decode - Length: ${#PROXMOX_CLI_DEFAULT_PASSWORD}" >>"$debug_file"

  if [ -n "$PROXMOX_CLI_DEFAULT_PASSWORD" ]; then
    # Check if password looks like base64 (only contains base64 chars and ends with = padding)
    if [[ "$PROXMOX_CLI_DEFAULT_PASSWORD" =~ ^[A-Za-z0-9+/]+=*$ ]] && [[ "$PROXMOX_CLI_DEFAULT_PASSWORD" =~ =$ ]] && [ ${#PROXMOX_CLI_DEFAULT_PASSWORD} -gt 10 ]; then
      echo "Password appears to be base64 encoded (has = padding)" >>"$debug_file"
      # Try to decode - if it succeeds and produces readable text, use it
      local decoded_pass
      if decoded_pass="$(echo "$PROXMOX_CLI_DEFAULT_PASSWORD" | base64 -d 2>/dev/null)" && [ -n "$decoded_pass" ]; then
        echo "Decode successful - new password: '${decoded_pass:0:10}...'" >>"$debug_file"
        echo "Decode successful - new length: ${#decoded_pass}" >>"$debug_file"
        PROXMOX_CLI_DEFAULT_PASSWORD="$decoded_pass"
      else
        echo "Decode failed - using original password" >>"$debug_file"
        printf_yellow "⚠️ Base64 decode failed - using password as-is"
      fi
    else
      echo "Password appears to be plaintext (no = padding or wrong format)" >>"$debug_file"
    fi
  else
    echo "No password found" >>"$debug_file"
  fi

  echo "Final password length: ${#PROXMOX_CLI_DEFAULT_PASSWORD}" >>"$debug_file"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_server_connectivity() {
  local server="$PROXMOX_CLI_DEFAULT_SERVER_HOST"
  local port="$PROXMOX_CLI_DEFAULT_SERVER_PORT"
  local timeout="${1:-5}"

  if [ -z "$server" ]; then
    printf_red "ERROR: No Proxmox server configured"
    return 1
  fi

  printf_blue "🔌 Checking connectivity to $server:$port..."

  # Check if server is reachable
  if ! __cmd_exists nc && ! __cmd_exists telnet && ! __cmd_exists timeout; then
    printf_yellow "⚠️ Warning: No network tools available for connectivity check"
    return 0
  fi

  # Try netcat first (most reliable)
  if __cmd_exists nc; then
    if nc -z -w "$timeout" "$server" "$port" 2>/dev/null; then
      printf_green "✅ Server $server:$port is reachable"
      return 0
    fi
  # Try telnet as fallback
  elif __cmd_exists telnet && __cmd_exists timeout; then
    if timeout "$timeout" telnet "$server" "$port" </dev/null 2>/dev/null | grep -q "Connected\|Escape"; then
      printf_green "✅ Server $server:$port is reachable"
      return 0
    fi
  fi

  printf_red "❌ Cannot connect to $server:$port"
  printf_yellow "🔧 Please check:"
  printf_yellow "  - Server is running and accessible"
  printf_yellow "  - Port $port is open"
  printf_yellow "  - Network connectivity"
  printf_yellow "  - Firewall settings"
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_proxmox_api() {
  local server="$PROXMOX_CLI_DEFAULT_SERVER_HOST"
  local port="$PROXMOX_CLI_DEFAULT_SERVER_PORT"
  local api_url="https://$server:$port/api2/json/version"
  local debug_file="$PROXMOX_CLI_TEMP_DIR/debug_api.log"

  printf_blue "🌐 Checking Proxmox API availability..."

  echo "=== API Debug - $(date) ===" >"$debug_file"
  echo "URL: $api_url" >>"$debug_file"

  # Check API endpoint with timeout
  local response=$(curl -q -LSs --max-time 10 --retry 1 -k "$api_url" 2>>"$debug_file")
  local curl_exit=$?

  echo "Curl exit: $curl_exit" >>"$debug_file"
  echo "Response: '$response'" >>"$debug_file"
  echo "Response length: ${#response}" >>"$debug_file"

  # Handle different response scenarios
  if [ $curl_exit -eq 0 ] && [ -n "$response" ]; then
    # Parse version info if available
    local version=$(echo "$response" | jq -r '.data.version // .version // "unknown"' 2>/dev/null)
    local release=$(echo "$response" | jq -r '.data.release // .release // "unknown"' 2>/dev/null)

    echo "Parsed version: $version" >>"$debug_file"
    echo "Parsed release: $release" >>"$debug_file"

    if [ "$version" != "unknown" ] && [ "$version" != "null" ] && [ -n "$version" ]; then
      printf_green "✅ Proxmox API available"
      printf_cyan "📋 Version: $version"
      return 0
    else
      printf_yellow "⚠️ API responded but version parsing failed"
      printf_yellow "🐛 Raw response: ${response:0:100}..."
      return 0 # Still consider it working for older versions
    fi
  elif [ $curl_exit -eq 22 ]; then
    # HTTP 401/403 - API requires authentication (common in older Proxmox)
    printf_yellow "⚠️ API requires authentication (likely Proxmox 5.x/6.x)"
    printf_green "✅ Proxmox API accessible (auth required)"
    return 0
  elif [ $curl_exit -eq 0 ] && [ -z "$response" ]; then
    # Empty response with success - reverse proxy or auth required
    printf_yellow "⚠️ Empty response - checking with authentication..."

    # Try with authentication
    USERNAME="$PROXMOX_CLI_DEFAULT_USERNAME"
    PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD"
    local auth_response
    auth_response="$(__query_server 2>/dev/null)"

    if [ -n "$auth_response" ] && (echo "$auth_response" | jq -e '.data.ticket' &>/dev/null || echo "$auth_response" | grep -q '"ticket"'); then
      printf_green "✅ Proxmox API accessible (requires authentication)"
      # Get version from authentication response if available
      local version=$(echo "$auth_response" | jq -r '.data.version // "unknown"' 2>/dev/null)
      [ "$version" != "unknown" ] && [ "$version" != "null" ] && printf_cyan "📋 Version: $version"
      return 0
    else
      printf_red "❌ API not responding properly"
      printf_yellow "Auth response: ${auth_response:0:100}..."
      return 1
    fi
  else
    case $curl_exit in
    6) printf_red "❌ Cannot resolve hostname $server" ;;
    7) printf_red "❌ Cannot connect to $server:$port" ;;
    28) printf_red "⏰ Connection timeout to $server:$port" ;;
    35) printf_red "🔒 SSL handshake failed with $server:$port" ;;
    *) printf_red "❌ API check failed (curl exit code: $curl_exit)" ;;
    esac
    printf_yellow "🐛 Debug saved to: $debug_file"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_authentication() {
  printf_blue "🔐 Testing authentication credentials..."

  # Make sure USERNAME and PASSWORD are set for authentication test
  USERNAME="$PROXMOX_CLI_DEFAULT_USERNAME"
  PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD"
  __decode_password                        # Decode password first
  PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD" # Use decoded password


  local auth_response
  auth_response="$(__query_server)"
  local auth_exit=$?

  if [ $auth_exit -eq 0 ] && [ -n "$auth_response" ]; then
    # Check if response contains valid ticket
    if echo "$auth_response" | jq -e '.data.ticket' &>/dev/null; then
      local username=$(echo "$auth_response" | jq -r '.data.username // "unknown"' 2>/dev/null)
      local version=$(echo "$auth_response" | jq -r '.data.version // "unknown"' 2>/dev/null)
      printf_green "✅ Authentication successful for user: $username"
      [ "$version" != "unknown" ] && [ "$version" != "null" ] && [ -n "$version" ] && printf_cyan "📋 Version: $version"
      return 0
    else
      printf_red "❌ Invalid authentication response"
      printf_yellow "Response: $auth_response"
      return 1
    fi
  else
    printf_red "❌ Authentication failed"
    printf_yellow "🔧 Debug Info:"
    printf_yellow "  - Username: '$PROXMOX_CLI_DEFAULT_USERNAME'"
    printf_yellow "  - Password length: ${#PROXMOX_CLI_DEFAULT_PASSWORD}"
    printf_yellow "  - Server: $PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT"
    printf_yellow "  - Exit code: $auth_exit"
    printf_red "🛑 STOPPING HERE FOR DEBUGGING"
    exit 1
  fi
}

__query_server() {
  local response
  local curl_exit
  local debug_file="$PROXMOX_CLI_TEMP_DIR/debug_auth.log"

  # Make sure we have current decoded password
  __decode_password
  local actual_username="$PROXMOX_CLI_DEFAULT_USERNAME"
  local actual_password="$PROXMOX_CLI_DEFAULT_PASSWORD"

  echo "=== Authentication Debug - $(date) ===" >"$debug_file"
  echo "USERNAME from var: '$USERNAME'" >>"$debug_file"
  echo "PASSWORD from var length: ${#PASSWORD}" >>"$debug_file"
  echo "ACTUAL USERNAME: '$actual_username'" >>"$debug_file"
  echo "ACTUAL PASSWORD length: ${#actual_password}" >>"$debug_file"
  echo "ACTUAL PASSWORD first 5 chars: ${actual_password:0:5}..." >>"$debug_file"
  echo "Server: $PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT" >>"$debug_file"
  echo "" >>"$debug_file"

  # Test the actual curl command with verbose output
  local curl_cmd="curl -q -LfsSk --max-time 15 --retry 2 --data-urlencode \"username=$actual_username\" --data-urlencode \"password=$actual_password\" \"https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/access/ticket\""
  echo "Curl command: $curl_cmd" >>"$debug_file"
  echo "" >>"$debug_file"

  response=$(curl -q -LfsSk --max-time 15 --retry 2 \
    --data-urlencode "username=$actual_username" \
    --data-urlencode "password=$actual_password" \
    "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/access/ticket" 2>>"$debug_file")
  curl_exit=$?

  echo "Curl exit code: $curl_exit" >>"$debug_file"
  echo "Response: '$response'" >>"$debug_file"
  echo "" >>"$debug_file"

  if [ $curl_exit -eq 0 ] && [ -n "$response" ]; then
    # Validate that we got a proper JSON response with ticket
    if echo "$response" | jq -e '.data.ticket' &>/dev/null; then
      echo "Authentication successful" >>"$debug_file"
      echo "$response"
      return 0
    else
      echo "Invalid JSON response" >>"$debug_file"
      printf_red "✗ Invalid authentication response from server" >&2
      printf_yellow "🐛 Debug saved to: $debug_file" >&2
      return 1
    fi
  else
    case $curl_exit in
    6) printf_red "✗ Cannot resolve Proxmox server hostname" >&2 ;;
    7) printf_red "✗ Cannot connect to Proxmox server" >&2 ;;
    22) printf_red "✗ Authentication failed - check username/password" >&2 ;;
    28) printf_red "✗ Connection timeout to Proxmox server" >&2 ;;
    35) printf_red "✗ SSL certificate error" >&2 ;;
    *) printf_red "✗ Authentication request failed (curl exit code: $curl_exit)" >&2 ;;
    esac
    printf_yellow "🐛 Debug saved to: $debug_file" >&2
    return $curl_exit
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__detect_proxmox_version() {
  local version_url="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/version"
  local response

  printf_blue "🔍 Detecting Proxmox version..."

  response=$(curl -q -LSs --max-time 10 -k "$version_url" 2>/dev/null)
  if [ -n "$response" ]; then
    PROXMOX_VERSION=$(echo "$response" | jq -r '.data.version // .version // "unknown"' 2>/dev/null)
    PROXMOX_RELEASE=$(echo "$response" | jq -r '.data.release // .release // "unknown"' 2>/dev/null)
    PROXMOX_MAJOR_VERSION=$(echo "$PROXMOX_VERSION" | cut -d'.' -f1)

    printf_green "📋 Detected: Proxmox VE $PROXMOX_VERSION (Release: $PROXMOX_RELEASE)"
    export PROXMOX_VERSION PROXMOX_RELEASE PROXMOX_MAJOR_VERSION
  else
    printf_yellow "⚠️ Could not detect version - assuming modern Proxmox"
    PROXMOX_MAJOR_VERSION="9"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file_v5() {
  local base_url="$1"
  printf_cyan "🖥️ Proxmox 5.x: Using legacy SPICE endpoint..."

  # Proxmox 5.x uses simpler spiceproxy
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/spiceproxy" \
    -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" >"$FILENAME" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file_v6() {
  local base_url="$1"
  printf_cyan "🖥️ Proxmox 6.x: Enhanced SPICE with API tokens..."

  # Proxmox 6.x enhanced spiceproxy
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/spiceproxy" \
    -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" >"$FILENAME" 2>/dev/null && return 0

  # Fallback to VNC if SPICE fails
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/vncproxy" \
    -d "websocket=1" >"$FILENAME" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file_v7() {
  local base_url="$1"
  printf_cyan "🖥️ Proxmox 7.x: noVNC default with WebSocket..."

  # Proxmox 7.x prefers noVNC with websocket
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/vncproxy" \
    -d "websocket=1" >"$FILENAME" 2>/dev/null && return 0

  # Fallback to SPICE
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/spiceproxy" \
    -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" >"$FILENAME" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file_v8() {
  local base_url="$1"
  printf_cyan "🖥️ Proxmox 8.x: Modern console access..."

  # Try multiple methods for Proxmox 8.x
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/vncproxy" \
    -d "websocket=1" >"$FILENAME" 2>/dev/null && return 0

  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/spiceproxy" \
    -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" >"$FILENAME" 2>/dev/null && return 0

  # Try terminal proxy
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/termproxy" >"$FILENAME" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file_v9() {
  local base_url="$1"
  printf_cyan "🖥️ Proxmox 9.x: Latest console protocols..."

  # Proxmox 9.x - try all available methods
  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/vncproxy" \
    -d "websocket=1&generate-password=1" >"$FILENAME" 2>/dev/null && return 0

  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/spiceproxy" \
    -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" >"$FILENAME" 2>/dev/null && return 0

  __curl_auth "$base_url/$PROXMOX_CLI_DEFAULT_MACHINE/termproxy" \
    -d "cmd=login" >"$FILENAME" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file() {
  local base_url="$1"

  # Detect version if not already done
  if [ -z "$PROXMOX_MAJOR_VERSION" ]; then
    __detect_proxmox_version
  fi

  # Use version-specific console access
  case "$PROXMOX_MAJOR_VERSION" in
  5) __save_spice_file_v5 "$base_url" ;;
  6) __save_spice_file_v6 "$base_url" ;;
  7) __save_spice_file_v7 "$base_url" ;;
  8) __save_spice_file_v8 "$base_url" ;;
  9 | *) __save_spice_file_v9 "$base_url" ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ensure_authenticated() {
  # Make sure we have authentication tokens for API calls
  if [ -z "$TICKET" ] || [ -z "$CSRF" ]; then
    printf_blue "🔐 Setting up authentication..."

    USERNAME="$PROXMOX_CLI_DEFAULT_USERNAME"
    PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD"

    local auth_data
    auth_data="$(__query_server)"

    if [ -n "$auth_data" ]; then
      TICKET="${auth_data//\"/}"
      TICKET="${TICKET##*ticket:}"
      TICKET="${TICKET%%,*}"
      TICKET="${TICKET%%\}*}"

      CSRF="${auth_data//\"/}"
      CSRF="${CSRF##*CSRFPreventionToken:}"
      CSRF="${CSRF%%,*}"
      CSRF="${CSRF%%\}*}"

      printf_green "✅ Authentication tokens ready"
      export TICKET CSRF
    else
      printf_red "❌ Failed to get authentication tokens"
      return 1
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_all_nodes() {
  printf_blue "🌐 Listing all cluster nodes..."

  __ensure_authenticated || return 1

  local nodes_response
  nodes_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes" 2>/dev/null)"

  if [ -n "$nodes_response" ]; then
    printf_green "📋 Available nodes:"
    echo "$nodes_response" | jq -r '.data[] | "🖥️ \(.node): \(.status) - \(.type // "unknown") - CPU: \(.cpu*100|floor)% - Memory: \(.mem/1024/1024/1024|floor)GB/\(.maxmem/1024/1024/1024|floor)GB"' 2>/dev/null || echo "No nodes found"
  else
    printf_red "❌ Failed to get nodes list"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_storage_isos() {
  printf_blue "📀 Listing available ISO files..."

  # Ensure we have authentication
  __ensure_authenticated || return 1

  # Get storage list first
  local storage_response
  storage_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/storage" 2>/dev/null)"

  if [ -n "$storage_response" ]; then
    # Find ISO storage
    local iso_storages
    iso_storages=$(echo "$storage_response" | jq -r '.data[] | select(.content | contains("iso")) | .storage' 2>/dev/null)

    for storage in $iso_storages; do
      printf_cyan "Storage: $storage"
      local iso_response
      iso_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/storage/$storage/content?content=iso" 2>/dev/null)"

      if [ -n "$iso_response" ]; then
        echo "$iso_response" | jq -r '.data[] | "  💿 \(.volid) (\(.size/1024/1024|floor)MB)"' 2>/dev/null || echo "  No ISOs found"
      fi
    done
  else
    printf_red "❌ Failed to get storage information"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_lxc_templates() {
  printf_blue "📦 Listing available LXC templates..."

  # Ensure we have authentication
  __ensure_authenticated || return 1

  # Get storage list first
  local storage_response
  storage_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/storage" 2>/dev/null)"

  if [ -n "$storage_response" ]; then
    # Find template storage
    local template_storages
    template_storages=$(echo "$storage_response" | jq -r '.data[] | select(.content | contains("vztmpl")) | .storage' 2>/dev/null)

    for storage in $template_storages; do
      printf_cyan "Template storage: $storage"
      local template_response
      template_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/storage/$storage/content?content=vztmpl" 2>/dev/null)"

      if [ -n "$template_response" ]; then
        echo "$template_response" | jq -r '.data[] | "  📦 \(.volid) (\(.size/1024/1024|floor)MB)"' 2>/dev/null || echo "  No templates found"
      fi
    done
  else
    printf_red "❌ Failed to get storage information"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__download_iso() {
  local iso_url="$1"
  local storage="${2:-local}"
  local filename="$3"

  if [ -z "$iso_url" ]; then
    printf_red "❌ Usage: proxmox-cli download-iso <url> [storage] [filename]"
    return 1
  fi

  [ -n "$filename" ] || filename="$(basename "$iso_url")"

  printf_blue "📥 Downloading ISO: $filename"
  printf_cyan "Source: $iso_url"
  printf_cyan "Storage: $storage"

  # Ensure we have authentication
  __ensure_authenticated || return 1

  # Download ISO via Proxmox API
  local download_response
  download_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/storage/$storage/download-url" \
    -d "content=iso" \
    -d "filename=$filename" \
    -d "url=$iso_url" 2>/dev/null)"

  if [ -n "$download_response" ] && echo "$download_response" | jq -e '.data' &>/dev/null; then
    printf_green "✅ ISO download initiated: $filename"
    echo "$download_response" | jq -r '.data'
  else
    printf_red "❌ Failed to initiate ISO download"
    printf_yellow "Response: $download_response"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_lxc_container() {
  local vmid="$1"
  local template="$2"
  local hostname="${3:-lxc$vmid}"
  local storage="${4:-local-lvm}"

  if [ -z "$vmid" ] || [ -z "$template" ]; then
    printf_red "❌ Usage: proxmox-cli create-lxc <vmid> <template> [hostname] [storage]"
    printf_cyan "Example: proxmox-cli create-lxc 200 local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"
    return 1
  fi

  printf_blue "📦 Creating LXC container $vmid..."
  printf_cyan "Template: $template"
  printf_cyan "Hostname: $hostname"
  printf_cyan "Storage: $storage"

  # Create LXC container
  local create_response
  create_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc" \
    -d "vmid=$vmid" \
    -d "ostemplate=$template" \
    -d "hostname=$hostname" \
    -d "storage=$storage" \
    -d "memory=512" \
    -d "swap=512" \
    -d "cores=1" \
    -d "rootfs=4" \
    -d "net0=name=eth0,bridge=vmbr0,ip=dhcp" \
    -d "unprivileged=1" \
    -d "start=1" 2>/dev/null)"

  if [ -n "$create_response" ] && echo "$create_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$create_response" | jq -r '.data')
    printf_green "✅ LXC container creation started"
    printf_cyan "Task ID: $task_id"

    # Monitor task status
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to create LXC container"
    printf_yellow "Response: $create_response"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_vm() {
  local vmid="$1"
  local iso="$2"
  local name="${3:-vm$vmid}"
  local storage="${4:-local-lvm}"

  if [ -z "$vmid" ] || [ -z "$iso" ]; then
    printf_red "❌ Usage: proxmox-cli create-vm <vmid> <iso> [name] [storage]"
    printf_cyan "Example: proxmox-cli create-vm 300 local:iso/ubuntu-22.04.iso"
    return 1
  fi

  printf_blue "🖥️ Creating VM $vmid..."
  printf_cyan "ISO: $iso"
  printf_cyan "Name: $name"
  printf_cyan "Storage: $storage"

  # Create VM
  local create_response
  create_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu" \
    -d "vmid=$vmid" \
    -d "name=$name" \
    -d "memory=2048" \
    -d "cores=2" \
    -d "sockets=1" \
    -d "cpu=host" \
    -d "ostype=l26" \
    -d "scsi0=$storage:32" \
    -d "scsihw=virtio-scsi-pci" \
    -d "ide2=$iso,media=cdrom" \
    -d "net0=virtio,bridge=vmbr0" \
    -d "bootdisk=scsi0" \
    -d "boot=order=ide2;scsi0" 2>/dev/null)"

  if [ -n "$create_response" ] && echo "$create_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$create_response" | jq -r '.data')
    printf_green "✅ VM creation started"
    printf_cyan "Task ID: $task_id"

    # Monitor task status
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to create VM"
    printf_yellow "Response: $create_response"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__monitor_task() {
  local task_id="$1"
  local max_wait=300 # 5 minutes
  local wait_time=0

  printf_blue "⏳ Monitoring task: $task_id"

  while [ $wait_time -lt $max_wait ]; do
    local task_status
    task_status="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/tasks/$task_id/status" 2>/dev/null)"

    if [ -n "$task_status" ]; then
      local status=$(echo "$task_status" | jq -r '.data.status // "unknown"' 2>/dev/null)
      local exitstatus=$(echo "$task_status" | jq -r '.data.exitstatus // "running"' 2>/dev/null)

      case "$status" in
      "stopped")
        if [ "$exitstatus" = "OK" ]; then
          printf_green "🎉 Task completed successfully!"
          return 0
        else
          printf_red "❌ Task failed with status: $exitstatus"
          return 1
        fi
        ;;
      "running")
        printf_cyan "⏳ Task still running... ($wait_time/${max_wait}s)"
        ;;
      *)
        printf_yellow "⏳ Task status: $status"
        ;;
      esac
    fi

    sleep 5
    wait_time=$((wait_time + 5))
  done

  printf_yellow "⏰ Task monitoring timeout after ${max_wait}s"
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__delete_iso() {
  local iso_volid="$1"

  if [ -z "$iso_volid" ]; then
    printf_red "❌ Usage: proxmox-cli iso delete <volid>"
    printf_cyan "Example: proxmox-cli iso delete local:iso/debian-13.1.0-amd64-netinst.iso"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "🗑️ Deleting ISO: $iso_volid"

  local storage=$(echo "$iso_volid" | cut -d: -f1)
  local delete_response
  delete_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/storage/$storage/content/$iso_volid" -X DELETE 2>/dev/null)"

  if [ -n "$delete_response" ]; then
    printf_green "✅ ISO deleted successfully"
  else
    printf_red "❌ Failed to delete ISO"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__iso_info() {
  local iso_volid="$1"

  if [ -z "$iso_volid" ]; then
    printf_red "❌ Usage: proxmox-cli iso info <volid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "📋 ISO Information: $iso_volid"

  local storage=$(echo "$iso_volid" | cut -d: -f1)
  local info_response
  info_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/storage/$storage/content/$iso_volid" 2>/dev/null)"

  if [ -n "$info_response" ]; then
    echo "$info_response" | jq -r '.data | "Size: \(.size/1024/1024|floor)MB\nFormat: \(.format // "unknown")\nPath: \(.path // "unknown")"' 2>/dev/null || echo "Info parsing failed"
  else
    printf_red "❌ Failed to get ISO information"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_lxc() {
  local node="${1:-$PROXMOX_CLI_DEFAULT_NODE_ID}"

  __ensure_authenticated || return 1

  printf_blue "📦 Listing LXC containers on node: $node"

  local lxc_response
  lxc_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$node/lxc" 2>/dev/null)"

  if [ -n "$lxc_response" ]; then
    echo "$lxc_response" | jq -r '.data[] | "📦 \(.vmid): \(.name // "unnamed") - \(.status) - \(.mem/1024/1024|floor)MB RAM"' 2>/dev/null || echo "No LXC containers found"
  else
    printf_red "❌ Failed to get LXC container list"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__delete_lxc() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli lxc delete <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "🗑️ Deleting LXC container: $vmid"

  local delete_response
  delete_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc/$vmid" -X DELETE 2>/dev/null)"

  if [ -n "$delete_response" ] && echo "$delete_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$delete_response" | jq -r '.data')
    printf_green "✅ LXC deletion started"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to delete LXC container"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__start_lxc() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli lxc start <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "▶️ Starting LXC container: $vmid"

  local start_response
  start_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc/$vmid/status/start" 2>/dev/null)"

  if [ -n "$start_response" ] && echo "$start_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$start_response" | jq -r '.data')
    printf_green "✅ LXC start initiated"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to start LXC container"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__stop_lxc() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli lxc stop <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "⏹️ Stopping LXC container: $vmid"

  local stop_response
  stop_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc/$vmid/status/stop" 2>/dev/null)"

  if [ -n "$stop_response" ] && echo "$stop_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$stop_response" | jq -r '.data')
    printf_green "✅ LXC stop initiated"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to stop LXC container"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__lxc_status() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli lxc status <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  local status_response
  status_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc/$vmid/status/current" 2>/dev/null)"

  if [ -n "$status_response" ]; then
    echo "$status_response" | jq -r '.data | "CPU: \(.cpu*100|floor)%\nMemory: \(.mem/1024/1024|floor)MB / \(.maxmem/1024/1024|floor)MB\nUptime: \(.uptime//0)s"' 2>/dev/null || echo "Status parsing failed"
  else
    printf_red "❌ Failed to get LXC status"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__lxc_console() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli lxc console <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "🖥️ Opening LXC console: $vmid"

  local console_response
  console_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc/$vmid/termproxy" 2>/dev/null)"

  if [ -n "$console_response" ]; then
    local port=$(echo "$console_response" | jq -r '.data.port // "unknown"' 2>/dev/null)
    local ticket=$(echo "$console_response" | jq -r '.data.ticket // "unknown"' 2>/dev/null)
    printf_green "✅ Console available on port: $port"
    printf_cyan "Connect with: ssh -t root@$PROXMOX_CLI_DEFAULT_SERVER_HOST -p $port"
  else
    printf_red "❌ Failed to get LXC console access"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__list_vms() {
  local node="${1:-$PROXMOX_CLI_DEFAULT_NODE_ID}"

  __ensure_authenticated || return 1

  printf_blue "🖥️ Listing VMs on node: $node"

  local vm_response
  vm_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$node/qemu" 2>/dev/null)"

  if [ -n "$vm_response" ]; then
    echo "$vm_response" | jq -r '.data[] | "🖥️ \(.vmid): \(.name // "unnamed") - \(.status) - \(.mem/1024/1024|floor)MB RAM"' 2>/dev/null || echo "No VMs found"
  else
    printf_red "❌ Failed to get VM list"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__delete_vm() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli vm delete <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "🗑️ Deleting VM: $vmid"

  local delete_response
  delete_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid" -X DELETE 2>/dev/null)"

  if [ -n "$delete_response" ] && echo "$delete_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$delete_response" | jq -r '.data')
    printf_green "✅ VM deletion started"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to delete VM"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__start_vm() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli vm start <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "▶️ Starting VM: $vmid"

  local start_response
  start_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid/status/start" 2>/dev/null)"

  if [ -n "$start_response" ] && echo "$start_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$start_response" | jq -r '.data')
    printf_green "✅ VM start initiated"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to start VM"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__stop_vm() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli vm stop <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "⏹️ Stopping VM: $vmid"

  local stop_response
  stop_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid/status/stop" 2>/dev/null)"

  if [ -n "$stop_response" ] && echo "$stop_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$stop_response" | jq -r '.data')
    printf_green "✅ VM stop initiated"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to stop VM"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__vm_status() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli vm status <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  local status_response
  status_response="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid/status/current" 2>/dev/null)"

  if [ -n "$status_response" ]; then
    echo "$status_response" | jq -r '.data | "CPU: \(.cpu*100|floor)%\nMemory: \(.mem/1024/1024|floor)MB / \(.maxmem/1024/1024|floor)MB\nUptime: \(.uptime//0)s\nAgent: \(.agent//0)"' 2>/dev/null || echo "Status parsing failed"
  else
    printf_red "❌ Failed to get VM status"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__vm_console() {
  local vmid="$1"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli vm console <vmid>"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "🖥️ Getting VM console access: $vmid"

  # Try SPICE first, then VNC
  local console_response
  console_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid/spiceproxy" -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" 2>/dev/null)"

  if [ -n "$console_response" ]; then
    printf_green "✅ SPICE console file generated"
    echo "$console_response"
  else
    # Try VNC as fallback
    console_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid/vncproxy" 2>/dev/null)"

    if [ -n "$console_response" ]; then
      local port=$(echo "$console_response" | jq -r '.data.port // "unknown"' 2>/dev/null)
      printf_green "✅ VNC console available on port: $port"
    else
      printf_red "❌ Failed to get console access"
      return 1
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__clone_vm() {
  local vmid="$1"
  local newid="$2"
  local name="${3:-clone-of-$vmid}"

  if [ -z "$vmid" ] || [ -z "$newid" ]; then
    printf_red "❌ Usage: proxmox-cli vm clone <source_vmid> <new_vmid> [name]"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "📋 Cloning VM $vmid to $newid..."

  local clone_response
  clone_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid/clone" \
    -d "newid=$newid" \
    -d "name=$name" \
    -d "full=1" 2>/dev/null)"

  if [ -n "$clone_response" ] && echo "$clone_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$clone_response" | jq -r '.data')
    printf_green "✅ VM clone started"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to clone VM"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__vm_snapshot() {
  local vmid="$1"
  local snap_name="${2:-snapshot-$(date +%Y%m%d-%H%M%S)}"
  local description="${3:-Manual snapshot via proxmox-cli}"

  if [ -z "$vmid" ]; then
    printf_red "❌ Usage: proxmox-cli vm snapshot <vmid> [name] [description]"
    return 1
  fi

  __ensure_authenticated || return 1

  printf_blue "📸 Creating VM snapshot: $vmid"
  printf_cyan "Snapshot name: $snap_name"

  local snapshot_response
  snapshot_response="$(__curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$vmid/snapshot" \
    -d "snapname=$snap_name" \
    -d "description=$description" 2>/dev/null)"

  if [ -n "$snapshot_response" ] && echo "$snapshot_response" | jq -e '.data' &>/dev/null; then
    local task_id=$(echo "$snapshot_response" | jq -r '.data')
    printf_green "✅ VM snapshot started"
    __monitor_task "$task_id"
  else
    printf_red "❌ Failed to create snapshot"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_config() {
  local url_lxc="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc"
  local url_qemu="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu"
  __curl_auth "$url_qemu/$PROXMOX_CLI_DEFAULT_MACHINE/config" 2>/dev/null && return 0 ||
    __curl_auth "$url_lxc/$PROXMOX_CLI_DEFAULT_MACHINE/config" && return 0
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_status() {
  local url_lxc="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc"
  local url_qemu="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu"
  local url_status="$PROXMOX_CLI_DEFAULT_MACHINE/status/current"
  local response

  # Try QEMU (VM) first
  response="$(__curl_auth "$url_qemu/$url_status" 2>/dev/null)"
  if [ -n "$response" ]; then
    # Parse JSON response and format as key=value
    local status=$(echo "$response" | jq -r '.data.status // "unknown"' 2>/dev/null)
    local name=$(echo "$response" | jq -r '.data.name // "unnamed"' 2>/dev/null)
    local vmid=$(echo "$response" | jq -r '.data.vmid // ""' 2>/dev/null)
    local qmpstatus=$(echo "$response" | jq -r '.data.qmpstatus // ""' 2>/dev/null)

    # Output in key=value format for compatibility
    echo "status=$status"
    echo "name=$name"
    echo "vmid=$vmid"
    echo "qmpstatus=$qmpstatus"
    return 0
  fi

  # Try LXC (Container) as fallback
  response="$(__curl_auth "$url_lxc/$url_status" 2>/dev/null)"
  if [ -n "$response" ]; then
    # Parse JSON response and format as key=value
    local status=$(echo "$response" | jq -r '.data.status // "unknown"' 2>/dev/null)
    local name=$(echo "$response" | jq -r '.data.name // "unnamed"' 2>/dev/null)
    local vmid=$(echo "$response" | jq -r '.data.vmid // ""' 2>/dev/null)

    # Output in key=value format for compatibility
    echo "status=$status"
    echo "name=$name"
    echo "vmid=$vmid"
    echo "type=lxc"
    return 0
  fi

  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_connection() {
  if [ -z "$vm_exists" ]; then
    printf_exit "$vm_name does not exist"
  elif [ "$vm_status" = "off" ]; then
    printf_read_question "4" "Would you to turn on $vm_name" "1" "power_on"
    if printf_answer_yes "$power_on"; then
      if __start_stop_vm "qemu" "start"; then
        vm_status="on"
        [ -n "$PROXMOX_CLI_SSH_IP" ] && printf_yellow "Waiting 30 seconds for the vm to boot" && sleep 30
      else
        if [ -n "$PROXMOX_CLI_SSH_IP" ]; then
          printf_exit "Failed to get ip address for $PROXMOX_CLI_DEFAULT_NODE_ID: Ensure you have qemu-guest-agent installed and running"
        else
          printf_exit "Failed to start $vm_name on $PROXMOX_CLI_DEFAULT_NODE_ID"
        fi
      fi
      sleep 2
    else
      printf_exit "User cancelled"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_spice_file() {
  __init_connection
  if [ "$vm_status" = "on" ]; then
    printf_blue "📁 Generating SPICE configuration file..."

    # Try QEMU (VM) first
    if __save_spice_file "$url_qemu"; then
      return 0
    fi

    # Try LXC as fallback (though SPICE doesn't typically work with LXC)
    if __save_spice_file "$url_lxc"; then
      return 0
    fi

    printf_red "❌ Failed to create SPICE file for both VM and LXC"
    return 1
  else
    printf_red "❌ Cannot create SPICE file: VM is $vm_status_detail"
    printf_yellow "💡 VM must be running to generate SPICE connection file"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__save_spice_file() {
  local api_url="$1"
  local spice_endpoint="$api_url/$PROXMOX_CLI_DEFAULT_MACHINE/spiceproxy"
  local error_log="$PROXMOX_CLI_TEMP_DIR/spice_error.log"

  # Determine VM type from API URL and create appropriate filenames
  local vm_type=""
  if echo "$api_url" | grep -q "/qemu"; then
    vm_type="qemu"
  elif echo "$api_url" | grep -q "/lxc"; then
    vm_type="lxc"
  else
    vm_type="unknown"
  fi
  
  # Create node-specific directory and set filenames
  local node_dir="$PROXMOX_CLI_SAVE_DIR/$PROXMOX_CLI_DEFAULT_NODE_ID"
  local spice_file="$node_dir/${vm_type}_${PROXMOX_CLI_DEFAULT_MACHINE}.spice"
  local vv_file="$node_dir/${vm_type}_${PROXMOX_CLI_DEFAULT_MACHINE}.vv"
  
  [ ! -d "$node_dir" ] && mkdir -p "$node_dir"

  # Check VM display configuration quietly
  local vm_config
  vm_config="$(__curl_auth "$(dirname "$spice_endpoint")/config" 2>/dev/null)"
  if [ -n "$vm_config" ]; then
    local vga_type="$(echo "$vm_config" | jq -r '.data.vga' 2>/dev/null)"
    if [[ "$vga_type" != *"spice"* ]] && [[ "$vga_type" != "qxl"* ]] && [[ "$vga_type" != "null" ]]; then
      printf_yellow "⚠️ VM graphics adapter ($vga_type) may not support SPICE"
    fi
  fi

  # Make the API call and capture both output and errors
  local spice_response
  # Use POST method for SPICE proxy API
  spice_response="$(__curl_post "$spice_endpoint" -d "proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" 2>"$error_log")"
  local curl_exit=$?

  # If POST fails, try GET method as fallback
  if [ $curl_exit -ne 0 ]; then
    printf_yellow "⚠️ POST method failed, trying GET method..." >&2
    spice_response="$(__curl_auth "$spice_endpoint?proxy=$PROXMOX_CLI_DEFAULT_SERVER_HOST" 2>"$error_log")"
    curl_exit=$?
  fi

  if [ $curl_exit -eq 0 ] && [ -n "$spice_response" ]; then
    # Check if response contains SPICE data
    if echo "$spice_response" | grep -q '\[virt-viewer\]'; then
      # Already in correct virt-viewer format
      echo "$spice_response" >"$FILENAME"
      return 0
    elif echo "$spice_response" | jq -e '.errors' &>/dev/null; then
      # API returned JSON error
      local error_msg="$(echo "$spice_response" | jq -r '.errors[0] // "Unknown API error"' 2>/dev/null)"
      printf_red "❌ API Error: $error_msg"
      return 1
    elif echo "$spice_response" | jq -e '.' &>/dev/null; then
      # JSON response - convert to virt-viewer format (extract from .data field)
      local host="$(echo "$spice_response" | jq -r '.data.host // "empty"' 2>/dev/null)"
      local port="$(echo "$spice_response" | jq -r '.data["tls-port"] // .data.port // "empty"' 2>/dev/null)"
      local password="$(echo "$spice_response" | jq -r '.data.password // "empty"' 2>/dev/null)"
      local title="$(echo "$spice_response" | jq -r '.data.title // "empty"' 2>/dev/null)"
      local ca="$(echo "$spice_response" | jq -r '.data.ca // "empty"' 2>/dev/null)"
      local proxy="$(echo "$spice_response" | jq -r '.data.proxy // "empty"' 2>/dev/null)"
      local host_subject="$(echo "$spice_response" | jq -r '.data["host-subject"] // "empty"' 2>/dev/null)"
      local delete_file="$(echo "$spice_response" | jq -r '.data["delete-this-file"] // "empty"' 2>/dev/null)"
      local release_cursor="$(echo "$spice_response" | jq -r '.data["release-cursor"] // "empty"' 2>/dev/null)"
      local secure_attention="$(echo "$spice_response" | jq -r '.data["secure-attention"] // "empty"' 2>/dev/null)"
      local toggle_fullscreen="$(echo "$spice_response" | jq -r '.data["toggle-fullscreen"] // "empty"' 2>/dev/null)"
      
      if [ -n "$host" ] && [ "$host" != "empty" ] && [ -n "$port" ] && [ "$port" != "empty" ] && [ -n "$password" ] && [ "$password" != "empty" ]; then
        # Create proper virt-viewer format matching Proxmox format
        {
          echo "[virt-viewer]"
          echo "type=spice"
          echo "host=$host"
          [ -n "$port" ] && [ "$port" != "empty" ] && echo "tls-port=$port"
          echo "password=$password"
          [ -n "$title" ] && [ "$title" != "empty" ] && echo "title=$title"
          [ -n "$proxy" ] && [ "$proxy" != "empty" ] && echo "proxy=$proxy"
          [ -n "$host_subject" ] && [ "$host_subject" != "empty" ] && echo "host-subject=$host_subject"
          [ -n "$delete_file" ] && [ "$delete_file" != "empty" ] && echo "delete-this-file=$delete_file"
          # Use original Proxmox key bindings if available, otherwise defaults
          [ -n "$toggle_fullscreen" ] && [ "$toggle_fullscreen" != "empty" ] && echo "toggle-fullscreen=$toggle_fullscreen" || echo "toggle-fullscreen=shift+f11"
          [ -n "$release_cursor" ] && [ "$release_cursor" != "empty" ] && echo "release-cursor=$release_cursor" || echo "release-cursor=ctrl+alt+r"
          [ -n "$secure_attention" ] && [ "$secure_attention" != "empty" ] && echo "secure-attention=$secure_attention" || echo "secure-attention=ctrl+alt+ins"
          # Handle CA certificate (convert \\n to actual newlines)
          if [ -n "$ca" ] && [ "$ca" != "null" ] && [ "$ca" != "empty" ]; then
            echo "ca=$(echo "$ca" | sed 's/\\\\n/\n/g')"
          fi
        } >"$vv_file"
        
        # Also save raw SPICE response for debugging
        echo "$spice_response" > "$spice_file"
        
        # Update FILENAME to point to the vv file for compatibility
        FILENAME="$vv_file"
        
        return 0
      else
        printf_red "❌ Missing required SPICE connection parameters"
        return 1
      fi
    fi

    printf_red "❌ Invalid SPICE response format"
    printf_yellow "🐛 Raw response: ${spice_response:0:200}..."
    return 1
  else
    printf_red "❌ SPICE API request failed (exit code: $curl_exit)"
    if [ -s "$error_log" ]; then
      local error_details="$(cat "$error_log" 2>/dev/null)"
      printf_yellow "🐛 Error details: ${error_details:0:200}"
    fi

    # Try VNC as fallback
    printf_yellow "🔄 SPICE failed, trying VNC as fallback..."
    local vnc_endpoint="${api_url}/$PROXMOX_CLI_DEFAULT_MACHINE/vncproxy"
    printf_blue "   VNC endpoint: $vnc_endpoint"

    local vnc_response
    vnc_response="$(__curl_post "$vnc_endpoint" -d "websocket=1" 2>"$error_log")"
    local vnc_exit=$?

    if [ $vnc_exit -eq 0 ] && [ -n "$vnc_response" ]; then
      # Convert VNC response to virt-viewer format
      local vnc_host="$(echo "$vnc_response" | jq -r '.data.host // empty' 2>/dev/null)"
      local vnc_port="$(echo "$vnc_response" | jq -r '.data.port // empty' 2>/dev/null)"
      local vnc_ticket="$(echo "$vnc_response" | jq -r '.data.ticket // empty' 2>/dev/null)"

      if [ -n "$vnc_host" ] && [ -n "$vnc_port" ]; then
        # Create VNC connection file
        cat >"$FILENAME" <<EOF
[virt-viewer]
type=vnc
host=$vnc_host
port=$vnc_port
password=$vnc_ticket
title=VM $PROXMOX_CLI_DEFAULT_MACHINE - VNC
EOF
        printf_green "✅ VNC configuration saved to: $FILENAME"
        printf_yellow "📝 Note: Using VNC instead of SPICE"
        return 0
      fi
    fi

    printf_red "❌ Both SPICE and VNC connection methods failed"
    return $curl_exit
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__start_stop_vm() {
  __curl_post "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/${1:-qemu}/$PROXMOX_CLI_DEFAULT_MACHINE/status/${2:-start}" |& __devnull
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__pve_agent() {
  local url="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/${1:-$PROXMOX_CLI_DEFAULT_NODE_ID}/${2:-qemu}/${3:-$PROXMOX_CLI_DEFAULT_MACHINE}/agent"
  if [ -n "$4" ]; then
    __curl_get "$url/$4" | jq -r '.data .result|.[]|.' 2>/dev/null
  else
    __curl_get "$url" | jq -rc '. | .[] | .[] | .name' 2>/dev/null
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_spice_viewer() {
  local FILE="${1:-$FILENAME}"
  local RUN="${2:-$FILENAME}.spice"
  sed -i 's|delete-this-file=1|delete-this-file=0|g' "$FILE"
  cp -Rf "$FILE" "$RUN"
  remote-viewer "$RUN" &>/dev/null &
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Output format functions for __get_nodes
__nodes_csv() {
  echo "$VMID,$NODE,$1,$NAME,$HWADDR,$IP"
}
__nodes_start_csv() {
  echo "vmid,node,type,name,mac,ip"
}
__nodes_end_csv() {
  echo -n
}
__nodes_json() {
  if [ "$2" != "0" ]; then
    echo ","
  fi
  echo "{"
  echo "\"vmid\": \"$VMID\","
  echo "\"node\": \"$NODE\","
  echo "\"type\": \"$1\","
  echo "\"name\": \"$NAME\","
  echo "\"mac\": \"$HWADDR\","
  echo "\"ip\": \"$IP\""
  echo -n "}"
}
__nodes_start_json() {
  echo "["
}
__nodes_end_json() {
  echo "]"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_nodes() {
  local logdir="$PROXMOX_CLI_TEMP_DIR"
  local USERNAME="$PROXMOX_CLI_DEFAULT_USERNAME"
  local PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD"
  local FORMAT="${PROXMOX_CLI_NODE_FORMAT:-json}"
  __decode_password
  local TOKEN=$(curl -s -k --data-urlencode "username=$USERNAME" --data-urlencode "password=$PASSWORD" "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/access/ticket" 2>/dev/null | jq -r .data.ticket)
  if [ "${PIPESTATUS[0]}" != "0" ]; then
    echo "Auth failed"
    exit 1
  fi
  "__nodes_start_$FORMAT"
  POS=0
  NODES=$(curl -s -k "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes" -b "PVEAuthCookie=$TOKEN" | jq -r '.data[].node')
  for NODE in $(echo "$NODES"); do
    curl -s -k "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/lxc" -b "PVEAuthCookie=$TOKEN" >"$logdir/proxvm-lxc.json"
    curl -s -k "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/qemu" -b "PVEAuthCookie=$TOKEN" >"$logdir/proxvm-qemu.json"
    for VMID in $(cat "$logdir/proxvm-lxc.json" | jq -r '.data[].vmid'); do
      curl -s -k "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/lxc/$VMID/config" -b "PVEAuthCookie=$TOKEN" >"$logdir/proxvm-$VMID.json"
      JSON=$(cat "$logdir/proxvm-lxc.json" | jq -r ".data[] | select(.vmid | tonumber | contains($VMID))")
      NAME=$(echo "$JSON" | jq -r .name)
      NET=$(cat "$logdir/proxvm-$VMID.json" | jq -r .data.net0)
      HWADDR=$(echo "$NET" | sed -re "s/.*hwaddr=([a-zA-Z0-9:]+),[a-zA-Z0-9]+=.*/\1/g")
      IP=$(arp -a | grep "$HWADDR" | sed -re "s/.*\(([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/g")
      "__nodes_$FORMAT" lxc "$POS"
      POS=$((POS + 1))
    done
    for VMID in $(cat "$logdir/proxvm-qemu.json" | jq -r '.data[].vmid'); do
      curl -s -k "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$NODE/qemu/$VMID/config" -b "PVEAuthCookie=$TOKEN" >"$logdir/proxvm-$VMID.json"
      JSON=$(cat "$logdir/proxvm-qemu.json" | jq -r ".data[] | select(.vmid | tonumber | contains($VMID))")
      NAME=$(echo "$JSON" | jq -r .name)
      NET=$(cat "$logdir/proxvm-$VMID.json" | jq -r .data.net0)
      HWADDR=$(echo "$NET" | sed -re "s/[a-zA-Z0-9]+=([a-zA-Z0-9:]+),.*/\1/g")
      IP=$(arp -a | grep "$HWADDR" | sed -re "s/.*\(([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/g")
      "__nodes_$FORMAT" qemu "$POS"
      POS=$((POS + 1))
    done
  done

  "__nodes_end_$FORMAT"
  cat "$logdir"/proxvm-*.json | jq -rc '.'
  rm "$logdir"/proxvm-*.json
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_curl() {
  DATA="${1:-$DATA}"
  FILENAME="${2:-$FILENAME}"
  TICKET="${DATA//\"/}"
  TICKET="${TICKET##*ticket:}"
  TICKET="${TICKET%%,*}"
  TICKET="${TICKET%%\}*}"
  CSRF="${DATA//\"/}"
  CSRF="${CSRF##*CSRFPreventionToken:}"
  CSRF="${CSRF%%,*}"
  CSRF="${CSRF%%\}*}"
  url_lxc="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/lxc"
  url_qemu="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu"
  if [ -n "$CSRF" ]; then
    vm_exists="$(__get_status | grep '^' || false)"
    # Improved status detection logic
    if [ -n "$vm_exists" ]; then
      vm_raw_status="$(echo "$vm_exists" | grep '^status=' | awk -F '=' '{print $2}')"
      case "$vm_raw_status" in
      "running")
        vm_status="on"
        vm_status_detail="running"
        ;;
      "stopped" | "shutdown")
        vm_status="off"
        vm_status_detail="stopped"
        ;;
      "paused")
        vm_status="on"
        vm_status_detail="paused"
        ;;
      *)
        vm_status="unknown"
        vm_status_detail="$vm_raw_status"
        ;;
      esac
    else
      vm_status="off"
      vm_status_detail="not found"
    fi
    vm_name="$(echo "$vm_exists" | grep '^name=' | awk -F '=' '{print $2}' | grep '^' || echo "$PROXMOX_CLI_DEFAULT_MACHINE")"
    printf_cyan "🚀 Initializing the connection to $vm_name ($PROXMOX_CLI_DEFAULT_MACHINE) - Status: $vm_status_detail"
    if [ -n "$PROXMOX_CLI_GET_CONFIG" ]; then
      __get_config || printf_exit "Failed to get the configuration for $PROXMOX_CLI_DEFAULT_MACHINE"
      exit $?
    elif [ -n "$PROXMOX_CLI_GET_STATUS" ]; then
      # Use formatted status display instead of raw output
      # Try VM status first, then LXC status
      if ! __vm_status "$PROXMOX_CLI_DEFAULT_MACHINE" 2>/dev/null; then
        if ! __lxc_status "$PROXMOX_CLI_DEFAULT_MACHINE" 2>/dev/null; then
          printf_exit "Failed to get the status for $PROXMOX_CLI_DEFAULT_MACHINE"
        fi
      fi
    elif [ -n "$PROXMOX_CLI_POWER_CYCLE" ]; then
      if [ "$PROXMOX_CLI_POWER_OPTION" = "on" ]; then
        PROXMOX_CLI_POWER_OPTION="start"
        PROXMOX_CLI_POWER_STATUS="Telling proxmox to start $PROXMOX_CLI_DEFAULT_MACHINE"
      elif [ "$PROXMOX_CLI_POWER_OPTION" = "off" ]; then
        PROXMOX_CLI_POWER_OPTION="stop"
        PROXMOX_CLI_POWER_STATUS="VM $PROXMOX_CLI_DEFAULT_MACHINE should be stopping"
      fi
      printf_cyan "Sending $PROXMOX_CLI_POWER_OPTION to vm $PROXMOX_CLI_DEFAULT_MACHINE"
      if __start_stop_vm "qemu" "$PROXMOX_CLI_POWER_OPTION"; then
        printf_green "$PROXMOX_CLI_POWER_STATUS"
        exit 0
      else
        printf_exit "Failed to send $PROXMOX_CLI_POWER_OPTION command to proxmox: $PROXMOX_CLI_DEFAULT_MACHINE"
        exit 1
      fi
    elif [ -n "$PROXMOX_CLI_GET_AGENT" ]; then
      __pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" "$PROXMOX_CLI_AGENT_OPTION"
      exit $?
    elif [ -n "$PROXMOX_CLI_SSH_IP" ]; then
      __init_connection
      # Check VM status before trying to get IP
      if [ "$vm_status" = "off" ]; then
        printf_exit "Cannot get IP address: VM $vm_name is $vm_status_detail"
      elif [ "$vm_status" = "on" ]; then
        printf_cyan "VM $vm_name is running ($vm_status_detail), retrieving IP address..."
        host="$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" network-get-interfaces | jq -rc '.' | grep 'eth0' | jq -r '."ip-addresses"|.[]|."ip-address"' | grep -v '::' | head -n1 | grep '^' || echo '')"
        host="${host:-$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" network-get-interfaces | grep 'ip-address.*[0-9]\.' | grep -vE '127.0.0.1|172.17.0.[0-9]' | sed 's|[", ]||g;s|ip-address:||g' | head -n1 | grep '^' || echo '')}"

        if [ -n "$host" ]; then
          printf_green "Found IP address: $host"
          __open_ssh "$host" "${PROXMOX_CLI_SSH_USER:-$USER}"
        else
          printf_exit "Failed to get IP address for running VM $vm_name ($PROXMOX_CLI_DEFAULT_MACHINE): Ensure qemu-guest-agent is installed and running in the guest"
        fi
      else
        printf_exit "VM $vm_name status is $vm_status_detail - cannot retrieve IP address"
      fi
      exit $?
    else
      # First, try to get the SPICE file
      if __get_spice_file; then
        local spice_success=true
      else
        printf_exit "Failed to get the spice file"
      fi

      # Now try to launch viewers if SPICE file was created successfully
      if __cmd_exists remote-viewer; then
        printf_yellow "🚀 Attempting to launch the client: $FILENAME" && sleep 2
        __run_spice_viewer "$FILENAME" &>/dev/null
        return $?
      elif __cmd_exists virt-viewer; then
        printf_yellow "🚀 Attempting to launch virt-viewer: $FILENAME" && sleep 2
        __run_spice_viewer "$FILENAME" &>/dev/null
        return $?
      else
        printf_yellow "⚠️  Install virt-viewer or remote-viewer for GUI support"

        # Try SSH fallback if VM is running and we can get IP
        if [ "$vm_status" = "on" ]; then
          local vm_ip="$(__get_vm_ip)"
          if [ -n "$vm_ip" ]; then
            # Check if we're dealing with a remote Proxmox server and local VM IP
            local is_remote_server=false
            local is_private_ip=false

            # Check if server is remote (not localhost, not local IP)
            if ! echo "$PROXMOX_CLI_DEFAULT_SERVER_HOST" | grep -qE '^(localhost|127\.|192\.168\.|10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.)'; then
              is_remote_server=true
            fi

            # Check if VM IP is private/local
            if echo "$vm_ip" | grep -qE '^(192\.168\.|10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.)'; then
              is_private_ip=true
            fi

            if [ "$is_remote_server" = "true" ] && [ "$is_private_ip" = "true" ]; then
              printf_red "⚠️  Sorry but the VM IP ($vm_ip) not directly accessible from here"
            fi
            return 1 # SPICE file created but no usable connection method available
          else
            return 1 # SPICE file created but no viewers available
          fi
        else
          return 1 # SPICE file created but VM not running for SSH
        fi
      fi
    fi
  else
    printf_red "Failed to retrieve auth token from $PROXMOX_CLI_DEFAULT_SERVER_HOST"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_vm_id() {
  printf_read_input "What is your vm id number? " "120" "set_vmid"
  PROXMOX_CLI_DEFAULT_MACHINE="${set_vmid:-}"
  [ -n "$PROXMOX_CLI_DEFAULT_MACHINE" ] || printf_exit "VM ID is required"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_username() {
  local change_user="" option_user=""
  PROXMOX_CLI_DEFAULT_USERNAME="${PROXMOX_CLI_DEFAULT_USERNAME:-root@pam}"
  printf_read_question "5" "Is the username correct? [y/N]: [$PROXMOX_CLI_DEFAULT_USERNAME]" "1" "change_user"
  if printf_answer_no "$change_user"; then
    printf_read_input "What is your username? " "120" "option_user"
    PROXMOX_CLI_DEFAULT_USERNAME="$option_user"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_USERNAME" ] || printf_exit "Username is required"
  grep -shq "PROXMOX_CLI_DEFAULT_USERNAME=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_USERNAME="'$PROXMOX_CLI_DEFAULT_USERNAME'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_password() {
  local change_pass="" option_pass_new="" option_pass_confirm=""
  if [ -z "$get_pass_error" ]; then
    printf_read_question "5" "Is this the correct password? [y/N]: [$PROXMOX_CLI_DEFAULT_PASSWORD]" "1" "change_pass"
  fi
  if [ -n "$get_pass_error" ] || printf_answer_no "$change_pass"; then
    printf_read_password "1" "What is your password? " "option_pass_new"
    printf_read_password "1" "confirm your password? " "option_pass_confirm"
    if [ "$option_pass_new" != "$option_pass_confirm" ]; then
      while :; do
        get_pass_error="true"
        printf_red "Error: the passwords do not match"
        __get_password && break
      done
    fi
    PROXMOX_CLI_DEFAULT_PASSWORD="${option_pass_new:-}"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_PASSWORD" ] || printf_exit "Password is required"
  # Handle password storage - encode if not already encoded
  if ! grep -shq "PROXMOX_CLI_DEFAULT_PASSWORD=" "$PROXMOX_CLI_NODE_CONFIG_FILE"; then
    # New password - encode it
    encoded_password="$(echo "$PROXMOX_CLI_DEFAULT_PASSWORD" | base64 -w 0)"
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_PASSWORD="'$encoded_password'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
    printf_yellow "🔐 Password encoded and saved to config file"
  else
    # Check if existing password needs encoding
    existing_password="$(grep "PROXMOX_CLI_DEFAULT_PASSWORD=" "$PROXMOX_CLI_NODE_CONFIG_FILE" | cut -d'"' -f2)"
    if ! [[ "$existing_password" =~ ^[A-Za-z0-9+/]+=*$ ]] || [ ${#existing_password} -lt 10 ]; then
      # Existing password appears to be plaintext - encode it
      encoded_password="$(echo "$existing_password" | base64 -w 0)"
      sed -i "s|PROXMOX_CLI_DEFAULT_PASSWORD=\".*\"|PROXMOX_CLI_DEFAULT_PASSWORD=\"$encoded_password\"|g" "$PROXMOX_CLI_NODE_CONFIG_FILE"
      printf_yellow "🔐 Existing plaintext password has been encoded"
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_node_name() {
  local change_node=""
  PROXMOX_CLI_DEFAULT_NODE_ID="${PROXMOX_CLI_DEFAULT_NODE_ID:-pve}"
  printf_read_question "5" "Is the node name correct? [y/N]: [$PROXMOX_CLI_DEFAULT_NODE_ID]" "1" "change_node"
  if printf_answer_no "$change_node"; then
    printf_read_input "What is node name? " "120" "PROXMOX_CLI_DEFAULT_NODE_ID"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_NODE_ID" ] || printf_exit "The node name is required"
  grep -shq "PROXMOX_CLI_DEFAULT_NODE_ID=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_NODE_ID="'$PROXMOX_CLI_DEFAULT_NODE_ID'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_servername() {
  local change_server=""
  PROXMOX_CLI_DEFAULT_SERVER_HOST="${PROXMOX_CLI_DEFAULT_SERVER_HOST:-}"
  printf_read_question "5" "is the server address correct? [y/N]: [$PROXMOX_CLI_DEFAULT_SERVER_HOST]" "1" "change_server"
  if printf_answer_no "$change_server"; then
    printf_read_input "What is the server address? " "120" "PROXMOX_CLI_DEFAULT_SERVER_HOST"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_SERVER_HOST" ] || printf_exit "The host is required"
  grep -shq "PROXMOX_CLI_DEFAULT_SERVER_HOST=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_SERVER_HOST="'$PROXMOX_CLI_DEFAULT_SERVER_HOST'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_serverport() {
  local change_port=""
  PROXMOX_CLI_DEFAULT_SERVER_PORT="${PROXMOX_CLI_DEFAULT_SERVER_PORT:-8006}"
  printf_read_question "5" "is the port correct? [y/N]: [$PROXMOX_CLI_DEFAULT_SERVER_PORT]" "1" "change_port"
  if printf_answer_no "$change_port"; then
    printf_read_input "What is the port? " "120" "PROXMOX_CLI_DEFAULT_SERVER_PORT"
  fi
  [ -n "$PROXMOX_CLI_DEFAULT_SERVER_PORT" ] || printf_exit "The port is required"
  grep -shq "PROXMOX_CLI_DEFAULT_SERVER_PORT=" "$PROXMOX_CLI_NODE_CONFIG_FILE" ||
    printf '%s\n' 'PROXMOX_CLI_DEFAULT_SERVER_PORT="'$PROXMOX_CLI_DEFAULT_SERVER_PORT'"' >>"$PROXMOX_CLI_NODE_CONFIG_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__initialize_app() {
  while :; do
    case "$1" in
    nodes)
      shift 1
      case "${1:-list}" in
      list) __list_all_nodes ;;
      *) __get_nodes ;;
      esac
      exit $?
      ;;
    reset) PROXMOX_CLI_FORCE="true" && shift 1 ;;
    web) shift 1 && __open_web && exit 0 || exit 1 ;;
    check | server)
      shift 1
      printf_purple "🏥 Proxmox Server Health Check"
      __check_server_connectivity && __check_proxmox_api && __check_authentication
      local check_result=$?
      
      # Try to get version after authentication if API version check failed
      if [ $check_result -eq 0 ]; then
        local auth_data="$(__query_server 2>/dev/null)"
        if [ -n "$auth_data" ]; then
          # Extract ticket for authenticated API call
          local ticket="$(echo "$auth_data" | jq -r '.data.ticket // empty' 2>/dev/null)"
          local csrf="$(echo "$auth_data" | jq -r '.data.CSRFPreventionToken // empty' 2>/dev/null)"
          
          if [ -n "$ticket" ] && [ -n "$csrf" ]; then
            # Try authenticated version call
            local version_response
            version_response="$(curl -q -LSs --max-time 10 --retry 1 -k \
              -b "PVEAuthCookie=$ticket" \
              -H "CSRFPreventionToken: $csrf" \
              "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/version" 2>/dev/null)"
            
            if [ -n "$version_response" ]; then
              local version="$(echo "$version_response" | jq -r '.data.version // empty' 2>/dev/null)"
              local release="$(echo "$version_response" | jq -r '.data.release // empty' 2>/dev/null)"
              if [ -n "$version" ] && [ "$version" != "empty" ]; then
                printf_cyan "📋 Version: $version"
              fi
            fi
          fi
        fi
        printf_green "🎯 All server checks passed!"
      else
        printf_red "💔 Server check failed!"
      fi
      exit $check_result
      ;;
    iso)
      shift 1
      case "$1" in
      list) __list_storage_isos ;;
      download) shift 1 && __download_iso "$@" ;;
      delete) shift 1 && __delete_iso "$@" ;;
      info) shift 1 && __iso_info "$@" ;;
      *) printf_red "Usage: proxmox-cli iso [list|download|delete|info]" && exit 1 ;;
      esac
      exit $?
      ;;
    lxc)
      shift 1
      case "$1" in
      list) shift 1 && __list_lxc "$@" ;;
      templates) __list_lxc_templates ;;
      create) shift 1 && __create_lxc_container "$@" ;;
      delete) shift 1 && __delete_lxc "$@" ;;
      start) shift 1 && __start_lxc "$@" ;;
      stop) shift 1 && __stop_lxc "$@" ;;
      status) shift 1 && __lxc_status "$@" ;;
      console) shift 1 && __lxc_console "$@" ;;
      *) printf_red "Usage: proxmox-cli lxc [list|templates|create|delete|start|stop|status|console]" && exit 1 ;;
      esac
      exit $?
      ;;
    vm)
      shift 1
      case "$1" in
      list) shift 1 && __list_vms "$@" ;;
      create) shift 1 && __create_vm "$@" ;;
      delete) shift 1 && __delete_vm "$@" ;;
      start) shift 1 && __start_vm "$@" ;;
      stop) shift 1 && __stop_vm "$@" ;;
      status) shift 1 && __vm_status "$@" ;;
      console) shift 1 && __vm_console "$@" ;;
      clone) shift 1 && __clone_vm "$@" ;;
      snapshot) shift 1 && __vm_snapshot "$@" ;;
      *) printf_red "Usage: proxmox-cli vm [list|create|delete|start|stop|status|console|clone|snapshot]" && exit 1 ;;
      esac
      exit $?
      ;;
    config) PROXMOX_CLI_GET_CONFIG="true" && shift 1 ;;
    status) PROXMOX_CLI_GET_STATUS="true" && shift 1 ;;
    power | turn) PROXMOX_CLI_POWER_CYCLE="true" && PROXMOX_CLI_POWER_OPTION="$2" && shift 2 ;;
    agent) PROXMOX_CLI_GET_AGENT="true" && PROXMOX_CLI_DEFAULT_MACHINE="$2" PROXMOX_CLI_AGENT_OPTION="$3" && shift $# ;;
    ssh)
      if [ "$2" = "server" ]; then PROXMOX_CLI_SSH_ROOT="yes"; else PROXMOX_CLI_SSH_IP="true"; fi
      shift 1
      ;;
    *) break ;;
    esac
  done
  if [ -n "$PROXMOX_CLI_SSH_ROOT" ]; then
    __open_ssh "$PROXMOX_CLI_DEFAULT_SERVER_HOST" "${PROXMOX_CLI_SSH_USER:-root}"
    exit $?
  fi
  PROXMOX_CLI_DEFAULT_MACHINE="${1:-$PROXMOX_CLI_DEFAULT_MACHINE}"
  PROXMOX_CLI_DEFAULT_NODE_ID="${2:-$PROXMOX_CLI_DEFAULT_NODE_ID}"
  PROXMOX_CLI_DEFAULT_SERVER_HOST="${3:-$PROXMOX_CLI_DEFAULT_SERVER_HOST}"
  PROXMOX_CLI_DEFAULT_SERVER_PORT="${4:-$PROXMOX_CLI_DEFAULT_SERVER_PORT}"
  PROXMOX_CLI_DEFAULT_USERNAME="${5:-$PROXMOX_CLI_DEFAULT_USERNAME}"
  PROXMOX_CLI_DEFAULT_PASSWORD="${6:-$PROXMOX_CLI_DEFAULT_PASSWORD}"
  if [ "$PROXMOX_CLI_FORCE" = "true" ]; then
    PROXMOX_CLI_NEW_INSTALL="true"
    PROXMOX_CLI_FORCED="complete"
    mv -f "$PROXMOX_CLI_NODE_CONFIG_FILE" "$PROXMOX_CLI_NODE_CONFIG_FILE.$$.bak"
  fi
  if [ ! -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ]; then
    __get_username
    __get_password
    __get_node_name
    __get_servername
    __get_serverport
  fi
  # Quick server check before asking for VM details (if we have server config)
  if [ -n "$PROXMOX_CLI_DEFAULT_SERVER_HOST" ] && [ -n "$PROXMOX_CLI_DEFAULT_USERNAME" ] && [ -n "$PROXMOX_CLI_DEFAULT_PASSWORD" ]; then
    printf_cyan "🔍 Quick server check before proceeding..."
    if ! __check_server_connectivity 3; then # Quick 3-second check
      printf_red "⚠️ Server appears unreachable - continuing anyway (you can run 'proxmox-cli check' for full diagnostics)"
    fi
  fi

  # Set vm id
  [ -n "$PROXMOX_CLI_DEFAULT_MACHINE" ] || __get_vm_id
  # Get/confirm username
  [ -z "$PROXMOX_CLI_DEFAULT_USERNAME" ] && __get_username
  # Get/confirm password
  [ -z "$PROXMOX_CLI_DEFAULT_PASSWORD" ] && __get_password
  # Get/confirm servername
  [ -z "$PROXMOX_CLI_DEFAULT_NODE_ID" ] && __get_node_name
  # Get/confirm node name
  [ -z "$PROXMOX_CLI_DEFAULT_SERVER_HOST" ] && __get_servername
  # Get/confirm port
  [ -z "$PROXMOX_CLI_DEFAULT_SERVER_PORT" ] && __get_serverport
  # Write settings to file
  if [ -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ] && [ "$PROXMOX_CLI_NEW_INSTALL" = "true" ]; then
    [ -d "$PROXMOX_CLI_SAVE_DIR" ] || mkdir -p "$PROXMOX_CLI_SAVE_DIR" &>/dev/null
    printf_blue "Updating the configuration and setting permissions"
    __gen_config &>/dev/null
    touch "$PROXMOX_CLI_NODE_CONFIG_FILE"
    . "$PROXMOX_CLI_NODE_CONFIG_FILE"
    PROXMOX_CLI_FORCE="" PROXMOX_CLI_NEW_INSTALL=""
    chmod 600 "$PROXMOX_CLI_NODE_CONFIG_FILE" "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
    . "$PROXMOX_CLI_NODE_CONFIG_FILE"

    # Run pre-flight checks after configuration is complete
    printf_cyan "🚀 Running initial server validation..."
    if ! __check_server_connectivity; then
      printf_exit "💥 Server connectivity check failed"
    fi

    if ! __check_proxmox_api; then
      printf_exit "💥 Proxmox API check failed"
    fi

    if ! __check_authentication; then
      printf_exit "💥 Authentication check failed"
    fi

    printf_green "🎉 Server validation successful!"
    return 0
  elif [ ! -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ]; then
    printf_exit "Something went wrong"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_proxmox_cli() {
  local statusCode=0

  # Create node-specific subdirectory structure
  SPICEDIR="$PROXMOX_CLI_SAVE_DIR/$PROXMOX_CLI_DEFAULT_NODE_ID"
  USERNAME="$PROXMOX_CLI_DEFAULT_USERNAME"
  PASSWORD="$PROXMOX_CLI_DEFAULT_PASSWORD"
  
  # We'll determine the type (qemu/lxc) during connection process
  # For now, create the directory structure
  [ -d "$SPICEDIR" ] || mkdir -p "$SPICEDIR"

  printf_cyan "🔐 Authenticating with Proxmox server..."
  DATA="$(__query_server || echo '')"
  if [ -n "$DATA" ]; then
    if __run_curl "$DATA" "$FILENAME"; then
      statusCode=0 # Connection successful (viewer launched or SSH connected)
    else
      statusCode=1 # SPICE created but no usable connection method
    fi
  else
    printf_red "Authentication failed"
    statusCode=1
  fi
  return $statusCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__open_web() {
  local url="https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT"
  if __cmd_exists mybrowser; then
    mybrowser "$url"
  elif [ -f "$BROWSER" ]; then
    "$BROWSER" "$url"
  else
    printf_exit "Can not find browser"
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_vm_ip() {
  # Try to get VM IP address using qemu-guest-agent
  local vm_ip=""
  if [ "$vm_status" = "on" ]; then
    # Check if qemu-guest-agent is available
    local agent_test
    agent_test="$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" ping 2>/dev/null)"
    local agent_available=true

    if [ -z "$agent_test" ] || echo "$agent_test" | grep -q "error\|not running"; then
      agent_available=false
    fi

    # Try multiple methods to get IP
    vm_ip="$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" network-get-interfaces 2>/dev/null | jq -r '.[] | select(.name=="eth0" or .name=="ens18" or .name=="ens3" or .name=="ens33" or .name=="enp0s3" or .name=="enp0s8") | ."ip-addresses"[]? | select(."ip-address-type"=="ipv4") | ."ip-address"' 2>/dev/null | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' | grep -vE '^127\.' | head -n1 || echo '')"

    if [ -z "$vm_ip" ]; then
      vm_ip="$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" network-get-interfaces 2>/dev/null | grep -oE 'ip-address[^,]*[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -vE '127\.' | sed 's/.*ip-address[^0-9]*//g' | head -n1 || echo '')"
    fi

    if [ -z "$vm_ip" ] && [ "$agent_available" = "true" ]; then
      vm_ip="$(__pve_agent "$PROXMOX_CLI_DEFAULT_NODE_ID" "qemu" "$PROXMOX_CLI_DEFAULT_MACHINE" network-get-interfaces 2>/dev/null | jq -r '.[].["ip-addresses"][]? | select(.["ip-address-type"]=="ipv4") | .["ip-address"]' 2>/dev/null | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' | grep -vE '^127\.' | head -n1 || echo '')"
    fi

    # Try VM status API when agent fails
    if [ -z "$vm_ip" ] && [ "$agent_available" = "false" ]; then
      local vm_status_data
      vm_status_data="$(__curl_auth "https://$PROXMOX_CLI_DEFAULT_SERVER_HOST:$PROXMOX_CLI_DEFAULT_SERVER_PORT/api2/json/nodes/$PROXMOX_CLI_DEFAULT_NODE_ID/qemu/$PROXMOX_CLI_DEFAULT_MACHINE/status/current" 2>/dev/null)"
      if [ -n "$vm_status_data" ]; then
        vm_ip="$(echo "$vm_status_data" | jq -r '.data."agent-netinfo".result[]?.["ip-addresses"][]? | select(.["ip-address-type"]=="ipv4") | .["ip-address"]' 2>/dev/null | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' | grep -vE '^127\.' | head -n1 || echo '')"
      fi
    fi

    # Validate IP if found
    if [ -n "$vm_ip" ]; then
      vm_ip="$(echo "$vm_ip" | tr -d '\n\r\t ' | grep -oE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' || echo '')"

      if [ -n "$vm_ip" ]; then
        local octets=($(echo "$vm_ip" | tr '.' ' '))
        if [ ${#octets[@]} -eq 4 ]; then
          local valid=true
          for octet in "${octets[@]}"; do
            if [ "$octet" -lt 0 ] || [ "$octet" -gt 255 ]; then
              valid=false
              break
            fi
          done
          [ "$valid" = "false" ] && vm_ip=""
        else
          vm_ip=""
        fi
      fi
    fi
  fi
  echo "$vm_ip"
}

__open_ssh() {
  local user="${2:-}"
  local url="${1:-$PROXMOX_CLI_DEFAULT_SERVER_HOST}"

  # Validate hostname/IP address
  if [ -z "$url" ]; then
    printf_red "❌ Error: No hostname or IP address provided for SSH connection"
    return 1
  fi

  # Clean and validate the URL (remove any control characters)
  url="$(echo "$url" | tr -d '\n\r\t\0' | sed 's/[^a-zA-Z0-9.-]//g')"

  # Validate IP address format if it looks like an IP
  if echo "$url" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
    if ! echo "$url" | grep -qE '^([0-9]{1,3}\.){3}[0-9]{1,3}$'; then
      printf_red "❌ Error: Invalid IP address format: $url"
      return 1
    fi
    # Validate octets
    local octets=($(echo "$url" | tr '.' ' '))
    for octet in "${octets[@]}"; do
      if [ "$octet" -lt 0 ] || [ "$octet" -gt 255 ]; then
        printf_red "❌ Error: Invalid IP address octets: $url"
        return 1
      fi
    done
  elif echo "$url" | grep -qE '^[a-zA-Z0-9.-]+$'; then
    # Validate hostname format
    if [ ${#url} -gt 253 ] || echo "$url" | grep -qE '^-|--|-$|\.\.|^\.|\.$'; then
      printf_red "❌ Error: Invalid hostname format: $url"
      return 1
    fi
  else
    printf_red "❌ Error: Invalid hostname/IP contains invalid characters: $url"
    return 1
  fi

  # Set up user parameter
  [ -n "$user" ] && user="-l $user"

  # Test connectivity before attempting SSH
  printf_blue "🔍 Testing connectivity to $url..."
  if __cmd_exists nc; then
    if ! nc -z -w 3 "$url" 22 2>/dev/null; then
      printf_red "❌ Cannot reach $url:22 (SSH port)"
      printf_yellow "💡 Check if the VM is running and SSH service is enabled"
      return 1
    fi
    printf_green "✅ Port 22 is reachable on $url"
  fi

  printf_blue "🔗 Connecting to $url via SSH..."
  ssh -X $user "$url"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
PROXMOX_CLI_CONFIG_FILE="${PROXMOX_CLI_CONFIG_FILE:-settings.conf}"
PROXMOX_CLI_CONFIG_DIR="${PROXMOX_CLI_CONFIG_DIR:-$HOME/.config/myscripts/proxmox-cli}"
PROXMOX_CLI_CONFIG_BACKUP_DIR="${PROXMOX_CLI_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/proxmox-cli/backups}"
PROXMOX_CLI_LOG_DIR="${PROXMOX_CLI_LOG_DIR:-$HOME/.local/log/proxmox-cli}"
PROXMOX_CLI_TEMP_DIR="${PROXMOX_CLI_TEMP_DIR:-$HOME/.local/tmp/system_scripts/proxmox-cli}"
PROXMOX_CLI_CACHE_DIR="${PROXMOX_CLI_CACHE_DIR:-$HOME/.cache/proxmox-cli}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
PROXMOX_CLI_OUTPUT_COLOR_1="${PROXMOX_CLI_OUTPUT_COLOR_1:-33}"
PROXMOX_CLI_OUTPUT_COLOR_2="${PROXMOX_CLI_OUTPUT_COLOR_2:-5}"
PROXMOX_CLI_OUTPUT_COLOR_GOOD="${PROXMOX_CLI_OUTPUT_COLOR_GOOD:-2}"
PROXMOX_CLI_OUTPUT_COLOR_ERROR="${PROXMOX_CLI_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
PROXMOX_CLI_NOTIFY_ENABLED="${PROXMOX_CLI_NOTIFY_ENABLED:-yes}"
PROXMOX_CLI_GOOD_NAME="${PROXMOX_CLI_GOOD_NAME:-Great:}"
PROXMOX_CLI_ERROR_NAME="${PROXMOX_CLI_ERROR_NAME:-Error:}"
PROXMOX_CLI_GOOD_MESSAGE="${PROXMOX_CLI_GOOD_MESSAGE:-No errors reported}"
PROXMOX_CLI_ERROR_MESSAGE="${PROXMOX_CLI_ERROR_MESSAGE:-Errors were reported}"
PROXMOX_CLI_NOTIFY_CLIENT_NAME="${PROXMOX_CLI_NOTIFY_CLIENT_NAME:-$APPNAME}"
PROXMOX_CLI_NOTIFY_CLIENT_ICON="${PROXMOX_CLI_NOTIFY_CLIENT_ICON:-notification-new}"
PROXMOX_CLI_NOTIFY_CLIENT_URGENCY="${PROXMOX_CLI_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
PROXMOX_CLI_DEFAULT_USERNAME="${PROXMOX_CLI_DEFAULT_USERNAME:-root@pam}"
PROXMOX_CLI_DEFAULT_PASSWORD="${PROXMOX_CLI_DEFAULT_PASSWORD:-}"
PROXMOX_CLI_DEFAULT_NODE_ID="${PROXMOX_CLI_DEFAULT_NODE_ID:-pve}"
PROXMOX_CLI_DEFAULT_SERVER_HOST="${PROXMOX_CLI_DEFAULT_SERVER_HOST:-}"
PROXMOX_CLI_DEFAULT_SERVER_PORT="${PROXMOX_CLI_DEFAULT_SERVER_PORT:-8006}"
PROXMOX_CLI_SAVE_DIR="${PROXMOX_CLI_SAVE_DIR:-$HOME/Documents/Spice}"
PROXMOX_CLI_NODE_CONFIG_FILE="${PROXMOX_CLI_NODE_CONFIG_FILE:-$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_DEFAULT_NODE_ID}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE" ] && . "$PROXMOX_CLI_CONFIG_DIR/$PROXMOX_CLI_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$PROXMOX_CLI_LOG_DIR" ] || mkdir -p "$PROXMOX_CLI_LOG_DIR" |& __devnull
[ -d "$PROXMOX_CLI_TEMP_DIR" ] || mkdir -p "$PROXMOX_CLI_TEMP_DIR" |& __devnull
[ -d "$PROXMOX_CLI_CACHE_DIR" ] || mkdir -p "$PROXMOX_CLI_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROXMOX_CLI_TEMP_FILE="${PROXMOX_CLI_TEMP_FILE:-$(mktemp $PROXMOX_CLI_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$PROXMOX_CLI_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$PROXMOX_CLI_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$PROXMOX_CLI_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$PROXMOX_CLI_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$PROXMOX_CLI_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$PROXMOX_CLI_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="u:,p:,m:"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",force,machine:,node:,ssh,password:,user:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="nodes ssh reset web config status power agent check server iso lxc vm"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    PROXMOX_CLI_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    PROXMOX_CLI_CWD="$2"
    [ -d "$PROXMOX_CLI_CWD" ] || mkdir -p "$PROXMOX_CLI_CWD" |& __devnull
    shift 2
    ;;
  --force)
    shift 1
    PROXMOX_CLI_FORCE="true"
    ;;
  --ssh)
    shift 1
    PROXMOX_CLI_SSH_ROOT="yes"
    ;;
  --node)
    PROXMOX_CLI_DEFAULT_NODE_ID="$2"
    PROXMOX_CLI_NODE_CONFIG_FILE="$PROXMOX_CLI_CONFIG_DIR/$2"

    # Load or create config for this node
    if [ -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ]; then
      printf_cyan "📋 Loading config for node: $2"
      . "$PROXMOX_CLI_NODE_CONFIG_FILE"
    else
      printf_yellow "📋 No config found for node: $2"
      printf_cyan "Creating config file: $PROXMOX_CLI_NODE_CONFIG_FILE"

      # Create directory if needed
      [ -d "$PROXMOX_CLI_CONFIG_DIR" ] || mkdir -p "$PROXMOX_CLI_CONFIG_DIR"

      # Create default config based on node name
      cat <<EOF >"$PROXMOX_CLI_NODE_CONFIG_FILE"
PROXMOX_CLI_DEFAULT_NODE_ID="$2"
PROXMOX_CLI_DEFAULT_USERNAME="${PROXMOX_CLI_DEFAULT_USERNAME:-}"
PROXMOX_CLI_DEFAULT_PASSWORD="${PROXMOX_CLI_DEFAULT_PASSWORD:-}"
PROXMOX_CLI_DEFAULT_SERVER_HOST="${PROXMOX_CLI_DEFAULT_SERVER_HOST:-}"
PROXMOX_CLI_DEFAULT_SERVER_PORT="${PROXMOX_CLI_DEFAULT_SERVER_PORT:-}"

EOF

      printf_green "✅ Created config for node: $2"
      printf_cyan "Config file: $PROXMOX_CLI_NODE_CONFIG_FILE"
      . "$PROXMOX_CLI_NODE_CONFIG_FILE"
    fi
    shift 2
    ;;
  -u | --user)
    PROXMOX_CLI_SSH_USER="$2"
    PROXMOX_CLI_DEFAULT_USERNAME="$2"
    shift 2
    ;;
  -p | --password)
    PROXMOX_CLI_DEFAULT_PASSWORD="$2"
    shift 2
    ;;
  -m | --machine)
    PROXMOX_CLI_DEFAULT_MACHINE="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# PROXMOX_CLI_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# PROXMOX_CLI_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && PROXMOX_CLI_CWD="$1" && shift 1 || PROXMOX_CLI_CWD="${PROXMOX_CLI_CWD:-$PWD}"
PROXMOX_CLI_CWD="$(realpath "${PROXMOX_CLI_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$PROXMOX_CLI_CWD" ] && cd "$PROXMOX_CLI_CWD"; then
# if [ "$PROXMOX_CLI_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $PROXMOX_CLI_CWD"
# fi
# else
# printf_exit "💔 $PROXMOX_CLI_CWD does not exist 💔"
# fi
export PROXMOX_CLI_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
[ -f "$PROXMOX_CLI_NODE_CONFIG_FILE" ] && . "$PROXMOX_CLI_NODE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__initialize_app "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_proxmox_cli
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code from function return
exitCode="$?"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
