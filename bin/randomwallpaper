#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208151037-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  randomwallpaper --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 15, 2022 10:37 EDT
# @@File             :  randomwallpaper
# @@Description      :  Set a random wallpaper
# @@Changelog        :  New script
# @@TODO             :  Refactor the code/Add MacOS support
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208151037-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
RANDOMWALLPAPER_REQUIRE_SUDO="${RANDOMWALLPAPER_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE"
  fi
  [ -d "$RANDOMWALLPAPER_CONFIG_DIR" ] || mkdir -p "$RANDOMWALLPAPER_CONFIG_DIR"
  [ -d "$RANDOMWALLPAPER_CONFIG_BACKUP_DIR" ] || mkdir -p "$RANDOMWALLPAPER_CONFIG_BACKUP_DIR"
  [ -f "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE" ] &&
    cp -Rf "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE" "$RANDOMWALLPAPER_CONFIG_BACKUP_DIR/$RANDOMWALLPAPER_CONFIG_FILE.$$"
  cat <<EOF >"$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE"
# Settings for randomwallpaper
RANDOMWALLPAPER_ROTATE_TIME="5"
RANDOMWALLPAPER_ROTATE_TYPE="minutes"
RANDOMWALLPAPER_USE_SYSTEM="${RANDOMWALLPAPER_USE_SYSTEM:-}"
RANDOMWALLPAPER_WALLPAPER_DIR="${RANDOMWALLPAPER_WALLPAPER_DIR:-}"
RANDOMWALLPAPER_WALLPAPER_FILE="${RANDOMWALLPAPER_WALLPAPER_FILE:-}"
RANDOMWALLPAPER_KILL_FILE="${RANDOMWALLPAPER_KILL_FILE:-}"
RANDOMWALLPAPER_RUN_FILE="${RANDOMWALLPAPER_RUN_FILE:-}"
RANDOMWALLPAPER_SEEN_FILE="${RANDOMWALLPAPER_SEEN_FILE:-}"
RANDOMWALLPAPER_SEEN_FILE_TMP="${RANDOMWALLPAPER_SEEN_FILE_TMP:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
RANDOMWALLPAPER_OUTPUT_COLOR_1="${RANDOMWALLPAPER_OUTPUT_COLOR_1:-}"
RANDOMWALLPAPER_OUTPUT_COLOR_2="${RANDOMWALLPAPER_OUTPUT_COLOR_2:-}"
RANDOMWALLPAPER_OUTPUT_COLOR_GOOD="${RANDOMWALLPAPER_OUTPUT_COLOR_GOOD:-}"
RANDOMWALLPAPER_OUTPUT_COLOR_ERROR="${RANDOMWALLPAPER_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
RANDOMWALLPAPER_NOTIFY_ENABLED="${RANDOMWALLPAPER_NOTIFY_ENABLED:-}"
RANDOMWALLPAPER_GOOD_NAME="${RANDOMWALLPAPER_GOOD_NAME:-}"
RANDOMWALLPAPER_ERROR_NAME="${RANDOMWALLPAPER_ERROR_NAME:-}"
RANDOMWALLPAPER_GOOD_MESSAGE="${RANDOMWALLPAPER_GOOD_MESSAGE:-}"
RANDOMWALLPAPER_ERROR_MESSAGE="${RANDOMWALLPAPER_ERROR_MESSAGE:-}"
RANDOMWALLPAPER_NOTIFY_CLIENT_NAME="${RANDOMWALLPAPER_NOTIFY_CLIENT_NAME:-}"
RANDOMWALLPAPER_NOTIFY_CLIENT_ICON="${RANDOMWALLPAPER_NOTIFY_CLIENT_ICON:-}"
RANDOMWALLPAPER_NOTIFY_CLIENT_URGENCY="${RANDOMWALLPAPER_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() { #
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "randomwallpaper:  Set a random wallpaper - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: randomwallpaper [options] [commands]"
  __printf_line "enable                          - Enable autostart"
  __printf_line "disable                         - Disable autostart"
  __printf_line "update                          - Update wallpaper list"
  __printf_line "new                             - New wallpaper"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Background Options: bg [run,new,restart,start,stop,status]"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "run                             - Run "
  __printf_line "new                             - New "
  __printf_line "restart                         - Restart "
  __printf_line "start                           - Start "
  __printf_line "stop                            - Stop "
  __printf_line "status                          - Status "
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$RANDOMWALLPAPER_REQUIRE_SUDO" = "yes" ] && [ -z "$RANDOMWALLPAPER_REQUIRE_SUDO_RUN" ]; then
    export RANDOMWALLPAPER_REQUIRE_SUDO="no"
    export RANDOMWALLPAPER_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$RANDOMWALLPAPER_TEMP_FILE" ] && rm -Rf "$RANDOMWALLPAPER_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__proc_is_running() { pgrep -x "$1" &>/dev/null || { ps aux 2>/dev/null | grep -v 'grep ' | grep "$1" &>/dev/null || false; } || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__startup() {
  printf_green "Adding the randomwallpaper to startup"
  cat <<EOF >"$HOME/.config/autostart/randomwallpaper.desktop"
#!/usr/bin/env xdg-open

[Desktop Entry]
Encoding=UTF-8
Version=0.9.4
Type=Application
Name=Wallpaper Changer
Icon=preferences-desktop-notification
Comment=Random Wallpaper
Exec=randomwallpaper bg start
RunHook=0
StartupNotify=false
Terminal=false
Hidden=false

EOF
  [ -d "$RANDOMWALLPAPER_CACHE_DIR" ] || __mkd "$RANDOMWALLPAPER_CACHE_DIR"
  [ -f "$HOME/.config/autostart/randomwallpaper.desktop" ] &&
    printf_green "Successfully installed randomwallpaper Daemon" ||
    printf_error "Failed to install randomwallpaper Daemon"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__startup_disable() {
  local exitCode
  printf_blue "Deleting randomwallpaper from startup"
  __rm_rf "$HOME/.config/autostart/randomwallpaper.desktop"
  if [ -f "$HOME/.config/autostart/randomwallpaper.desktop" ]; then
    printf_red "Failed to delete the service"
    exitCode=1
  else
    __notifications "Wallpaper Changer" "Deleted the autostart service"
    printf_green "Deleted the autostart service"
    exitCode=0
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__variety() {
  if [ -f "$HOME/.config/variety/variety.conf" ] &&
    grep -sh '^change_enabled' "$HOME/.config/variety/variety.conf" | grep -iq True; then
    variety -q &>/dev/null
    sed -i 's#change_enabled =.*#change_enabled = False#g' "$HOME/.config/variety/variety.conf"
    if grep -sh '^change_enabled' "$HOME/.config/variety/variety.conf" 2>/dev/null | grep -iq True; then
      printf_error "Refusing to run: variety is already changing the wallpaper"
      return 1
    fi
    variety &>/dev/null &
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mesg_ok() {
  local COUNT_SEEN COUNT_ALL COUNT_MESSAGE
  COUNT_SEEN="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_SEEN_FILE" | grep -v '^$' || echo 0)"
  COUNT_ALL="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_WALLPAPER_FILE" | grep -v '^$' || echo 0)"
  COUNT_MESSAGE="You have seen $COUNT_SEEN of $COUNT_ALL wallpapers"
  __notifications "Wallpaper Changer" "Wallpaper has been changed to\n$SHORTNAME\n$COUNT_MESSAGE"
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mesg_fail() {
  local COUNT_SEEN COUNT_ALL COUNT_MESSAGE
  COUNT_SEEN="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_SEEN_FILE" | grep -v '^$' || echo 0)"
  COUNT_ALL="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_WALLPAPER_FILE" | grep -v '^$' || echo 0)"
  COUNT_MESSAGE="You have seen $COUNT_SEEN of $COUNT_ALL wallpapers"
  __notifications "Wallpaper Changer" "Failed to change the wallpaper\n$COUNT_MESSAGE"
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__kill() {
  if [ -f "$RANDOMWALLPAPER_KILL_FILE" ]; then
    __rm_rf "$RANDOMWALLPAPER_KILL_FILE" "$RANDOMWALLPAPER_RUN_FILE"
    if __get_pid &>/dev/null; then
      __notifications "Wallpaper Changer" "Background service is shutting down"
      for pid in $(__get_pid); do
        kill -15 "$pid" &>/dev/null
      done && exitCode=0 || exitCode=1
    else
      __notifications "Wallpaper Changer" "Background service is not running"
      exitCode=1
    fi
    return "$exitCode"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_cmd() { find -L "${1:-$RANDOMWALLPAPER_WALLPAPER_DIR}" -type f -print0 -not -path "*/.git/*" 2>/dev/null | xargs -0 file --mime-type | grep -F 'image/' | cut -d ':' -f 1; }
#__find_cmd() { find "${1:-$RANDOMWALLPAPER_WALLPAPER_DIR}" -name '*' -not -path "*/.git/*" -exec file {} \; 2>/dev/null | grep -o -P '^.+: \w+ image' | awk -F ':' '{print $1}'; }
#__find_cmd() { find -L "${1:-$RANDOMWALLPAPER_WALLPAPER_DIR}" -type f -iname "*.jpg" -or -iname "*.jpeg" -or -iname "*.png" -or -iname "*.tif" -or -iname "*.bmp" -or -iname "*.gif" -not -path "*/.git/*"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__system_wallpapers() {
  if [[ "$RANDOMWALLPAPER_USE_SYSTEM" = "true" ]]; then
    local distro_backgrounds="/usr/share/backgrounds"
    local distro_wallpapers="/usr/share/wallpapers"
    # search system backgrounds directory
    if [ -d "$distro_backgrounds" ]; then
      [[ -d "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/backgrounds" ]] ||
        __mkd "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/backgrounds"
      for l in $(ls "$distro_backgrounds"); do
        [ -e "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/backgrounds/$l" ] ||
          __ln_sf "$distro_backgrounds/$l" "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/backgrounds/$l"
      done
    fi
    # search system wallpapers directory
    if [ -d "$distro_wallpapers" ]; then
      [[ -d "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/wallpapers" ]] ||
        __mkd "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/wallpapers"
      for l in $(ls "$distro_wallpapers"); do
        [ -e "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/wallpapers/$l" ] ||
          __ln_sf "$distro_wallpapers/$l" "$RANDOMWALLPAPER_WALLPAPER_DIR/distro/wallpapers/$l"
      done
    fi
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__initialize() {
  if [ -f "$1" ]; then
    WALLPAPER="$1"
    RANDOMWALLPAPER_MANUAL=true
    shift 1
  elif [ -d "$1" ]; then
    WALLPAPER="$(__find_cmd "$1" | sort -R | tail -n 1)"
    RANDOMWALLPAPER_MANUAL=true
    shift 1
  else
    if [[ ! -s "$RANDOMWALLPAPER_WALLPAPER_FILE" ]]; then
      __rm_rf "$RANDOMWALLPAPER_SEEN_FILE" && __update_cache
    fi
    [ -f "$RANDOMWALLPAPER_SEEN_FILE" ] || touch "$RANDOMWALLPAPER_SEEN_FILE"
    SETRANDOM="$(grep -shvf "$RANDOMWALLPAPER_SEEN_FILE" "$RANDOMWALLPAPER_WALLPAPER_FILE" | sort -R | head -n1 | grep '')"
    if [ -z "$SETRANDOM" ]; then
      SETRANDOM="$(__find_cmd "$RANDOMWALLPAPER_WALLPAPER_DIR" | sort -R | tail -n 1 | grep '')"
    fi
    __make_seen_file
  fi
  RANDOMWALLPAPER="${WALLPAPER:-$SETRANDOM}"
  SET_WALLPAPER="${RANDOMWALLPAPER}"
  SHORTNAME="$(echo "${SET_WALLPAPER/$RANDOMWALLPAPER_WALLPAPER_DIR/}" | sed 's#^/##g')"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__background_job() {
  local RANDOMWALLPAPER_SLEEP_TIME="${1:-$RANDOMWALLPAPER_SLEEP_TIME}"
  __rm_rf "$RANDOMWALLPAPER_RUN_FILE"
  randomwallpaper bg new && touch "$RANDOMWALLPAPER_RUN_FILE" || __rm_rf "$RANDOMWALLPAPER_RUN_FILE"
  sleep $RANDOMWALLPAPER_SLEEP_TIME
  __kill && __background_job "$RANDOMWALLPAPER_SLEEP_TIME" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__start() {
  local SLEEP_TIME DISPLAY_TIME COUNT_SEEN COUNT_ALL COUNT_MESSAGE
  SLEEP_TIME="$RANDOMWALLPAPER_SLEEP_TIME"
  DISPLAY_TIME="$RANDOMWALLPAPER_DISPLAY_TIME"
  COUNT_SEEN="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_SEEN_FILE" | grep -v '^$' || echo 0)"
  COUNT_ALL="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_WALLPAPER_FILE" | grep -v '^$' || echo 0)"
  COUNT_MESSAGE="You have seen $COUNT_SEEN of $COUNT_ALL wallpapers"
  __getstatus && return 1
  __notifications "Wallpaper Changer" "Enabling randomwallpaper background job:\nChanging every $DISPLAY_TIME\n$COUNT_MESSAGE"
  __rm_rf "$RANDOMWALLPAPER_KILL_FILE" "$RANDOMWALLPAPER_RUN_FILE"
  sleep 60
  sh -c "$APPNAME bg run $SLEEP_TIME &>/dev/null &" &
  disown
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_pid() { ps -ux | grep 'randomwallpaper' | grep 'run' | grep -v 'grep' | awk '{print $2}' | grep '^' || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__getstatus() {
  MAINPID="$(__get_pid | head -n1)"
  GETTPID=$(__get_pid || return 1)
  PSPID="$(__get_pid | head -n1 || ps -ux | grep "$APPNAME" | grep -v 'grep' | grep "run" 2>/dev/null || return 1)"
  if [ -n "$GETTPID" ]; then
    [ -f "$RANDOMWALLPAPER_KILL_FILE" ] && START_STOP_MESG="Stop is pending" || export START_STOP_MESG="Stop randomwallpaper"
    __get_status_pid "$GETTPID" && exitCode=0 || exitCode=1
  else
    export START_STOP_MESG="Start randomwallpaper"
    exitCode=1
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
notify_running() { __notifications "Wallpaper Changer" "Already running: $MAINPID" && return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__make_seen_file() {
  [ -d "$RANDOMWALLPAPER_CACHE_DIR" ] || __mkd "$RANDOMWALLPAPER_CACHE_DIR"
  [ -f "$RANDOMWALLPAPER_SEEN_FILE" ] || touch "$RANDOMWALLPAPER_SEEN_FILE"
  if [ -f "$RANDOMWALLPAPER_WALLPAPER_FILE" ] && [ -d "$RANDOMWALLPAPER_WALLPAPER_DIR" ]; then
    COUNT_SEEN="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_SEEN_FILE" | grep -v '^$')"
    COUNT_ALL="$(grep -shc "$RANDOMWALLPAPER_WALLPAPER_DIR" "$RANDOMWALLPAPER_WALLPAPER_FILE" | grep -v '^$')"
    if [ "$COUNT_SEEN" = "$COUNT_ALL" ]; then
      __rm_rf "$RANDOMWALLPAPER_SEEN_FILE"
      notifications "Wallpaper Changer" "All wallpapers have been seen\nRestarting randomwallpaper"
      sleep 5
      __update_cache
      return 1
    fi
  else
    __update_cache
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__find_random() {
  __find_mtime "$RANDOMWALLPAPER_WALLPAPER_FILE" "${RANDOMWALLPAPER_REFRESH_TIME:-720}" && __find_cmd | sort -u >"$RANDOMWALLPAPER_WALLPAPER_FILE"
  if [ "$RANDOMWALLPAPER_MANUAL" != "true" ] && grep -shqv "$SET_WALLPAPER" "$RANDOMWALLPAPER_SEEN_FILE" &>/dev/null; then
    while :; do
      SETRANDOM="$(grep -shvf "$RANDOMWALLPAPER_SEEN_FILE" "$RANDOMWALLPAPER_WALLPAPER_FILE" | sort -R | head -n1)"
      [ -n "$SETRANDOM" ] || SETRANDOM="$(__find_cmd "$RANDOMWALLPAPER_WALLPAPER_DIR" | sort -R | tail -n 1)"
      RANDOMWALLPAPER="$SETRANDOM"
      SET_WALLPAPER="$RANDOMWALLPAPER"
      SHORTNAME="$(echo "${SET_WALLPAPER/$RANDOMWALLPAPER_WALLPAPER_DIR/}" | sed 's#^/##g')"
      grep -sh "$SET_WALLPAPER" "$RANDOMWALLPAPER_SEEN_FILE" &>/dev/null || break
    done
  fi
  __seen_file
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__seen_file() {
  echo "$SET_WALLPAPER" >>"$RANDOMWALLPAPER_SEEN_FILE"
  __cp_rf "$RANDOMWALLPAPER_SEEN_FILE" "$RANDOMWALLPAPER_SEEN_FILE_TMP" &&
    cat "$RANDOMWALLPAPER_SEEN_FILE_TMP" |
    sort -u >"$RANDOMWALLPAPER_SEEN_FILE"
  __rm_rf "$RANDOMWALLPAPER_SEEN_FILE_TMP"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_cache() {
  rm -Rf "$RANDOMWALLPAPER_WALLPAPER_FILE" &>/dev/null
  __system_wallpapers
  __find_cmd | sort -u >"$RANDOMWALLPAPER_WALLPAPER_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
xfce_change_wp() {
  xfconf-query --channel xfce4-desktop --list | grep 'last-image' | while read path; do
    xfconf-query --channel xfce4-desktop --property "$path" --set "$1"
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__randomwallpaper() {
  local exitCode=0
  local changer_app=""
  local session_name="$(echo "${DESKTOP_SESSION:-$XDG_SESSION_DESKTOP}" | tr '[:upper:]' '[:lower:]')"
  [ -n "$SET_WALLPAPER" ] || return 1
  if [ "$session_name" = "xfce" ] && __cmd_exists xfconf-query; then
    changer_app="xfconf-query"
    xfce_change_wp "$SET_WALLPAPER" &>/dev/null
  elif __cmd_exists variety && __proc_is_running variety; then
    changer_app="variety"
    variety --set="$SET_WALLPAPER" &>/dev/null
  elif __cmd_exists nitrogen; then
    changer_app="nitrogen"
    nitrogen --set-zoom-fill "$SET_WALLPAPER"
  elif __cmd_exists feh; then
    changer_app="feh"
    feh --bg-fill "$SET_WALLPAPER" &>/dev/null
  elif __cmd_exists xwallpaper; then
    changer_app="xwallpaper"
    xwallpaper --maximize "$SET_WALLPAPER" &>/dev/null
  else
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__term() {
  trap '$APPNAME --term' SIGINT
  local main sleeptime ENABLED START_STOP_MESG
  while :; do
    # show menu
    clear
    shift 1
    printf_newline "\n\n\n\n"
    printf_head "Random Wall Paper Menu"
    if [[ -f "$HOME/.config/autostart/randomwallpaper.desktop" ]]; then
      ENABLED="disable"
    else
      ENABLED="enable"
    fi
    if __getstatus; then
      START_STOP_MESG="Stop randomwallpaper"
      printf_green "randomwallpapers is running"
    else
      START_STOP_MESG="Start randomwallpaper"
      printf_red "randomwallpapers is not running"
    fi
    printf_green "c. change the wallpaper"
    printf_green "e. $ENABLED randomwallpaper"
    printf_green "h. get current status"
    printf_green "r. Change the wallpaper every x minutes"
    printf_green "s. $START_STOP_MESG"
    printf_green "u. update wallpapaper file"
    printf_green "z. Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [y-z] : " "1" "main" "-se"
    clear
    printf_newline '\n\n\n'
    case "$main" in
    c)
      "$APPNAME" new
      ;;
    e)
      if [[ "$ENABLED" = "disable" ]]; then
        __startup_disable
        sleep 5s
      elif [[ "$ENABLED" = "enable" ]]; then
        __startup
        sleep 5s
      fi
      ;;
    k)
      sh -c "randomwallpaper bg kill"
      sleep 3
      ;;
    h)
      shift 1
      "$APPNAME" bg status
      printf_pause "Press any key to continue"
      ;;
    r)
      if __getstatus; then
        notify_running
      else
        printf_read_input "6" "How often do you want it to change? [minutes]: " "5" "sleeptime"
        counter=$((60 * sleeptime))
        RANDOMWALLPAPER_SLEEP_TIME="$counter"
        randomwallpaper bg start
        printf_green "Started randomwallpaper in the background"
        printf_counter "5" "4" "exiting menu in"
        break
      fi
      ;;
    s)
      if __getstatus; then
        sh -c "randomwallpaper bg kill"
      else
        randomwallpaper bg start &
      fi
      ;;
    u)
      __update_cache
      ;;
    $'\E' | $'\e' | z | x | n)
      break
      ;;
    *) ;;
    esac
    clear
    printf_counter "5" "3" "Re-loading menu in"
  done
  clear
  exit
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
RANDOMWALLPAPER_CONFIG_FILE="${RANDOMWALLPAPER_CONFIG_FILE:-settings.conf}"
RANDOMWALLPAPER_CONFIG_DIR="${RANDOMWALLPAPER_CONFIG_DIR:-$HOME/.config/myscripts/randomwallpaper}"
RANDOMWALLPAPER_CONFIG_BACKUP_DIR="${RANDOMWALLPAPER_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/randomwallpaper/backups}"
RANDOMWALLPAPER_LOG_DIR="${RANDOMWALLPAPER_LOG_DIR:-$HOME/.local/log/randomwallpaper}"
RANDOMWALLPAPER_TEMP_DIR="${RANDOMWALLPAPER_TEMP_DIR:-$HOME/.local/tmp/system_scripts/randomwallpaper}"
RANDOMWALLPAPER_CACHE_DIR="${RANDOMWALLPAPER_CACHE_DIR:-$HOME/.cache/randomwallpaper}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
RANDOMWALLPAPER_OUTPUT_COLOR_1="${RANDOMWALLPAPER_OUTPUT_COLOR_1:-33}"
RANDOMWALLPAPER_OUTPUT_COLOR_2="${RANDOMWALLPAPER_OUTPUT_COLOR_2:-5}"
RANDOMWALLPAPER_OUTPUT_COLOR_GOOD="${RANDOMWALLPAPER_OUTPUT_COLOR_GOOD:-2}"
RANDOMWALLPAPER_OUTPUT_COLOR_ERROR="${RANDOMWALLPAPER_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
RANDOMWALLPAPER_NOTIFY_ENABLED="${RANDOMWALLPAPER_NOTIFY_ENABLED:-yes}"
RANDOMWALLPAPER_GOOD_NAME="${RANDOMWALLPAPER_GOOD_NAME:-Great:}"
RANDOMWALLPAPER_ERROR_NAME="${RANDOMWALLPAPER_ERROR_NAME:-Error:}"
RANDOMWALLPAPER_GOOD_MESSAGE="${RANDOMWALLPAPER_GOOD_MESSAGE:-No errors reported}"
RANDOMWALLPAPER_ERROR_MESSAGE="${RANDOMWALLPAPER_ERROR_MESSAGE:-Errors were reported}"
RANDOMWALLPAPER_NOTIFY_CLIENT_NAME="${RANDOMWALLPAPER_NOTIFY_CLIENT_NAME:-$APPNAME}"
RANDOMWALLPAPER_NOTIFY_CLIENT_ICON="${RANDOMWALLPAPER_NOTIFY_CLIENT_ICON:-notification-new}"
RANDOMWALLPAPER_NOTIFY_CLIENT_URGENCY="${RANDOMWALLPAPER_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
RANDOMWALLPAPER_ROTATE_TYPE="${RANDOMWALLPAPER_ROTATE_TYPE:-minutes}"
RANDOMWALLPAPER_ROTATE_TIME="${RANDOMWALLPAPER_ROTATE_TIME:-5}"
RANDOMWALLPAPER_KILL_FILE="${RANDOMWALLPAPER_KILL_FILE:-$RANDOMWALLPAPER_TEMP_DIR/randomwallpaper.$USER.kill}"
RANDOMWALLPAPER_RUN_FILE="${RANDOMWALLPAPER_RUN_FILE:-$RANDOMWALLPAPER_TEMP_DIR/randomwallpaper.$USER}"
RANDOMWALLPAPER_SEEN_FILE="${RANDOMWALLPAPER_SEEN_FILE:-$RANDOMWALLPAPER_CACHE_DIR/randomwallpaper.seen}"
RANDOMWALLPAPER_WALLPAPER_FILE="${RANDOMWALLPAPER_WALLPAPER_FILE:-$RANDOMWALLPAPER_CACHE_DIR/randomwallpaper.all}"
RANDOMWALLPAPER_SEEN_FILE_TMP="${RANDOMWALLPAPER_SEEN_FILE_TMP:-$RANDOMWALLPAPER_SEEN_FILE.tmp}"
RANDOMWALLPAPER_WALLPAPER_DIR="${RANDOMWALLPAPER_WALLPAPER_DIR:-${WALLPAPER_DIR:-$HOME/.local/share/wallpapers}}"
RANDOMWALLPAPER_REFRESH_TIME="${RANDOMWALLPAPER_REFRESH_TIME:-$((60 * "${RANDOMWALLPAPER_REFRESH_TIME:-12}"))}"
RANDOMWALLPAPER_MANUAL="${RANDOMWALLPAPER_MANUAL:-}"
RANDOMWALLPAPER_USE_SYSTEM="${RANDOMWALLPAPER_USE_SYSTEM:-true}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE" ] && . "$RANDOMWALLPAPER_CONFIG_DIR/$RANDOMWALLPAPER_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$RANDOMWALLPAPER_LOG_DIR" ] || mkdir -p "$RANDOMWALLPAPER_LOG_DIR" |& __devnull
[ -d "$RANDOMWALLPAPER_TEMP_DIR" ] || mkdir -p "$RANDOMWALLPAPER_TEMP_DIR" |& __devnull
[ -d "$RANDOMWALLPAPER_CACHE_DIR" ] || mkdir -p "$RANDOMWALLPAPER_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RANDOMWALLPAPER_TEMP_FILE="${RANDOMWALLPAPER_TEMP_FILE:-$(mktemp $RANDOMWALLPAPER_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$RANDOMWALLPAPER_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$RANDOMWALLPAPER_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$RANDOMWALLPAPER_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$RANDOMWALLPAPER_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$RANDOMWALLPAPER_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$RANDOMWALLPAPER_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions
RANDOMWALLPAPER_WALLPAPER_COUNT="$(find -L "$RANDOMWALLPAPER_WALLPAPER_DIR" -type f | wc -l)"
if [ "$RANDOMWALLPAPER_ROTATE_TYPE" = "minutes" ]; then
  RANDOMWALLPAPER_SLEEP_TIME="$((RANDOMWALLPAPER_ROTATE_TIME * 60))"
  RANDOMWALLPAPER_DISPLAY_TIME="$RANDOMWALLPAPER_ROTATE_TIME minute[s]"
elif [ "$RANDOMWALLPAPER_ROTATE_TYPE" = "hourly" ]; then
  RANDOMWALLPAPER_SLEEP_TIME="$((RANDOMWALLPAPER_ROTATE_TIME * 60 * 60))"
  RANDOMWALLPAPER_DISPLAY_TIME="$RANDOMWALLPAPER_SLEEP_TIME hour[s]"
elif [ "$RANDOMWALLPAPER_ROTATE_TYPE" = "daily" ]; then
  RANDOMWALLPAPER_SLEEP_TIME=$((24 * 60 * 60 / RANDOMWALLPAPER_WALLPAPER_COUNT))
  RANDOMWALLPAPER_DISPLAY_TIME="$RANDOMWALLPAPER_SLEEP_TIME [m,h]"
elif [ "$RANDOMWALLPAPER_ROTATE_TYPE" = "weekly" ]; then
  RANDOMWALLPAPER_SLEEP_TIME=$((24 * 60 * 60 * 7 / RANDOMWALLPAPER_WALLPAPER_COUNT))
  RANDOMWALLPAPER_DISPLAY_TIME="$RANDOMWALLPAPER_SLEEP_TIME [m,h,d]"
elif [ "$RANDOMWALLPAPER_ROTATE_TYPE" = "monthly" ]; then
  RANDOMWALLPAPER_SLEEP_TIME=$((24 * 60 * 60 * 30 / RANDOMWALLPAPER_WALLPAPER_COUNT))
  RANDOMWALLPAPER_DISPLAY_TIME="$RANDOMWALLPAPER_SLEEP_TIME [m,h,d,w]"
elif [ "$RANDOMWALLPAPER_ROTATE_TYPE" = "slideshow" ]; then
  RANDOMWALLPAPER_SLEEP_TIME="${SLIDESHOW_TIME:-5}"
else
  RANDOMWALLPAPER_SLEEP_TIME="$((RANDOMWALLPAPER_ROTATE_TIME * 60))"
  RANDOMWALLPAPER_DISPLAY_TIME="$((RANDOMWALLPAPER_SLEEP_TIME / 60)) minute[s]"
fi
RANDOMWALLPAPER_SLEEP_TIME="${RANDOMWALLPAPER_SLEEP_TIME:-60}"
RANDOMWALLPAPER_ROTATE_TIME="${RANDOMWALLPAPER_ROTATE_TIME:-$RANDOMWALLPAPER_SLEEP_TIME}"
RANDOMWALLPAPER_DISPLAY_TIME="${RANDOMWALLPAPER_DISPLAY_TIME:-$RANDOMWALLPAPER_SLEEP_TIME}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",term,rebuild"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="enable disable update new bg"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    RANDOMWALLPAPER_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    RANDOMWALLPAPER_CWD="$2"
    [ -d "$RANDOMWALLPAPER_CWD" ] || mkdir -p "$RANDOMWALLPAPER_CWD" |& __devnull
    shift 2
    ;;
  --term)
    shift 1
    TERMINAL_APP="TRUE"
    ;;
  --rebuild)
    shift 1
    __update_cache
    exit
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# RANDOMWALLPAPER_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# RANDOMWALLPAPER_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && RANDOMWALLPAPER_CWD="$1" && shift 1 || RANDOMWALLPAPER_CWD="${RANDOMWALLPAPER_CWD:-$PWD}"
RANDOMWALLPAPER_CWD="$(realpath "${RANDOMWALLPAPER_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$RANDOMWALLPAPER_CWD" ] && cd "$RANDOMWALLPAPER_CWD"; then
# if [ "$RANDOMWALLPAPER_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $RANDOMWALLPAPER_CWD"
# fi
# else
# printf_exit "ðŸ’” $RANDOMWALLPAPER_CWD does not exist ðŸ’”"
# fi
export RANDOMWALLPAPER_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
__initialize "$@"
__find_random "$@"
__variety
__getstatus
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
bg) # background
  shift 1
  case $1 in
  run)
    shift $#
    run_count="$(__start_count 'randomwallpaper' 'run')"
    if [ "$run_count" -gt 2 ]; then
      notify_running
    else
      __background_job "$@"
    fi
    exit
    ;;

  new)
    shift $#
    __randomwallpaper && __mesg_ok || __mesg_fail
    exit $?
    ;;

  restart)
    printf_red "Attempting to restart $APPNAME"
    __notifications "$APPNAME" "Attempting to restart $APPNAME"
    sh -c "$APPNAME" bg stop
    sh -c "$APPNAME" bg start
    exit $?
    ;;

  start)
    shift $#
    start_count="$(__start_count 'randomwallpaper' 'start')"
    if [ "$start_count" -gt 2 ]; then
      notify_running
      printf_exit "More than one instance seems to be runnng"
    fi
    if __getstatus; then
      notify_running
    else
      __start
      exit $?
    fi
    ;;

  stop | kill)
    shift $#
    printf_green "Killing background service" && touch "$RANDOMWALLPAPER_KILL_FILE" && __kill
    exit
    ;;

  status)
    shift $#
    if __getstatus; then
      if [ -n "$GETTPID" ]; then
        notify_running
        printf_exit 2 0 "randomwallpapers is running with PID: $GETTPID"
      else
        __notifications "RandomWallPapers" "randomwallpapers appears to be stopped"
        printf_exit 1 1 "randomwallpapers appears to be stopped"
      fi
    else
      __notifications "RandomWallPapers" "randomwallpapers appears to be stopped"
      printf_exit 1 1 "randomwallpapers appears to be stopped"
    fi
    exit $?
    ;;

  *)
    __start "$@"
    exit $?
    ;;
  esac
  ;; # end background

startup | enable)
  shift 1
  __startup
  exit $?
  ;;

disable)
  shift 1
  __startup_disable
  exit $?
  ;;

update)
  __update_cache
  exit $?
  ;;

new)
  shift 1
  __randomwallpaper "$@" && __mesg_ok || __mesg_fail
  exit $?
  ;;

*)
  if [ -n "$TERMINAL_APP" ]; then __term; fi
  __randomwallpaper "$@" && __mesg_ok || __mesg_fail
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
