#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208151421-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  reqpkgs --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Monday, Aug 15, 2022 14:21 EDT
# @@File             :  reqpkgs
# @@Description      :  Install required packages
# @@Changelog        :  New script
# @@TODO             :  Fix tee -a
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208151421-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
REQPKGS_REQUIRE_SUDO="${REQPKGS_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE"
  fi
  [ -d "$REQPKGS_CONFIG_DIR" ] || mkdir -p "$REQPKGS_CONFIG_DIR"
  [ -d "$REQPKGS_CONFIG_BACKUP_DIR" ] || mkdir -p "$REQPKGS_CONFIG_BACKUP_DIR"
  [ -f "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE" ] &&
    cp -Rf "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE" "$REQPKGS_CONFIG_BACKUP_DIR/$REQPKGS_CONFIG_FILE.$$"
  cat <<EOF >"$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE"
# Settings for reqpkgs
REQPKGS_NPM_MGR_VERSION="${REQPKGS_NPM_MGR_VERSION:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
REQPKGS_OUTPUT_COLOR_1="${REQPKGS_OUTPUT_COLOR_1:-}"
REQPKGS_OUTPUT_COLOR_2="${REQPKGS_OUTPUT_COLOR_2:-}"
REQPKGS_OUTPUT_COLOR_GOOD="${REQPKGS_OUTPUT_COLOR_GOOD:-}"
REQPKGS_OUTPUT_COLOR_ERROR="${REQPKGS_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
REQPKGS_NOTIFY_ENABLED="${REQPKGS_NOTIFY_ENABLED:-}"
REQPKGS_GOOD_NAME="${REQPKGS_GOOD_NAME:-}"
REQPKGS_ERROR_NAME="${REQPKGS_ERROR_NAME:-}"
REQPKGS_GOOD_MESSAGE="${REQPKGS_GOOD_MESSAGE:-}"
REQPKGS_ERROR_MESSAGE="${REQPKGS_ERROR_MESSAGE:-}"
REQPKGS_NOTIFY_CLIENT_NAME="${REQPKGS_NOTIFY_CLIENT_NAME:-}"
REQPKGS_NOTIFY_CLIENT_ICON="${REQPKGS_NOTIFY_CLIENT_ICON:-}"
REQPKGS_NOTIFY_CLIENT_URGENCY="${REQPKGS_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "reqpkgs:  Install required packages - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: reqpkgs [options] [commands] [listOfPackages]"
  __printf_line "* [listOfPackages]              - Installs default packages or from arguments"
  __printf_line "clean                           - Removes the log files"
  __printf_line "gem [listOfPackages]            - Installs default gem packages or from arguments"
  __printf_line "lua [listOfPackages]            - Installs default lua packages or from arguments"
  __printf_line "npm [listOfPackages]            - Installs default npm packages or from arguments"
  __printf_line "pip [listOfPackages]            - Installs default pip packages or from arguments"
  __printf_line "sys [listOfPackages]            - Installs default system packages or from arguments"
  __printf_line "go  [listOfPackages]            - Installs default go packages or from arguments"
  __printf_line "--file [name]                   - Define package list: see defaults.conf"
  __printf_line "--go [packageList]              - Install go packages"
  __printf_line "--lua [packageList]             - Install lua packages"
  __printf_line "--gem [packageList]             - Install ruby packages"
  __printf_line "--pip [packageList]             - Install python packages"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$REQPKGS_REQUIRE_SUDO" = "yes" ] && [ -z "$REQPKGS_REQUIRE_SUDO_RUN" ]; then
    export REQPKGS_REQUIRE_SUDO="no"
    export REQPKGS_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$REQPKGS_TEMP_FILE" ] && rm -Rf "$REQPKGS_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__gen_config_local() {
  [ -f "$REQPKGS_CONFIG_DIR/defaults.conf" ] &&
    . "$REQPKGS_CONFIG_DIR/defaults.conf" &&
    rm -Rf "$REQPKGS_CONFIG_DIR/defaults.conf"
  __default_packages
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tee() { tee "$@" &>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__default_packages() {
  local file="${1:-defaults}"
  [ -n "$1" ] && shift
  [ -f "$REQPKGS_CONFIG_DIR/${file}.conf" ] && return
  cat <<EOF | tee -p "$REQPKGS_CONFIG_DIR/${file}.conf" &>/dev/null
# Packages that are the same across distros
GLOBAL_PACKAGES="sudo git curl gnupg lynx wget net-tools "
GLOBAL_PACKAGES=""
# Debian/Ubuntu
DEB_PACKAGE_NAMES="python3 python3-pil python3-pip vim-nox "
DEB_PACKAGE_NAMES+=""

# Fedora/CentOS/REHEL/RockyLinux/AlmaLinux
YUM_PACKAGE_NAMES="python3 python3-pip net-tools vim "
YUM_PACKAGE_NAMES+=""

# Archlinux
PAC_PACKAGE_NAMES="python3 python-pip net-tools vim "
PAC_PACKAGE_NAMES+=""

# Alpinelinux
APK_PACKAGE_NAMES="iproute2,ssmtp,openssl,jq,ca-certificates,tzdata,mailcap,ncurses,util-linux,"
APK_PACKAGE_NAMES+="pciutils,usbutils,coreutils,binutils,findutils,grep,rsync,zip,certbot,tini,"
APK_PACKAGE_NAMES+="certbot,py3-pip,procps,net-tools,coreutils,sed,gawk,grep,attr,findutils,readline,"
APK_PACKAGE_NAMES+="lsof,less,curl"

# NPM Packages
REQ_NPM_PACKAGE_NAMES="vercel "
REQ_PIP_PACKAGE_NAMES+=""

# Python packages
REQ_PIP_PACKAGE_NAMES="twitter "
REQ_PIP_PACKAGE_NAMES+=""

# Ruby packages
REQ_GEM_PACKAGE_NAMES=" "
REQ_GEM_PACKAGE_NAMES+=""

# Lua packages
REQ_LUA_PACKAGE_NAMES="wsapi-xavante "
REQ_LUA_PACKAGE_NAMES+=""

# Go packages
REQ_GO_PACKAGE_NAMES="github.com/codeskyblue/gohttpserver "
REQ_GO_PACKAGE_NAMES+=""

EOF
  [ -f "$REQPKGS_CONFIG_DIR/${REQPKGS_PKGLIST:-defaults}.conf" ] && . "$REQPKGS_CONFIG_DIR/${REQPKGS_PKGLIST:-defaults}.conf"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__logger() {
  [ "$1" = "start" ] && shift 1
  [ "$1" = "stop" ] && cat "$REQPKGS_LOG_FILE_ERR" >>"$REQPKGS_LOG_FILE_INFO" && shift
  printf '%s\n' "#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" | __tee -a "$REQPKGS_LOG_FILE_ERR" "$REQPKGS_LOG_FILE_INFO"
  printf '%s\n' "# $*                                                                  " | __tee -a "$REQPKGS_LOG_FILE_ERR" "$REQPKGS_LOG_FILE_INFO"
  printf '%s\n' "#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -" | __tee -a "$REQPKGS_LOG_FILE_ERR" "$REQPKGS_LOG_FILE_INFO"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__initialize_reqpkgs() {
  __sudoif && __sudoask
  # Load the config file
  if [ -f "$REQPKGS_CONFIG_DIR/${REQPKGS_PKGLIST:-defaults}.conf" ]; then
    . "$REQPKGS_CONFIG_DIR/${REQPKGS_PKGLIST:-defaults}.conf"
  else
    __default_packages "${REQPKGS_PKGLIST:-defaults}"
  fi
  __logger "start" "# $APPNAME started on $(date +'%Y-%m-%d at %H:%M:%S')"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__pip_bin() {
  pipbin="$(builtin type -P python3 2>/dev/null || builtin type -P python2 2>/dev/null || builtin type -P python 2>/dev/null || false)"
  eval $pipbin -m pip install --user "$@" 2>>"$REQPKGS_LOG_FILE_ERR" >>"$REQPKGS_LOG_FILE_INFO" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__npm_bin() {
  eval npm i -g "$@" 2>>"$REQPKGS_LOG_FILE_ERR" >>"$REQPKGS_LOG_FILE_INFO" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gem_bin() {
  eval gem install --user-install -n~/.local/bin "$@" 2>>"$REQPKGS_LOG_FILE_ERR" >>"$REQPKGS_LOG_FILE_INFO" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__lua_bin() {
  eval luarocks install --local "$@" 2>>"$REQPKGS_LOG_FILE_ERR" >>"$REQPKGS_LOG_FILE_INFO" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__go_bin() {
  export GO111MODULE="${GO111MODULE:-off}"
  export GOBIN="$HOME/.local/bin/"
  eval go get "$@" 2>>"$REQPKGS_LOG_FILE_ERR" >>"$REQPKGS_LOG_FILE_INFO" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sys_bin() {
  tee -a "$REQPKGS_LOG_FILE_ERR" &>/dev/null
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__npm_pkg_mgr() {
  printf '\n'
  if __cmd_exists npm; then
    local version="" npm=""
    local SET_REQ_NPM_PACKAGE_NAMES="${REQ_NPM_PACKAGE_NAMES:-}" # Get the package list
    REQ_NPM_PACKAGE_NAMES="${SET_REQ_NPM_PACKAGE_NAMES//,/ }"    # format package list
    if [ -z "$REQ_NPM_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_red "No packages are defined: REQ_NPM_PACKAGE_NAMES"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    # Execute
    elif [ -n "$REQ_NPM_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_green "Installing NPM packages                   "
      printf_green "============================================="
      { __cmd_exists fnm && eval $(fnm env) && fnm use $REQPKGS_NPM_MGR_VERSION | __tee; } ||
        { __cmd_exists nvm && nvm use $REQPKGS_NPM_MGR_VERSION | __tee; }
      npm cache clean --force 2>>"$REQPKGS_LOG_FILE_ERR" >>"$REQPKGS_LOG_FILE_INFO"
      version="$(node --version | awk -F'v' '{print $2}')"
      printf_blue "Using node version: $version"
      for npm in $REQ_NPM_PACKAGE_NAMES; do
        printf '\r%b' "${PURPLE}installing ${npm}${NC} "
        __cmd_exists "$npm" ||
          __npm_bin $npm 1>/dev/null && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$npm") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${npm}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${npm}" "${NC}"
      done
    else
      printf_green "============================================="
      printf_red "Can not find npm"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    fi
  else
    printf_green "============================================="
    printf_red "node is not installed on this system"
    printf_green "============================================="
    exitCode=$(($exitCode + 1))
    return 1
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__pip_pkg_mgr() {
  printf '\n'
  if __cmd_exists python3 || __cmd_exists python2 || __cmd_exists python || __cmd_exists pip; then
    local version="" pip=""
    local SET_REQ_PIP_PACKAGE_NAMES="${REQ_PIP_PACKAGE_NAMES:-}" # Get the package list
    REQ_PIP_PACKAGE_NAMES="${SET_REQ_PIP_PACKAGE_NAMES//,/ }"    # format package list
    if [ -z "$REQ_PIP_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_red "No packages are defined: REQ_PIP_PACKAGE_NAMES"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    # Execute
    elif [ -n "$REQ_PIP_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_green "Installing python packages                   "
      printf_green "============================================="
      version="$(pip --version | awk '{print $2" | python:",$NF}' | sed 's|(||g;s|)||g')"
      printf_blue "Using pip version: $version"
      for pip in $REQ_PIP_PACKAGE_NAMES; do
        printf '\r%b' "${PURPLE}installing ${pip}${NC} "
        __cmd_exists "$pip" ||
          __pip_bin $pip && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pip") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pip}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pip}" "${NC}"
      done
    else
      printf_green "============================================="
      printf_red "Can not find python"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    fi
  else
    printf_green "============================================="
    printf_red "pip is not installed on this system"
    printf_green "============================================="
    exitCode=$(($exitCode + 1))
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gem_pkg_mgr() {
  printf '\n'
  if __cmd_exists gem; then
    local version="" gem=""
    local SET_REQ_GEM_PACKAGE_NAMES="${REQ_GEM_PACKAGE_NAMES:-}" # Get the package list
    REQ_GEM_PACKAGE_NAMES="${SET_REQ_GEM_PACKAGE_NAMES//,/ }"    # format package list
    if [ -z "$REQ_GEM_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_red "No packages are defined: REQ_GEM_PACKAGE_NAMES"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    # Execute
    elif [ -n "$REQ_GEM_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_green "Installing gem packages                      "
      printf_green "============================================="
      version="$(gem --version) | ruby: $(ruby --version | awk '{print $2}')"
      printf_blue "Using gem version: $version"
      for gem in $REQ_GEM_PACKAGE_NAMES; do
        printf '\r%b' "${PURPLE}installing ${gem}${NC} "
        __cmd_exists "$gem" ||
          __gem_bin $gem && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$gem") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${gem}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${gem}" "${NC}"
      done
    else
      printf_green "============================================="
      printf_red "Can not find ruby gem"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    fi
  else
    printf_green "============================================="
    printf_red "ruby/gem is not installed on this system"
    printf_green "============================================="
    exitCode=$(($exitCode + 1))
    return 1
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__lua_pkg_mgr() {
  printf '\n'
  if __cmd_exists luarocks; then
    local version="" lua=""
    local SET_REQ_LUA_PACKAGE_NAMES="${REQ_LUA_PACKAGE_NAMES:-}" # Get the package list
    REQ_LUA_PACKAGE_NAMES="${SET_REQ_LUA_PACKAGE_NAMES//,/ }"    # format package list
    if [ -z "$REQ_LUA_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_red "No packages are defined: REQ_LUA_PACKAGE_NAMES"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    # Execute
    elif [ -n "$REQ_LUA_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_green "Installing lua packages                      "
      printf_green "============================================="
      version="$(luarocks --version 2>&1 | grep '[0-9]' | awk '{print $2}') | lua: $(lua -v 2>&1 | awk '{print $2}')"
      printf_blue "Using luarocks version: $version"
      for lua in $REQ_LUA_PACKAGE_NAMES; do
        printf '\r%b' "${PURPLE}installing ${lua}${NC} "
        __cmd_exists "$lua" ||
          __lua_bin $lua && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$lua") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${lua}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${lua}" "${NC}"
      done
    else
      printf_green "============================================="
      printf_red "Can not find lua rocks"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    fi
  else
    printf_green "============================================="
    printf_red "lua/luarocks is not installed on this system"
    printf_green "============================================="
    exitCode=$(($exitCode + 1))
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__go_pkg_mgr() {
  printf '\n'
  if __cmd_exists go; then
    local version="" go=""
    local SET_REQ_GO_PACKAGE_NAMES="${REQ_GO_PACKAGE_NAMES:-}" # Get the package list
    REQ_GO_PACKAGE_NAMES="${SET_REQ_GO_PACKAGE_NAMES//,/ }"    # format package list
    if [ -z "$REQ_GO_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_red "No packages are defined: REQ_GO_PACKAGE_NAMES"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    # Execute
    elif [ -n "$REQ_GO_PACKAGE_NAMES" ]; then
      printf_green "============================================="
      printf_green "Installing go packages                       "
      printf_green "============================================="
      version="$(go version | awk '{print $3}' | sed 's|go||g')"
      printf_blue "Using go version: $version"
      for go in $REQ_GO_PACKAGE_NAMES; do
        printf '\r%b' "${PURPLE}installing ${go}${NC} "
        __cmd_exists "$go" ||
          __go_bin "$go" && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$go") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${go}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${go}" "${NC}"
      done
    else
      printf_green "============================================="
      printf_red "Can not find go"
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    fi
    printf_green "============================================="
    printf_red "GO is not installed on this system"
    printf_green "============================================="
    exitCode=$(($exitCode + 1))
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__system_pkg_mgr() {
  printf '\n'

  # Get the package list
  local SYS_PACKAGE_NAMES="${SYS_PACKAGE_NAMES:-$*}"
  local SET_YUM_PACKAGE_NAMES="${SYS_PACKAGE_NAMES:-$YUM_PACKAGE_NAMES}"
  local SET_DEB_PACKAGE_NAMES="${SYS_PACKAGE_NAMES:-$DEB_PACKAGE_NAMES}"
  local SET_PAC_PACKAGE_NAMES="${SYS_PACKAGE_NAMES:-$PAC_PACKAGE_NAMES}"
  local SET_APK_PACKAGE_NAMES="${SYS_PACKAGE_NAMES:-$APK_PACKAGE_NAMES}"
  # format package list
  YUM_PACKAGE_NAMES="${SET_YUM_PACKAGE_NAMES//,/ }"
  DEB_PACKAGE_NAMES="${SET_DEB_PACKAGE_NAMES//,/ }"
  PAC_PACKAGE_NAMES="${SET_PAC_PACKAGE_NAMES//,/ }"
  APK_PACKAGE_NAMES="${SET_APK_PACKAGE_NAMES//,/ }"
  # Execute
  if [ -n "$YUM_PACKAGE_NAMES" ] || [ -n "$DEB_PACKAGE_NAMES" ] || [ -n "$PAC_PACKAGE_NAMES" ] || [ -n "$APK_PACKAGE_NAMES" ]; then
    if cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qiE 'Alpine'; then
      printf_green "============================================="
      printf_green "Installing packages for AlpineLinux          "
      printf_green "============================================="
      pkg=""
      for pkg in ${APK_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo pacman -Syyu --noconfirm --needed $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi CentOS; then
      printf_green "============================================="
      printf_green "Installing packages for CentOS               "
      printf_green "============================================="
      pkg=""
      for pkg in ${YUM_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo yum install -y $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Red; then
      printf_green "============================================="
      printf_green "Installing packages for RedHat               "
      printf_green "============================================="
      pkg=""
      for pkg in ${YUM_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo yum install -y $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Fedora; then
      printf_green "============================================="
      printf_green "Installing packages for Fedora               "
      printf_green "============================================="
      pkg=""
      for pkg in ${YUM_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo yum install -y $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Ubuntu; then
      printf_green "============================================="
      printf_green "Installing packages for Ubuntu               "
      printf_green "============================================="
      pkg=""
      for pkg in ${DEB_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo apt-get install -yy $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Debian; then
      printf_green "============================================="
      printf_green "Installing packages for Debian               "
      printf_green "============================================="
      pkg=""
      for pkg in ${DEB_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo apt-get install -yy $pkg &>/dev/null && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -wqi 'Mint'; then
      printf_green "============================================="
      printf_green "Installing packages for Mint                 "
      printf_green "============================================="
      pkg=""
      for pkg in ${DEB_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo apt-get install -yy $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Kali; then
      printf_green "============================================="
      printf_green "Installing packages for KaliLinux            "
      printf_green "============================================="
      pkg=""
      for pkg in ${DEB_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo apt-get install -yy $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Parrot; then
      printf_green "============================================="
      printf_green "Installing packages for Parrot OS            "
      printf_green "============================================="
      pkg=""
      for pkg in ${DEB_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing $pkg                                                      $NC"
        sudo apt-get install -yy $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Peppermint; then
      printf_green "============================================="
      printf_green "Installing packages for Peppermint OS            "
      printf_green "============================================="
      pkg=""
      for pkg in ${DEB_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo apt-get install -yy $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qi Knoppix; then
      printf_green "============================================="
      printf_green "Installing packages for Knoppix              "
      printf_green "============================================="
      pkg=""
      for pkg in ${YUM_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo yum install -y $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    elif cat /etc/*release | grep -E '^NAME=|^ID=|^ID_LIKE=' | grep -qiE 'Arch|Arco|Manjaro'; then
      printf_green "============================================="
      printf_green "Installing packages for Arch                 "
      printf_green "============================================="
      pkg=""
      for pkg in ${PAC_PACKAGE_NAMES} ${GLOBAL_PACKAGES}; do
        printf '\r%b' "${PURPLE}installing ${pkg}${NC} "
        sudo pacman -Syyu --noconfirm --needed $pkg | __sys_bin && exitCode=$(($exitCode + 0)) || { exitCode=$(($exitCode + 1)) && errorpkgs=("${errorpkgs[@]}" "$pkg") && false; }
        [ $? -eq 0 ] &&
          printf '\r%b                                                     %b \n' "${CYAN}Installed ${pkg}" "${NC}" ||
          printf '\r%b                                                     %b \n' "${YELLOW}Failed to install: ${pkg}" "${NC}"
      done
    else
      printf_green "============================================="
      printf_red "OS NOT DETECTED, couldn't install packages "
      printf_green "============================================="
      exitCode=$(($exitCode + 1))
      return 1
    fi
  else
    printf_green "============================================="
    printf_red "No packages are defined: SYS_PACKAGE_NAMES"
    printf_green "============================================="
    exitCode=$(($exitCode + 1))
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_reqpkgs() {
  declare -a errorpkgs=()
  exitCode=0
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __system_pkg_mgr
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __npm_pkg_mgr
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __pip_pkg_mgr
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __gem_pkg_mgr
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __lua_pkg_mgr
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __go_pkg_mgr
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __finalize_reqpkgs
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__finalize_reqpkgs() {
  printf '\n\n'
  printf_green "============================================="
  printf_green "Installation has completed with exit status $exitCode "
  printf_green "============================================="
  if [ -n "${errorpkgs[*]}" ] && [ "$exitCode" -ne 0 ]; then
    printf_yellow "The following were not installed:"
    failed="$(echo "${errorpkgs[@]}" | tr ' ' '\n')"
    printf '%s\n' "$failed" | printf_column $REQPKGS_OUTPUT_COLOR_1
    if [ -s "$REQPKGS_LOG_FILE_ERR" ]; then
      printf_green "============================================="
      printf_yellow "More details might be in: $REQPKGS_LOG_FILE_ERR"
      printf_green "============================================="
    fi
  fi
  __logger "stop" "# $APPNAME stopped on $(date +'%Y-%m-%d at %H:%M:%S')"
  printf '\n\n'
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
REQPKGS_CONFIG_FILE="${REQPKGS_CONFIG_FILE:-settings.conf}"
REQPKGS_CONFIG_DIR="${REQPKGS_CONFIG_DIR:-$HOME/.config/myscripts/reqpkgs}"
REQPKGS_CONFIG_BACKUP_DIR="${REQPKGS_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/reqpkgs/backups}"
REQPKGS_LOG_DIR="${REQPKGS_LOG_DIR:-$HOME/.local/log/reqpkgs}"
REQPKGS_TEMP_DIR="${REQPKGS_TEMP_DIR:-$HOME/.local/tmp/system_scripts/reqpkgs}"
REQPKGS_CACHE_DIR="${REQPKGS_CACHE_DIR:-$HOME/.cache/reqpkgs}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
REQPKGS_OUTPUT_COLOR_1="${REQPKGS_OUTPUT_COLOR_1:-33}"
REQPKGS_OUTPUT_COLOR_2="${REQPKGS_OUTPUT_COLOR_2:-5}"
REQPKGS_OUTPUT_COLOR_GOOD="${REQPKGS_OUTPUT_COLOR_GOOD:-2}"
REQPKGS_OUTPUT_COLOR_ERROR="${REQPKGS_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
REQPKGS_NOTIFY_ENABLED="${REQPKGS_NOTIFY_ENABLED:-yes}"
REQPKGS_GOOD_NAME="${REQPKGS_GOOD_NAME:-Great:}"
REQPKGS_ERROR_NAME="${REQPKGS_ERROR_NAME:-Error:}"
REQPKGS_GOOD_MESSAGE="${REQPKGS_GOOD_MESSAGE:-No errors reported}"
REQPKGS_ERROR_MESSAGE="${REQPKGS_ERROR_MESSAGE:-Errors were reported}"
REQPKGS_NOTIFY_CLIENT_NAME="${REQPKGS_NOTIFY_CLIENT_NAME:-$APPNAME}"
REQPKGS_NOTIFY_CLIENT_ICON="${REQPKGS_NOTIFY_CLIENT_ICON:-notification-new}"
REQPKGS_NOTIFY_CLIENT_URGENCY="${REQPKGS_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
REQPKGS_NPM_MGR_VERSION="${REQPKGS_NPM_MGR_VERSION:-18}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE" ] && . "$REQPKGS_CONFIG_DIR/$REQPKGS_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$REQPKGS_LOG_DIR" ] || mkdir -p "$REQPKGS_LOG_DIR" |& __devnull
[ -d "$REQPKGS_TEMP_DIR" ] || mkdir -p "$REQPKGS_TEMP_DIR" |& __devnull
[ -d "$REQPKGS_CACHE_DIR" ] || mkdir -p "$REQPKGS_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
REQPKGS_TEMP_FILE="${REQPKGS_TEMP_FILE:-$(mktemp $REQPKGS_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$REQPKGS_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$REQPKGS_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$REQPKGS_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$REQPKGS_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$REQPKGS_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$REQPKGS_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",file:,go:,pip:,lua:,gem:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="go lua gem pip npm sys"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    REQPKGS_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    REQPKGS_CWD="$2"
    [ -d "$REQPKGS_CWD" ] || mkdir -p "$REQPKGS_CWD" |& __devnull
    shift 2
    ;;
  --file)
    basename="$(basename -- "${2##*/}")"
    if [ -f "$2" ]; then
      REQPKGS_PKGLIST="$2"
    elif [ -f "$REQPKGS_CONFIG_DIR/$basename" ]; then
      REQPKGS_PKGLIST="$REQPKGS_CONFIG_DIR/$basename"
    else
      __default_packages "$basename"
      REQPKGS_PKGLIST="$REQPKGS_CONFIG_DIR/$basename"
    fi
    shift 2
    ;;
  --pip)
    SET_REQ_PIP_PACKAGE_NAMES="$2"
    shift 2
    ;;
  --gem)
    SET_REQ_GEM_PACKAGE_NAMES="$2"
    shift 2
    ;;
  --lua)
    SET_REQ_LUA_PACKAGE_NAMES="$2"
    shift 2
    ;;
  --go)
    SET_REQ_GO_PACKAGE_NAMES="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# REQPKGS_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# REQPKGS_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && REQPKGS_CWD="$1" && shift 1 || REQPKGS_CWD="${REQPKGS_CWD:-$PWD}"
REQPKGS_CWD="$(realpath "${REQPKGS_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$REQPKGS_CWD" ] && cd "$REQPKGS_CWD"; then
# if [ "$REQPKGS_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $REQPKGS_CWD"
# fi
# else
# printf_exit "ðŸ’” $REQPKGS_CWD does not exist ðŸ’”"
# fi
export REQPKGS_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
REQPKGS_LOG_FILE_INFO="$REQPKGS_LOG_DIR/$(date +'%Y%m%d-%H%M').log"
REQPKGS_LOG_FILE_ERR="$REQPKGS_LOG_DIR/$(date +'%Y%m%d-%H%M').err.log"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__initialize_reqpkgs
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
sys)
  shift 1
  declare -a errorpkgs=()
  exitCode=0
  if [ $# -ne 0 ]; then
    SET_SYS_PACKAGE_NAMES="${*:-$SYS_PACKAGE_NAMES}"
  fi
  __system_pkg_mgr "$SET_SYS_PACKAGE_NAMES"
  __finalize_reqpkgs
  ;;

npm)
  shift 1
  declare -a errorpkgs=()
  exitCode=0
  if [ $# -ne 0 ]; then
    SET_REQ_NPM_PACKAGE_NAMES="${*:-$REQ_NPM_PACKAGE_NAMES}"
  fi
  __npm_pkg_mgr "$REQ_NPM_PACKAGE_NAMES"
  __finalize_reqpkgs
  ;;

pip)
  shift 1
  declare -a errorpkgs=()
  exitCode=0
  if [ $# -ne 0 ]; then
    SET_REQ_PIP_PACKAGE_NAMES="${*:-$REQ_PIP_PACKAGE_NAMES}"
  fi
  __pip_pkg_mgr "$REQ_PIP_PACKAGE_NAMES"
  __finalize_reqpkgs
  ;;

gem)
  shift 1
  declare -a errorpkgs=()
  exitCode=0
  if [ $# -ne 0 ]; then
    SET_REQ_GEM_PACKAGE_NAMES="${*:-$REQ_GEM_PACKAGE_NAMES}"
  fi
  __gem_pkg_mgr "$REQ_GEM_PACKAGE_NAMES"
  __finalize_reqpkgs
  ;;

lua)
  shift 1
  declare -a errorpkgs=()
  exitCode=0
  if [ $# -ne 0 ]; then
    SET_REQ_LUA_PACKAGE_NAMES="${*:-$REQ_LUA_PACKAGE_NAMES}"
  fi
  __lua_pkg_mgr "$REQ_LUA_PACKAGE_NAMES"
  __finalize_reqpkgs
  ;;

go)
  shift 1
  declare -a errorpkgs=()
  exitCode=0
  if [ $# -ne 0 ]; then
    SET_REQ_GO_PACKAGE_NAMES="${*:-$REQ_GO_PACKAGE_NAMES}"
  fi
  __go_pkg_mgr "$REQ_GO_PACKAGE_NAMES"
  __finalize_reqpkgs
  ;;

clean)
  shift 1
  rm -Rf "$REQPKGS_LOG_DIR"
  mkdir -p "$REQPKGS_LOG_DIR"
  exit
  ;;

*)
  __execute_reqpkgs
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
