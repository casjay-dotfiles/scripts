#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202509261800-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  screenshot-menu --help
# @@Copyright        :  Copyright: (c) 2025 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Sep 26, 2025 18:00 EDT
# @@File             :  screenshot-menu
# @@Description      :  Advanced screenshot utility with multiple tools support
# @@Changelog        :  Complete refactor with enhanced features
# @@TODO             :  Continuous improvements
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202509261800-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
SCREENSHOT_MENU_REQUIRE_SUDO="${SCREENSHOT_MENU_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE"
  fi
  [ -d "$SCREENSHOT_MENU_CONFIG_DIR" ] || mkdir -p "$SCREENSHOT_MENU_CONFIG_DIR"
  [ -d "$SCREENSHOT_MENU_CONFIG_BACKUP_DIR" ] || mkdir -p "$SCREENSHOT_MENU_CONFIG_BACKUP_DIR"
  [ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ] &&
    cp -Rf "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" "$SCREENSHOT_MENU_CONFIG_BACKUP_DIR/$SCREENSHOT_MENU_CONFIG_FILE.$$"
  cat <<EOF >"$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE"
# Settings for screenshot-menu
SCREENSHOT_MENU_SAVE_DIR="${SCREENSHOT_MENU_SAVE_DIR:-$HOME/Pictures/Screenshots}"
SCREENSHOT_MENU_TEMP_DIR="${SCREENSHOT_MENU_TEMP_DIR:-/tmp/screenshots}"
SCREENSHOT_MENU_DEFAULT_TOOL="${SCREENSHOT_MENU_DEFAULT_TOOL:-auto}"
SCREENSHOT_MENU_DEFAULT_FORMAT="${SCREENSHOT_MENU_DEFAULT_FORMAT:-png}"
SCREENSHOT_MENU_DEFAULT_QUALITY="${SCREENSHOT_MENU_DEFAULT_QUALITY:-90}"
SCREENSHOT_MENU_SHOW_CURSOR="${SCREENSHOT_MENU_SHOW_CURSOR:-false}"
SCREENSHOT_MENU_DEFAULT_DELAY="${SCREENSHOT_MENU_DEFAULT_DELAY:-0}"
SCREENSHOT_MENU_SOUND_ENABLED="${SCREENSHOT_MENU_SOUND_ENABLED:-true}"
SCREENSHOT_MENU_COPY_TO_CLIPBOARD="${SCREENSHOT_MENU_COPY_TO_CLIPBOARD:-true}"
SCREENSHOT_MENU_OPEN_AFTER="${SCREENSHOT_MENU_OPEN_AFTER:-false}"
SCREENSHOT_MENU_UPLOAD_SERVICE="${SCREENSHOT_MENU_UPLOAD_SERVICE:-none}"
SCREENSHOT_MENU_DMENU_BACKEND="${SCREENSHOT_MENU_DMENU_BACKEND:-auto}"
SCREENSHOT_MENU_FILENAME_FORMAT="${SCREENSHOT_MENU_FILENAME_FORMAT:-screenshot_%Y%m%d_%H%M%S}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SCREENSHOT_MENU_OUTPUT_COLOR_1="${SCREENSHOT_MENU_OUTPUT_COLOR_1:-33}"
SCREENSHOT_MENU_OUTPUT_COLOR_2="${SCREENSHOT_MENU_OUTPUT_COLOR_2:-5}"
SCREENSHOT_MENU_OUTPUT_COLOR_GOOD="${SCREENSHOT_MENU_OUTPUT_COLOR_GOOD:-2}"
SCREENSHOT_MENU_OUTPUT_COLOR_ERROR="${SCREENSHOT_MENU_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SCREENSHOT_MENU_NOTIFY_ENABLED="${SCREENSHOT_MENU_NOTIFY_ENABLED:-yes}"
SCREENSHOT_MENU_GOOD_NAME="${SCREENSHOT_MENU_GOOD_NAME:-Screenshot}"
SCREENSHOT_MENU_ERROR_NAME="${SCREENSHOT_MENU_ERROR_NAME:-Error}"
SCREENSHOT_MENU_GOOD_MESSAGE="${SCREENSHOT_MENU_GOOD_MESSAGE:-Screenshot captured successfully}"
SCREENSHOT_MENU_ERROR_MESSAGE="${SCREENSHOT_MENU_ERROR_MESSAGE:-Failed to capture screenshot}"
SCREENSHOT_MENU_NOTIFY_CLIENT_NAME="${SCREENSHOT_MENU_NOTIFY_CLIENT_NAME:-$APPNAME}"
SCREENSHOT_MENU_NOTIFY_CLIENT_ICON="${SCREENSHOT_MENU_NOTIFY_CLIENT_ICON:-camera-photo}"
SCREENSHOT_MENU_NOTIFY_CLIENT_URGENCY="${SCREENSHOT_MENU_NOTIFY_CLIENT_URGENCY:-normal}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "screenshot-menu:  Advanced screenshot utility - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: screenshot-menu [options] [commands]"
  __printf_line " "
  __printf_head "Commands:"
  __printf_line "full                            - Capture full screen"
  __printf_line "window                          - Capture active window"
  __printf_line "region                          - Capture selected region"
  __printf_line "monitor                         - Capture specific monitor"
  __printf_line "quick                           - Quick capture to clipboard"
  __printf_line "annotate                        - Capture and annotate"
  __printf_line "record                          - Record screen (if supported)"
  __printf_line " "
  __printf_head "Options:"
  __printf_line "--delay [seconds]               - Add delay before capture"
  __printf_line "--cursor                        - Include cursor in screenshot"
  __printf_line "--no-cursor                     - Exclude cursor from screenshot"
  __printf_line "--quality [1-100]               - Set image quality (for JPEG)"
  __printf_line "--format [png|jpg|webp]         - Set output format"
  __printf_line "--tool [tool]                   - Force specific screenshot tool"
  __printf_line "--clipboard                     - Copy to clipboard only"
  __printf_line "--file                          - Save to file only"
  __printf_line "--both                          - Save to file and clipboard"
  __printf_line "--upload                        - Upload to image service"
  __printf_line "--no-sound                      - Disable capture sound"
  __printf_line "--open                          - Open screenshot after capture"
  __printf_line " "
  __printf_head "Available Tools:"
  __printf_line "- maim                          - Lightweight screenshot tool"
  __printf_line "- scrot                         - Screen capture utility"
  __printf_line "- flameshot                     - Feature-rich screenshot tool"
  __printf_line "- spectacle                     - KDE screenshot tool"
  __printf_line "- gnome-screenshot              - GNOME screenshot tool"
  __printf_line "- import                        - ImageMagick screenshot tool"
  __printf_line "- grim                          - Wayland screenshot tool"
  __printf_line " "
  __printf_head "Other Options:"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$SCREENSHOT_MENU_TEMP_FILE" ] && rm -Rf "$SCREENSHOT_MENU_TEMP_FILE" &>/dev/null
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__notifications() {
  __cmd_exists notifications || return
  [ "$SCREENSHOT_MENU_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$SCREENSHOT_MENU_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$SCREENSHOT_MENU_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$SCREENSHOT_MENU_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$SCREENSHOT_MENU_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$SCREENSHOT_MENU_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate timestamp for filename
__get_timestamp() {
  date "+${SCREENSHOT_MENU_FILENAME_FORMAT:-screenshot_%Y%m%d_%H%M%S}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Play capture sound
__play_sound() {
  [ "$SCREENSHOT_MENU_SOUND_ENABLED" = "true" ] || return
  [ "$SCREENSHOT_MENU_NO_SOUND" = "true" ] && return

  if __cmd_exists paplay; then
    paplay /usr/share/sounds/freedesktop/stereo/camera-shutter.oga 2>/dev/null &
  elif __cmd_exists aplay; then
    # Try to find a camera sound
    local sound_file
    for sound in /usr/share/sounds/*/stereo/camera*.{oga,wav,ogg} /usr/share/sounds/camera*.{wav,ogg}; do
      if [ -f "$sound" ]; then
        sound_file="$sound"
        break
      fi
    done
    [ -n "$sound_file" ] && aplay "$sound_file" 2>/dev/null &
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Detect available screenshot tools
__detect_screenshot_tool() {
  local preferred_tool="${1:-$SCREENSHOT_MENU_DEFAULT_TOOL}"

  if [ "$preferred_tool" != "auto" ] && __cmd_exists "$preferred_tool"; then
    echo "$preferred_tool"
    return 0
  fi

  # Check for Wayland first
  if [ "$XDG_SESSION_TYPE" = "wayland" ] || [ -n "$WAYLAND_DISPLAY" ]; then
    # Wayland tools
    for tool in grim flameshot spectacle gnome-screenshot; do
      if __cmd_exists "$tool"; then
        echo "$tool"
        return 0
      fi
    done
  fi

  # X11 tools
  for tool in flameshot maim scrot spectacle gnome-screenshot import; do
    if __cmd_exists "$tool"; then
      echo "$tool"
      return 0
    fi
  done

  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Detect display server
__detect_display_server() {
  if [ "$XDG_SESSION_TYPE" = "wayland" ] || [ -n "$WAYLAND_DISPLAY" ]; then
    echo "wayland"
  elif [ -n "$DISPLAY" ]; then
    echo "x11"
  else
    echo "unknown"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get list of monitors
__get_monitors() {
  local display_server="$(__detect_display_server)"

  if [ "$display_server" = "wayland" ]; then
    if __cmd_exists swaymsg; then
      swaymsg -t get_outputs | jq -r '.[] | .name' 2>/dev/null
    elif __cmd_exists wlr-randr; then
      wlr-randr | grep '^[^ ]' | cut -d' ' -f1
    fi
  else
    # X11
    if __cmd_exists xrandr; then
      xrandr --listactivemonitors | grep -E '^ +[0-9]+:' | awk '{print $4}'
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# DMenu/Rofi runner
__dmenu_run() {
  local prompt="${1:-Select}"
  shift

  case "$SCREENSHOT_MENU_DMENU_BACKEND" in
    rofi)
      if __cmd_exists rofi; then
        rofi -dmenu -i -p "$prompt" "$@"
        return
      fi
      ;;
    dmenu)
      if __cmd_exists dmenu; then
        dmenu -i -p "$prompt" "$@"
        return
      fi
      ;;
    auto|*)
      if __cmd_exists rofi; then
        rofi -dmenu -i -p "$prompt" "$@"
      elif __cmd_exists dmenu; then
        dmenu -i -p "$prompt" "$@"
      elif __cmd_exists zenity; then
        zenity --list --title="$prompt" --column="Options" 2>/dev/null
      elif __cmd_exists kdialog; then
        kdialog --menu "$prompt" 2>/dev/null
      else
        printf_exit "No menu system available (rofi, dmenu, zenity, or kdialog required)"
      fi
      ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Take screenshot with maim
__capture_with_maim() {
  local mode="$1"
  local output="$2"
  local cmd="maim"

  [ "$SCREENSHOT_MENU_SHOW_CURSOR" = "true" ] || cmd="$cmd -u"
  [ -n "$SCREENSHOT_MENU_QUALITY" ] && cmd="$cmd -q $SCREENSHOT_MENU_QUALITY"
  [ -n "$SCREENSHOT_MENU_DELAY" ] && [ "$SCREENSHOT_MENU_DELAY" -gt 0 ] && cmd="$cmd -d $SCREENSHOT_MENU_DELAY"

  case "$mode" in
    full) cmd="$cmd" ;;
    window)
      local window_id=$(xdotool getactivewindow 2>/dev/null)
      [ -n "$window_id" ] && cmd="$cmd -i $window_id" || cmd="$cmd -s"
      ;;
    region) cmd="$cmd -s" ;;
    monitor)
      local monitor="$3"
      if [ -n "$monitor" ]; then
        local geometry=$(xrandr --listactivemonitors | grep "$monitor" | grep -oE '[0-9]+x[0-9]+\+[0-9]+\+[0-9]+')
        [ -n "$geometry" ] && cmd="$cmd -g $geometry"
      fi
      ;;
  esac

  if [ "$output" = "clipboard" ]; then
    eval "$cmd" | xclip -selection clipboard -t image/png
  else
    eval "$cmd \"$output\""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Take screenshot with scrot
__capture_with_scrot() {
  local mode="$1"
  local output="$2"
  local cmd="scrot"

  [ "$SCREENSHOT_MENU_SHOW_CURSOR" = "true" ] && cmd="$cmd -p" || cmd="$cmd"
  [ -n "$SCREENSHOT_MENU_QUALITY" ] && cmd="$cmd -q $SCREENSHOT_MENU_QUALITY"
  [ -n "$SCREENSHOT_MENU_DELAY" ] && [ "$SCREENSHOT_MENU_DELAY" -gt 0 ] && cmd="$cmd -d $SCREENSHOT_MENU_DELAY"

  case "$mode" in
    full) cmd="$cmd" ;;
    window) cmd="$cmd -u" ;;
    region) cmd="$cmd -s" ;;
    monitor) cmd="$cmd" ;; # scrot doesn't have direct monitor selection
  esac

  if [ "$output" = "clipboard" ]; then
    local temp_file="/tmp/screenshot_$$.png"
    eval "$cmd \"$temp_file\""
    if [ -f "$temp_file" ]; then
      xclip -selection clipboard -t image/png < "$temp_file"
      rm -f "$temp_file"
    fi
  else
    eval "$cmd \"$output\""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Take screenshot with flameshot
__capture_with_flameshot() {
  local mode="$1"
  local output="$2"
  local cmd="flameshot"

  [ -n "$SCREENSHOT_MENU_DELAY" ] && [ "$SCREENSHOT_MENU_DELAY" -gt 0 ] && sleep "$SCREENSHOT_MENU_DELAY"

  case "$mode" in
    full) cmd="$cmd full" ;;
    window|region) cmd="$cmd gui" ;;
    monitor) cmd="$cmd screen" ;;
  esac

  if [ "$output" = "clipboard" ]; then
    eval "$cmd -c"
  else
    eval "$cmd -p \"$output\""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Take screenshot with gnome-screenshot
__capture_with_gnome_screenshot() {
  local mode="$1"
  local output="$2"
  local cmd="gnome-screenshot"

  [ "$SCREENSHOT_MENU_SHOW_CURSOR" = "true" ] && cmd="$cmd -p" || cmd="$cmd"
  [ -n "$SCREENSHOT_MENU_DELAY" ] && [ "$SCREENSHOT_MENU_DELAY" -gt 0 ] && cmd="$cmd -d $SCREENSHOT_MENU_DELAY"

  case "$mode" in
    full) cmd="$cmd" ;;
    window) cmd="$cmd -w" ;;
    region) cmd="$cmd -a" ;;
    monitor) cmd="$cmd" ;;
  esac

  if [ "$output" = "clipboard" ]; then
    eval "$cmd -c"
  else
    eval "$cmd -f \"$output\""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Take screenshot with spectacle
__capture_with_spectacle() {
  local mode="$1"
  local output="$2"
  local cmd="spectacle"

  [ "$SCREENSHOT_MENU_SHOW_CURSOR" = "false" ] && cmd="$cmd --no-decoration"
  [ -n "$SCREENSHOT_MENU_DELAY" ] && [ "$SCREENSHOT_MENU_DELAY" -gt 0 ] && cmd="$cmd --delay $((SCREENSHOT_MENU_DELAY * 1000))"

  case "$mode" in
    full) cmd="$cmd --fullscreen" ;;
    window) cmd="$cmd --activewindow" ;;
    region) cmd="$cmd --region" ;;
    monitor) cmd="$cmd --current" ;;
  esac

  cmd="$cmd --background --nonotify"

  if [ "$output" = "clipboard" ]; then
    eval "$cmd --copy-image"
  else
    eval "$cmd --output \"$output\""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Take screenshot with grim (Wayland)
__capture_with_grim() {
  local mode="$1"
  local output="$2"
  local cmd="grim"

  [ "$SCREENSHOT_MENU_SHOW_CURSOR" = "true" ] && cmd="$cmd -c"
  [ -n "$SCREENSHOT_MENU_QUALITY" ] && cmd="$cmd -q $SCREENSHOT_MENU_QUALITY"

  [ -n "$SCREENSHOT_MENU_DELAY" ] && [ "$SCREENSHOT_MENU_DELAY" -gt 0 ] && sleep "$SCREENSHOT_MENU_DELAY"

  case "$mode" in
    full) cmd="$cmd" ;;
    window)
      if __cmd_exists swaymsg; then
        local geometry=$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' 2>/dev/null)
        [ -n "$geometry" ] && cmd="$cmd -g \"$geometry\""
      fi
      ;;
    region)
      if __cmd_exists slurp; then
        local geometry=$(slurp 2>/dev/null)
        [ -n "$geometry" ] && cmd="$cmd -g \"$geometry\""
      else
        printf_red "slurp is required for region selection with grim"
        return 1
      fi
      ;;
    monitor)
      local monitor="$3"
      [ -n "$monitor" ] && cmd="$cmd -o \"$monitor\""
      ;;
  esac

  if [ "$output" = "clipboard" ]; then
    if __cmd_exists wl-copy; then
      eval "$cmd -" | wl-copy -t image/png
    else
      printf_red "wl-copy is required for clipboard operations on Wayland"
      return 1
    fi
  else
    eval "$cmd \"$output\""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Take screenshot with ImageMagick import
__capture_with_import() {
  local mode="$1"
  local output="$2"
  local cmd="import"

  [ -n "$SCREENSHOT_MENU_QUALITY" ] && cmd="$cmd -quality $SCREENSHOT_MENU_QUALITY"
  [ -n "$SCREENSHOT_MENU_DELAY" ] && [ "$SCREENSHOT_MENU_DELAY" -gt 0 ] && sleep "$SCREENSHOT_MENU_DELAY"

  case "$mode" in
    full) cmd="$cmd -window root" ;;
    window) cmd="$cmd" ;; # Click on window
    region) cmd="$cmd" ;;  # Draw region
    monitor) cmd="$cmd -window root" ;;
  esac

  if [ "$output" = "clipboard" ]; then
    local temp_file="/tmp/screenshot_$$.png"
    eval "$cmd \"$temp_file\""
    if [ -f "$temp_file" ]; then
      if [ "$(__detect_display_server)" = "wayland" ] && __cmd_exists wl-copy; then
        wl-copy < "$temp_file"
      else
        xclip -selection clipboard -t image/png < "$temp_file"
      fi
      rm -f "$temp_file"
    fi
  else
    eval "$cmd \"$output\""
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Universal screenshot capture function
__capture_screenshot() {
  local mode="${1:-full}"
  local output="${2:-$SCREENSHOT_MENU_SAVE_DIR/$(__get_timestamp).png}"
  local tool="${3:-$(__detect_screenshot_tool)}"
  local monitor="$4"

  if [ -z "$tool" ]; then
    printf_red "No screenshot tool available"
    return 1
  fi

  printf_cyan "Using $tool for capture..."

  case "$tool" in
    maim) __capture_with_maim "$mode" "$output" "$monitor" ;;
    scrot) __capture_with_scrot "$mode" "$output" "$monitor" ;;
    flameshot) __capture_with_flameshot "$mode" "$output" "$monitor" ;;
    gnome-screenshot) __capture_with_gnome_screenshot "$mode" "$output" "$monitor" ;;
    spectacle) __capture_with_spectacle "$mode" "$output" "$monitor" ;;
    grim) __capture_with_grim "$mode" "$output" "$monitor" ;;
    import) __capture_with_import "$mode" "$output" "$monitor" ;;
    *)
      printf_red "Unknown screenshot tool: $tool"
      return 1
      ;;
  esac

  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Copy to clipboard
__copy_to_clipboard() {
  local file="$1"

  if [ ! -f "$file" ]; then
    printf_red "File not found: $file"
    return 1
  fi

  if [ "$(__detect_display_server)" = "wayland" ]; then
    if __cmd_exists wl-copy; then
      wl-copy -t image/png < "$file"
      return $?
    fi
  else
    if __cmd_exists xclip; then
      xclip -selection clipboard -t image/png < "$file"
      return $?
    elif __cmd_exists xsel; then
      xsel -b -i < "$file"
      return $?
    fi
  fi

  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Open screenshot in viewer
__open_screenshot() {
  local file="$1"

  [ ! -f "$file" ] && return 1

  if __cmd_exists xdg-open; then
    xdg-open "$file" 2>/dev/null &
  elif __cmd_exists open; then
    open "$file" 2>/dev/null &
  elif __cmd_exists feh; then
    feh "$file" 2>/dev/null &
  elif __cmd_exists eog; then
    eog "$file" 2>/dev/null &
  elif __cmd_exists gwenview; then
    gwenview "$file" 2>/dev/null &
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Upload to image service
__upload_screenshot() {
  local file="$1"
  local service="${2:-$SCREENSHOT_MENU_UPLOAD_SERVICE}"

  [ ! -f "$file" ] && return 1

  case "$service" in
    imgur)
      if __cmd_exists curl; then
        local response=$(curl -s -X POST -H "Authorization: Client-ID c9a6efb3d7932fd" \
          -F "image=@$file" https://api.imgur.com/3/upload)
        local url=$(echo "$response" | grep -oE '"link":"[^"]*' | cut -d'"' -f4 | sed 's/\\//g')
        if [ -n "$url" ]; then
          echo "$url"
          if [ "$(__detect_display_server)" = "wayland" ] && __cmd_exists wl-copy; then
            echo -n "$url" | wl-copy
          elif __cmd_exists xclip; then
            echo -n "$url" | xclip -selection clipboard
          fi
          __notifications "Screenshot uploaded: $url"
          return 0
        fi
      fi
      ;;
    0x0)
      if __cmd_exists curl; then
        local url=$(curl -s -F "file=@$file" https://0x0.st)
        if [ -n "$url" ]; then
          echo "$url"
          if [ "$(__detect_display_server)" = "wayland" ] && __cmd_exists wl-copy; then
            echo -n "$url" | wl-copy
          elif __cmd_exists xclip; then
            echo -n "$url" | xclip -selection clipboard
          fi
          __notifications "Screenshot uploaded: $url"
          return 0
        fi
      fi
      ;;
    *)
      return 1
      ;;
  esac

  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Annotate screenshot
__annotate_screenshot() {
  local file="$1"

  [ ! -f "$file" ] && return 1

  if __cmd_exists flameshot; then
    flameshot gui --path "$(dirname "$file")" --accept-on-select
  elif __cmd_exists ksnip; then
    ksnip "$file"
  elif __cmd_exists gimp; then
    gimp "$file" 2>/dev/null &
  elif __cmd_exists kolourpaint; then
    kolourpaint "$file" 2>/dev/null &
  else
    __open_screenshot "$file"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Main interactive menu
__interactive_menu() {
  local mode dest delay cursor format quality

  # Select capture mode
  local modes=(
    "🖥️  Fullscreen"
    "🪟  Active Window"
    "✂️  Selected Region"
    "🖵  Specific Monitor"
    "⚡  Quick to Clipboard"
    "✏️  Capture & Annotate"
    "🎬  Record Screen"
  )

  mode=$(printf '%s\n' "${modes[@]}" | __dmenu_run "Capture Mode")
  [ -z "$mode" ] && return 1

  case "$mode" in
    *"Fullscreen"*) mode="full" ;;
    *"Active Window"*) mode="window" ;;
    *"Selected Region"*) mode="region" ;;
    *"Specific Monitor"*)
      mode="monitor"
      local monitors=($(__get_monitors))
      if [ ${#monitors[@]} -gt 0 ]; then
        monitor=$(printf '%s\n' "${monitors[@]}" | __dmenu_run "Select Monitor")
        [ -z "$monitor" ] && return 1
      fi
      ;;
    *"Quick"*)
      __quick_capture
      return $?
      ;;
    *"Annotate"*)
      mode="region"
      ANNOTATE="true"
      ;;
    *"Record"*)
      __record_screen
      return $?
      ;;
    *) return 1 ;;
  esac

  # Select destination
  local destinations=(
    "💾  Save to File"
    "📋  Copy to Clipboard"
    "💾📋  Both File & Clipboard"
    "☁️  Upload to Cloud"
  )

  dest=$(printf '%s\n' "${destinations[@]}" | __dmenu_run "Destination")
  [ -z "$dest" ] && return 1

  # Advanced options
  local advanced=$(printf "No\nYes" | __dmenu_run "Advanced Options?")

  if [ "$advanced" = "Yes" ]; then
    # Delay
    delay=$(printf "0\n1\n2\n3\n5\n10" | __dmenu_run "Delay (seconds)")
    SCREENSHOT_MENU_DELAY="${delay:-0}"

    # Cursor
    cursor=$(printf "Hide Cursor\nShow Cursor" | __dmenu_run "Cursor")
    [ "$cursor" = "Show Cursor" ] && SCREENSHOT_MENU_SHOW_CURSOR="true" || SCREENSHOT_MENU_SHOW_CURSOR="false"

    # Format
    format=$(printf "png\njpg\nwebp" | __dmenu_run "Format")
    SCREENSHOT_MENU_DEFAULT_FORMAT="${format:-png}"

    # Quality (for lossy formats)
    if [ "$format" = "jpg" ] || [ "$format" = "webp" ]; then
      quality=$(printf "100\n90\n80\n70\n60\n50" | __dmenu_run "Quality")
      SCREENSHOT_MENU_QUALITY="${quality:-90}"
    fi
  fi

  # Execute capture
  local filename="$(__get_timestamp).${SCREENSHOT_MENU_DEFAULT_FORMAT}"
  local filepath="$SCREENSHOT_MENU_SAVE_DIR/$filename"

  case "$dest" in
    *"File"*)
      __capture_screenshot "$mode" "$filepath" "" "$monitor"
      if [ $? -eq 0 ] && [ -f "$filepath" ]; then
        __play_sound
        __notifications "Screenshot saved: $filename"
        [ "$SCREENSHOT_MENU_OPEN_AFTER" = "true" ] && __open_screenshot "$filepath"
        [ "$ANNOTATE" = "true" ] && __annotate_screenshot "$filepath"
      else
        __notifications "Failed to capture screenshot" "error"
      fi
      ;;
    *"Clipboard"*)
      __capture_screenshot "$mode" "clipboard" "" "$monitor"
      if [ $? -eq 0 ]; then
        __play_sound
        __notifications "Screenshot copied to clipboard"
      else
        __notifications "Failed to capture screenshot" "error"
      fi
      ;;
    *"Both"*)
      __capture_screenshot "$mode" "$filepath" "" "$monitor"
      if [ $? -eq 0 ] && [ -f "$filepath" ]; then
        __copy_to_clipboard "$filepath"
        __play_sound
        __notifications "Screenshot saved and copied: $filename"
        [ "$SCREENSHOT_MENU_OPEN_AFTER" = "true" ] && __open_screenshot "$filepath"
        [ "$ANNOTATE" = "true" ] && __annotate_screenshot "$filepath"
      else
        __notifications "Failed to capture screenshot" "error"
      fi
      ;;
    *"Upload"*)
      __capture_screenshot "$mode" "$filepath" "" "$monitor"
      if [ $? -eq 0 ] && [ -f "$filepath" ]; then
        __play_sound
        __upload_screenshot "$filepath"
        [ "$SCREENSHOT_MENU_OPEN_AFTER" = "true" ] && __open_screenshot "$filepath"
      else
        __notifications "Failed to capture screenshot" "error"
      fi
      ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Quick capture to clipboard
__quick_capture() {
  __capture_screenshot "region" "clipboard"
  if [ $? -eq 0 ]; then
    __play_sound
    __notifications "Screenshot copied to clipboard"
  else
    __notifications "Failed to capture screenshot" "error"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Screen recording
__record_screen() {
  if __cmd_exists simplescreenrecorder; then
    simplescreenrecorder &
  elif __cmd_exists obs; then
    obs &
  elif __cmd_exists kazam; then
    kazam &
  elif __cmd_exists peek; then
    peek &
  elif __cmd_exists ffmpeg; then
    local output="$SCREENSHOT_MENU_SAVE_DIR/recording_$(__get_timestamp).mp4"
    __notifications "Recording started. Press Ctrl+C to stop."
    if [ "$(__detect_display_server)" = "wayland" ]; then
      wf-recorder -f "$output"
    else
      ffmpeg -f x11grab -i "$DISPLAY" -codec:v libx264 -preset ultrafast "$output"
    fi
    __notifications "Recording saved: $(basename "$output")"
  else
    __notifications "No screen recording tool available" "error"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Direct command execution
__execute_direct() {
  local mode="${1:-full}"
  local filename="$(__get_timestamp).${SCREENSHOT_MENU_DEFAULT_FORMAT}"
  local filepath="$SCREENSHOT_MENU_SAVE_DIR/$filename"

  case "$mode" in
    full|window|region|monitor)
      if [ "$SCREENSHOT_MENU_DESTINATION" = "clipboard" ]; then
        __capture_screenshot "$mode" "clipboard"
      elif [ "$SCREENSHOT_MENU_DESTINATION" = "both" ]; then
        __capture_screenshot "$mode" "$filepath"
        [ -f "$filepath" ] && __copy_to_clipboard "$filepath"
      else
        __capture_screenshot "$mode" "$filepath"
      fi

      if [ $? -eq 0 ]; then
        __play_sound
        if [ "$SCREENSHOT_MENU_DESTINATION" = "clipboard" ]; then
          __notifications "Screenshot copied to clipboard"
        else
          __notifications "Screenshot saved: $filename"
          [ "$SCREENSHOT_MENU_OPEN_AFTER" = "true" ] && __open_screenshot "$filepath"
          [ "$SCREENSHOT_MENU_UPLOAD" = "true" ] && __upload_screenshot "$filepath"
        fi
      else
        __notifications "Failed to capture screenshot" "error"
        return 1
      fi
      ;;
    quick)
      __quick_capture
      ;;
    annotate)
      __capture_screenshot "region" "$filepath"
      [ -f "$filepath" ] && __annotate_screenshot "$filepath"
      ;;
    record)
      __record_screen
      ;;
    *)
      __interactive_menu
      ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
SCREENSHOT_MENU_CONFIG_FILE="${SCREENSHOT_MENU_CONFIG_FILE:-settings.conf}"
SCREENSHOT_MENU_CONFIG_DIR="${SCREENSHOT_MENU_CONFIG_DIR:-$HOME/.config/myscripts/screenshot-menu}"
SCREENSHOT_MENU_CONFIG_BACKUP_DIR="${SCREENSHOT_MENU_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/screenshot-menu/backups}"
SCREENSHOT_MENU_LOG_DIR="${SCREENSHOT_MENU_LOG_DIR:-$HOME/.local/log/screenshot-menu}"
SCREENSHOT_MENU_TEMP_DIR="${SCREENSHOT_MENU_TEMP_DIR:-$HOME/.local/tmp/system_scripts/screenshot-menu}"
SCREENSHOT_MENU_CACHE_DIR="${SCREENSHOT_MENU_CACHE_DIR:-$HOME/.cache/screenshot-menu}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SCREENSHOT_MENU_OUTPUT_COLOR_1="${SCREENSHOT_MENU_OUTPUT_COLOR_1:-33}"
SCREENSHOT_MENU_OUTPUT_COLOR_2="${SCREENSHOT_MENU_OUTPUT_COLOR_2:-5}"
SCREENSHOT_MENU_OUTPUT_COLOR_GOOD="${SCREENSHOT_MENU_OUTPUT_COLOR_GOOD:-2}"
SCREENSHOT_MENU_OUTPUT_COLOR_ERROR="${SCREENSHOT_MENU_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SCREENSHOT_MENU_NOTIFY_ENABLED="${SCREENSHOT_MENU_NOTIFY_ENABLED:-yes}"
SCREENSHOT_MENU_GOOD_NAME="${SCREENSHOT_MENU_GOOD_NAME:-Screenshot}"
SCREENSHOT_MENU_ERROR_NAME="${SCREENSHOT_MENU_ERROR_NAME:-Error}"
SCREENSHOT_MENU_GOOD_MESSAGE="${SCREENSHOT_MENU_GOOD_MESSAGE:-Screenshot captured successfully}"
SCREENSHOT_MENU_ERROR_MESSAGE="${SCREENSHOT_MENU_ERROR_MESSAGE:-Failed to capture screenshot}"
SCREENSHOT_MENU_NOTIFY_CLIENT_NAME="${SCREENSHOT_MENU_NOTIFY_CLIENT_NAME:-$APPNAME}"
SCREENSHOT_MENU_NOTIFY_CLIENT_ICON="${SCREENSHOT_MENU_NOTIFY_CLIENT_ICON:-camera-photo}"
SCREENSHOT_MENU_NOTIFY_CLIENT_URGENCY="${SCREENSHOT_MENU_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
SCREENSHOT_MENU_SAVE_DIR="${SCREENSHOT_MENU_SAVE_DIR:-$HOME/Pictures/Screenshots}"
SCREENSHOT_MENU_DEFAULT_TOOL="${SCREENSHOT_MENU_DEFAULT_TOOL:-auto}"
SCREENSHOT_MENU_DEFAULT_FORMAT="${SCREENSHOT_MENU_DEFAULT_FORMAT:-png}"
SCREENSHOT_MENU_DEFAULT_QUALITY="${SCREENSHOT_MENU_DEFAULT_QUALITY:-90}"
SCREENSHOT_MENU_SHOW_CURSOR="${SCREENSHOT_MENU_SHOW_CURSOR:-false}"
SCREENSHOT_MENU_DEFAULT_DELAY="${SCREENSHOT_MENU_DEFAULT_DELAY:-0}"
SCREENSHOT_MENU_SOUND_ENABLED="${SCREENSHOT_MENU_SOUND_ENABLED:-true}"
SCREENSHOT_MENU_COPY_TO_CLIPBOARD="${SCREENSHOT_MENU_COPY_TO_CLIPBOARD:-true}"
SCREENSHOT_MENU_OPEN_AFTER="${SCREENSHOT_MENU_OPEN_AFTER:-false}"
SCREENSHOT_MENU_UPLOAD_SERVICE="${SCREENSHOT_MENU_UPLOAD_SERVICE:-none}"
SCREENSHOT_MENU_DMENU_BACKEND="${SCREENSHOT_MENU_DMENU_BACKEND:-auto}"
SCREENSHOT_MENU_FILENAME_FORMAT="${SCREENSHOT_MENU_FILENAME_FORMAT:-screenshot_%Y%m%d_%H%M%S}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE" ] && . "$SCREENSHOT_MENU_CONFIG_DIR/$SCREENSHOT_MENU_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$SCREENSHOT_MENU_LOG_DIR" ] || mkdir -p "$SCREENSHOT_MENU_LOG_DIR" |& __devnull
[ -d "$SCREENSHOT_MENU_TEMP_DIR" ] || mkdir -p "$SCREENSHOT_MENU_TEMP_DIR" |& __devnull
[ -d "$SCREENSHOT_MENU_CACHE_DIR" ] || mkdir -p "$SCREENSHOT_MENU_CACHE_DIR" |& __devnull
[ -d "$SCREENSHOT_MENU_SAVE_DIR" ] || mkdir -p "$SCREENSHOT_MENU_SAVE_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SCREENSHOT_MENU_TEMP_FILE="${SCREENSHOT_MENU_TEMP_FILE:-$(mktemp $SCREENSHOT_MENU_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
if builtin type -t __notifications | grep -q 'function'; then
  __notifications() {
    __notifications "$@"
  }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent,"
LONGOPTS+="delay:,cursor,no-cursor,quality:,format:,tool:,"
LONGOPTS+="clipboard,file,both,upload,no-sound,open"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="full window region monitor quick annotate record"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    SCREENSHOT_MENU_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    SCREENSHOT_MENU_CWD="$2"
    [ -d "$SCREENSHOT_MENU_CWD" ] || mkdir -p "$SCREENSHOT_MENU_CWD" |& __devnull
    shift 2
    ;;
  --delay)
    SCREENSHOT_MENU_DELAY="$2"
    shift 2
    ;;
  --cursor)
    SCREENSHOT_MENU_SHOW_CURSOR="true"
    shift 1
    ;;
  --no-cursor)
    SCREENSHOT_MENU_SHOW_CURSOR="false"
    shift 1
    ;;
  --quality)
    SCREENSHOT_MENU_QUALITY="$2"
    shift 2
    ;;
  --format)
    SCREENSHOT_MENU_DEFAULT_FORMAT="$2"
    shift 2
    ;;
  --tool)
    SCREENSHOT_MENU_DEFAULT_TOOL="$2"
    shift 2
    ;;
  --clipboard)
    SCREENSHOT_MENU_DESTINATION="clipboard"
    shift 1
    ;;
  --file)
    SCREENSHOT_MENU_DESTINATION="file"
    shift 1
    ;;
  --both)
    SCREENSHOT_MENU_DESTINATION="both"
    shift 1
    ;;
  --upload)
    SCREENSHOT_MENU_UPLOAD="true"
    shift 1
    ;;
  --no-sound)
    SCREENSHOT_MENU_NO_SOUND="true"
    shift 1
    ;;
  --open)
    SCREENSHOT_MENU_OPEN_AFTER="true"
    shift 1
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# SCREENSHOT_MENU_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# SCREENSHOT_MENU_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && SCREENSHOT_MENU_CWD="$1" && shift 1 || SCREENSHOT_MENU_CWD="${SCREENSHOT_MENU_CWD:-$PWD}"
SCREENSHOT_MENU_CWD="$(realpath "${SCREENSHOT_MENU_CWD:-$PWD}" 2>/dev/null)"
export SCREENSHOT_MENU_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
[ -d "$SCREENSHOT_MENU_SAVE_DIR" ] || mkdir -p "$SCREENSHOT_MENU_SAVE_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
if ! __detect_screenshot_tool >/dev/null 2>&1; then
  printf_red "No screenshot tool available. Please install one of:"
  printf_yellow "  X11: maim, scrot, flameshot, gnome-screenshot, spectacle, import"
  printf_yellow "  Wayland: grim (with slurp), flameshot, gnome-screenshot, spectacle"
  exit 3
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
  full|window|region|monitor|quick|annotate|record)
    __execute_direct "$1"
    ;;
  *)
    __interactive_menu
    ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh