#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208161737-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  search-menu --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Tuesday, Aug 16, 2022 17:37 EDT
# @@File             :  search-menu
# @@Description      :  Search various search engines
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208161737-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
SEARCH_MENU_REQUIRE_SUDO="${SEARCH_MENU_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE"
  fi
  [ -d "$SEARCH_MENU_CONFIG_DIR" ] || mkdir -p "$SEARCH_MENU_CONFIG_DIR"
  [ -d "$SEARCH_MENU_CONFIG_BACKUP_DIR" ] || mkdir -p "$SEARCH_MENU_CONFIG_BACKUP_DIR"
  [ -f "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE" ] &&
    cp -Rf "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE" "$SEARCH_MENU_CONFIG_BACKUP_DIR/$SEARCH_MENU_CONFIG_FILE.$$"
  cat <<EOF >"$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE"
# Settings for search-menu
SEARCH_MENU_BROWSER="${SEARCH_MENU_BROWSER:-}"
SEARCH_MENU_PROVIDER_URL="${SEARCH_MENU_PROVIDER_URL:-}"
SEARCH_MENU_PROVIDERS_LINKS="${SEARCH_MENU_PROVIDERS_LINKS:-}"
SEARCH_MENU_PROVIDERS_LOCAL_DIR="${SEARCH_MENU_PROVIDERS_LOCAL_DIR:-}"
SEARCH_MENU_PROVIDERS_GLOBAL_DIR="${SEARCH_MENU_PROVIDERS_GLOBAL_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SEARCH_MENU_OUTPUT_COLOR_1="${SEARCH_MENU_OUTPUT_COLOR_1:-}"
SEARCH_MENU_OUTPUT_COLOR_2="${SEARCH_MENU_OUTPUT_COLOR_2:-}"
SEARCH_MENU_OUTPUT_COLOR_GOOD="${SEARCH_MENU_OUTPUT_COLOR_GOOD:-}"
SEARCH_MENU_OUTPUT_COLOR_ERROR="${SEARCH_MENU_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SEARCH_MENU_NOTIFY_ENABLED="${SEARCH_MENU_NOTIFY_ENABLED:-}"
SEARCH_MENU_GOOD_NAME="${SEARCH_MENU_GOOD_NAME:-}"
SEARCH_MENU_ERROR_NAME="${SEARCH_MENU_ERROR_NAME:-}"
SEARCH_MENU_GOOD_MESSAGE="${SEARCH_MENU_GOOD_MESSAGE:-}"
SEARCH_MENU_ERROR_MESSAGE="${SEARCH_MENU_ERROR_MESSAGE:-}"
SEARCH_MENU_NOTIFY_CLIENT_NAME="${SEARCH_MENU_NOTIFY_CLIENT_NAME:-}"
SEARCH_MENU_NOTIFY_CLIENT_ICON="${SEARCH_MENU_NOTIFY_CLIENT_ICON:-}"
SEARCH_MENU_NOTIFY_CLIENT_URGENCY="${SEARCH_MENU_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "search-menu:  Search various search engines - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: search-menu [options] [commands]"
  __printf_line "*                               - Open interactive menu"
  __printf_line "development                     - Development tools (GitHub, GitLab, StackOverflow)"
  __printf_line "engines                         - Search engines (Google, DuckDuckGo, Brave)"
  __printf_line "news                            - News sources (Google News, Wikipedia, BBC, CNN)"
  __printf_line "media                           - Media platforms (YouTube, Reddit, Odysee)"
  __printf_line "os                              - OS documentation (Arch Wiki, Alpine Wiki)"
  __printf_line "packages                        - Package managers (Alpine, Arch, pkgs.org)"
  __printf_line "tech                            - Technical documentation (DevDocs, MDN, Docker Hub)"
  __printf_line "security                        - Security resources (CVE, Shodan, VirusTotal)"
  __printf_line "list [category]                 - List available search engines"
  __printf_line "search <engine> <query>         - Direct search without menu"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$SEARCH_MENU_REQUIRE_SUDO" = "yes" ] && [ -z "$SEARCH_MENU_REQUIRE_SUDO_RUN" ]; then
    export SEARCH_MENU_REQUIRE_SUDO="no"
    export SEARCH_MENU_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$SEARCH_MENU_TEMP_FILE" ] && rm -Rf "$SEARCH_MENU_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__gen_config_local() {
  [ -d "$SEARCH_MENU_PROVIDERS_LOCAL_DIR" ] || mkdir -p "$SEARCH_MENU_PROVIDERS_LOCAL_DIR"
  [ -d "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR" ] || mkdir -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR"
  __providers_development
  __providers_packages
  __providers_engines
  __providers_media
  __providers_news
  __providers_os
  __providers_tech
  __providers_security
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__open_browser() {
  local url="$1"

  if [ -z "$SEARCH_MENU_BROWSER" ]; then
    printf_red "❌ No browser configured. Please set SEARCH_MENU_BROWSER in config."
    return 1
  fi

  if [ -n "$DISPLAY" ] && [ -z "$SSH_CONNECTION" ]; then
    "$SEARCH_MENU_BROWSER" "$url" &>/dev/null &
  else
    "$SEARCH_MENU_BROWSER" "$url" 2>/dev/null
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_development() {
  local exitCode=0 confName="development"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://github.com/search?q="
websearch[github]="https://github.com/search?q="
websearch[gitlab]="https://gitlab.com/search?search="
websearch[googleOpenSource]="https://opensource.google/projects/search?q="
websearch[sourceforge]="https://sourceforge.net/directory/?q="
websearch[stackoverflow]="https://stackoverflow.com/search?q="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_engines() {
  local exitCode=0 confName="engines"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://scour.li/search?q="
websearch[CasjaysDev]="https://scour.li/search?q="
websearch[duckduckgo]="https://duckduckgo.com/?q="
websearch[google]="https://www.google.com/search?q="
websearch[brave]="https://search.brave.com/search?q="
websearch[bing]="https://www.bing.com/search?q="
websearch[startpage]="https://www.startpage.com/sp/search?query="
websearch[searx]="https://searx.be/search?q="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_news() {
  local exitCode=0 confName="news"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://news.google.com/search?q="
websearch[wikipedia]="https://en.wikipedia.org/w/index.php?search="
websearch[wiktionary]="https://en.wiktionary.org/w/index.php?search="
websearch[googlenews]="https://news.google.com/search?q="
websearch[hackernews]="https://hn.algolia.com/?q="
websearch[cnn]="https://www.cnn.com/search?q="
websearch[bbcnews]="https://www.bbc.co.uk/search?q="
websearch[reuters]="https://www.reuters.com/site-search/?query="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_media() {
  local exitCode=0 confName="media"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://www.youtube.com/results?search_query="
websearch[reddit]="https://www.reddit.com/search/?q="
websearch[odysee]="https://odysee.com/$/search?q="
websearch[youtube]="https://www.youtube.com/results?search_query="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_os() {
  local exitCode=0 confName="os"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://wiki.archlinux.org/index.php?search="
websearch[archwiki]="https://wiki.archlinux.org/index.php?search="
websearch[alpinewiki]="https://wiki.alpinelinux.org/w/index.php?title=Special%3ASearch&wprov=acrw1&search="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_packages() {
  local exitCode=0 confName="packages"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://pkgs.alpinelinux.org/packages?branch=edge&repo=&arch=x86_64&maintainer=&name="
websearch[alpine]="https://pkgs.alpinelinux.org/packages?branch=edge&repo=&arch=x86_64&maintainer=&name="
websearch[arch]="https://archlinux.org/packages/?sort=&q="
websearch[pkgs]="https://pkgs.org/search/?q="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__config_message() {
  local confName="$1"
  local provider="$2"
  local url="$3"
  local exitCode=0
  [ -n "$3" ] && add_provider="$(printf '%s\n' 'websearch['$provider']="'$url'"')"

  if [ -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    printf_blue "Created provider: providers/global/$confName.conf"
    exitCode=0
  else
    printf_red "Failed to create the config file: providers/global/$confName.conf"
    exitCode=1
    return $exitCode
  fi

  if [ ! -f "$SEARCH_MENU_PROVIDERS_LOCAL_DIR/$confName.conf" ]; then
    cat <<EOF >"$SEARCH_MENU_PROVIDERS_LOCAL_DIR/$confName.conf"
# Search Providers local - $confName
# websearch[CasjaysDev]="https://scour.li/search?q="
$add_provider
EOF
    if [ -f "$SEARCH_MENU_PROVIDERS_LOCAL_DIR/$confName.conf" ]; then
      printf_blue "Created provider: providers/local/$confName.conf"
      exitCode=0
    else
      printf_red "Failed to create local config file: providers/local/$confName.conf"
      exitCode=1
    fi
  fi

  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_tech() {
  local exitCode=0 confName="tech"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://devdocs.io/#q="
websearch[devdocs]="https://devdocs.io/#q="
websearch[mdn]="https://developer.mozilla.org/en-US/search?q="
websearch[dockerhub]="https://hub.docker.com/search?q="
websearch[npmjs]="https://www.npmjs.com/search?q="
websearch[pypi]="https://pypi.org/search/?q="
websearch[crates]="https://crates.io/search?q="
websearch[gopackages]="https://pkg.go.dev/search?q="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__providers_security() {
  local exitCode=0 confName="security"
  if [ ! -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" ]; then
    cat <<EOF | tee -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confName.conf" &>/dev/null
# Search Providers - $confName
websearch[default-$confName]="https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query="
websearch[cve]="https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query="
websearch[exploit-db]="https://www.exploit-db.com/search?q="
websearch[shodan]="https://www.shodan.io/search?query="
websearch[virustotal]="https://www.virustotal.com/gui/search/"
websearch[cvedetails]="https://www.cvedetails.com/vulnerability-search.php?f=1&search="

EOF
    __config_message "$confName"
    return $?
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__dmenu_run() {
  # Suppress fontconfig warnings by initializing if needed
  export FONTCONFIG_FILE="${FONTCONFIG_FILE:-/etc/fonts/fonts.conf}"

  if __cmd_exists rofi; then
    rofi -theme purple -dmenu "$@" 2>/dev/null
  elif __cmd_exists dmenu; then
    dmenu "$@" 2>/dev/null
  elif __cmd_exists whiptail; then
    __whiptail_fallback "$@"
  else
    __cli_fallback "$@"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__whiptail_fallback() {
  local options_file=$(mktemp)
  local prompt="Search Menu"
  local -a menu_items=()
  local count=1

  # Extract prompt from arguments
  while [ $# -gt 0 ]; do
    case "$1" in
    -p)
      prompt="$2"
      shift 2
      ;;
    *) shift ;;
    esac
  done

  # Read options from stdin
  cat >"$options_file"

  # Build whiptail menu array
  while IFS= read -r line; do
    [ -n "$line" ] && menu_items+=("$count" "$line")
    ((count++))
  done <"$options_file"

  if [ ${#menu_items[@]} -eq 0 ]; then
    rm -f "$options_file"
    return 1
  fi

  local choice
  choice=$(whiptail --title "Search Menu" --menu "$prompt" 20 70 10 "${menu_items[@]}" 3>&1 1>&2 2>&3 2>/dev/null)

  if [ -n "$choice" ]; then
    sed -n "${choice}p" "$options_file"
    rm -f "$options_file"
    return 0
  else
    rm -f "$options_file"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__cli_fallback() {
  local prompt="Search Menu"
  local -a options=()

  # Extract prompt from arguments
  while [ $# -gt 0 ]; do
    case "$1" in
    -p)
      prompt="$2"
      shift 2
      ;;
    *) shift ;;
    esac
  done

  # Load options from stdin
  while IFS= read -r line; do
    [ -n "$line" ] && options+=("$line")
  done

  if [ ${#options[@]} -eq 0 ]; then
    printf_red "❌ No options available"
    return 1
  fi

  # Display menu
  printf_blue "$prompt"
  local i=1
  for option in "${options[@]}"; do
    printf_cyan "$i) $option"
    ((i++))
  done

  # Get user choice
  local choice
  printf_read_input "Enter choice (1-${#options[@]}) or 'q' to quit: " "10" "choice"

  case "$choice" in
  q | quit | exit) return 1 ;;
  '' | *[!0-9]*)
    printf_red "❌ Invalid choice"
    return 1
    ;;
  *)
    if [ "$choice" -ge 1 ] && [ "$choice" -le "${#options[@]}" ]; then
      echo "${options[$((choice - 1))]}"
      return 0
    else
      printf_red "❌ Choice out of range"
      return 1
    fi
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__cli_menu() {
  local options_file="$1"
  local prompt="$2"
  local -a options=()
  local count=1

  # Load options into array
  while IFS= read -r line; do
    options+=("$line")
  done <"$options_file"

  if [ ${#options[@]} -eq 0 ]; then
    printf_red "❌ No options available"
    return 1
  fi

  # Display menu
  printf_blue "$prompt"
  local i=1
  for option in "${options[@]}"; do
    printf_cyan "$i) $option"
    ((i++))
  done

  # Get user choice
  local choice
  printf_read_input "Enter choice (1-${#options[@]}) or 'q' to quit: " "10" "choice"

  case "$choice" in
  q | quit | exit) return 1 ;;
  '' | *[!0-9]*)
    printf_red "❌ Invalid choice"
    return 1
    ;;
  *)
    if [ "$choice" -ge 1 ] && [ "$choice" -le "${#options[@]}" ]; then
      echo "${options[$((choice - 1))]}"
    else
      printf_red "❌ Choice out of range"
      return 1
    fi
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_search_menu() {
  local history_file="$SEARCH_MENU_HISTORY_FILE"
  local history_dir="$(dirname "$SEARCH_MENU_HISTORY_FILE")"
  local engine="" query="" term="" old_search=()

  # Ensure history directory exists
  [ -d "$history_dir" ] || mkdir -p "$history_dir"

  # Load all provider configs
  for globalConfigfile in "${SEARCH_MENU_PROVIDERS_GLOBAL_DIR}"/*.conf "${SEARCH_MENU_PROVIDERS_LOCAL_DIR}"/*.conf; do
    [ -f "$globalConfigfile" ] && . "$globalConfigfile" || true
  done

  # Get available engines as proper arrays
  local -a defaults_array=()
  local -a search_array=()

  for key in "${!websearch[@]}"; do
    if [[ "$key" =~ ^default- ]]; then
      defaults_array+=("$key")
    else
      search_array+=("$key")
    fi
  done

  # Engine selection
  while [ -z "$engine" ]; do
    engine=$(printf '%s\n' "cancel" "${defaults_array[@]}" "${search_array[@]}" | __dmenu_run -i -l 20 -p 'Choose search engine:' "$@" || false)
    url="${websearch["${engine:-default}"]}"
    [ "$engine" = "cancel" ] && exit 1
  done

  # Load search history
  [ -f "$history_file" ] && mapfile -t old_search < <(head -n15 "$history_file")

  # Query input
  while [ -z "$query" ]; do
    query="$(printf '%s\n' "cancel" "${old_search[@]}" | __dmenu_run -i -l 20 -p 'Enter search query:' "$@" || false)"
    [ "$query" = "cancel" ] && exit 1
  done

  # Update history (only if query is not empty)
  if [ -n "$query" ] && [ "$query" != "cancel" ]; then
    {
      echo "$query"
      [ -f "$history_file" ] && head -n14 "$history_file"
    } | awk '!seen[$0]++' >"$history_file.tmp" && mv "$history_file.tmp" "$history_file"
  fi

  # Execute search
  term="$url${query// /%20}"
  __open_browser "$term" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__list_engines() {
  local category="${1:-all}"

  # Load all provider configs
  for globalConfigfile in "${SEARCH_MENU_PROVIDERS_GLOBAL_DIR}"/*.conf "${SEARCH_MENU_PROVIDERS_LOCAL_DIR}"/*.conf; do
    [ -f "$globalConfigfile" ] && . "$globalConfigfile" || true
  done

  printf_blue "🔍 Available search engines:"

  if [ "$category" = "all" ]; then
    for key in "${!websearch[@]}"; do
      if [[ "$key" =~ ^default- ]]; then
        printf_green "  📌 $key (default)"
      else
        printf_cyan "  🔍 $key"
      fi
    done
  else
    # Show engines for specific category
    for key in "${!websearch[@]}"; do
      if [[ "$key" =~ ^default-$category ]] || [[ "$key" =~ $category ]]; then
        printf_cyan "  🔍 $key: ${websearch[$key]}"
      fi
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__direct_search() {
  local engine="$1"
  local query="$2"

  if [ -z "$engine" ] || [ -z "$query" ]; then
    printf_red "❌ Usage: search-menu search <engine> <query>"
    printf_cyan "Example: search-menu search google 'bash scripting'"
    return 1
  fi

  # Load all provider configs
  for globalConfigfile in "${SEARCH_MENU_PROVIDERS_GLOBAL_DIR}"/*.conf "${SEARCH_MENU_PROVIDERS_LOCAL_DIR}"/*.conf; do
    [ -f "$globalConfigfile" ] && . "$globalConfigfile" || true
  done

  local url="${websearch["$engine"]}"

  if [ -z "$url" ]; then
    printf_red "❌ Search engine '$engine' not found"
    printf_cyan "Available engines:"
    __list_engines
    return 1
  fi

  printf_blue "🔍 Searching $engine for: $query"
  local term="$url${query// /%20}"
  __open_browser "$term" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__selector() {
  confFile="$1"
  default_url=""
  provider="default"
  dirLocal="$SEARCH_MENU_PROVIDERS_LOCAL_DIR"
  dirGlobal="$SEARCH_MENU_PROVIDERS_GLOBAL_DIR"
  fileImport="$SEARCH_MENU_TEMP_FILE.conf"
  [ "$confFile" = " " ] && shift 1
  [ "$confFile" = "all" ] && shift 1
  if [ "$confFile" = "default" ]; then
    shift 1
    default_url="${SEARCH_MENU_PROVIDER_URL// /}"
  elif [ -f "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR/$confFile.conf" ]; then
    shift 1
    provider="${2:-$provider}"
    cat "$dirGlobal/$confFile.conf" "$dirLocal/$confFile.conf" | sed 's|default-'$confFile'|default|g' | grep -Ev '^$|#' | grep '^' >"$fileImport" || rm -Rf "$fileImport"
  else
    cat "$dirGlobal"/* "$dirLocal"/* | grep -Ev '^$|#' | grep '^' >"$fileImport" || rm -Rf "$fileImport"
    [ "$provider" = "default" ] || provider="${2:-$provider}"
  fi
  [ -f "$fileImport" ] && . "$fileImport"
  if [ "$SEARCH_MENU_SHOW_PROVIDERS" ]; then
    search="$(printf '%s\n' "${!websearch[@]}" | grep -v 'default-*' | sort -u | tr ' ' '\n' | grep '^')"
    default="$(printf '%s\n' "${!websearch[@]}" | grep 'default-*' | sort -u | tr ' ' '\n' | sed 's|^default-||g' | grep '^')"
    printf_cyan "$APPNAME options:"
    printf '%s\n' "${default[@]}" | printf_column "3"
    printf_cyan "$APPNAME engines:"
    printf '%s\n' "${search[@]}" | printf_column "$SEARCH_MENU_OUTPUT_COLOR_2"
    exit
  else
    [ $# -eq 1 ] && query="${*:-}" && shift $#
    [ $# -ge 2 ] && engine="${1:-}" && shift 1 && query="${*:-}" && shift $#
    url="${websearch["${engine:-$provider}"]}"
    [ -n "$query" ] || term=""
    [ -n "$url" ] && mess_def="" || url="$SEARCH_MENU_PROVIDER_URL"
    term="${url:-$default_url}${query// /%20}"
    [ -n "$url" ] && [ -n "$query" ] || mess_def="Opening $url"
    __notifications "${mess_def:-Searching $url for $query}"
    SEND_NOTIFICATION="no" __open_browser "${term:-$url}" 2>/dev/null
  fi
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
SEARCH_MENU_CONFIG_FILE="${SEARCH_MENU_CONFIG_FILE:-settings.conf}"
SEARCH_MENU_CONFIG_DIR="${SEARCH_MENU_CONFIG_DIR:-$HOME/.config/myscripts/search-menu}"
SEARCH_MENU_CONFIG_BACKUP_DIR="${SEARCH_MENU_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/search-menu/backups}"
SEARCH_MENU_LOG_DIR="${SEARCH_MENU_LOG_DIR:-$HOME/.local/log/search-menu}"
SEARCH_MENU_TEMP_DIR="${SEARCH_MENU_TEMP_DIR:-$HOME/.local/tmp/system_scripts/search-menu}"
SEARCH_MENU_CACHE_DIR="${SEARCH_MENU_CACHE_DIR:-$HOME/.cache/search-menu}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SEARCH_MENU_OUTPUT_COLOR_1="${SEARCH_MENU_OUTPUT_COLOR_1:-33}"
SEARCH_MENU_OUTPUT_COLOR_2="${SEARCH_MENU_OUTPUT_COLOR_2:-5}"
SEARCH_MENU_OUTPUT_COLOR_GOOD="${SEARCH_MENU_OUTPUT_COLOR_GOOD:-2}"
SEARCH_MENU_OUTPUT_COLOR_ERROR="${SEARCH_MENU_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SEARCH_MENU_NOTIFY_ENABLED="${SEARCH_MENU_NOTIFY_ENABLED:-yes}"
SEARCH_MENU_GOOD_NAME="${SEARCH_MENU_GOOD_NAME:-Great:}"
SEARCH_MENU_ERROR_NAME="${SEARCH_MENU_ERROR_NAME:-Error:}"
SEARCH_MENU_GOOD_MESSAGE="${SEARCH_MENU_GOOD_MESSAGE:-No errors reported}"
SEARCH_MENU_ERROR_MESSAGE="${SEARCH_MENU_ERROR_MESSAGE:-Errors were reported}"
SEARCH_MENU_NOTIFY_CLIENT_NAME="${SEARCH_MENU_NOTIFY_CLIENT_NAME:-$APPNAME}"
SEARCH_MENU_NOTIFY_CLIENT_ICON="${SEARCH_MENU_NOTIFY_CLIENT_ICON:-notification-new}"
SEARCH_MENU_NOTIFY_CLIENT_URGENCY="${SEARCH_MENU_NOTIFY_CLIENT_URGENCY:-normal}"
SEARCH_MENU_PROVIDERS_LOCAL_DIR="${SEARCH_MENU_PROVIDERS_LOCAL_DIR:-$SEARCH_MENU_CONFIG_DIR/providers/local}"
SEARCH_MENU_PROVIDERS_GLOBAL_DIR="${SEARCH_MENU_PROVIDERS_GLOBAL_DIR:-$SEARCH_MENU_CONFIG_DIR/providers/global}"
SEARCH_MENU_PROVIDERS_LINKS="${SEARCH_MENU_PROVIDERS_LINKS:-$SEARCH_MENU_CONFIG_DIR/providers/links.conf}"
SEARCH_MENU_HISTORY_FILE="${SEARCH_MENU_HISTORY_FILE:-$SEARCH_MENU_CONFIG_DIR/history.conf}"
SEARCH_MENU_PROVIDER_URL="${SEARCH_MENU_PROVIDER_URL:-https://scour.li/search?q=}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
SEARCH_MENU_BROWSER="${SEARCH_MENU_BROWSER:-$({ __cmd_exists mybrowser && echo "mybrowser" || false; } || { [ -n "${BROWSER:-$MYBROWSER}" ] && echo "${BROWSER:-$MYBROWSER}" || false; } || echo '')}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE" ] && . "$SEARCH_MENU_CONFIG_DIR/$SEARCH_MENU_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$SEARCH_MENU_LOG_DIR" ] || mkdir -p "$SEARCH_MENU_LOG_DIR" |& __devnull
[ -d "$SEARCH_MENU_TEMP_DIR" ] || mkdir -p "$SEARCH_MENU_TEMP_DIR" |& __devnull
[ -d "$SEARCH_MENU_CACHE_DIR" ] || mkdir -p "$SEARCH_MENU_CACHE_DIR" |& __devnull
[ -d "$SEARCH_MENU_PROVIDERS_LOCAL_DIR" ] || mkdir -p "$SEARCH_MENU_PROVIDERS_LOCAL_DIR" |& __devnull
[ -d "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR" ] || mkdir -p "$SEARCH_MENU_PROVIDERS_GLOBAL_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - -
SEARCH_MENU_TEMP_FILE="${SEARCH_MENU_TEMP_FILE:-$(mktemp $SEARCH_MENU_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$SEARCH_MENU_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$SEARCH_MENU_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$SEARCH_MENU_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$SEARCH_MENU_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$SEARCH_MENU_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$SEARCH_MENU_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",providers"
# - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="default all development engines news media os packages tech security list search "
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LIST="default github gitlab googleOpenSource sourceforge stackoverflow scour duckduckgo google brave bing startpage searx "
LIST+="wikipedia wiktionary googlenews hackernews cnn bbcnews reuters reddit odysee youtube archwiki alpinewiki alpine arch pkgs "
LIST+="devdocs mdn dockerhub npmjs pypi crates gopackages cve exploit-db shodan virustotal cvedetails"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    SEARCH_MENU_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    SEARCH_MENU_CWD="$2"
    #[ -d "$SEARCH_MENU_CWD" ] || mkdir -p "$SEARCH_MENU_CWD" |& __devnull
    shift 2
    ;;
  --providers)
    shift 1
    SEARCH_MENU_SHOW_PROVIDERS="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# SEARCH_MENU_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# SEARCH_MENU_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && SEARCH_MENU_CWD="$1" && shift 1 || SEARCH_MENU_CWD="${SEARCH_MENU_CWD:-$PWD}"
SEARCH_MENU_CWD="$(realpath "${SEARCH_MENU_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$SEARCH_MENU_CWD" ] && cd "$SEARCH_MENU_CWD"; then
# if [ "$SEARCH_MENU_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $SEARCH_MENU_CWD"
# fi
# else
# printf_exit "💔 $SEARCH_MENU_CWD does not exist 💔"
# fi
export SEARCH_MENU_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
[ -n "$SEARCH_MENU_BROWSER" ] || printf_exit "Please define a browser in the config file"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
declare -A websearch=()
declare -A providers=()
declare -A SEARCH_MENU_ENGINES=()
populate="$(ls -A "$SEARCH_MENU_CONFIG_DIR/providers/" | wc -l)"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
default)
  shift 1
  __selector "default" "$@"
  ;;

development)
  shift 1
  __selector "development" "$@"
  ;;

engines)
  shift 1
  __selector "engines" "$@"
  ;;

media)
  shift 1
  __selector "media" "$@"
  ;;

news)
  shift 1
  __selector "news" "$@"
  ;;

os)
  shift 1
  __selector "os" "$@"
  ;;

packages)
  shift 1
  __selector "packages" "$@"
  ;;

tech)
  shift 1
  __selector "tech" "$@"
  ;;

security)
  shift 1
  __selector "security" "$@"
  ;;

list)
  shift 1
  __list_engines "$@"
  ;;

search)
  shift 1
  __direct_search "$@"
  ;;

*)
  if [ -z "$SEARCH_MENU_SHOW_PROVIDERS" ] && [ $# -eq 0 ]; then
    for globalConfigfile in "${SEARCH_MENU_PROVIDERS_GLOBAL_DIR}"/*.conf "${SEARCH_MENU_PROVIDERS_LOCAL_DIR}"/*.conf; do
      [ -f "$globalConfigfile" ] && . "$globalConfigfile" || true
    done
    __execute_search_menu "$@"
  else
    __selector "all" "$@"
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
