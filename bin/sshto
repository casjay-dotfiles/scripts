#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208162302-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  sshto --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Tuesday, Aug 16, 2022 23:02 EDT
# @@File             :  sshto
# @@Description      :  Menu driven ssh client
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :  https://github.com/vaniacer/sshto
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208162302-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
SSHTO_REQUIRE_SUDO="${SSHTO_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE"
  fi
  [ -d "$SSHTO_CONFIG_DIR" ] || mkdir -p "$SSHTO_CONFIG_DIR"
  [ -d "$SSHTO_CONFIG_BACKUP_DIR" ] || mkdir -p "$SSHTO_CONFIG_BACKUP_DIR"
  [ -f "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE" ] &&
    cp -Rf "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE" "$SSHTO_CONFIG_BACKUP_DIR/$SSHTO_CONFIG_FILE.$$"
  cat <<EOF >"$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE"
# Settings for sshto
SSHTO_TUNNEL_REMOTE_PORT=${SSHTO_TUNNEL_REMOTE_PORT:-}
SSHTO_TUNNEL_LOCAL_PORT=${SSHTO_TUNNEL_LOCAL_PORT:-}
SSHTO_DEST_DIR=${SSHTO_DEST_DIR:-}
SSHTO_TIMER=${SSHTO_TIMER:-60}
SSHTO_SSHTO_GUEST_USERNAME=${SSHTO_SSHTO_GUEST_USERNAME:-}
SSHTO_SSH_KEY="${SSHTO_SSH_KEY:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SSHTO_OUTPUT_COLOR_1="${SSHTO_OUTPUT_COLOR_1:-}"
SSHTO_OUTPUT_COLOR_2="${SSHTO_OUTPUT_COLOR_2:-}"
SSHTO_OUTPUT_COLOR_GOOD="${SSHTO_OUTPUT_COLOR_GOOD:-}"
SSHTO_OUTPUT_COLOR_ERROR="${SSHTO_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SSHTO_NOTIFY_ENABLED="${SSHTO_NOTIFY_ENABLED:-}"
SSHTO_GOOD_NAME="${SSHTO_GOOD_NAME:-}"
SSHTO_ERROR_NAME="${SSHTO_ERROR_NAME:-}"
SSHTO_GOOD_MESSAGE="${SSHTO_GOOD_MESSAGE:-}"
SSHTO_ERROR_MESSAGE="${SSHTO_ERROR_MESSAGE:-}"
SSHTO_NOTIFY_CLIENT_NAME="${SSHTO_NOTIFY_CLIENT_NAME:-}"
SSHTO_NOTIFY_CLIENT_ICON="${SSHTO_NOTIFY_CLIENT_ICON:-}"
SSHTO_NOTIFY_CLIENT_URGENCY="${SSHTO_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "sshto:  Menu driven ssh client - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: sshto [options] [commands]"
  __printf_line " - "
  __printf_line " - "
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$SSHTO_REQUIRE_SUDO" = "yes" ] && [ -z "$SSHTO_REQUIRE_SUDO_RUN" ]; then
    export SSHTO_REQUIRE_SUDO="no"
    export SSHTO_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$SSHTO_TEMP_FILE" ] && rm -Rf "$SSHTO_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__ssh() { eval $SSHTO_SSH_BIN_FILE "$*"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_config_local() {
  cat <<EOF | tee -p "$SSHTO_CONFIG_DIR/cmdlist.txt" |& __devnull
# Format is "Command"  "Description"
cmdlist+=(
"ls         -A      " "List all files"
"ls         -hla    " "List all files in human readable"
"free       -h      " "Show free memory"
"df         -ih     " "Show free inodes"
"df         -h      " "Show free disk space"

)

EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit_local() {
  bye
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cmdlist_renew() {
  cmdlist=()
  [ -f "$SSHTO_CONFIG_DIR/cmdlist.txt" ] && . "$SSHTO_CONFIG_DIR/cmdlist.txt"
  cmdlist+=(
    '' ''
    "${new_custom:-$SSHTO_RUN_CUSTOM}" "Execute Custom Command"
    '' ''
    "Info" "Full system info"
    "Sshkey" "Add my ssh key to \Z4$target\Z0"
    "Alias" "Add my usefull aliases to \Z4$target\Z0"
    "Copy" "Copy selected file or dir to \Z4$target\Z0"
    '' ''
    "Custom" "CMD: \Z1${new_custom:-$SSHTO_RUN_CUSTOM}\Z0"
    '' ''
    "Dest" "Change destination folder \Z4$SSHTO_DEST_DIR\Z0 on \Z4$target\Z0"
    "Upload" "Upload   file or folder from \Z4$PWD\Z0 to \Z4$target:${SSHTO_DEST_DIR}\Z0"
    "Download" "Download file or folder from \Z4$target:${SSHTO_DEST_DIR}\Z0 to \Z4$PWD\Z0"
    '' ''
    "Local" "Change local  port \Z1$SSHTO_LOCAL_PORT\Z0"
    "Remote" "Change remote port \Z1$SSHTO_REMOTE_PORT\Z0"
    "Tunnel" "Start portunneling from \Z4$target\Z0 port \Z1$SSHTO_REMOTE_PORT\Z0 to local port \Z1$SSHTO_LOCAL_PORT\Z0"
    '' ''
    "Username" "Change ssh username to \Z2$SSHTO_GUEST_USERNAME\Z0"

  )
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_sshto() {
  trap '' SIGINT
  __colors
  IFSOLD=$IFS
  IFS=$'\n'
  hosts="$(grep -h "Host " ~/.ssh/config* | sed '/\*/d; s/Host //g;')"
  for host in $hosts; do
    name="${host// #*/}" # Get HostName
    desc="${host//*#/}"  # Get Description
    case $name in
    '#DUMMY')
      desc="${host%\#*}"
      desc="${desc##*\#}"
      name="{ $desc }"
      length=$(((40 - ${#name}) / 2))
      name=$(
        line - $length
        printf "$name"
        line - $length
      )
      [[ ${#name} -lt 40 ]] && name=-"$name"
      content+=("$desc")
      desc=$(line - 20)
      ;;
    '#'*) continue ;;
    esac
    fullist+=("$name" "$desc") #Add HostName and Description to the list
  done
  IFS=$IFSOLD
  list=("${fullist[@]}")
  [[ $filter ]] && new_list
  first_dialog
  bye
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__colors() {
  #--------------------------------------------------------------------+
  #Color picker, usage: printf ${BLD}${CUR}${RED}${BBLU}"Hello!)"${DEF}|
  #-------------------------+--------------------------------+---------+
  #       Text color        |       Background color         |         |
  #-----------+-------------+--------------+-----------------+         |
  # Base color|Lighter shade|  Base color  | Lighter shade   |         |
  #-----------+-------------+--------------+-----------------+         |
  BLK='\e[30m'
  blk='\e[90m'
  BBLK='\e[40m'
  bblk='\e[100m' #| Black   |
  RED='\e[31m'
  red='\e[91m'
  BRED='\e[41m'
  bred='\e[101m' #| Red     |
  GRN='\e[32m'
  grn='\e[92m'
  BGRN='\e[42m'
  bgrn='\e[102m' #| Green   |
  YLW='\e[33m'
  ylw='\e[93m'
  BYLW='\e[43m'
  bylw='\e[103m' #| Yellow  |
  BLU='\e[34m'
  blu='\e[94m'
  BBLU='\e[44m'
  bblu='\e[104m' #| Blue    |
  MGN='\e[35m'
  mgn='\e[95m'
  BMGN='\e[45m'
  bmgn='\e[105m' #| Magenta |
  CYN='\e[36m'
  cyn='\e[96m'
  BCYN='\e[46m'
  bcyn='\e[106m' #| Cyan    |
  WHT='\e[37m'
  wht='\e[97m'
  BWHT='\e[47m'
  bwht='\e[107m' #| White   |
  #----------------------------------------------------------+---------+
  # Effects                                                            |
  #--------------------------------------------------------------------+
  DEF='\e[0m'   #Default color and effects                             |
  BLD='\e[1m'   #Bold\brighter                                         |
  DIM='\e[2m'   #Dim\darker                                            |
  CUR='\e[3m'   #Italic font                                           |
  UND='\e[4m'   #Underline                                             |
  INV='\e[7m'   #Inverted                                              |
  COF='\e[?25l' #Cursor Off                                            |
  CON='\e[?25h' #Cursor On                                             |
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
XY() { printf "\e[%b;%sH%s" "$1" "$2" "$2"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
line() {
  printf -v LINE "%$2s"
  printf '-- %s' "${LINE// /$1}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cnt() {
  printf -v _N %$1s
  _N=("${_N// / 1}")
  printf '%s' "${!_N[*]}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ssh_yes() {
  __cmd_exists expect || return 1
  # If connecting first time send 'yes' on ssh's request.
  # Expect must be installed on server. Options: $1 - ssh address with parameters(if needed)
  # Usage example: ssh_yes "-p22 user@localhost"
  expect <<EOF
spawn __ssh $1
expect {
    "(yes/no)?" {
        send "yes\n"
        expect {
            "assword:" { exit }
            "$ "       { send "exit\n" }
        }
    }
    "assword:" { exit }
    "$ "       { send "exit\n" }
}
exit
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
system_info() {
  clear
  __ssh $SSH_OPT $target "
        printf '\n${BLD}Hostname:${DEF}\n'
        hostname
        printf '\n${BLD}Interfaces:${DEF}\n'
        ip a
        printf '\n${BLD}Memory:${DEF}\n'
        LANG=Us free --si -h
        printf '\n${BLD}CPU:${DEF}\n'
        lscpu
        printf '\n${BLD}Disk:${DEF}\n'
        df -h; echo; df -ih; echo; lsblk
        printf '\n${BLD}Software:${DEF}\n'
        uname -a; echo
        [[ -e /usr/bin/lsb_release ]] && { lsb_release -a; echo; }
        [[ -e /usr/bin/java        ]] && { java  -version; echo; }
        [[ -e /usr/bin/psql        ]] && { psql  -V      ; echo; }
        [[ -e /usr/sbin/nginx      ]] && { nginx -v      ; echo; }
        printf '${BLD}Logged in Users:${DEF}\n'
        who
        printf '\n${BLD}Port usage info:${DEF}\n'
        netstat -tulpn 2> /dev/null
        printf '\n${BLD}Processes:${DEF}\n'
        top -bcn1 | head -n30
    "
  pause
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pause() {
  printf '%b\n' "${BLD}"
  read -p 'press any key to continue'
  printf '%b\n' "${DEF}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
go_to_target() {
  clear
  __ssh $SSH_OPT $target || pause
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
add_aliases() {
  clear
  scp $SSH_OPT ~/.bash_aliases $target:~
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_command() {
  clear
  __ssh $SSH_OPT -t $target $command
  pause
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
add_sshkey() {
  clear
  ssh_yes "$SSH_OPT $target" >/dev/null
  ssh-copy-id -i $SSHTO_SSH_KEY $SSH_OPT $target
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
portunneling() {
  __ssh $SSH_OPT $target -f -L 127.0.0.1:$SSHTO_TUNNEL_LOCAL_PORT:127.0.0.1:$SSHTO_TUNNEL_REMOTE_PORT sleep $SSHTO_TIMER
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bye() {
  [ "$_DEBUG" = "TRUE" ] || [ -n "$INIT_CONFIG" ] || clear
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
copy_files() {
  filename=$(dialog --ok-label "COPY" --cancel-label "BACK" --output-fd 1 --aspect 100 --colors --fselect $PWD/ 10 80)
  case $filename:$? in
  "$PWD" | "$PWD/":0) return ;;
  *:0) scp -r $SSH_OPT $filename $target:~ ;;
  *:*) return ;;
  esac
  copy_files
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
username() {
  new_user=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 20 --aspect 100 --colors --inputbox 'Change alternative username' 10 30 $SSHTO_GUEST_USERNAME)
  case $new_user:$? in
  *:0)
    SSHTO_GUEST_USERNAME=${new_user:-$SSHTO_GUEST_USERNAME}
    SSH_OPT="-oUser=$SSHTO_GUEST_USERNAME"
    USERNOTE="Username changed to \Z2$SSHTO_GUEST_USERNAME\Z0."
    ;;
  *:*) return ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
custom_run() {
  new_custom=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 100 --aspect 100 --colors --inputbox 'Change Command' 10 30 ${CUSTOMCMD})
  command=${new_custom:-$CUSTOMCMD}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
local_port() {
  new_local=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 5 --aspect 100 --colors --inputbox 'Change local port' 10 30 $SSHTO_TUNNEL_LOCAL_PORT)
  SSHTO_TUNNEL_LOCAL_PORT=${new_local:-$SSHTO_TUNNEL_LOCAL_PORT}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
remote_port() {
  new_remote=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 5 --aspect 100 --colors --inputbox 'Change remote port' 10 30 $SSHTO_TUNNEL_REMOTE_PORT)
  SSHTO_TUNNEL_REMOTE_PORT=${new_remote:-$SSHTO_TUNNEL_REMOTE_PORT}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
downpath() {
  new_path=$(dialog --ok-label "CHANGE" --cancel-label "BACK" --output-fd 1 --max-input 100 --aspect 100 --colors --inputbox 'Change download folder' 10 50 $SSHTO_DEST_DIR)
  SSHTO_DEST_DIR=${new_path:-$SSHTO_DEST_DIR}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
upload() {
  filelist=($(ls -sh1 $PWD | awk '{print $2,$1}'))
  filename=$(dialog --output-fd 1 --ok-label "UPLOAD" --cancel-label "BACK" --menu "Select file\folder to upload:" 0 0 0 "${filelist[@]:2}")
  case $filename:$? in
  *:0) [[ $filename ]] && scp -r $SSH_OPT $filename $target:$SSHTO_DEST_DIR/ ;;
  *:*) return ;;
  esac
  upload
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
dlst() { filelist=($(__ssh $SSH_OPT $target ls -sh1 $SSHTO_DEST_DIR | awk '{print $2,$1}')) || second_dialog; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
down() {
  filename=$(dialog --output-fd 1 --ok-label "DOWNLOAD" --cancel-label "BACK" --menu "Select file\folder to download:" 0 0 0 "${filelist[@]:2}")
  case $filename:$? in
  *:0) [[ $filename ]] && scp -r $SSH_OPT $target:$SSHTO_DEST_DIR/$filename . ;;
  *:*) return ;;
  esac
  down
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
new_list() {
  list=()
  match=
  for item in "${fullist[@]}"; do
    case $item:$match in
    -*\ *\ *-:1) break ;;
    -*\ $filter\ *-:*) match=1 ;;
    esac
    [[ $match ]] && list+=("$item")
  done
  echo "filter='$filter'" >$SSHTO_TEMP_FILE
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
contents_menu() {
  filter=$(dialog --output-fd 1 --ok-label "SELECT" --cancel-label "BACK" --no-items --menu "Select list of hosts:" 0 0 0 "All" "${content[@]}")
  case $filter:$? in
  All:0) list=("${fullist[@]}") ;;
  *:0) new_list ;;
  esac
  first_dialog
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
first_dialog() {
  target=$(dialog --extra-button --extra-label "RUN COMMAND" --ok-label "CONNECT" --cancel-label "EXIT" --colors --help-button --help-label "CONTENTS" --output-fd 1 --menu "Select host to connect to. $USERNOTE" 0 0 0 "${list[@]}")
  case $target:$? in
  -*\ *\ *-:*) first_dialog ;;
  *:0)
    go_to_target
    first_dialog
    ;;
  *:2) contents_menu ;;
  *:3) second_dialog ;;
  *:*) bye ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
second_dialog() {
  cmdlist_renew
  command=$(dialog --ok-label "RUN" --cancel-label "BACK" --output-fd 1 --extra-button --extra-label "CONNECT" --colors --menu "Select command to run on host \Z4$target\Z0. $USERNOTE" 0 0 0 "${cmdlist[@]}")
  case $command:$? in
  Custom:0) custom_run ;;
  Sshkey:0) add_sshkey ;;
  Alias:0) add_aliases ;;
  Info:0) system_info ;;
  Copy:0) copy_files ;;
  Username:0) username ;;
  Upload:0) upload ;;
  Dest:0) downpath ;;
  Download:0)
    dlst
    down
    ;;
  Local:0) local_port ;;
  Remote:0) remote_port ;;
  Tunnel:0) portunneling ;;
  *:3) go_to_target ;;
  *:0) run_command ;;
  *:*) first_dialog ;;
  esac
  second_dialog
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
SSHTO_CONFIG_FILE="${SSHTO_CONFIG_FILE:-settings.conf}"
SSHTO_CONFIG_DIR="${SSHTO_CONFIG_DIR:-$HOME/.config/myscripts/sshto}"
SSHTO_CONFIG_BACKUP_DIR="${SSHTO_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/sshto/backups}"
SSHTO_LOG_DIR="${SSHTO_LOG_DIR:-$HOME/.local/log/sshto}"
SSHTO_TEMP_DIR="${SSHTO_TEMP_DIR:-$HOME/.local/tmp/system_scripts/sshto}"
SSHTO_CACHE_DIR="${SSHTO_CACHE_DIR:-$HOME/.cache/sshto}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
SSHTO_OUTPUT_COLOR_1="${SSHTO_OUTPUT_COLOR_1:-33}"
SSHTO_OUTPUT_COLOR_2="${SSHTO_OUTPUT_COLOR_2:-5}"
SSHTO_OUTPUT_COLOR_GOOD="${SSHTO_OUTPUT_COLOR_GOOD:-2}"
SSHTO_OUTPUT_COLOR_ERROR="${SSHTO_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
SSHTO_NOTIFY_ENABLED="${SSHTO_NOTIFY_ENABLED:-yes}"
SSHTO_GOOD_NAME="${SSHTO_GOOD_NAME:-Great:}"
SSHTO_ERROR_NAME="${SSHTO_ERROR_NAME:-Error:}"
SSHTO_GOOD_MESSAGE="${SSHTO_GOOD_MESSAGE:-No errors reported}"
SSHTO_ERROR_MESSAGE="${SSHTO_ERROR_MESSAGE:-Errors were reported}"
SSHTO_NOTIFY_CLIENT_NAME="${SSHTO_NOTIFY_CLIENT_NAME:-$APPNAME}"
SSHTO_NOTIFY_CLIENT_ICON="${SSHTO_NOTIFY_CLIENT_ICON:-notification-new}"
SSHTO_NOTIFY_CLIENT_URGENCY="${SSHTO_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE" ] && . "$SSHTO_CONFIG_DIR/$SSHTO_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$SSHTO_LOG_DIR" ] || mkdir -p "$SSHTO_LOG_DIR" |& __devnull
[ -d "$SSHTO_TEMP_DIR" ] || mkdir -p "$SSHTO_TEMP_DIR" |& __devnull
[ -d "$SSHTO_CACHE_DIR" ] || mkdir -p "$SSHTO_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SSHTO_TEMP_FILE="${SSHTO_TEMP_FILE:-$(mktemp $SSHTO_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$SSHTO_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$SSHTO_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$SSHTO_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$SSHTO_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$SSHTO_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$SSHTO_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    INIT_CONFIG="REGEN"
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    SSHTO_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    SSHTO_CWD="$2"
    #[ -d "$SSHTO_CWD" ] || mkdir -p "$SSHTO_CWD" |& __devnull
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# SSHTO_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# SSHTO_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && SSHTO_CWD="$1" && shift 1 || SSHTO_CWD="${SSHTO_CWD:-$PWD}"
SSHTO_CWD="$(realpath "${SSHTO_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$SSHTO_CWD" ] && cd "$SSHTO_CWD"; then
# if [ "$SSHTO_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $SSHTO_CWD"
# fi
# else
# printf_exit "ðŸ’” $SSHTO_CWD does not exist ðŸ’”"
# fi
export SSHTO_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
SSHTO_SSH_BIN_FILE="$(type -P ssh || echo 'false')"
[ -n "$1" ] && SSHTO_RUN_CUSTOM="${*}" || SSHTO_RUN_CUSTOM="pkmgr update"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_sshto
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
