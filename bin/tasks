#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208170256-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  tasks --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Wednesday, Aug 17, 2022 02:56 EDT
# @@File             :  tasks
# @@Description      :  wrapper for tash
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208170256-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
TASKS_REQUIRE_SUDO="${TASKS_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE"
  fi
  [ -d "$TASKS_CONFIG_DIR" ] || mkdir -p "$TASKS_CONFIG_DIR"
  [ -d "$TASKS_CONFIG_BACKUP_DIR" ] || mkdir -p "$TASKS_CONFIG_BACKUP_DIR"
  [ -f "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE" ] &&
    cp -Rf "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE" "$TASKS_CONFIG_BACKUP_DIR/$TASKS_CONFIG_FILE.$$"
  cat <<EOF >"$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE"
# Settings for tasks
TASKS_PROJECT_NAME="${TASKS_PROJECT_NAME:-}"
TASKS_SAVE_DIR="${TASKS_SAVE_DIR:-}"
TASKS_START_OF_WEEK="${TASKS_START_OF_WEEK:-}"
TASKS_DATABASE="${TASKS_DATABASE:-}"
TASKS_EDITOR="${TASKS_EDITOR:-}"
TASKS_MENU_TIMER="${TASKS_MENU_TIMER:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TASKS_OUTPUT_COLOR_1="${TASKS_OUTPUT_COLOR_1:-}"
TASKS_OUTPUT_COLOR_2="${TASKS_OUTPUT_COLOR_2:-}"
TASKS_OUTPUT_COLOR_GOOD="${TASKS_OUTPUT_COLOR_GOOD:-}"
TASKS_OUTPUT_COLOR_ERROR="${TASKS_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TASKS_NOTIFY_ENABLED="${TASKS_NOTIFY_ENABLED:-}"
TASKS_GOOD_NAME="${TASKS_GOOD_NAME:-}"
TASKS_ERROR_NAME="${TASKS_ERROR_NAME:-}"
TASKS_GOOD_MESSAGE="${TASKS_GOOD_MESSAGE:-}"
TASKS_ERROR_MESSAGE="${TASKS_ERROR_MESSAGE:-}"
TASKS_NOTIFY_CLIENT_NAME="${TASKS_NOTIFY_CLIENT_NAME:-}"
TASKS_NOTIFY_CLIENT_ICON="${TASKS_NOTIFY_CLIENT_ICON:-}"
TASKS_NOTIFY_CLIENT_URGENCY="${TASKS_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() { #add delete start stop switch session done info report list clean
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "tasks:  wrapper for tash - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: tasks [options] [commands]"
  __printf_line " - "
  __printf_line " - "
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$TASKS_REQUIRE_SUDO" = "yes" ] && [ -z "$TASKS_REQUIRE_SUDO_RUN" ]; then
    export TASKS_REQUIRE_SUDO="no"
    export TASKS_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$TASKS_TEMP_FILE" ] && rm -Rf "$TASKS_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__date_epoch() { date +'%s'; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__change_project_name() {
  printf '\n\n\n'
  TASK_OLD_PROJECT="$TASKS_PROJECT_NAME"
  printf_read_input "5" "What is your project name? [$TASKS_PROJECT_NAME]" "180" "TASKS_PROJECT_NAME"
  [ -n "$TASKS_PROJECT_NAME" ] && printf_purple "Changed task to $TASKS_PROJECT_NAME" ||
    { printf_red "User decided not to change tasks" && return 1; }
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_menu() { eval "$0" "$1" "$TASKS_PROJECT_NAME" "$@" || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__term() {
  trap '' SIGQUIT SIGTSTP
  trap '$APPNAME --term' SIGINT
  TASKS_PROJECT_NAME="${1:-default}"
  shopt -s extglob
  __get_project_name
  while :; do
    clear
    printf_newline "\n\n\n\n"
    printf_head "${APPNAME^^} Menu - Current task: $TASKS_PROJECT_NAME"
    printf_green "0. Reload menu"
    printf_green "1. Change project"
    printf_green "a. Add task"
    printf_green "b. Start task"
    printf_green "c. Stop task"
    printf_green "d. Session menu"
    printf_green "e. done menu"
    printf_green "f. info menu"
    printf_green "g. report menu"
    printf_green "h. list menu"
    printf_green "i. clean menu"
    printf_green "j. delete menu"
    printf_green "z. Exit"
    printf_green "---------------------------------"
    printf_read_question_nt "6" "Enter your choice [a-z] : " "1" "main"
    printf_newline

    # take action
    case $main in
    1)
      shift 1
      clear
      __change_project_name
      ;;
    0)
      exec "$0"
      ;;
    a)
      shift 1
      clear
      printf_cyan "What would you like to add - control+d when done"
      input="$(cat -)"
      __execute_menu "add" "$input"
      ;;
    b)
      shift 1
      clear
      __execute_menu "start"
      ;;
    c)
      shift 1
      clear
      __execute_menu "stop"
      ;;
    d)
      shift 1
      clear
      __execute_menu "session"
      ;;
    e)
      shift 1
      clear
      __execute_menu "done"
      ;;
    f)
      shift 1
      clear
      __execute_menu "info"
      ;;
    g)
      shift 1
      clear
      __execute_menu "report"
      ;;
    h)
      shift 1
      clear
      __execute_menu "list"
      ;;
    i)
      shift 1
      clear
      __execute_menu "clean"
      ;;
    j)
      shift 1
      clear
      __execute_menu "delete"
      ;;
    x)
      shift 1
      clear
      ;;
    $'\E' | $'\e' | z) break ;;
    *) shift ;;
    esac
    printf_newline "\n\n"
    printf_counter "$TASKS_OUTPUT_COLOR_2" "$TASKS_MENU_TIMER" "Re-loading menu in"
    clear
  done
  clear
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__start_session() {
  export TASKS_PROJECT_NAME
  trap '__set_timer_end $(__date_epoch);trap - EXIT' SIGINT
  __set_timer_end "$TASKS_DATE_EPOCH"
  __set_timer_start "$(__date_epoch)"
  if __cmd_exists tmux-new; then
    tmux-new tasks
  elif __cmd_exists screen-new; then
    screen-new tasks
  else
    $SHELL
  fi
  __set_timer_end "$(__date_epoch)"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__switch_task() {
  local task_name="${1:-$TASKS_PROJECT_NAME}"
  [ "$task_name" = "$TASKS_PROJECT_NAME" ] && return 1
  [ -d "$TASKS_SAVE_DIR/$task_name" ] || mkdir -p "$TASKS_SAVE_DIR/$task_name"
  [ -L "$TASKS_SAVE_DIR/current" ] && unlink "$TASKS_SAVE_DIR/current"
  ln -sf "$TASKS_SAVE_DIR/$task_name" "$TASKS_SAVE_DIR/current"
  __initialize_app "$task_name"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_cur_time() {
  local get_curr="" get_end=""
  get_end="${1:-$(__date_epoch)}"
  get_curr="$(<"$TASK_PROJECT_TIME_TOTAL_FILE")"
  TASKS_TIME_START="$(<"$TASK_PROJECT_TIME_START_FILE")"
  TASK_TIME_TOTAL=$(($get_end + $get_curr + $TASKS_TIME_START))
  __calculate_total "$TASK_TIME_TOTAL"
  [ -n "$TASKS_TIME_TOTAL_MESS" ] || TASKS_TIME_TOTAL_MESS="Nothing recorded yet"
  printf '%s\n' "$TASKS_TIME_TOTAL_MESS"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_cur_info() {
  local project_name="" time_current="" time_start=""
  project_name="$(basename -- "$(readlink -f "$TASKS_SAVE_DIR/current")")"
  time_start="$(<"$TASK_PROJECT_TIME_START_FILE")"
  printf_yellow "Current project is: $project_name"
  [ "$time_start" -eq 0 ] && printf_red "You have not started this project yet" || printf_blue "Project started on $(date -d @$time_start)"
  [ "$time_start" -eq 0 ] || cat "$TASK_PROJECT_TIME_TOTAL_PRETTY" | printf_readline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_timer_start() {
  [ -n "$1" ] || return
  printf '%s\n' "$1" >"$TASK_PROJECT_TIME_START_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_timer_end() {
  [ -n "$1" ] || return
  local get_curr="" get_end=""
  get_end="${1:-$(__date_epoch)}"
  get_curr="$(<"$TASK_PROJECT_TIME_TOTAL_FILE")"
  TASKS_TIME_START="$(<"$TASK_PROJECT_TIME_START_FILE")"
  TASK_TIME_TOTAL=$(($get_end + $get_curr + $TASKS_TIME_START))
  __calculate_total "$TASK_TIME_TOTAL"
  printf '%s\n' "$TASKS_TIME_TOTAL" >"$TASK_PROJECT_TIME_TOTAL_FILE"
  printf '%s\n' "$TASKS_TIME_TOTAL_MESS" >"$TASK_PROJECT_TIME_TOTAL_PRETTY"
  printf '%s\n' "0" >"$TASK_PROJECT_TIME_STOP_FILE"
  printf '%s\n' "0" >"$TASK_PROJECT_TIME_START_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__write_tasks() {
  printf '%s\n' "$@" >>"$TASK_PROJECT_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__calculate_total() {
  if [ "$1" -lt 60 ]; then
    min=0
    secs="${1:-0}"
  else
    time_mins=$(echo "scale=2; ${1}/60" | bc)
    min=$(echo ${time_mins} | cut -d'.' -f1)
    secs="0.$(echo ${time_mins} | cut -d'.' -f2)"
    secs=$(echo ${secs}*60 | bc | awk '{print int($1+0.5)}')
  fi
  TASKS_TIME_TOTAL_MESS="Time Elapsed : ${min} minutes and ${secs} seconds."
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__initialize_app() {
  [ "$1" != "" ] || shift
  [ "$TASKS_PROJECT_NAME" != "current" ] || printf_exit "The project name can not be current"
  TASKS_PROJECT_NAME="${2:-${1:-$TASKS_PROJECT_NAME}}"
  TASKS_PROJECT_DIR="${TASKS_SAVE_DIR:?printf_exit "Problem setting the variable TASKS_SAVE_DIR"}/${TASKS_PROJECT_NAME:?printf_exit "Problem setting the variable TASKS_PROJECT_NAME"}"
  TASK_PROJECT_FILE="$TASKS_PROJECT_DIR/index.md"
  TASK_PROJECT_TIME_STOP_FILE="$TASKS_PROJECT_DIR/stop.txt"
  TASK_PROJECT_TIME_START_FILE="$TASKS_PROJECT_DIR/start.txt"
  TASK_PROJECT_TIME_TOTAL_FILE="$TASKS_PROJECT_DIR/time.txt"
  TASK_PROJECT_TIME_TOTAL_PRETTY="$TASKS_PROJECT_DIR/total.txt"
  [ -d "$TASKS_PROJECT_DIR" ] || mkdir -p "$TASKS_PROJECT_DIR"
  [ -f "$TASK_PROJECT_FILE" ] || printf '# Task for %s started on %s' "$TASKS_PROJECT_NAME" "$TASKS_DATE_CURRENT" >"$TASK_PROJECT_FILE"
  [ -f "$TASK_PROJECT_TIME_STOP_FILE" ] || printf '%s\n' '0' >"$TASK_PROJECT_TIME_STOP_FILE"
  [ -f "$TASK_PROJECT_TIME_START_FILE" ] || printf '%s\n' '0' >"$TASK_PROJECT_TIME_START_FILE"
  [ -f "$TASK_PROJECT_TIME_TOTAL_FILE" ] || printf '%s\n' '0' >"$TASK_PROJECT_TIME_TOTAL_FILE"
  [ -f "$TASK_PROJECT_TIME_TOTAL_PRETTY" ] || printf '%s\n' "Time Elapsed : 0 minutes and 0 seconds." >"$TASK_PROJECT_TIME_TOTAL_PRETTY"

}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
TASKS_CONFIG_FILE="${TASKS_CONFIG_FILE:-settings.conf}"
TASKS_CONFIG_DIR="${TASKS_CONFIG_DIR:-$HOME/.config/myscripts/tasks}"
TASKS_CONFIG_BACKUP_DIR="${TASKS_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/tasks/backups}"
TASKS_LOG_DIR="${TASKS_LOG_DIR:-$HOME/.local/log/tasks}"
TASKS_TEMP_DIR="${TASKS_TEMP_DIR:-$HOME/.local/tmp/system_scripts/tasks}"
TASKS_CACHE_DIR="${TASKS_CACHE_DIR:-$HOME/.cache/tasks}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TASKS_OUTPUT_COLOR_1="${TASKS_OUTPUT_COLOR_1:-33}"
TASKS_OUTPUT_COLOR_2="${TASKS_OUTPUT_COLOR_2:-5}"
TASKS_OUTPUT_COLOR_GOOD="${TASKS_OUTPUT_COLOR_GOOD:-2}"
TASKS_OUTPUT_COLOR_ERROR="${TASKS_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TASKS_NOTIFY_ENABLED="${TASKS_NOTIFY_ENABLED:-yes}"
TASKS_GOOD_NAME="${TASKS_GOOD_NAME:-Great:}"
TASKS_ERROR_NAME="${TASKS_ERROR_NAME:-Error:}"
TASKS_GOOD_MESSAGE="${TASKS_GOOD_MESSAGE:-No errors reported}"
TASKS_ERROR_MESSAGE="${TASKS_ERROR_MESSAGE:-Errors were reported}"
TASKS_NOTIFY_CLIENT_NAME="${TASKS_NOTIFY_CLIENT_NAME:-$APPNAME}"
TASKS_NOTIFY_CLIENT_ICON="${TASKS_NOTIFY_CLIENT_ICON:-notification-new}"
TASKS_NOTIFY_CLIENT_URGENCY="${TASKS_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
TASKS_SAVE_DIR="${TASKS_SAVE_DIR:-$HOME/.local/share/editors/tasks}"
TASKS_START_OF_WEEK="${TASKS_START_OF_WEEK:-monday}"
TASKS_DATABASE="${TASKS_DATABASE:-$TASKS_SAVE_DIR/tasks.db}"
TASKS_TASH_BIN="${TASKS_TASH_BIN:-$CASJAYSDEVDIR/sources/tash}"
TASKS_EDITOR="${TASKS_EDITOR:-$(builtin type -P nvim 2>/dev/null || builtin type -P vim 2>/dev/null || builtin type -P nano 2>/dev/null)}"
TASKS_PROJECT_NAME="${TASKS_PROJECT_NAME:-default}"
TASKS_MENU_TIMER="${TASKS_MENU_TIMER:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE" ] && . "$TASKS_CONFIG_DIR/$TASKS_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$TASKS_LOG_DIR" ] || mkdir -p "$TASKS_LOG_DIR" |& __devnull
[ -d "$TASKS_TEMP_DIR" ] || mkdir -p "$TASKS_TEMP_DIR" |& __devnull
[ -d "$TASKS_CACHE_DIR" ] || mkdir -p "$TASKS_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TASKS_TEMP_FILE="${TASKS_TEMP_FILE:-$(mktemp $TASKS_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$TASKS_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$TASKS_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$TASKS_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$TASKS_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$TASKS_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$TASKS_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="add delete start stop switch session done info report list clean"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    TASKS_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    TASKS_CWD="$2"
    #[ -d "$TASKS_CWD" ] || mkdir -p "$TASKS_CWD" |& __devnull
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# TASKS_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# TASKS_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && TASKS_CWD="$1" && shift 1 || TASKS_CWD="${TASKS_CWD:-$PWD}"
TASKS_CWD="$(realpath "${TASKS_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$TASKS_CWD" ] && cd "$TASKS_CWD"; then
# if [ "$TASKS_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $TASKS_CWD"
# fi
# else
# printf_exit "ðŸ’” $TASKS_CWD does not exist ðŸ’”"
# fi
export TASKS_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash bc || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
TASKS_DATE_CURRENT="$(date)"
TASKS_DATE_EPOCH="$(__date_epoch)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__initialize_app "$2"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
delete)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  rm -Rf "$TASKS_PROJECT_DIR"
  exitCode=$?
  ;;
add)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  __write_tasks "$TASKS_PROJECT_NAME" "$@"
  exitCode=$?
  ;;
start)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  TASKS_TIME_START="$TASKS_DATE_EPOCH"
  __set_timer_start "$TASKS_TIME_START"
  exitCode=$?
  ;;
stop)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  TASKS_TIME_END="$TASKS_DATE_EPOCH"
  __set_timer_end "$TASKS_TIME_END"
  exitCode=$?
  ;;
switch)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  __switch_task "$TASKS_PROJECT_NAME"
  exitCode=$?
  ;;
session)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  __start_session
  exitCode=$?
  ;;
done)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  printf '%s\n' "This task was marked as done on $TASKS_DATE_CURRENT" >"$TASKS_PROJECT_DIR/completed"
  exitCode=$?
  ;;
info)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  __get_cur_info "$TASKS_PROJECT_NAME"
  exitCode=$?
  ;;
report)
  TASKS_PROJECT_NAME="${2:-$TASKS_PROJECT_NAME}"
  shift 2
  [ -n "$TASKS_PROJECT_NAME" ] || printf_exit "Please provide a project name"
  __get_cur_time
  exitCode=$?
  ;;
list)
  shift 1
  task_files="$(find "$TASKS_SAVE_DIR/" -type d | sed 's|'$TASKS_SAVE_DIR/'||g' | wc -l)"
  [ "$task_files" -eq 0 ] && printf_exit "You don't seem to have any tasks" ||
    for f in "$TASKS_SAVE_DIR"/*/*.md; do
      [ -f "$f" ] && cat "$f" 2>/dev/null
    done | printf_readline $TASKS_OUTPUT_COLOR_2
  exitCode=$?
  ;;
clean)
  shift 1
  rm -R "$TASKS_SAVE_DIR"
  mkdir -p "$TASKS_SAVE_DIR"
  exitCode=$?
  ;;
*)
  __term
  exitCode=$?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
