#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208171519-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  timeis --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Wednesday, Aug 17, 2022 15:19 EDT
# @@File             :  timeis
# @@Description      :  get current time for any timezone
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208171519-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
TIMEIS_REQUIRE_SUDO="${TIMEIS_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE"
  fi
  [ -d "$TIMEIS_CONFIG_DIR" ] || mkdir -p "$TIMEIS_CONFIG_DIR"
  [ -d "$TIMEIS_CONFIG_BACKUP_DIR" ] || mkdir -p "$TIMEIS_CONFIG_BACKUP_DIR"
  [ -f "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE" ] &&
    cp -Rf "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE" "$TIMEIS_CONFIG_BACKUP_DIR/$TIMEIS_CONFIG_FILE.$$"
  cat <<EOF >"$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE"
# Settings for timeis
TIMEIS_API_URL="${TIMEIS_API_URL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TIMEIS_OUTPUT_COLOR_1="${TIMEIS_OUTPUT_COLOR_1:-}"
TIMEIS_OUTPUT_COLOR_2="${TIMEIS_OUTPUT_COLOR_2:-}"
TIMEIS_OUTPUT_COLOR_GOOD="${TIMEIS_OUTPUT_COLOR_GOOD:-}"
TIMEIS_OUTPUT_COLOR_ERROR="${TIMEIS_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TIMEIS_NOTIFY_ENABLED="${TIMEIS_NOTIFY_ENABLED:-}"
TIMEIS_GOOD_NAME="${TIMEIS_GOOD_NAME:-}"
TIMEIS_ERROR_NAME="${TIMEIS_ERROR_NAME:-}"
TIMEIS_GOOD_MESSAGE="${TIMEIS_GOOD_MESSAGE:-}"
TIMEIS_ERROR_MESSAGE="${TIMEIS_ERROR_MESSAGE:-}"
TIMEIS_NOTIFY_CLIENT_NAME="${TIMEIS_NOTIFY_CLIENT_NAME:-}"
TIMEIS_NOTIFY_CLIENT_ICON="${TIMEIS_NOTIFY_CLIENT_ICON:-}"
TIMEIS_NOTIFY_CLIENT_URGENCY="${TIMEIS_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() { #convert get
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "timeis:  get current time for any timezone - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: timeis [options] [commands]"
  __printf_line "*                               - Outputs current tim info"
  __printf_line "convert [TimeZone]              - Converts a time to your local time"
  __printf_line "get [TimeZone]                  - Show the information for the timezone"
  __printf_line "search [TimeZone]               - search for a timezone"
  __printf_line "list                            - List all timeszones"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$TIMEIS_REQUIRE_SUDO" = "yes" ] && [ -z "$TIMEIS_REQUIRE_SUDO_RUN" ]; then
    export TIMEIS_REQUIRE_SUDO="no"
    export TIMEIS_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$TIMEIS_TEMP_FILE" ] && rm -Rf "$TIMEIS_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
timezones() {
  cat <<EOF
Africa/Abidjan
Africa/Accra
Africa/Algiers
Africa/Bissau
Africa/Cairo
Africa/Casablanca
Africa/Ceuta
Africa/El_Aaiun
Africa/Johannesburg
Africa/Juba
Africa/Khartoum
Africa/Lagos
Africa/Maputo
Africa/Monrovia
Africa/Nairobi
Africa/Ndjamena
Africa/Sao_Tome
Africa/Tripoli
Africa/Tunis
Africa/Windhoek
America/Adak
America/Anchorage
America/Araguaina
America/Argentina/Buenos_Aires
America/Argentina/Catamarca
America/Argentina/Cordoba
America/Argentina/Jujuy
America/Argentina/La_Rioja
America/Argentina/Mendoza
America/Argentina/Rio_Gallegos
America/Argentina/Salta
America/Argentina/San_Juan
America/Argentina/San_Luis
America/Argentina/Tucuman
America/Argentina/Ushuaia
America/Asuncion
America/Atikokan
America/Bahia
America/Bahia_Banderas
America/Barbados
America/Belem
America/Belize
America/Blanc-Sablon
America/Boa_Vista
America/Bogota
America/Boise
America/Cambridge_Bay
America/Campo_Grande
America/Cancun
America/Caracas
America/Cayenne
America/Chicago
America/Chihuahua
America/Costa_Rica
America/Creston
America/Cuiaba
America/Curacao
America/Danmarkshavn
America/Dawson
America/Dawson_Creek
America/Denver
America/Detroit
America/Edmonton
America/Eirunepe
America/El_Salvador
America/Fort_Nelson
America/Fortaleza
America/Glace_Bay
America/Goose_Bay
America/Grand_Turk
America/Guatemala
America/Guayaquil
America/Guyana
America/Halifax
America/Havana
America/Hermosillo
America/Indiana/Indianapolis
America/Indiana/Knox
America/Indiana/Marengo
America/Indiana/Petersburg
America/Indiana/Tell_City
America/Indiana/Vevay
America/Indiana/Vincennes
America/Indiana/Winamac
America/Inuvik
America/Iqaluit
America/Jamaica
America/Juneau
America/Kentucky/Louisville
America/Kentucky/Monticello
America/La_Paz
America/Lima
America/Los_Angeles
America/Maceio
America/Managua
America/Manaus
America/Martinique
America/Matamoros
America/Mazatlan
America/Menominee
America/Merida
America/Metlakatla
America/Mexico_City
America/Miquelon
America/Moncton
America/Monterrey
America/Montevideo
America/Nassau
America/New_York
America/Nipigon
America/Nome
America/Noronha
America/North_Dakota/Beulah
America/North_Dakota/Center
America/North_Dakota/New_Salem
America/Nuuk
America/Ojinaga
America/Panama
America/Pangnirtung
America/Paramaribo
America/Phoenix
America/Port-au-Prince
America/Port_of_Spain
America/Porto_Velho
America/Puerto_Rico
America/Punta_Arenas
America/Rainy_River
America/Rankin_Inlet
America/Recife
America/Regina
America/Resolute
America/Rio_Branco
America/Santarem
America/Santiago
America/Santo_Domingo
America/Sao_Paulo
America/Scoresbysund
America/Sitka
America/St_Johns
America/Swift_Current
America/Tegucigalpa
America/Thule
America/Thunder_Bay
America/Tijuana
America/Toronto
America/Vancouver
America/Whitehorse
America/Winnipeg
America/Yakutat
America/Yellowknife
Antarctica/Casey
Antarctica/Davis
Antarctica/DumontDUrville
Antarctica/Macquarie
Antarctica/Mawson
Antarctica/Palmer
Antarctica/Rothera
Antarctica/Syowa
Antarctica/Troll
Antarctica/Vostok
Asia/Almaty
Asia/Amman
Asia/Anadyr
Asia/Aqtau
Asia/Aqtobe
Asia/Ashgabat
Asia/Atyrau
Asia/Baghdad
Asia/Baku
Asia/Bangkok
Asia/Barnaul
Asia/Beirut
Asia/Bishkek
Asia/Brunei
Asia/Chita
Asia/Choibalsan
Asia/Colombo
Asia/Damascus
Asia/Dhaka
Asia/Dili
Asia/Dubai
Asia/Dushanbe
Asia/Famagusta
Asia/Gaza
Asia/Hebron
Asia/Ho_Chi_Minh
Asia/Hong_Kong
Asia/Hovd
Asia/Irkutsk
Asia/Jakarta
Asia/Jayapura
Asia/Jerusalem
Asia/Kabul
Asia/Kamchatka
Asia/Karachi
Asia/Kathmandu
Asia/Khandyga
Asia/Kolkata
Asia/Krasnoyarsk
Asia/Kuala_Lumpur
Asia/Kuching
Asia/Macau
Asia/Magadan
Asia/Makassar
Asia/Manila
Asia/Nicosia
Asia/Novokuznetsk
Asia/Novosibirsk
Asia/Omsk
Asia/Oral
Asia/Pontianak
Asia/Pyongyang
Asia/Qatar
Asia/Qostanay
Asia/Qyzylorda
Asia/Riyadh
Asia/Sakhalin
Asia/Samarkand
Asia/Seoul
Asia/Shanghai
Asia/Singapore
Asia/Srednekolymsk
Asia/Taipei
Asia/Tashkent
Asia/Tbilisi
Asia/Tehran
Asia/Thimphu
Asia/Tokyo
Asia/Tomsk
Asia/Ulaanbaatar
Asia/Urumqi
Asia/Ust-Nera
Asia/Vladivostok
Asia/Yakutsk
Asia/Yangon
Asia/Yekaterinburg
Asia/Yerevan
Atlantic/Azores
Atlantic/Bermuda
Atlantic/Canary
Atlantic/Cape_Verde
Atlantic/Faroe
Atlantic/Madeira
Atlantic/Reykjavik
Atlantic/South_Georgia
Atlantic/Stanley
Australia/Adelaide
Australia/Brisbane
Australia/Broken_Hill
Australia/Darwin
Australia/Eucla
Australia/Hobart
Australia/Lindeman
Australia/Lord_Howe
Australia/Melbourne
Australia/Perth
Australia/Sydney
CET
CST6CDT
EET
EST
EST5EDT
Etc/GMT
Etc/GMT+1
Etc/GMT+10
Etc/GMT+11
Etc/GMT+12
Etc/GMT+2
Etc/GMT+3
Etc/GMT+4
Etc/GMT+5
Etc/GMT+6
Etc/GMT+7
Etc/GMT+8
Etc/GMT+9
Etc/GMT-1
Etc/GMT-10
Etc/GMT-11
Etc/GMT-12
Etc/GMT-13
Etc/GMT-14
Etc/GMT-2
Etc/GMT-3
Etc/GMT-4
Etc/GMT-5
Etc/GMT-6
Etc/GMT-7
Etc/GMT-8
Etc/GMT-9
Etc/UTC
Europe/Amsterdam
Europe/Andorra
Europe/Astrakhan
Europe/Athens
Europe/Belgrade
Europe/Berlin
Europe/Brussels
Europe/Bucharest
Europe/Budapest
Europe/Chisinau
Europe/Copenhagen
Europe/Dublin
Europe/Gibraltar
Europe/Helsinki
Europe/Istanbul
Europe/Kaliningrad
Europe/Kiev
Europe/Kirov
Europe/Lisbon
Europe/London
Europe/Luxembourg
Europe/Madrid
Europe/Malta
Europe/Minsk
Europe/Monaco
Europe/Moscow
Europe/Oslo
Europe/Paris
Europe/Prague
Europe/Riga
Europe/Rome
Europe/Samara
Europe/Saratov
Europe/Simferopol
Europe/Sofia
Europe/Stockholm
Europe/Tallinn
Europe/Tirane
Europe/Ulyanovsk
Europe/Uzhgorod
Europe/Vienna
Europe/Vilnius
Europe/Volgograd
Europe/Warsaw
Europe/Zaporozhye
Europe/Zurich
HST
Indian/Chagos
Indian/Christmas
Indian/Cocos
Indian/Kerguelen
Indian/Mahe
Indian/Maldives
Indian/Mauritius
Indian/Reunion
MET
MST
MST7MDT
PST8PDT
Pacific/Apia
Pacific/Auckland
Pacific/Bougainville
Pacific/Chatham
Pacific/Chuuk
Pacific/Easter
Pacific/Efate
Pacific/Enderbury
Pacific/Fakaofo
Pacific/Fiji
Pacific/Funafuti
Pacific/Galapagos
Pacific/Gambier
Pacific/Guadalcanal
Pacific/Guam
Pacific/Honolulu
Pacific/Kiritimati
Pacific/Kosrae
Pacific/Kwajalein
Pacific/Majuro
Pacific/Marquesas
Pacific/Nauru
Pacific/Niue
Pacific/Norfolk
Pacific/Noumea
Pacific/Pago_Pago
Pacific/Palau
Pacific/Pitcairn
Pacific/Pohnpei
Pacific/Port_Moresby
Pacific/Rarotonga
Pacific/Tahiti
Pacific/Tarawa
Pacific/Tongatapu
Pacific/Wake
Pacific/Wallis
WET
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__api() {
  local options response
  options="${options:-$*}"
  response="$(curl -q -LSs --fail "$TIMEIS_API_URL/$options" 2>/dev/null || return 1)"
  if [[ -n "$response" ]]; then
    echo "$response"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__jq() {
  local error response
  response="$(jq -r "$1" 2>/dev/null || return 1)"
  if [[ -n "$response" ]]; then
    echo "$response"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__get() {
  if [[ $1 = "help" ]]; then
    printf_cyan "Listing all available time zones"
    __api "timezones" | __jq '.[]' | printf_column
    exit
  elif [[ $# = 1 ]]; then
    opts="timezone/$*"
  elif [[ $# = 2 ]]; then
    opts="$1/$2"
  elif [[ $# = 3 ]]; then
    opts="$1/$2/$3"
  else
    if [[ -f "/etc/timezone" ]]; then
      opts="$(</etc/timezone)"
    elif [[ -n "$TIMEZONE" ]]; then
      opts="$TIMEZONE"
    fi
  fi

  res="$(__api "$opts")"
  if [[ -z "$res" ]]; then
    printf_exit "Failed getting info from $TIMEIS_API_URL/$opts"
  fi

  abbreviation="$(echo "$res" | __jq '.abbreviation')"
  raw_offset="$(echo "$res" | __jq '.raw_offset')"
  unixtime="$(echo "$res" | __jq '.unixtime')"
  client_ip="$(echo "$res" | __jq '.client_ip')"
  timezone="$(echo "$res" | __jq '.timezone')"
  day_of_week="$(echo "$res" | __jq '.day_of_week')"
  day_of_year="$(echo "$res" | __jq '.day_of_year')"
  week_number="$(echo "$res" | __jq '.week_number')"

  if [[ -z "$abbreviation" ]] || [[ -z "$raw_offset" ]] || [[ -z "$timezone" ]] || [[ -z "$day_of_week" ]] || [[ -z "$week_number" ]]; then
    printf_red "Failed getting timezone info"
    printf_red "Make sure you have a valid time zone"
    printf_exit "See $APPNAME help for a complete list of timezones"
  fi

  case "$raw_offset" in
  -*)
    epoch="$unixtime"
    offset="$(echo $raw_offset | awk -F'\-' '{print $2}' 2>/dev/null)"
    time="$((epoch - offset))"
    tzdate="$(date -u -d @"${time:-$epoch}" +'%A, %B %d, %Y')"
    tztime="$(date -u -d @"${time}" +'%T '$abbreviation'')"
    offsetSym="âž– $((offset / 60 / 60)) hour[s]"
    ;;
  +*)
    epoch="$unixtime"
    offset="$(echo $raw_offset | awk -F'+' '{print $2}' 2>/dev/null)"
    time="$((epoch + offset))"
    tzdate="$(date -u -d @"${time:-$epoch}" +'%A, %B %d, %Y')"
    tztime="$(date -u -d @"${time}" +'%T '$abbreviation'')"
    offsetSym="âž• $((offset / 60 / 60)) hour[s]"
    ;;
  *)
    epoch="$unixtime"
    offset="$raw_offset"
    time="$((epoch + offset))"
    tzdate="$(date -u -d @"${time:-$epoch}" +'%A, %B %d, %Y')"
    tztime="$(date -u -d @"${time}" +'%T '$abbreviation'')"
    offsetSym="âž• $((offset / 60 / 60)) hour[s]"
    ;;
  esac
  [[ "$offset" = 0 ]] && offsetSym="0" && offset="0"

  if [[ "$timezone" == "$abbreviation" ]]; then
    [[ -z "$timezone" ]] || printf_blue "Requested timezone is:  $timezone"
  else
    [[ -z "$timezone" ]] || printf_blue "Requested timezone is:  $timezone"
    [[ -z "$timezone" ]] || printf_blue "Abbrevated timezone is: $abbreviation"
  fi
  [[ -z "$tzdate" ]] || printf_blue "Date is:                $tzdate"
  [[ -z "$tztime" ]] || printf_blue "Time is:                $tztime"
  [[ -z "$offset" ]] || printf_blue "Diff from GMT is:       ${offsetSym}"
  [[ -z "$day_of_week" ]] || printf_blue "Day of week is:         $day_of_week"
  [[ -z "$day_of_year" ]] || printf_blue "Day of year is:         $day_of_year"
  [[ -z "$week_number" ]] || printf_blue "Week number is:         $week_number"
  [[ -z "$client_ip" ]] || printf_blue "Your IP is:             $client_ip"
  __footer "$abbreviation"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__convert() {
  # Convert date to unixtime
  local set_tz date time date_format time_format date_time unixtime
  [[ -n "$1" ]] && set_tz="$1" || printf_exit "Please specify a timezone to convert to"
  [[ -n "$2" ]] && date="$2" || date="$(date +'%Y-%m-%d' 2>/dev/null)"
  [[ -n "$3" ]] && time="$3" || time="$(date +'%H:%M:%S' 2>/dev/null)"
  date_format="${4:-%Y-%m-%d}"
  time_format="${5:-%H:%M:%S}"
  date_time="$date $time"
  unixtime="$(date -u -d "$date_time" +'%s' 2>/dev/null)"

  if [[ -z "$unixtime" ]] || [[ -z "$date" ]]; then
    printf_red "Failed converting date to unixtime"
    printf_exit "Make sure you have a valid date"
  fi

  printf_cyan "The date in $set_tz is: $(__showdate $my_tz $set_tz 2>/dev/null)"
  printf_cyan "The time in $set_tz is: $(__showtime $my_tz $set_tz 2>/dev/null)"
  __footer "$set_tz"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__showtime() {
  local TZIN TZOUT FORMAT
  TZIN="$1"
  TZOUT="$2"
  FORMAT='%H:%M:%S'
  TZ=$TZOUT date --date='TZ="'$TZIN'"'" $time" +"$FORMAT"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__showdate() {
  local TZIN TZOUT FORMAT
  TZIN="$1"
  TZOUT="$2"
  FORMAT='%Y-%m-%d'
  TZ=$TZOUT date --date='TZ="'$TZIN'"'" $time" +"$FORMAT"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__date() {
  local new tz
  new="$(date +'%s')"
  script_date="$new"
  if [[ -f "/etc/timezone" ]]; then
    my_tz="$(</etc/timezone)"
  elif [[ -n "${TZ:-$TIMEZONE}" ]]; then
    my_tz="${TZ:-$TIMEZONE}"
  else
    my_tz="America/New_York"
  fi
  printf_purple "epoch time: $(date -d @"${new}" +"%s")"
  printf_purple "Current date in $my_tz:  $(date -d @"${new}" +"%Y-%m-%d")"
  printf_purple "Current time in $my_tz:  $(date -d @"${new}" +"%H:%M:%S")"
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
__footer() {
  zone="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
  printf_blue "--------------------------------------------------------------------------------"
  printf_purple "https://www.timeanddate.com/time/zones/$zone"
  printf_purple 'https://www.timeanddate.com/time/map/'
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
TIMEIS_CONFIG_FILE="${TIMEIS_CONFIG_FILE:-settings.conf}"
TIMEIS_CONFIG_DIR="${TIMEIS_CONFIG_DIR:-$HOME/.config/myscripts/timeis}"
TIMEIS_CONFIG_BACKUP_DIR="${TIMEIS_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/timeis/backups}"
TIMEIS_LOG_DIR="${TIMEIS_LOG_DIR:-$HOME/.local/log/timeis}"
TIMEIS_TEMP_DIR="${TIMEIS_TEMP_DIR:-$HOME/.local/tmp/system_scripts/timeis}"
TIMEIS_CACHE_DIR="${TIMEIS_CACHE_DIR:-$HOME/.cache/timeis}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TIMEIS_OUTPUT_COLOR_1="${TIMEIS_OUTPUT_COLOR_1:-33}"
TIMEIS_OUTPUT_COLOR_2="${TIMEIS_OUTPUT_COLOR_2:-5}"
TIMEIS_OUTPUT_COLOR_GOOD="${TIMEIS_OUTPUT_COLOR_GOOD:-2}"
TIMEIS_OUTPUT_COLOR_ERROR="${TIMEIS_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TIMEIS_NOTIFY_ENABLED="${TIMEIS_NOTIFY_ENABLED:-yes}"
TIMEIS_GOOD_NAME="${TIMEIS_GOOD_NAME:-Great:}"
TIMEIS_ERROR_NAME="${TIMEIS_ERROR_NAME:-Error:}"
TIMEIS_GOOD_MESSAGE="${TIMEIS_GOOD_MESSAGE:-No errors reported}"
TIMEIS_ERROR_MESSAGE="${TIMEIS_ERROR_MESSAGE:-Errors were reported}"
TIMEIS_NOTIFY_CLIENT_NAME="${TIMEIS_NOTIFY_CLIENT_NAME:-$APPNAME}"
TIMEIS_NOTIFY_CLIENT_ICON="${TIMEIS_NOTIFY_CLIENT_ICON:-notification-new}"
TIMEIS_NOTIFY_CLIENT_URGENCY="${TIMEIS_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
TIMEIS_API_URL="${TIMEIS_API_URL:-http://worldtimeapi.org/api}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE" ] && . "$TIMEIS_CONFIG_DIR/$TIMEIS_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$TIMEIS_LOG_DIR" ] || mkdir -p "$TIMEIS_LOG_DIR" |& __devnull
[ -d "$TIMEIS_TEMP_DIR" ] || mkdir -p "$TIMEIS_TEMP_DIR" |& __devnull
[ -d "$TIMEIS_CACHE_DIR" ] || mkdir -p "$TIMEIS_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - -
TIMEIS_TEMP_FILE="${TIMEIS_TEMP_FILE:-$(mktemp $TIMEIS_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$TIMEIS_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$TIMEIS_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$TIMEIS_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$TIMEIS_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$TIMEIS_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$TIMEIS_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="convert get"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    TIMEIS_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    TIMEIS_CWD="$2"
    [ -d "$TIMEIS_CWD" ] || mkdir -p "$TIMEIS_CWD" |& __devnull
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# TIMEIS_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# TIMEIS_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && TIMEIS_CWD="$1" && shift 1 || TIMEIS_CWD="${TIMEIS_CWD:-$PWD}"
TIMEIS_CWD="$(realpath "${TIMEIS_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$TIMEIS_CWD" ] && cd "$TIMEIS_CWD"; then
# if [ "$TIMEIS_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $TIMEIS_CWD"
# fi
# else
# printf_exit "ðŸ’” $TIMEIS_CWD does not exist ðŸ’”"
# fi
export TIMEIS_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case $1 in
convert)
  shift 1
  __date
  __convert "$@"
  ;;

get)
  shift 1
  am_i_online --error || exit 1
  __get "$@"
  ;;

list)
  shift 1
  timezones | printf_column "$TIMEIS_OUTPUT_COLOR_2"
  exit
  ;;

search)
  shift 1
  res="$(timezones | grep -i "$1")"
  if [ -n "$res" ]; then
    printf_cyan "Found the following timezone[s]"
    echo "$res" | printf_column "$TIMEIS_OUTPUT_COLOR_2"
  else
    printf_exit "$1 is not a valid timezone"
  fi
  exit
  ;;

*)
  if [ $# -eq 0 ]; then
    __date
  else
    __get "$@"
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
