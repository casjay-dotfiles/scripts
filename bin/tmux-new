#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202409241800-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  LICENSE.md
# @@ReadME           :  tmux-new --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 28, 2022 20:25 EDT
# @@File             :  tmux-new
# @@Description      :  Launch a new tmux session with config
# @@Changelog        :  Major enhancement: Added session management, new dev environments, and comprehensive features
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202409241800-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
TMUX_NEW_REQUIRE_SUDO="${TMUX_NEW_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE"
  fi
  [ -d "$TMUX_NEW_CONFIG_DIR" ] || mkdir -p "$TMUX_NEW_CONFIG_DIR"
  [ -d "$TMUX_NEW_CONFIG_BACKUP_DIR" ] || mkdir -p "$TMUX_NEW_CONFIG_BACKUP_DIR"
  [ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ] &&
    cp -Rf "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" "$TMUX_NEW_CONFIG_BACKUP_DIR/$TMUX_NEW_CONFIG_FILE.$$"
  cat <<EOF >"$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE"
# Settings for tmux-new
TMUX_NEW_CONFIG_DIR="${TMUX_NEW_CONFIG_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Project directory options
RUN_OPTIONS_DIRS_PROJECTS="${RUN_OPTIONS_DIRS_PROJECTS:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Docker Project directory options
RUN_OPTIONS_DIRS_DOCKER_SRC="${RUN_OPTIONS_DIRS_DOCKER_SRC:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Github Project directory options
RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR="${RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Programs logging Directories
RUN_OPTIONS_LOGS_BUILDX="${RUN_OPTIONS_LOGS_BUILDX:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TMUX_NEW_OUTPUT_COLOR_1="${TMUX_NEW_OUTPUT_COLOR_1:-}"
TMUX_NEW_OUTPUT_COLOR_2="${TMUX_NEW_OUTPUT_COLOR_2:-}"
TMUX_NEW_OUTPUT_COLOR_GOOD="${TMUX_NEW_OUTPUT_COLOR_GOOD:-}"
TMUX_NEW_OUTPUT_COLOR_ERROR="${TMUX_NEW_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TMUX_NEW_NOTIFY_ENABLED="${TMUX_NEW_NOTIFY_ENABLED:-}"
TMUX_NEW_GOOD_NAME="${TMUX_NEW_GOOD_NAME:-}"
TMUX_NEW_ERROR_NAME="${TMUX_NEW_ERROR_NAME:-}"
TMUX_NEW_GOOD_MESSAGE="${TMUX_NEW_GOOD_MESSAGE:-}"
TMUX_NEW_ERROR_MESSAGE="${TMUX_NEW_ERROR_MESSAGE:-}"
TMUX_NEW_NOTIFY_CLIENT_NAME="${TMUX_NEW_NOTIFY_CLIENT_NAME:-}"
TMUX_NEW_NOTIFY_CLIENT_ICON="${TMUX_NEW_NOTIFY_CLIENT_ICON:-}"
TMUX_NEW_NOTIFY_CLIENT_URGENCY="${TMUX_NEW_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "tmux-new:  Launch a new tmux session with config - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: tmux-new [options] [commands]"
  __printf_line "Session Management:"
  __printf_line "tmux-new list                   - list active sessions"
  __printf_line "tmux-new attach <session>       - attach to session"
  __printf_line "tmux-new switch <session>       - switch to session"
  __printf_line "tmux-new rename <old> <new>     - rename session"
  __printf_line "tmux-new clone <src> <dest>     - clone session"
  __printf_line "tmux-new status                 - show session status"
  __printf_line "tmux-new nested [name]          - nested tmux with single status bar"
  __printf_line "tmux-new kill [type] [name]     - kill sessions/windows/panes"
  __printf_line "tmux-new kill all               - kill all sessions and recreate"
  __printf_line ""
  __printf_line "Development Environments:"
  __printf_line "tmux-new dev                    - general development"
  __printf_line "tmux-new go                     - Go development"
  __printf_line "tmux-new rust                   - Rust development"
  __printf_line "tmux-new python                 - Python development"
  __printf_line "tmux-new node                   - Node.js development"
  __printf_line "tmux-new devops                 - DevOps tools"
  __printf_line "tmux-new monitoring             - System monitoring"
  __printf_line "tmux-new database               - Database management"
  __printf_line ""
  __printf_line "Other Environments:"
  __printf_line "tmux-new ssh                    - SSH connections"
  __printf_line "tmux-new build                  - Build environment"
  __printf_line "tmux-new server                 - Server management"
  __printf_line "tmux-new docker                 - Docker development"
  __printf_line "tmux-new test                   - Testing environment"
  __printf_line "tmux-new default                - Basic environment"
  __printf_line ""
  __printf_line "Configuration:"
  __printf_line "tmux-new create                 - create custom config"
  __printf_line "tmux-new edit                   - edit config file"
  __printf_line "tmux-new update                 - update template and all configs"
  __printf_line "tmux-new update templates       - update template from source only"
  __printf_line "tmux-new update all             - update all session configs"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$TMUX_NEW_REQUIRE_SUDO" = "yes" ] && [ -z "$TMUX_NEW_REQUIRE_SUDO_RUN" ]; then
    export TMUX_NEW_REQUIRE_SUDO="no"
    export TMUX_NEW_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$TMUX_NEW_TEMP_FILE" ] && rm -Rf "$TMUX_NEW_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__tmux() { \tmux -L "$TMUX_NEW_SOCKET_DIR/$TMUX_NEW_SOCKET_FILE"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init() {
  local name="$1"
  if [ -f "$TMUX_NEW_FILE_CONF/$name" ]; then
    TMUX_NEW_NAME="$(basename -- "$name")"
  elif [ -f "$TMUX_NEW_FILE_CONF/$name-$name" ]; then
    TMUX_NEW_NAME="$(basename -- "$name-$name")"
  elif [ -f "$TMUX_NEW_FILE_CONF/$USER-$name" ]; then
    TMUX_NEW_NAME="$(basename -- "$USER-$name")"
  elif [ -f "$TMUX_NEW_FILE_CONF/$name-$USER" ]; then
    TMUX_NEW_NAME="$(basename -- "$name-$USER")"
  else
    TMUX_NEW_NAME="$(basename -- "$name")"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_kill_all() {
  local exitCode=0
  local session_info=""
  local session_name=""
  local session_path=""
  local session_type=""

  printf_cyan "Capturing session information..."

  # Get all sessions with their paths
  local sessions="$(tmux list-sessions -F '#{session_name}:#{session_path}' 2>/dev/null)"

  if [ -z "$sessions" ]; then
    printf_yellow "No active sessions to kill"
    return 0
  fi

  # Kill all sessions and capture their info
  while IFS=: read -r session_name session_path; do
    if [ -n "$session_name" ]; then
      printf_cyan "Killing session: $session_name (path: $session_path)"
      tmux kill-session -t "$session_name" &>/dev/null

      # Clean up resurrect data
      local resurrect_dir="${HOME}/.local/share/tmux/resurrect/${session_name}"
      if [ -d "$resurrect_dir" ]; then
        rm -rf "$resurrect_dir"
      fi

      # Extract session type from name (e.g., "single-scripts" -> "single")
      if [[ "$session_name" =~ ^([a-z]+)- ]]; then
        session_type="${BASH_REMATCH[1]}"
      else
        session_type="single"
      fi

      # Store session info for recreation
      session_info+="${session_type}:${session_path}\n"
    fi
  done <<< "$sessions"

  printf_green "All sessions killed and cleaned"

  # Recreate sessions
  if [ -n "$session_info" ]; then
    printf_cyan "Recreating sessions..."
    echo -e "$session_info" | while IFS=: read -r session_type session_path; do
      if [ -n "$session_path" ] && [ -d "$session_path" ]; then
        printf_blue "Recreating $session_type session in: $session_path"
        cd "$session_path" || continue
        tmux-new --dir "$session_path" "$session_type" &
      fi
    done
    wait
    printf_green "Sessions recreated"
  fi

  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_kill() {
  local exitCode=0
  local session="$(tmux ls 2>/dev/null)"
  case "$1" in
  all)
    shift 1
    __tmux_kill_all
    return $?
    ;;
  pane)
    shift 1
    [ $# -ne 0 ] || printf_cyan "Usage: $APPNAME kill pane [name]"
    for arg in "$@"; do
      local retVal=0
      printf_cyan "Killing pane $arg"
      tmux kill-pane "$arg" &>/dev/null
      retval=$?
      exitCode=$((exitCode + retval))
    done
    return $exitCode
    ;;
  server)
    shift
    [ $# -ne 0 ] || printf_cyan "Usage: $APPNAME kill server [name]"
    for arg in "$@"; do
      local retVal=0
      printf_cyan "Killing server $arg"
      tmux kill-server "$arg" &>/dev/null
      retval=$?
      exitCode=$((exitCode + retval))
    done
    return $exitCode
    ;;
  session)
    shift
    [ $# -ne 0 ] || printf_cyan "Usage: $APPNAME kill session [name]"
    for arg in "$@"; do
      local retVal=0
      exists="$(echo "$session" | grep ^"$arg:" || echo '')"
      if [ -n "$exists" ]; then
        printf_cyan "Killing session $arg"
        tmux kill-session -t "$arg" &>/dev/null
        retval=$?
        exitCode=$((exitCode + retval))
        if [ $retval -eq 0 ]; then
          local resurrect_dir="${HOME}/.local/share/tmux/resurrect/${arg}"
          if [ -d "$resurrect_dir" ]; then
            printf_cyan "Cleaning up resurrect data for $arg"
            rm -rf "$resurrect_dir"
          fi
        fi
      else
        printf_yellow "The session $arg does not exist"
      fi
    done
    return $exitCode
    ;;
  window)
    shift 1
    [ $# -ne 0 ] || printf_cyan "Usage: $APPNAME kill window [name]"
    for arg in "$@"; do
      local retVal=0
      printf_cyan "Killing window $arg"
      tmux kill-window -t "$arg" &>/dev/null
      retval=$?
      exitCode=$((exitCode + retval))
    done
    return $exitCode
    ;;
  *)
    printf_cyan "Usage: $APPNAME kill [pane/server/session/window] [name]"
    if [ -n "$session" ]; then
      printf '%s\n' "$session"
    fi
    exitCode=$?
    return $exitCode
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cd() {
  TMUX_NEW_CWD="${1:-$TMUX_NEW_CWD}"
  [ -d "$TMUX_NEW_CWD" ] || mkdir -p "$TMUX_NEW_CWD"
  builtin cd "$TMUX_NEW_CWD" || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_get_session_sockets() {
  local sockets="$([ -n "$TMUX_NEW_SOCKET_DIR" ] && ls "$TMUX_NEW_SOCKET_DIR" | grep -v "default" || false)"
  [ -n "$sockets" ] || return 1
  for socket in $sockets; do tmux -S $TMUX_NEW_SOCKET_DIR/$socket ls 2>/dev/null | awk -F ':' '{print $1}'; done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_get_all_sessions() {
  local default="$(tmux ls 2>/dev/null || false)"
  local sockets="$(__tmux_get_session_sockets || false)"
  [ -n "$default" ] || return 1
  printf '%s\n%s\n' "$default" "$sockets" | awk -F ':' '{print $1}'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_list() {
  local tmux_ls="$(__tmux_get_all_sessions | grep '^' || false)"
  if [ -n "$tmux_ls" ]; then
    printf '%s\n' "$tmux_ls"
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_tmux_conf() {
  [ -n "$1" ] && [ -n "$TMUX_NEW_NAME" ] || TMUX_NEW_NAME="${1:-${TMUX_NEW_NAME:-default}}"
  [ -d "$TMUX_NEW_CONFIG_DIR" ] || mkdir -p "$TMUX_NEW_CONFIG_DIR"
  if [ -f "$CASJAYSDEVDIR/templates/tmux/new.conf" ] && [ ! -f "$TMUX_NEW_CONFIG_DIR/template" ]; then
    cp -Rf "$CASJAYSDEVDIR/templates/tmux/new.conf" "$TMUX_NEW_CONFIG_DIR/template"
  else
    touch "$TMUX_NEW_CONFIG_DIR/template"
  fi
  [ -f "$TMUX_NEW_CONFIG_DIR/template" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__launch_tmux() {
  [ -n "$1" ] && [ -n "$TMUX_NEW_NAME" ] || TMUX_NEW_NAME="${1:-${TMUX_NEW_NAME:-default}}"
  [ -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" ] || printf_exit "No config file found for $TMUX_NEW_NAME"
  [ -f "$TMUX_NEW_FILE_WINDOWS/$TMUX_NEW_NAME" ] || printf_exit "No windows config file found for $TMUX_NEW_NAME"
  # Start tmux
  if [ -z "$TMUX" ]; then
    __cd
    local TMUX_NEW_RESURRECT_DIR="${HOME}/.local/share/tmux/resurrect/${TMUX_NEW_NAME}"
    local TMUX_NEW_RESURRECT_FILE="${TMUX_NEW_RESURRECT_DIR}/last"

    if [ -d "$TMUX_NEW_RESURRECT_DIR" ] && [ -f "$TMUX_NEW_RESURRECT_FILE" ]; then
      printf_green "Found saved session for $TMUX_NEW_NAME - restoring..."
      tmux -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" new-session -D -A -s $TMUX_NEW_NAME 'tmux run-shell ~/.local/share/tmux/plugins/tmux-new/tmux-resurrect/scripts/restore.sh' &>"$TMUX_NEW_LOG_DIR/$APPNAME.log"
    else
      printf_cyan "Starting new tmux enviroment for $TMUX_NEW_NAME"
      sleep 3
      tmux -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" new-session -D -A -s $TMUX_NEW_NAME 'tmux source-file '$TMUX_NEW_FILE_WINDOWS/$TMUX_NEW_NAME'' &>"$TMUX_NEW_LOG_DIR/$APPNAME.log"
    fi
    return $?
  else
    printf_exit "You appear to already have tmux running"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_conf() {
  [ -n "$1" ] && [ -n "$TMUX_NEW_NAME" ] || TMUX_NEW_NAME="${1:-${TMUX_NEW_NAME:-default}}"
  if [ -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" ] && [ -f "$TMUX_NEW_FILE_WINDOWS/$TMUX_NEW_NAME" ]; then
    return 0
  fi
  # Create main config files
  if [ ! -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" ]; then
    if [ -f "$TMUX_NEW_CONFIG_DIR/template" ]; then
      printf_cyan "Creating $TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME"
      cp -Rf "$TMUX_NEW_CONFIG_DIR/template" "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME"
      { [ -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" ] && sed -i 's|TMUX_NEW_CONF_FILE_MAIN|'${TMUX_NEW_FILE_CONF}/${TMUX_NEW_NAME}'|g' "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" || true; }
      { [ -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" ] && sed -i 's|TMUX_NEW_CONF_FILE_LOCAL|'${TMUX_NEW_FILE_CONF_LOCAL}/${TMUX_NEW_NAME}'|g' "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" || true; }
    else
      printf_exit "Can not find $TMUX_NEW_CONFIG_DIR/template"
    fi
  fi
  [ -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" ] && printf_blue "config file has been created" || printf_exit "Failed to create config file"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create tmux windows config files
__create_windows() {
  if [ ! -f "$TMUX_NEW_FILE_WINDOWS/$TMUX_NEW_NAME" ]; then
    local win_1_def="" win_2_def="" wname="" wcmd="" add_windows="" wnum="0" && shift 1
    # add more windows
    if [ $# -ne 0 ]; then
      for window in "$@"; do
        wnum=$(($wnum + 1))
        wname="$(echo "$window" | grep ':' | awk -F':' '{print $1}' | grep '^' || printf '%s' "${window:-$wnum}")"
        wcmd="$(echo "$window" | grep ':' | awk -F':' '{print $2}' | grep '^' || printf '%s' "${SHELL:-bash}")"
        add_windows="$(printf '%s\nneww -n %s  %s\n' "$add_windows" "$wname" "$wcmd" && echo '')"
      done
    fi
    printf_green "Creating tmux windows file"
    cat <<EOF >"$TMUX_NEW_FILE_WINDOWS/$TMUX_NEW_NAME"
# Window config for $TMUX_NEW_NAME
$(printf '%s\n' "$add_windows" | grep -v '^$')

EOF
    [ -f "$TMUX_NEW_FILE_WINDOWS/$TMUX_NEW_NAME" ] && printf_blue "tmux windows config file has been created" || printf_exit "Failed to create tmux windows config file"
  fi
  return
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__edit() {
  [ -n "$EDITOR" ] || printf_exit "EDITOR is not set"
  [ -n "$1" ] && [ -n "$TMUX_NEW_NAME" ] || TMUX_NEW_NAME="${1:-${TMUX_NEW_NAME:-default}}"
  [ -f "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" ] || printf_exit "Missing: $TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME"
  eval $EDITOR "$TMUX_NEW_FILE_CONF/$TMUX_NEW_NAME" "$TMUX_NEW_FILE_WINDOWS/$TMUX_NEW_NAME"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_template() {
  if [ -f "$CASJAYSDEVDIR/templates/tmux/new.conf" ]; then
    printf_cyan "Updating template from source..."
    cp -f "$CASJAYSDEVDIR/templates/tmux/new.conf" "$TMUX_NEW_CONFIG_DIR/template"
    if [ -f "$TMUX_NEW_CONFIG_DIR/template" ]; then
      printf_green "Template updated successfully"
      return 0
    else
      printf_red "Failed to update template"
      return 1
    fi
  else
    printf_red "Source template not found: $CASJAYSDEVDIR/templates/tmux/new.conf"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_all_configs() {
  local updated=0
  local failed=0

  if [ ! -f "$TMUX_NEW_CONFIG_DIR/template" ]; then
    printf_red "Template not found. Run 'tmux-new update-template' first"
    return 1
  fi

  printf_cyan "Updating all session configs from template..."

  if [ -d "$TMUX_NEW_FILE_CONF" ]; then
    for config_file in "$TMUX_NEW_FILE_CONF"/*; do
      if [ -f "$config_file" ]; then
        local session_name="$(basename "$config_file")"
        printf_blue "Updating config for session: $session_name"

        cp -f "$TMUX_NEW_CONFIG_DIR/template" "$config_file"

        if [ -f "$config_file" ]; then
          sed -i 's|TMUX_NEW_CONF_FILE_MAIN|'"${TMUX_NEW_FILE_CONF}/${session_name}"'|g' "$config_file"
          sed -i 's|TMUX_NEW_CONF_FILE_LOCAL|'"${TMUX_NEW_FILE_CONF_LOCAL}/${session_name}"'|g' "$config_file"
          printf_green "âœ“ Updated: $session_name"
          updated=$((updated + 1))
        else
          printf_red "âœ— Failed: $session_name"
          failed=$((failed + 1))
        fi
      fi
    done
  fi

  printf_cyan "Update complete: $updated updated, $failed failed"

  if [ $failed -eq 0 ]; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_attach() {
  local name="${1:-$(__tmux_list | tail -n1)}"
  [ -n "$name" ] || return 1
  tmux attach -t "$name" 2>/dev/null
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_ssh() {
  local ssh_session="$(__tmux_get_all_sessions | grep '^ssh$')"
  [ -n "$ssh_session" ] && tmux -L ssh a -t ssh || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Session management functions
__tmux_switch() {
  local session="${1:-$(__tmux_list | fzf 2>/dev/null || __tmux_list | head -1)}"
  [ -n "$session" ] || { printf_red "No session specified or available"; return 1; }
  
  if tmux has-session -t "$session" 2>/dev/null; then
    [ -n "$TMUX" ] && tmux switch-client -t "$session" || tmux attach -t "$session"
    return $?
  else
    printf_red "Session '$session' does not exist"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_rename() {
  local old_name="${1}"
  local new_name="${2}"
  [ -n "$old_name" ] && [ -n "$new_name" ] || { printf_red "Usage: tmux-new rename <old_name> <new_name>"; return 1; }
  
  if tmux has-session -t "$old_name" 2>/dev/null; then
    tmux rename-session -t "$old_name" "$new_name"
    printf_green "âœ… Session '$old_name' renamed to '$new_name'"
    return $?
  else
    printf_red "Session '$old_name' does not exist"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_status() {
  local sessions="$(__tmux_list)"
  if [ -n "$sessions" ]; then
    printf_blue "ðŸ“Š Active tmux sessions:"
    for session in $sessions; do
      local info="$(tmux list-sessions -F '#{session_name}: #{session_windows} windows, #{session_attached} clients' 2>/dev/null | grep "^$session:")"
      [ -n "$info" ] && printf_green "  $info" || printf_yellow "  $session: (info unavailable)"
    done
  else
    printf_yellow "No active tmux sessions"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__tmux_clone() {
  local source="$1"
  local target="$2"
  [ -n "$source" ] && [ -n "$target" ] || { printf_red "Usage: tmux-new clone <source> <target>"; return 1; }
  
  if ! tmux has-session -t "$source" 2>/dev/null; then
    printf_red "Source session '$source' does not exist"
    return 1
  fi
  
  if tmux has-session -t "$target" 2>/dev/null; then
    printf_red "Target session '$target' already exists"
    return 1
  fi
  
  # Copy config files if they exist
  if [ -f "$TMUX_NEW_FILE_CONF/$source" ] && [ -f "$TMUX_NEW_FILE_WINDOWS/$source" ]; then
    cp "$TMUX_NEW_FILE_CONF/$source" "$TMUX_NEW_FILE_CONF/$target"
    cp "$TMUX_NEW_FILE_WINDOWS/$source" "$TMUX_NEW_FILE_WINDOWS/$target"
    __launch_tmux "$target"
    printf_green "âœ… Session '$source' cloned to '$target'"
  else
    printf_red "Cannot clone - config files not found for '$source'"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Nested tmux with single status bar
__tmux_nested() {
  local session_name="${1:-nested-$(basename -- "$TMUX_NEW_CWD")}"
  local parent_session="${2:-main}"
  
  # Create nested tmux config with disabled outer status bar
  local nested_config="$TMUX_NEW_CONFIG_DIR/nested.conf"
  cat > "$nested_config" <<EOF
# Nested tmux configuration - single status bar
# Based on template but optimized for nesting

# Use different prefix for nested session
set-option -g prefix C-a
bind-key C-a send-prefix

# Disable status bar for outer session when nested
if-shell 'test -n "\$TMUX"' 'set -g status off' 'set -g status on'

# Status bar configuration (only for inner/active session)
set -g status on
set -g status-position bottom
set -g status-justify left
set -g status-left-length 50
set -g status-right-length 150

# Visual indicators for nested session
set -g status-left '#[fg=green,bold][NESTED: #S] '
set -g status-right '#[fg=blue]#(whoami)@#h #[fg=yellow]%Y-%m-%d %H:%M'

# Window status format
set -g window-status-format '#[fg=white]#I:#W'
set -g window-status-current-format '#[fg=black,bg=green] #I:#W '

# Colors for nested session distinction
set -g status-bg black
set -g status-fg white

# Pane borders
set -g pane-border-style fg=blue
set -g pane-active-border-style fg=green

# Copy mode
setw -g mode-keys vi

# Mouse support with natural scrolling
set -g mouse on

# Natural mouse scrolling for nested sessions
bind-key -n WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -n WheelDownPane select-pane -t = \\; send-keys -M

# In copy mode, scroll smoothly
bind-key -T copy-mode WheelUpPane send-keys -X -N 3 scroll-up
bind-key -T copy-mode WheelDownPane send-keys -X -N 3 scroll-down
bind-key -T copy-mode-vi WheelUpPane send-keys -X -N 3 scroll-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X -N 3 scroll-down

# Disable mouse drag to prevent accidental selections
unbind-key -n MouseDrag1Pane
EOF

  if [ -n "$TMUX" ]; then
    # We're inside tmux - create nested session
    printf_blue "ðŸ”— Creating nested tmux session: $session_name"
    
    # Disable status bar on current (outer) session
    tmux set -g status off
    
    # Launch nested session with new config
    tmux new-session -d -s "$session_name" -c "$TMUX_NEW_CWD"
    tmux send-keys -t "$session_name" "tmux -f '$nested_config' attach" Enter
    tmux switch-client -t "$session_name"
    
    printf_green "âœ… Nested session created with single status bar"
  else
    # Not in tmux - create normal session that supports nesting
    printf_blue "ðŸš€ Creating tmux session with nested support: $session_name"
    tmux -f "$nested_config" new-session -D -A -s "$session_name" -c "$TMUX_NEW_CWD"
  fi
  
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
TMUX_NEW_CONFIG_FILE="${TMUX_NEW_CONFIG_FILE:-settings.conf}"
TMUX_NEW_CONFIG_DIR="${TMUX_NEW_CONFIG_DIR:-$HOME/.config/myscripts/tmux-new}"
TMUX_NEW_CONFIG_BACKUP_DIR="${TMUX_NEW_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/tmux-new/backups}"
TMUX_NEW_LOG_DIR="${TMUX_NEW_LOG_DIR:-$HOME/.local/log/tmux-new}"
TMUX_NEW_TEMP_DIR="${TMUX_NEW_TEMP_DIR:-$HOME/.local/tmp/system_scripts/tmux-new}"
TMUX_NEW_CACHE_DIR="${TMUX_NEW_CACHE_DIR:-$HOME/.cache/tmux-new}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TMUX_NEW_OUTPUT_COLOR_1="${TMUX_NEW_OUTPUT_COLOR_1:-33}"
TMUX_NEW_OUTPUT_COLOR_2="${TMUX_NEW_OUTPUT_COLOR_2:-5}"
TMUX_NEW_OUTPUT_COLOR_GOOD="${TMUX_NEW_OUTPUT_COLOR_GOOD:-2}"
TMUX_NEW_OUTPUT_COLOR_ERROR="${TMUX_NEW_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TMUX_NEW_NOTIFY_ENABLED="${TMUX_NEW_NOTIFY_ENABLED:-yes}"
TMUX_NEW_GOOD_NAME="${TMUX_NEW_GOOD_NAME:-Great:}"
TMUX_NEW_ERROR_NAME="${TMUX_NEW_ERROR_NAME:-Error:}"
TMUX_NEW_GOOD_MESSAGE="${TMUX_NEW_GOOD_MESSAGE:-No errors reported}"
TMUX_NEW_ERROR_MESSAGE="${TMUX_NEW_ERROR_MESSAGE:-Errors were reported}"
TMUX_NEW_NOTIFY_CLIENT_NAME="${TMUX_NEW_NOTIFY_CLIENT_NAME:-$APPNAME}"
TMUX_NEW_NOTIFY_CLIENT_ICON="${TMUX_NEW_NOTIFY_CLIENT_ICON:-notification-new}"
TMUX_NEW_NOTIFY_CLIENT_URGENCY="${TMUX_NEW_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
TMUX_CONFIG_DIR="$HOME/.config/tmux"
TMUX_NEW_FILE_CONF="${TMUX_NEW_FILE_CONF:-$TMUX_NEW_CONFIG_DIR/conf}"
TMUX_NEW_FILE_WINDOWS="${TMUX_NEW_FILE_WINDOWS:-$TMUX_NEW_CONFIG_DIR/windows}"
TMUX_NEW_FILE_CONF_LOCAL="${TMUX_NEW_FILE_CONF_LOCAL:-$TMUX_NEW_CONFIG_DIR/local}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Project directory options
RUN_OPTIONS_DIRS_PROJECTS="${RUN_OPTIONS_DIRS_PROJECTS:-$HOME/Projects}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Docker Project directory options
RUN_OPTIONS_DIRS_DOCKER_SRC="${RUN_OPTIONS_DIRS_DOCKER_SRC:-$HOME/Projects/github/casjaysdevdocker}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Github Project directory options
RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR="${RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR:-$HOME/Projects/github/dockermgr}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Programs logging Directories
RUN_OPTIONS_LOGS_BUILDX="${RUN_OPTIONS_LOGS_BUILDX:-$HOME/.local/log/buildx}"
TMUX_NEW_SOCKET_FILE="default"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE" ] && . "$TMUX_NEW_CONFIG_DIR/$TMUX_NEW_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$TMUX_NEW_LOG_DIR" ] || mkdir -p "$TMUX_NEW_LOG_DIR" |& __devnull
[ -d "$TMUX_NEW_TEMP_DIR" ] || mkdir -p "$TMUX_NEW_TEMP_DIR" |& __devnull
[ -d "$TMUX_NEW_CACHE_DIR" ] || mkdir -p "$TMUX_NEW_CACHE_DIR" |& __devnull
[ -d "$TMUX_NEW_SOCKET_DIR" ] || mkdir -p "$TMUX_NEW_SOCKET_DIR" |& __devnull
[ -d "$RUN_OPTIONS_LOGS_BUILDX" ] || mkdir -p "$RUN_OPTIONS_LOGS_BUILDX" |& __devnull
[ -d "$RUN_OPTIONS_DIRS_PROJECTS" ] || mkdir -p "$RUN_OPTIONS_DIRS_PROJECTS" |& __devnull
[ -d "$RUN_OPTIONS_DIRS_DOCKER_SRC" ] || mkdir -p "$RUN_OPTIONS_DIRS_DOCKER_SRC" |& __devnull
[ -d "$RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR" ] || mkdir -p "$RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR" |& __devnull
[ -f "$RUN_OPTIONS_LOGS_BUILDX/init.log" ] || echo "$APPNAME has started: $(date)" >"$RUN_OPTIONS_LOGS_BUILDX/init.log" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TMUX_NEW_TEMP_FILE="${TMUX_NEW_TEMP_FILE:-$(mktemp $TMUX_NEW_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$TMUX_NEW_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$TMUX_NEW_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$TMUX_NEW_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$TMUX_NEW_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$TMUX_NEW_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$TMUX_NEW_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",kill,name:,socket:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="liskill,clean,list,attach,single,shell,server,web,docker,dev,rpm,node,bun,deno,build,ssh,productivity,test,default,edit,create"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    TMUX_NEW_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    TMUX_NEW_CWD="$2"
    [ -d "$TMUX_NEW_CWD" ] || mkdir -p "$TMUX_NEW_CWD" |& __devnull
    shift 2
    ;;
  --kill)
    shift 1
    TMUX_KILL_ENABLED="true"
    ;;
  --name)
    TMUX_NEW_SET_NAME="$2"
    shift 2
    ;;
  --socket)
    TMUX_NEW_SOCKET_FILE="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# TMUX_NEW_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# TMUX_NEW_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && TMUX_NEW_CWD="$1" && shift 1 || TMUX_NEW_CWD="${TMUX_NEW_CWD:-$PWD}"
TMUX_NEW_CWD="$(realpath "${TMUX_NEW_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$TMUX_NEW_CWD" ] && cd "$TMUX_NEW_CWD"; then
# true
# if [ "$TMUX_NEW_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $TMUX_NEW_CWD"
# fi
# else
# printf_exit "ðŸ’” $TMUX_NEW_CWD does not exist ðŸ’”"
# fi
export TMUX_NEW_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
unset TMUX_NEW_NAME
TMUX_NEW_PREFIX="$(dirname "$TMUX_NEW_CWD/dir" | awk -F '/' '{print $(NF-1)"-"$NF}')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
if [ "$TMUX_KILL_ENABLED" = "true" ]; then
  __tmux_kill "$@"
  exit $?
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ "$1" = "launch-tmux" ] && shift 1
[ -L "$HOME/.tmux.conf" ] && unlink "$HOME/.tmux.conf"
[ -d "$TMUX_CONFIG_DIR" ] || mkdir -p "$TMUX_CONFIG_DIR"
[ -d "$TMUX_NEW_FILE_CONF" ] || mkdir -p "$TMUX_NEW_FILE_CONF"
[ -d "$TMUX_NEW_FILE_WINDOWS" ] || mkdir -p "$TMUX_NEW_FILE_WINDOWS"
[ -d "$TMUX_NEW_FILE_CONF_LOCAL" ] || mkdir -p "$TMUX_NEW_FILE_CONF_LOCAL"
[ -e "$HOME/.tmux.conf" ] && [ -f "$TMUX_CONFIG_DIR/tmux.conf" ] && rm -R "$HOME/.tmux.conf"
[ -f "$TMUX_CONFIG_DIR/tmux.conf" ] || cp -Rf "$CASJAYSDEVDIR/templates/tmux/default.conf" "$TMUX_CONFIG_DIR/tmux.conf"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Migrate old plugin directory to new global location
if [ -d "$HOME/.local/share/tmux/plugins/tmux-new" ]; then
  printf_cyan "Removing old plugin directory: ~/.local/share/tmux/plugins/tmux-new"
  rm -rf "$HOME/.local/share/tmux/plugins/tmux-new"
fi
# Install plugins if tpm exists but plugins haven't been installed yet
TMUX_NEW_PLUGIN_DIR="$HOME/.local/share/tmux/plugins/default"
TMUX_NEW_PLUGIN_MARKER="$TMUX_NEW_PLUGIN_DIR/.installed"
if [ -d "$TMUX_NEW_PLUGIN_DIR/tpm" ] && [ ! -f "$TMUX_NEW_PLUGIN_MARKER" ]; then
  printf_green "Installing tmux plugins..."
  "$TMUX_NEW_PLUGIN_DIR/tpm/bin/install_plugins" &>/dev/null && touch "$TMUX_NEW_PLUGIN_MARKER"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# export variables
TMUX_NEW_SOCKET_DIR="$HOME/.config/tmux/sessions"
export RUN_OPTIONS_NO_MESSAGE="${RUN_OPTIONS_NO_MESSAGE:-true}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions
[ -z "$TMUX_NEW_CWD" ] || __cd "$TMUX_NEW_CWD"
[ -f "$TMUX_NEW_CONFIG_DIR/template" ] || __create_tmux_conf
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
kill)
  shift 1
  __tmux_kill "$@"
  exit $?
  ;;
clean)
  shift 1
  getFiles="$(ls -A "$HOME/.config/myscripts/tmux-new"/*/* 2>/dev/null)"
  if [ -n "$getFiles" ]; then
    for file in $getFiles; do printf_blue "Deleting $file" && rm -R "$file"; done
  else
    printf_yellow "There are no config files in $HOME/.config/myscripts/tmux-new/*/*"
  fi
  exit
  ;;
list | ls)
  shift 1
  __tmux_list | printf_readline || printf_exit "There are no current tmux seesions"
  exit $?
  ;;
attach | a)
  shift 1
  if [ "$1" = "ssh" ]; then
    __tmux_ssh || tmux -L ssh -f "/dev/null" new-session -D -A -s ssh 2>/dev/null
    exit $?
  else
    __tmux_attach "$1" || printf_exit "There are no current tmux seesions"
    exit $?
  fi
  ;;
switch | sw)
  shift 1
  __tmux_switch "$1"
  exit $?
  ;;
rename | mv)
  shift 1
  __tmux_rename "$1" "$2"
  exit $?
  ;;
status | info)
  shift 1
  __tmux_status
  exit $?
  ;;
clone | copy)
  shift 1
  __tmux_clone "$1" "$2"
  exit $?
  ;;
nested)
  shift 1
  __tmux_nested "$1" "$2"
  exit $?
  ;;
single)
  __init "${TMUX_NEW_SET_NAME:-single-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "single" |& __devnull
  __create_windows "single" "${1:-main:$SHELL}" ${2:-} ${3:-} ${4:-} ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "single"
  exit $?
  ;;
shell)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-shell-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "shell" |& __devnull
  __create_windows "shell" "${1:-main:$SHELL}" ${2:-} ${3:-} ${4:-} ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "shell"
  ;;
server)
  shift 1
  run_server --silent source "$TMUX_NEW_TEMP_FILE" |& __devnull
  if [ -f "$TMUX_NEW_TEMP_FILE" ]; then
    . "$TMUX_NEW_TEMP_FILE"
  fi
  __init "${TMUX_NEW_SET_NAME:-server-$(basename -- "$TMUX_NEW_CWD")}"
  set_cwd="$TMUX_NEW_CWD"
  set_port="$RUN_SERVER_PORT"
  set_logfile="$RUN_SERVER_LOG"
  set_name="${SERVER_NAME:-server}"
  set_url="${RUN_SERVER_URL:-http://localhost:19922}"
  __tmux_conf "$set_name" |& __devnull
  __create_windows "$set_name" "${1:-shell:$SHELL}" "${2:-editor:"run_options editor $set_cwd"}" "${3:-filemanager:"run_options files $set_cwd"}" "${4:-browser:"run_options browser $set_url"}" "${5:-server:"run_options server $set_cwd $set_port"}" "${6:-logs:"run_options log $set_logfile"}" |& __devnull
  __launch_tmux "$set_name"
  exit $?
  ;;
web)
  shift 1
  run_server --silent source "$TMUX_NEW_TEMP_FILE" |& __devnull
  run_server --silent source "$TMUX_NEW_TEMP_FILE" |& __devnull
  if [ -f "$TMUX_NEW_TEMP_FILE" ]; then
    . "$TMUX_NEW_TEMP_FILE"
  fi
  __init "${TMUX_NEW_SET_NAME:-web-$(basename -- "$TMUX_NEW_CWD")}"
  set_cwd="$RUN_SERVER_CWD"
  set_port="$RUN_SERVER_PORT"
  set_logfile="$RUN_SERVER_LOG"
  set_name="${SERVER_NAME:-web}"
  set_url="${RUN_SERVER_URL:-http://localhost:19922}"
  __tmux_conf "$set_name" |& __devnull
  __create_windows "$set_name" "${1:-shell:$SHELL}" "${2:-editor:"run_options editor $set_cwd"}" "${3:-filemanager:"run_options files $set_cwd"}" "${4:-browser:"run_options browser $set_url"}" "${5:-server:"run_options server $set_cwd $set_port"}" "${6:-logs:"run_options log $set_logfile"}" |& __devnull
  __launch_tmux "$set_name"
  exit $?
  ;;
docker)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-docker-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "docker" |& __devnull
  __create_windows "docker" "${1:-shell:"run_options cd $PWD"}" "${2:-mgr:"run_options cd $RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR"}" "${3:-devel:"run_options exec cdd buildx"}" "${4:-editor:"run_options cd $RUN_OPTIONS_DIRS_DOCKER_SRC"}" "${5:-build:"run_options cd $RUN_OPTIONS_DIRS_DOCKER_SRC"}" "${6:-testing:"run_options cd $RUN_OPTIONS_DIRS_DOCKER_SRC"}" "${7:-docker:"run_options cd $RUN_OPTIONS_DIRS_DOCKER_SRC"}" "${8:-logging:"run_options log $RUN_OPTIONS_LOGS_BUILDX"}" "${9:-remote:"run_options ssh"}" |& __devnull
  __launch_tmux "docker"
  exit $?
  ;;
dev)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-dev-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "dev" |& __devnull
  __create_windows "dev" "${1:-dev:$SHELL}" "${2:-editor:$SHELL}" "${3:-logging:$SHELL}" "${4:-server:$SHELL}" ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "dev"
  exit $?
  ;;
go)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-go-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "go" |& __devnull
  __create_windows "go" "${1:-main:"go run ."}" "${2:-test:"go test ./..."}" "${3:-mod:"go mod tidy"}" "${4:-editor:$SHELL}" "${5:-docs:"go doc"}" |& __devnull
  __launch_tmux "go"
  exit $?
  ;;
rust)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-rust-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "rust" |& __devnull
  __create_windows "rust" "${1:-build:"cargo build"}" "${2:-run:"cargo run"}" "${3:-test:"cargo test"}" "${4:-editor:$SHELL}" "${5:-clippy:"cargo clippy"}" "${6:-fmt:"cargo fmt"}" |& __devnull
  __launch_tmux "rust"
  exit $?
  ;;
python)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-python-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "python" |& __devnull
  __create_windows "python" "${1:-main:"python main.py"}" "${2:-test:"python -m pytest"}" "${3:-venv:"python -m venv venv && source venv/bin/activate"}" "${4:-editor:$SHELL}" "${5:-jupyter:"jupyter notebook"}" |& __devnull
  __launch_tmux "python"
  exit $?
  ;;
devops)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-devops-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "devops" |& __devnull
  __create_windows "devops" "${1:-kubectl:"kubectl get pods"}" "${2:-docker:"docker ps"}" "${3:-terraform:"terraform plan"}" "${4:-ansible:$SHELL}" "${5:-monitoring:"htop"}" "${6:-logs:"journalctl -f"}" |& __devnull
  __launch_tmux "devops"
  exit $?
  ;;
monitoring)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-monitoring-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "monitoring" |& __devnull
  __create_windows "monitoring" "${1:-htop:htop}" "${2:-logs:"journalctl -f"}" "${3:-docker:"docker stats"}" "${4:-network:"watch ss -tuln"}" "${5:-disk:"watch df -h"}" |& __devnull
  __launch_tmux "monitoring"
  exit $?
  ;;
database)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-database-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "database" |& __devnull
  __create_windows "database" "${1:-mysql:"mysql -u root"}" "${2:-postgres:"psql"}" "${3:-redis:"redis-cli"}" "${4:-mongo:"mongosh"}" "${5:-editor:$SHELL}" |& __devnull
  __launch_tmux "database"
  exit $?
  ;;
rpm)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-rpm-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "rpm" |& __devnull
  __create_windows "rpm" "main:$SHELL" "tools:$SHELL" "edit:$SHELL" "8-arm64:$SHELL" "8-amd64:$SHELL" "9-arm64:$SHELL" "9-amd64:$SHELL" "git:$SHELL" "logs:$SHELL" |& __devnull
  __launch_tmux "rpm"
  exit $?
  ;;
node)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-node-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "node" |& __devnull
  __create_windows "node" "${1:-devel:$SHELL}" "${2:-editor:$SHELL}" "${3:-client:$SHELL}" "${4:-server:$SHELL}" "${5:-database:$SHELL}" ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "node"
  exit $?
  ;;
bun)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-bun-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "bun" |& __devnull
  __create_windows "bun" "${1:-devel:$SHELL}" "${2:-editor:$SHELL}" "${3:-server:$SHELL}" "${4:-database:$SHELL}" ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "bun"
  exit $?
  ;;
deno)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-deno-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "deno" |& __devnull
  __create_windows "deno" "${1:-devel:$SHELL}" "${2:-editor:$SHELL}" "${3:-server:$SHELL}" "${4:-database:$SHELL}" ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "deno"
  exit $?
  ;;
build)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-build-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "build" |& __devnull
  __create_windows "build" "${1:-build:$SHELL}" "${2:-edit:$SHELL}" "${3:-test:$SHELL}" "${4:-log:$SHELL}" ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "build"
  exit $?
  ;;
ssh)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-ssh-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "ssh" |& __devnull
  __create_windows "ssh" "${1:-1}":"run_options ssh" "${2:-2}":"run_options ssh" "${3:-3}":"run_options ssh" "${4:-4}":"run_options ssh" "${5:-5}":"run_options ssh" "${6:-6}":"run_options ssh" "${7:-7}":"run_options ssh" |& __devnull
  __launch_tmux "ssh"
  exit $?
  ;;
productivity)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-productivity}"
  __tmux_conf "productivity" |& __devnull
  __create_windows "productivity" "todo:'run_options loop todo'" "notes:'run_options loop notes'" "scratchpad:'run_options loop scratchpad'" "tasks:'run_options loop tasks'" "blog:'run_options shell'" "tools:'run_options shell'" "weather:'run_options shell weather'" |& __devnull
  __launch_tmux "productivity"
  exit $?
  ;;
test)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-test-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "test" |& __devnull
  __create_windows "test" "${1:-1:$SHELL}" "${2:-2:$SHELL}" ${3:-} ${4:-} ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "test"
  exit $?
  ;;
default)
  shift 1
  __init "${TMUX_NEW_SET_NAME:-default-$(basename -- "$TMUX_NEW_CWD")}"
  __tmux_conf "default" |& __devnull
  __create_windows "default" "${1:-1:$SHELL}" "${2:-2:$SHELL}" "${3:-3:$SHELL}" ${4:-} ${5:-} ${6:-} ${7:-} ${8:-} ${9:-} |& __devnull
  __launch_tmux "default"
  exit $?
  ;;
edit)
  shift 1
  TMUX_NEW_NAME=""
  __init "$1"
  __edit "$1"
  exit $?
  ;;
update)
  shift 1
  case "$1" in
  templates | template)
    __update_template
    exit $?
    ;;
  all)
    __update_all_configs
    exit $?
    ;;
  *)
    __update_template && __update_all_configs
    exit $?
    ;;
  esac
  ;;
create)
  shift 1
  if [ $# -lt 3 ]; then
    printf_red "Usage: $APPNAME [name] [win1_name:command] [win2_name:command] [add_win:add_command]"
    exit 1
  fi
  TMUX_NEW_NAME=""
  __init "$1"
  __tmux_conf "$1"
  __create_windows "$@"
  exit $?
  ;;
*)
  TMUX_NEW_NAME=""
  __init "$1"
  if [ -f "$TMUX_NEW_FILE_CONF/$1" ]; then
    __launch_tmux "$1"
  elif [ -f "$TMUX_NEW_FILE_CONF/$1-$1" ]; then
    __launch_tmux "$1-$1"
  elif [ $# -lt 2 ]; then
    printf_red "Usage: $APPNAME [name] [win1_name:command] [add_win:add_command]"
    exit 1
  else
    __tmux_conf "$1"
    __create_windows "$@"
    __launch_tmux "$TMUX_NEW_NAME"
  fi
  exitCode=$?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
