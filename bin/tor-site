#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208171708-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  tor-site --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Wednesday, Aug 17, 2022 17:08 EDT
# @@File             :  tor-site
# @@Description      :  Create a local web server - Powers my tor sites
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208171708-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
TOR_SITE_REQUIRE_SUDO="${TOR_SITE_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE"
  fi
  [ -d "$TOR_SITE_CONFIG_DIR" ] || mkdir -p "$TOR_SITE_CONFIG_DIR"
  [ -d "$TOR_SITE_CONFIG_BACKUP_DIR" ] || mkdir -p "$TOR_SITE_CONFIG_BACKUP_DIR"
  [ -f "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE" ] &&
    cp -Rf "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE" "$TOR_SITE_CONFIG_BACKUP_DIR/$TOR_SITE_CONFIG_FILE.$$"
  cat <<EOF >"$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE"
# Settings for tor-site
TOR_SITE_DEFAULT_PORT="${TOR_SITE_DEFAULT_PORT:-}"
TOR_SITE_DEFAULT_HOST="${TOR_SITE_DEFAULT_HOST:-}"
TOR_SITE_DEFAULT_DIR="${TOR_SITE_DEFAULT_DIR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TOR_SITE_OUTPUT_COLOR_1="${TOR_SITE_OUTPUT_COLOR_1:-}"
TOR_SITE_OUTPUT_COLOR_2="${TOR_SITE_OUTPUT_COLOR_2:-}"
TOR_SITE_OUTPUT_COLOR_GOOD="${TOR_SITE_OUTPUT_COLOR_GOOD:-}"
TOR_SITE_OUTPUT_COLOR_ERROR="${TOR_SITE_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TOR_SITE_NOTIFY_ENABLED="${TOR_SITE_NOTIFY_ENABLED:-}"
TOR_SITE_GOOD_NAME="${TOR_SITE_GOOD_NAME:-}"
TOR_SITE_ERROR_NAME="${TOR_SITE_ERROR_NAME:-}"
TOR_SITE_GOOD_MESSAGE="${TOR_SITE_GOOD_MESSAGE:-}"
TOR_SITE_ERROR_MESSAGE="${TOR_SITE_ERROR_MESSAGE:-}"
TOR_SITE_NOTIFY_CLIENT_NAME="${TOR_SITE_NOTIFY_CLIENT_NAME:-}"
TOR_SITE_NOTIFY_CLIENT_ICON="${TOR_SITE_NOTIFY_CLIENT_ICON:-}"
TOR_SITE_NOTIFY_CLIENT_URGENCY="${TOR_SITE_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "tor-site:  Create a local web server - Powers my tor sites   - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: tor-site [options] [commands] [port]"
  __printf_line "* [port]                        - Start development server"
  __printf_line "create [port]                   - Create a server config"
  __printf_line "start [port]                    - start server on PORT"
  __printf_line "stop [port]                     - Stop server running on port"
  __printf_line "status [port]                   - Get status"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Service Options: [install,remove,create,run] [port] [directory]"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "service install [port]          - Install server"
  __printf_line "service remove [port]           - Delete server"
  __printf_line "service create [port]           - Create server"
  __printf_line "service run [port]              - run server: This is what start server calls"
  __printf_line "--dir [dir]                     - Set the tor dir [port will be appended]"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$TOR_SITE_REQUIRE_SUDO" = "yes" ] && [ -z "$TOR_SITE_REQUIRE_SUDO_RUN" ]; then
    export TOR_SITE_REQUIRE_SUDO="no"
    export TOR_SITE_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$TOR_SITE_TEMP_FILE" ] && rm -Rf "$TOR_SITE_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__test_numbers() { test -n "$1" && test -z "${1//[0-9]/}" && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__is_root() { {
  sudo -ll -U ${1:-$USER} 2>/dev/null | grep -q 'ALL' &>/dev/null ||
    sudo -n -u ${1:-$USER} &>/dev/null || [ "$EUID" = 0 ]
} && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__replace() { sed -i 's|'"$1"'|'"$2"'|g' "$3" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__stop_server() {
  kill -15 "${1:-$pid}" &>/dev/null
  __get_pid "${1:-$pid}" && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__test_server() { netstatg "${1:-$TOR_SITE_DEFAULT_PORT}" | grep -q python && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cd() { cd "${1:-$TOR_SITE_CWD}" || { echo "Failed to enter ${1:-$TOR_SITE_CWD}" && return 1; }; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_pid() {
  local pid=""
  pid="$(ps -ef | grep $1 | grep python | tr -s ' ' | cut -d ' ' -f2)"
  [ -n "$pid" ] && echo "$pid" >"$TOR_SITE_PID_FILE" || __rm_rf "$TOR_SITE_PID_FILE"
  [ -f "$TOR_SITE_PID_FILE" ] && [ -s "$TOR_SITE_PID_FILE" ] && cat "$TOR_SITE_PID_FILE"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__server_status() {
  pid="$(__get_pid "$TOR_SITE_DEFAULT_PORT")"
  if [ -n "$pid" ]; then
    echo "Running on http://localhost:$TOR_SITE_DEFAULT_PORT with pid: $pid" | printf_readline $TOR_SITE_OUTPUT_COLOR_1
  else
    printf_red "Not running on http://localhost:$TOR_SITE_DEFAULT_PORT"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_server() {
  __cd "$TOR_SITE_CWD"
  { python3 -m http.server --cgi --bind ${TOR_SITE_DEFAULT_HOST:-127.0.0.1} "$TOR_SITE_DEFAULT_PORT" &>/dev/null ||
    python2 -m http.server --cgi --bind ${TOR_SITE_DEFAULT_HOST:-127.0.0.1} "$TOR_SITE_DEFAULT_PORT" &>/dev/null ||
    python -m SimpleHTTPServer "$TOR_SITE_DEFAULT_PORT" &>/dev/null || return 1; } &
  sleep 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__run_service_server() {
  __cd "$TOR_SITE_CWD"
  { python3 -m http.server --cgi --bind ${TOR_SITE_DEFAULT_HOST:-127.0.0.1} "$TOR_SITE_DEFAULT_PORT" &>/dev/null ||
    python2 -m http.server --cgi --bind ${TOR_SITE_DEFAULT_HOST:-127.0.0.1} "$TOR_SITE_DEFAULT_PORT" &>/dev/null ||
    python -m SimpleHTTPServer "$TOR_SITE_DEFAULT_PORT" &>/dev/null || return 1; }
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__start_py_server() {
  local TOR_SITE_CWD="${1:-$TOR_SITE_CWD}"
  local TOR_SITE_DEFAULT_PORT="${2:-$TOR_SITE_DEFAULT_PORT}"
  local exitCode="0"
  __run_server || return 1
  if __test_server "$TOR_SITE_DEFAULT_PORT" &>/dev/null; then
    TOR_SERVER_STATUS="running"
    TOR_SERVER_STATUS_PID="$(__get_pid "$TOR_SITE_DEFAULT_PORT")"
    exitCode=0
  else
    TOR_SERVER_STATUS="not_running"
    TOR_SERVER_STATUS_PID="0000"
    echo "Failed"
    exitCode=1
  fi
  export TOR_SERVER_STATUS TOR_SERVER_STATUS_PID
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_site() {
  local set_dir=""
  [ "$TOR_SITE_DIR_IS_SET" = "true" ] && set_dir="$TOR_SITE_CWD" || set_dir="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
  printf_blue "Creating your tor site"
  if [ ! -f "$set_dir/index.html" ] && [ ! -f "$set_dir/index.php" ] && [ ! -f "$set_dir/index.htm" ]; then
    __mkd "$set_dir" &>/dev/null
    __cp_rf "$CASJAYSDEVDIR/templates/tor-site/." "$set_dir" &>/dev/null
    __replace "REPLACE_MYHOSTNAME" "$HOSTNAME" "$set_dir/index.html" &>/dev/null
    __replace "REPLACE_FOLDER" "$set_dir" "$set_dir/index.html" &>/dev/null
    if [ -f "/etc/systemd/system/tor_site_${TOR_SITE_DEFAULT_PORT}.service" ]; then
      __replace "REPLACE_SYSTEMD" "tor_site_${TOR_SITE_DEFAULT_PORT}.service" "$set_dir/index.html" &>/dev/null
    else
      grep -Ev "REPLACE_SYSTEMD|tor_site_8082.service" "$set_dir/index.html" >"$set_dir/index.html.$$"
      [ -f "$set_dir/index.html.$$" ] && mv -f "$set_dir/index.html.$$" "$set_dir/index.html"
    fi
  fi
  if [ -f "$set_dir/index.html" ] || [ -f "$set_dir/index.php" ] || [ -f "$set_dir/index.htm" ]; then
    printf_green "Setup tor-site to listen on port $TOR_SITE_DEFAULT_PORT"
    printf_green "and to serve $set_dir"
    exitCode=0
  else
    printf_red "Failed to setup $set_dir"
    exitCode=1
  fi
  TOR_SITE_CWD="$set_dir"
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__systemd() {
  __create_site
  [ "$TOR_SITE_DIR_IS_SET" = "true" ] && set_dir="$TOR_SITE_CWD" || set_dir="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
  cat <<EOF | sudo tee -p /etc/systemd/system/tor_site_${TOR_SITE_DEFAULT_PORT}.service &>/dev/null
[Unit]
Description=Tor Hidden Site localhost:$TOR_SITE_DEFAULT_PORT
Before=tor.service
After=network.target

[Service]
Type=simple
User=$USER
Environment=TOR_SITE_DEFAULT_PORT="$TOR_SITE_DEFAULT_PORT"
Environment=TOR_SITE_CWD="$set_dir"
WorkingDirectory=$set_dir
ExecStart=/bin/bash -c "$SRC_DIR/$APPNAME service run $TOR_SITE_DEFAULT_PORT $set_dir"
ExecStop=/bin/bash -c "$SRC_DIR/$APPNAME stop $TOR_SITE_DEFAULT_PORT"
Restart=always
#RestartSec=5
#StartLimitBurst=10
#StartLimitInterval=60s

[Install]
WantedBy=multi-user.target

EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__service() {
  [ "$TOR_SITE_DIR_IS_SET" = "true" ] && set_dir="$TOR_SITE_CWD" || set_dir="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
  #!/usr/bin/env xdg-open
  cat <<EOF | tee -p /.config/autostart/tor_site_$TOR_SITE_DEFAULT_PORT.desktop &>/dev/null
[Desktop Entry]
Version=1.0
Type=Application
Name=Tor-$TOR_SITE_DEFAULT_PORT
GenericName=Tor-$TOR_SITE_DEFAULT_PORT
Comment=Tor service on port $TOR_SITE_DEFAULT_PORT.
Icon=tor
Exec=/bin/bash -c "$SRC_DIR/$APPNAME service run $TOR_SITE_DEFAULT_PORT $set_dir"
Terminal=false
Actions=
Categories=Internet;GTK;X-XFCE;GNOME;MyScripts
Keywords=mpd;music;player;my;
StartupNotify=false

EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
TOR_SITE_CONFIG_FILE="${TOR_SITE_CONFIG_FILE:-settings.conf}"
TOR_SITE_CONFIG_DIR="${TOR_SITE_CONFIG_DIR:-$HOME/.config/myscripts/tor-site}"
TOR_SITE_CONFIG_BACKUP_DIR="${TOR_SITE_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/tor-site/backups}"
TOR_SITE_LOG_DIR="${TOR_SITE_LOG_DIR:-$HOME/.local/log/tor-site}"
TOR_SITE_TEMP_DIR="${TOR_SITE_TEMP_DIR:-$HOME/.local/tmp/system_scripts/tor-site}"
TOR_SITE_CACHE_DIR="${TOR_SITE_CACHE_DIR:-$HOME/.cache/tor-site}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
TOR_SITE_OUTPUT_COLOR_1="${TOR_SITE_OUTPUT_COLOR_1:-33}"
TOR_SITE_OUTPUT_COLOR_2="${TOR_SITE_OUTPUT_COLOR_2:-5}"
TOR_SITE_OUTPUT_COLOR_GOOD="${TOR_SITE_OUTPUT_COLOR_GOOD:-2}"
TOR_SITE_OUTPUT_COLOR_ERROR="${TOR_SITE_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
TOR_SITE_NOTIFY_ENABLED="${TOR_SITE_NOTIFY_ENABLED:-yes}"
TOR_SITE_GOOD_NAME="${TOR_SITE_GOOD_NAME:-Great:}"
TOR_SITE_ERROR_NAME="${TOR_SITE_ERROR_NAME:-Error:}"
TOR_SITE_GOOD_MESSAGE="${TOR_SITE_GOOD_MESSAGE:-No errors reported}"
TOR_SITE_ERROR_MESSAGE="${TOR_SITE_ERROR_MESSAGE:-Errors were reported}"
TOR_SITE_NOTIFY_CLIENT_NAME="${TOR_SITE_NOTIFY_CLIENT_NAME:-$APPNAME}"
TOR_SITE_NOTIFY_CLIENT_ICON="${TOR_SITE_NOTIFY_CLIENT_ICON:-notification-new}"
TOR_SITE_NOTIFY_CLIENT_URGENCY="${TOR_SITE_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
TOR_SITE_DEFAULT_PORT="${TOR_SITE_DEFAULT_PORT:-8082}"
TOR_SITE_DEFAULT_HOST="${TOR_SITE_DEFAULT_HOST:-127.0.0.1}"
TOR_SITE_DEFAULT_DIR="${TOR_SITE_DEFAULT_DIR:-$HOME/Public/tor}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE" ] && . "$TOR_SITE_CONFIG_DIR/$TOR_SITE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$TOR_SITE_LOG_DIR" ] || mkdir -p "$TOR_SITE_LOG_DIR" |& __devnull
[ -d "$TOR_SITE_TEMP_DIR" ] || mkdir -p "$TOR_SITE_TEMP_DIR" |& __devnull
[ -d "$TOR_SITE_CACHE_DIR" ] || mkdir -p "$TOR_SITE_CACHE_DIR" |& __devnull
[ -d "$TOR_SITE_DEFAULT_DIR" ] || mkdir -p "$TOR_SITE_DEFAULT_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TOR_SITE_TEMP_FILE="${TOR_SITE_TEMP_FILE:-$(mktemp $TOR_SITE_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$TOR_SITE_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$TOR_SITE_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$TOR_SITE_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$TOR_SITE_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$TOR_SITE_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$TOR_SITE_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS="p:"
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",port:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="status stop start create service"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    TOR_SITE_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    TOR_SITE_CWD="$2"
    TOR_SITE_DEFAULT_DIR="$2"
    [ -d "$TOR_SITE_CWD" ] || mkdir -p "$TOR_SITE_CWD" |& __devnull
    shift 2
    ;;
  -p | --port)
    TOR_SITE_DEFAULT_PORT="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# TOR_SITE_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# TOR_SITE_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && TOR_SITE_CWD="$1" && shift 1 || TOR_SITE_CWD="${TOR_SITE_CWD:-$PWD}"
TOR_SITE_CWD="$(realpath "${TOR_SITE_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$TOR_SITE_CWD" ] && cd "$TOR_SITE_CWD"; then
# if [ "$TOR_SITE_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $TOR_SITE_CWD"
# fi
# else
# printf_exit "ðŸ’” $TOR_SITE_CWD does not exist ðŸ’”"
# fi
export TOR_SITE_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__user_is_root && TOR_SITE_CWD="/usr/local/share/tor-site" || TOR_SITE_CWD="$TOR_SITE_DEFAULT_DIR"
TOR_SITE_PID_FILE="${TOR_SITE_PID_FILE:-$TOR_SITE_TEMP_DIR/$TOR_SITE_DEFAULT_PORT.pid}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
service) # service options
  shift 1
  case "$1" in
  install)
    shift 1
    if __test_numbers "$1"; then
      TOR_SITE_DEFAULT_PORT="$1"
      TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
      TOR_SITE_DIR_IS_SET="true"
      shift 1
    fi
    if __is_root "$USER" &>/dev/null; then
      printf_green "Creating systemd service"
      __systemd ${1:-$TOR_SITE_CWD}
      if [ -f "/etc/systemd/system/tor_site_${TOR_SITE_DEFAULT_PORT}.service" ]; then
        sudo systemctl daemon-reload &>/dev/null
        sudo systemctl enable --now tor_site_${TOR_SITE_DEFAULT_PORT}.service &>/dev/null
        printf_blue "Systemd service has been created"
      else
        printf_exit "Failed to create tor sevice"
      fi
    else
      printf_red "You need to be root in order to install the systemd service"
      printf_blue "Configuring for a user install instead"
      __create_site $TOR_SITE_CWD
    fi
    ;;

  remove)
    shift 1
    if __test_numbers "$1"; then
      TOR_SITE_DEFAULT_PORT="$1"
      TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
      TOR_SITE_DIR_IS_SET="true"
      shift 1
    fi
    TOR_SITE_CWD="${1:-$TOR_SITE_CWD}"
    if [ -f "/etc/systemd/system/tor_site_${TOR_SITE_DEFAULT_PORT}.service" ]; then
      printf_cyan "Removing tor_site_${TOR_SITE_DEFAULT_PORT}.service"
      sudo systemctl disable --now tor_site_${TOR_SITE_DEFAULT_PORT}.service &>/dev/null &&
        sudo rm -Rf /etc/systemd/system/tor_site_${TOR_SITE_DEFAULT_PORT}.service &>/dev/null &&
        sudo systemctl daemon-reload &>/dev/null
    else
      printf_blue "No systemd service exists for tor-site on $TOR_SITE_DEFAULT_PORT"
    fi
    exit $?
    ;;

  run)
    shift 1
    if __test_numbers "$1"; then
      TOR_SITE_DEFAULT_PORT="$1"
      TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
      TOR_SITE_DIR_IS_SET="true"
      shift 1
    fi
    TOR_SITE_CWD="${1:-$TOR_SITE_CWD}"
    __run_service_server
    exit ${exitCode:-0}
    ;;
  esac
  ;; # end service options

create)
  shift 1
  if __test_numbers "$1"; then
    TOR_SITE_DEFAULT_PORT="$1"
    TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
    TOR_SITE_DIR_IS_SET="true"
    shift 1
  fi
  TOR_SITE_CWD="${1:-$TOR_SITE_CWD}"
  __create_site
  exit $?
  ;;

status)
  shift 1
  if __test_numbers "$1"; then
    TOR_SITE_DEFAULT_PORT="$1"
    TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
    TOR_SITE_DIR_IS_SET="true"
    shift 1
  fi
  __server_status
  exit $?
  ;;

start)
  shift 1
  if __test_numbers "$1"; then
    TOR_SITE_DEFAULT_PORT="$1"
    TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
    TOR_SITE_DIR_IS_SET="true"
    shift 1
  fi
  TOR_SITE_CWD="${1:-$TOR_SITE_CWD}"
  __run_service_server
  exit ${exitCode:-0}
  ;;

stop)
  shift 1
  if __test_numbers "$1"; then
    TOR_SITE_DEFAULT_PORT="$1"
    TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
    TOR_SITE_DIR_IS_SET="true"
    shift 1
  fi
  pid="$(__get_pid "$TOR_SITE_DEFAULT_PORT")"
  if [ -n "$pid" ]; then
    if __stop_server "$pid" &>/dev/null; then
      printf_green "Server has been stopped"
      exitCode=0
    else
      printf_return "Failed to stop the server: kill -9 $pid"
      exitCode=1
    fi
  else
    printf_red "No sites are running on port $TOR_SITE_DEFAULT_PORT"
    exitCode=0
  fi
  exit ${exitCode:-0}
  ;;

*)
  if __test_numbers "$1"; then
    TOR_SITE_DEFAULT_PORT="$1"
    TOR_SITE_CWD="$TOR_SITE_CWD/$TOR_SITE_DEFAULT_PORT"
    TOR_SITE_DIR_IS_SET="true"
    shift 1
  fi
  [ -d "$TOR_SITE_CWD" ] || mkdir -p "$TOR_SITE_CWD"
  cd "$TOR_SITE_CWD" || printf_exit 1 1 "Failed to enter $TOR_SITE_CWD"
  if __test_server "$TOR_SITE_DEFAULT_PORT" &>/dev/null; then
    printf_exit "Something is already running on port $TOR_SITE_DEFAULT_PORT"
  else
    printf_green "Attempting to start development server on http://$TOR_SITE_DEFAULT_HOST:$TOR_SITE_DEFAULT_PORT"
    __create_site "$TOR_SITE_CWD" "$TOR_SITE_DEFAULT_PORT" &>/dev/null
    __start_py_server "$TOR_SITE_CWD" "$TOR_SITE_DEFAULT_PORT"
    if [ $? -eq 0 ]; then
      _server_pid="$(__get_pid "$TOR_SITE_DEFAULT_PORT")"
      printf_purple "The server has been started on port $TOR_SITE_DEFAULT_PORT"
      printf_yellow "Serving from $TOR_SITE_CWD"
      printf_cyan "type${RED} kill -15 $_server_pid ${GREEN}to stop the server when you are done"
    else
      printf_exit "Failed to start the server"
    fi
  fi
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
