#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208180148-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  update-motd --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 18, 2022 01:48 EDT
# @@File             :  update-motd
# @@Description      :  Update the MOTD and ISSUE files
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  yes
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208180148-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
UPDATE_MOTD_REQUIRE_SUDO="${UPDATE_MOTD_REQUIRE_SUDO:-yes}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE"
  fi
  [ -d "$UPDATE_MOTD_CONFIG_DIR" ] || mkdir -p "$UPDATE_MOTD_CONFIG_DIR"
  [ -d "$UPDATE_MOTD_CONFIG_BACKUP_DIR" ] || mkdir -p "$UPDATE_MOTD_CONFIG_BACKUP_DIR"
  [ -f "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE" ] &&
    cp -Rf "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE" "$UPDATE_MOTD_CONFIG_BACKUP_DIR/$UPDATE_MOTD_CONFIG_FILE.$$"
  cat <<EOF >"$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE"
# Settings for update-motd
UPDATE_MOTD_ENABLED="${UPDATE_MOTD_ENABLED:-}"
UPDATE_MOTD_COWSAY_FILE="${UPDATE_MOTD_COWSAY_FILE:-}"
UPDATE_MOTD_COWSAY_PROGRAM="${UPDATE_MOTD_COWSAY_PROGRAM:-}"
UPDATE_MOTD_MESSAGE_DIR="${UPDATE_MOTD_MESSAGE_DIR:-}"
UPDATE_MOTD_VERSION_DIR="${UPDATE_MOTD_VERSION_DIR:-}"
UPDATE_MOTD_GIT_VERSION_FORMAT="${VERSION_DATE_FORMAT:-}"
UPDATE_MOTD_DEFAULT_MESSAGE="${UPDATE_MOTD_DEFAULT_MESSAGE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
UPDATE_MOTD_OUTPUT_COLOR_1="${UPDATE_MOTD_OUTPUT_COLOR_1:-}"
UPDATE_MOTD_OUTPUT_COLOR_2="${UPDATE_MOTD_OUTPUT_COLOR_2:-}"
UPDATE_MOTD_OUTPUT_COLOR_GOOD="${UPDATE_MOTD_OUTPUT_COLOR_GOOD:-}"
UPDATE_MOTD_OUTPUT_COLOR_ERROR="${UPDATE_MOTD_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
UPDATE_MOTD_NOTIFY_ENABLED="${UPDATE_MOTD_NOTIFY_ENABLED:-}"
UPDATE_MOTD_GOOD_NAME="${UPDATE_MOTD_GOOD_NAME:-}"
UPDATE_MOTD_ERROR_NAME="${UPDATE_MOTD_ERROR_NAME:-}"
UPDATE_MOTD_GOOD_MESSAGE="${UPDATE_MOTD_GOOD_MESSAGE:-}"
UPDATE_MOTD_ERROR_MESSAGE="${UPDATE_MOTD_ERROR_MESSAGE:-}"
UPDATE_MOTD_NOTIFY_CLIENT_NAME="${UPDATE_MOTD_NOTIFY_CLIENT_NAME:-}"
UPDATE_MOTD_NOTIFY_CLIENT_ICON="${UPDATE_MOTD_NOTIFY_CLIENT_ICON:-}"
UPDATE_MOTD_NOTIFY_CLIENT_URGENCY="${UPDATE_MOTD_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "update-motd:  Update the MOTD and ISSUE files - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: update-motd [options] [commands]"
  __printf_line " - "
  __printf_line " - "
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$UPDATE_MOTD_REQUIRE_SUDO" = "yes" ] && [ -z "$UPDATE_MOTD_REQUIRE_SUDO_RUN" ]; then
    export UPDATE_MOTD_REQUIRE_SUDO="no"
    export UPDATE_MOTD_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$UPDATE_MOTD_TEMP_FILE" ] && rm -Rf "$UPDATE_MOTD_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__fix_resolver() {
  grep -qs '^nameserver' "/etc/resolv.conf" && return
  cat <<EOF | tee -p "/etc/resolv.conf" 2>/dev/null >/dev/null
# DNS Resolver
search casjay.in
nameserver 1.1.1.1
nameserver 8.8.8.8
nameserver 132.226.33.75

EOF
  [ -f "/etc/resolv.conf" ] || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__lsb_os() {
  local lsb_bin="$(type -P lsb_release 2>/dev/null || type -P lsb-release 2>/dev/null || echo '')"
  if [ -n "$lsb_bin" ]; then
    $lsb_bin -a | grep 'Distributor ID' | awk -F ':' '{print $2}' | sed "s/^[ \t]*//"
  elif [ -n "$DISTRO_NAME" ]; then
    echo "$DISTRO_NAME" | sed 's|[0-9]||g;s|\.||g'
  elif [ -n "$DISTRO_ID" ]; then
    echo "$DISTRO_ID" | sed 's|[0-9]||g;s|\.||g'
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_cockpit_motd() {
  local cockpit_motd="$(ls -A /etc/motd.d/*cockpit* 2>/dev/null | head -n1 | grep '^' || echo '/etc/motd.d/cockpit')"
  [ -f "/usr/share/cockpit/motd/update-motd" ] && /usr/share/cockpit/motd/update-motd &>/dev/null
  if [ -f "/run/cockpit/active.motd" ] && [ -d "/etc/motd.d" ]; then
    ln -sf "/run/cockpit/active.motd" "$cockpit_motd" &>/dev/null
  elif [ -f "/run/cockpit/inactive.motd" ] && [ -d "/etc/motd.d" ]; then
    ln -sf "/run/cockpit/inactive.motd" "$cockpit_motd" &>/dev/null
  else
    [ -f "/etc/motd.d/$cockpit_motd" ] && rm -Rf "$cockpit_motd" &>/dev/null
  fi
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__getlipaddr() {
  local CHANGE_IP_VAR_DIR="" IFCONFIG""
  CHANGE_IP_VAR_DIR="${CHANGE_IP_VAR_DIR:-/var/lib/system-scripts/checkip}"
  [ -d "$CHANGE_IP_VAR_DIR" ] || sudo mkdir -p "$CHANGE_IP_VAR_DIR"
  if [[ "$OSTYPE" =~ ^darwin ]]; then
    NETDEV="$(route get default 2>/dev/null | grep interface | awk '{print $2}')"
  else
    NETDEV="$(ip route 2>/dev/null | grep default | sed -e "s/^.*dev.//" -e "s/.proto.*//" | awk '{print $1}' | head -n1 | grep '^' || echo 'eth0')"
  fi
  IFCONFIG="$(builtin type -P /sbin/ifconfig || builtin type -P ifconfig)"
  if [ -f "$IFCONFIG" ]; then
    # net-tools package
    CURRENT_IP_4="$(/sbin/ifconfig $NETDEV 2>/dev/null | grep -E "venet|inet" | grep -v "127.0.0." | grep 'inet' | grep -v inet6 | awk '{print $2}' | sed s/addr://g | head -n1 | grep '^')"
    CURRENT_IP_6="$(/sbin/ifconfig $NETDEV 2>/dev/null | grep -E "venet|inet" | grep 'inet6' | grep -i global | awk '{print $2}' | head -n1 | grep '^')"
  else
    CURRENT_IP_4="$(ip -o -f inet address show $NETDEV | awk -F'/' '{print $1}' | awk '{print $NF}' | head -n 1 | grep '^')"
    CURRENT_IP_6="$(ip -o -f inet6 address show $NETDEV | awk -F'/' '{print $1}' | awk '{print $NF}' | head -n 1 | grep '^')"
  fi
  [ -n "$NETDEV" ] || NETDEV="lo"
  [ -n "$CURRENT_IP_4" ] || CURRENT_IP_4="127.0.0.1"
  [ -n "$CURRENT_IP_6" ] || CURRENT_IP_6="::1"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__restart_motd_services() {
  local SYSTEMD_MOTD_SERVICES=""
  SYSTEMD_MOTD_SERVICES="$(systemctl --all | grep 'motd' | awk '{print $1}' | sort -u | grep -v '^$')"
  for service in $SYSTEMD_MOTD_SERVICES; do
    systemctl restart $service |& __devnull
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__remove_duplicate_motd() {
  issue_d_dir="/etc/issue.d"
  motd_d_dir="/etc/motd.d"
  messages="$(find -L "$motd_d_dir" -type f 2>/dev/null | wc -l)"
  if [ "$messages" != "0" ] && [ -d "$issue_d_dir" ]; then
    for file in $(ls "$motd_d_dir" 2>/dev/null); do
      filename="$(basename -- "$file" 2>/dev/null)"
      motd_file="$motd_d_dir/$filename"
      issue_file="$(find "$issue_d_dir/" -iname "$file*" 2>/dev/null | head -n1)"
      [ -f "$issue_file" ] && __sudo rm -f "$issue_file"
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_fortune_motd() {
  local cow_text="" fortune_text="" cow_file="" fortune_file=""
  local PATH="$HOME/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/games:/usr/games"
  cow_file="/tmp/cow.txt"
  fortune_file="$(builtin type -P fortune || echo 'true')"
  fortune_text="$($fortune_file -s 2>/dev/null | grep '^' || echo "${UPDATE_MOTD_DEFAULT_MESSAGE:-Yea, it probably doesnt work}")"
  if [ "$UPDATE_MOTD_COWSAY_FILE" = "true" ] && [ -f "$(type -P "$UPDATE_MOTD_COWSAY_PROGRAM")" ]; then
    cow_text=$(printf '%s\n' "$fortune_text" | $UPDATE_MOTD_COWSAY_PROGRAM 2>/dev/null | grep '^' || echo '')
  else
    cow_text="$fortune_text"
  fi
  [ -n "$cow_text" ] || cow_text="$fortune_text"
  printf '\n%s' "$cow_text" | grep -v '^$' && printf '\n'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_versions() {
  [ -n "$distro_version" ] || distro_version="N/A"
  local distro_name="$(__lsb_os || echo 'Unknown')"
  local kernel_version="$(uname --kernel-release 2>/dev/null | grep '^' || echo '1.0.0')"
  printf '\n'
  printf "Distro name: %s\n" "$distro_name" | grep -v '^$'
  if __if_os_id debian; then
    printf "Debian version: %s\n" "$distro_version" | grep -v '^$'
    printf 'Kernel version %s\n' "$kernel_version" | grep -v '^$'
    printf "Config version: %s\n" "$configs_version" | grep -v '^$'
  elif __if_os_id rhel; then
    printf "RHEL version: %s\n" "$distro_version" | grep -v '^$'
    printf 'Kernel version %s\n' "$kernel_version" | grep -v '^$'
    printf "Config version: %s\n" "$configs_version" | grep -v '^$'
  elif __if_os_id arch; then
    printf "Arch version: %s\n" "$distro_version" | grep -v '^$'
    printf 'Kernel version %s\n' "$kernel_version" | grep -v '^$'
    printf "Config version: %s\n" "$configs_version" | grep -v '^$'
  elif __if_os_id mac; then
    printf "Mac version: %s\n" "$distro_version" | grep -v '^$'
    printf 'Kernel version %s\n' "$kernel_version" | grep -v '^$'
    printf "Config version: %s\n" "$configs_version" | grep -v '^$'
  else
    printf "OS Version: %s\n" "$distro_version" | grep -v '^$'
    printf 'Kernel version %s' "$kernel_version" | grep -v '^$'
    printf "Config Version: %s\n" "$configs_version" | grep -v '^$'
  fi
  printf 'Scripts version %s' "$scripts_version" | grep -v '^$'
  printf 'configs were last updated on: %s' "$configs_date" | grep -v '^$'
  printf 'scripts package was last updated on: %s' "$scripts_date" | grep -v '^$'
  printf 'Messages were last updated on: %s' "$(date +"%b %d, %Y at %H:%M")" | grep -v '^$'
  printf "\n\n" | grep '^$'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_legal() {
  messages=$(find -L "$UPDATE_MOTD_MESSAGE_DIR/legal" -type f -name '*.txt' 2>/dev/null | wc -l)
  if [ "$messages" != "0" ]; then
    printf '\n'
    sudo -HE ${sed:-sed} -i 's|MY_FULL_HOSTNAME|'$HOSTNAME'|g' "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt" |& __devnull
    sudo -HE ${sed:-sed} -i 's|MY_SHORT_HOSTNAME|'$HOSTSHORT'|g' "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt" |& __devnull
    sudo -HE ${sed:-sed} -i 's|MYHOSTIP_4|'$CURRENT_IP_4'|g' "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt" |& __devnull
    sudo -HE ${sed:-sed} -i 's|MYHOSTIP_6|'$CURRENT_IP_6'|g' "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt" |& __devnull
    sudo -HE ${sed:-sed} -i 's|KERNEL_VERSION|'$kernel_version'|g' "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt" |& __devnull
    sudo -HE find "$UPDATE_MOTD_MESSAGE_DIR" -type f -exec "${sed:-sed}" -i 's|.*Welcome to.*!|Welcome to '$HOSTNAME'!#g' {} \; |& __devnull
    sudo -HE find "$UPDATE_MOTD_MESSAGE_DIR" -type f -exec "${sed:-sed}" -i 's|.*MY Hostname is.*|MY Hostname is              : '$HOSTSHORT'|g' {} \; |& __devnull
    sudo -HE find "$UPDATE_MOTD_MESSAGE_DIR" -type f -exec "${sed:-sed}" -i 's|.*MY IP Address is.*|MY IP Address is            : '$CURRENT_IP_4'|g' {} \; |& __devnull
    sudo -HE find "$UPDATE_MOTD_MESSAGE_DIR" -type f -exec "${sed:-sed}" -i 's|.*MY IP6 Address is.*|MY IP6 Address is           : '$CURRENT_IP_6'|g' {} \; |& __devnull
    sudo -HE find "$UPDATE_MOTD_MESSAGE_DIR" -type f -exec "${sed:-sed}" -i 's|.*MY Kernel version is.*|MY Kernel version is        : '$UPDATE_MOTD_KERNEL_VERSION'|g' {} \; |& __devnull
    if [ -z "$CURRENT_IP_6" ]; then
      sudo -HE find "$UPDATE_MOTD_MESSAGE_DIR" -type f -exec "${sed:-sed}" -i '/.*MY IP6 Address is.*/d'
    fi
    for f in $UPDATE_MOTD_MESSAGE_DIR/legal/*.txt; do
      cat "$f" 2>/dev/null | "${sed:-sed}" '/^$/d' | grep -v '^$'
    done
    printf '\n'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_issue() {
  messages=$(find -L "$UPDATE_MOTD_MESSAGE_DIR/issue" -type f -name '*.txt' 2>/dev/null | wc -l)
  if [ "$messages" != "0" ]; then
    for f in $UPDATE_MOTD_MESSAGE_DIR/issue/*.txt; do
      [ "$f" = "" ] && grep '^$' || cat "$f" 2>/dev/null | "${sed:-sed}" '/^$/d' | grep -v '^$'
    done
    printf '\n'
  fi

  messages=$(find -L "/etc/issue.d" -type f 2>/dev/null | wc -l)
  if [ "$messages" != "0" ]; then
    for f in /etc/issue.d/*; do
      [ "$f" = "" ] && grep '^$' || cat "$f" 2>/dev/null | "${sed:-sed}" '/^$/d' | grep -v '^$'
    done
    printf '\n'
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_motd() {
  local messages=""
  messages=$(find -L "$UPDATE_MOTD_MESSAGE_DIR/motd" -type f -name '*.txt' 2>/dev/null | wc -l)
  if [ "$messages" != "0" ]; then
    for f in $UPDATE_MOTD_MESSAGE_DIR/motd/*.txt; do
      [ "$f" = "" ] && grep '^$' || cat "$f" 2>/dev/null | "${sed:-sed}" '/^$/d' | grep -v '^$'
    done
    printf '\n'
  fi
  messages=$(find -L "/etc/motd.d" -type f 2>/dev/null | wc -l)
  if [ "$messages" != "0" ]; then
    for f in /etc/motd.d/*; do
      [ "$f" = "" ] && grep '^$' || cat "$f" 2>/dev/null | "${sed:-sed}" '/^$/d' | grep -v '^$'
      printf '\n'
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__update_banners() {
  local banners="" banner_dir="" banner_count="" ssh_conf_edit=""
  banner_dir="/etc/casjaysdev/banners"
  ssh_conf_edit="$(grep -R '^PrintMotd' /etc/ssh/ | awk -F ':' '{print $1}' | grep '^' || echo '')"
  banner_files="$(find -L $banner_dir/ -type f 2>/dev/null | grep '')"
  banner_count="$(echo "$banner_files" | wc -l)"
  [ "$banner_count" != "0" ] || banner_files="$(echo "$banner_dir"/{rsync,ssh}.txt)"
  [ -d "$banner_dir" ] || sudo -HE mkdir -p "$banner_dir"
  if [ -n "$ssh_conf_edit" ]; then
    for ssh_file in $ssh_conf_edit; do
      sed -i 's|.*PrintMotd.*|PrintMotd no|g' "$ssh_file"
    done
  fi
  for banner in $banner_files; do
    cat "/etc/issue" "/etc/motd" | sudo tee -p "$banner" &>/dev/null
  done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_update_motd() {
  [ "$UPDATE_MOTD_ENABLED" = "true" ] || printf_exit "Update MOTD is disabled"
  __getlipaddr
  __remove_duplicate_motd
  __restart_motd_services
  sed="$(command -v gsed 2>/dev/null || command -v sed 2>/dev/null)"
  HOSTNAME="$(hostname -f 2>/dev/null || printf '%s\n' 'localhost.local')"
  HOSTSHORT="$(hostname -f 2>/dev/null || printf '%s\n' 'localhost')"
  CURRENT_IP_4="${CURRENT_IP_4:-127.0.0.1}"
  CURRENT_IP_6="${CURRENT_IP_6:-}"
  dategit="$(date +"${UPDATE_MOTD_GIT_VERSION_FORMAT:-%Y%m%d%H%M-git}")"
  datever="$(date +"%b %d, %Y at %H:%M")"
  OS_RELEASE="$(printf '%s: %s\n' "$(__os_name)" "$(__os_version)")"
  if [ "$force_removal" = "true" ]; then
    sudo -HE rm -Rf $UPDATE_MOTD_MESSAGE_DIR/*/*.txt |& __devnull
    sudo -HE mkdir -p $UPDATE_MOTD_MESSAGE_DIR/{legal,issue,motd} |& __devnull
    sudo -HE touch $UPDATE_MOTD_MESSAGE_DIR/{legal,issue,motd}/000.txt |& __devnull
    if [ -f "$CASJAYSDEVDIR/templates/casjaysdev-legal.txt" ]; then
      sudo -HE cp -Rf "$CASJAYSDEVDIR/templates/casjaysdev-legal.txt" "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt"
    fi
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ -s "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt" ] || sudo -HE cp -Rf "$CASJAYSDEVDIR/templates/casjaysdev-legal.txt" "$UPDATE_MOTD_MESSAGE_DIR/legal/000.txt"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sudo -HE rm -Rf /etc/issue /etc/motd |& __devnull
  sudo -HE rm -Rf /etc/issue.net /etc/motd.net |& __devnull
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ -f "$UPDATE_MOTD_VERSION_DIR/scripts.txt" ] && [ -s "$UPDATE_MOTD_VERSION_DIR/scripts.txt" ]; then
    scripts_version="$(<"$UPDATE_MOTD_VERSION_DIR/scripts.txt")"
  else
    scripts_version="$dategit"
    printf '%s\n' "$scripts_version" | sudo -HE tee "$UPDATE_MOTD_VERSION_DIR/scripts.txt" |& __devnull
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ -f "$UPDATE_MOTD_VERSION_DIR/configs.txt" ] && [ -s "$UPDATE_MOTD_VERSION_DIR/configs.txt" ]; then
    configs_version="$(<"$UPDATE_MOTD_VERSION_DIR/configs.txt")"
  else
    configs_version="$dategit"
    printf '%s\n' "$configs_version" | sudo -HE tee "$UPDATE_MOTD_VERSION_DIR/configs.txt" |& __devnull
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ -f "$UPDATE_MOTD_VERSION_DIR/date.scripts.txt" ] && [ -s "$UPDATE_MOTD_VERSION_DIR/date.scripts.txt" ]; then
    scripts_date="$(<"$UPDATE_MOTD_VERSION_DIR/date.scripts.txt")"
  else
    scripts_date="$datever"
    printf '%s\n' "$scripts_date" | sudo -HE tee "$UPDATE_MOTD_VERSION_DIR/date.scripts.txt" |& __devnull
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ -f "$UPDATE_MOTD_VERSION_DIR/date.configs.txt" ] && [ -s "$UPDATE_MOTD_VERSION_DIR/date.configs.txt" ]; then
    configs_date="$(<"$UPDATE_MOTD_VERSION_DIR/date.configs.txt")"
  else
    configs_date="$datever"
    printf '%s\n' "$configs_date" | sudo -HE tee "$UPDATE_MOTD_VERSION_DIR/date.configs.txt" |& __devnull
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ "$DISTRO_VERSION" = "N/A" ] && DISTRO_VERSION="$(__os_version)"
  distro_version="${DISTRO_VERSION:-$(__os_version)}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # update issue file
  (
    __update_legal
    __update_issue
  ) | sudo -HE tee "/etc/issue" |& __devnull
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # update motd file
  (
    __update_cockpit_motd
    __update_motd
    __gen_fortune_motd
    __gen_versions
  ) | sudo -HE tee "/etc/motd" |& __devnull
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ -n "$OS_RELEASE" ]; then
    printf '%s\n' "$OS_RELEASE" | sudo -HE tee "$UPDATE_MOTD_VERSION_DIR/osversion.txt" |& __devnull
    __os_fix_name "$UPDATE_MOTD_VERSION_DIR/osversion.txt"
  else
    printf 'Unknown OS 1.0\n' | sudo -HE tee "$UPDATE_MOTD_VERSION_DIR/osname.txt" |& __devnull
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sudo -HE cp -Rf "/etc/motd" "/etc/motd.net" |& __devnull
  sudo -HE cp -Rf "/etc/issue" "/etc/issue.net" |& __devnull
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __update_banners
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ "$show_console" = "true" ] && [ "$show_debug" != "true" ]; then
    cat "/etc/issue" "/etc/motd" | printf_readline "$UPDATE_MOTD_OUTPUT_COLOR_1"
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ "$show_debug" = "true" ]; then
    __if_os_id
    cat "/etc/issue" "/etc/motd" | printf_readline "$UPDATE_MOTD_OUTPUT_COLOR_1"
    printf_green "OS Release           :  $OS_RELEASE"
    printf_green "distro name          :  $distro_id"
    printf_green "distro version       :  $distro_version"
    printf_green "scripts version      :  $scripts_version"
    printf_green "configs version      :  $configs_version"
    printf_green "scripts date         :  $scripts_date"
    printf_green "configs date         :  $configs_date"
    printf_green "hostname short       :  $HOSTSHORT"
    printf_green "hostname full        :  $HOSTNAME"
    printf_green "current ip4          :  $CURRENT_IP_4"
    printf_green "current ip6          :  $CURRENT_IP_6"
    printf_green "Kernel Version       :  $UPDATE_MOTD_KERNEL_VERSION"
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [ -s "/etc/motd" ] && [ -s "/etc/motd.net" ] &&
    [ -s "/etc/issue" ] && [ -s "/etc/issue.net" ] || sudo -HE $APPNAME
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_dirs() {
  sudo -HE mkdir -p "$UPDATE_MOTD_VERSION_DIR"
  sudo -HE mkdir -p "$UPDATE_MOTD_MESSAGE_DIR/motd"
  sudo -HE mkdir -p "$UPDATE_MOTD_MESSAGE_DIR/legal"
  sudo -HE mkdir -p "$UPDATE_MOTD_MESSAGE_DIR/issue"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
UPDATE_MOTD_CONFIG_FILE="${UPDATE_MOTD_CONFIG_FILE:-settings.conf}"
UPDATE_MOTD_CONFIG_DIR="${UPDATE_MOTD_CONFIG_DIR:-$HOME/.config/myscripts/update-motd}"
UPDATE_MOTD_CONFIG_BACKUP_DIR="${UPDATE_MOTD_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/update-motd/backups}"
UPDATE_MOTD_LOG_DIR="${UPDATE_MOTD_LOG_DIR:-$HOME/.local/log/update-motd}"
UPDATE_MOTD_TEMP_DIR="${UPDATE_MOTD_TEMP_DIR:-$HOME/.local/tmp/system_scripts/update-motd}"
UPDATE_MOTD_CACHE_DIR="${UPDATE_MOTD_CACHE_DIR:-$HOME/.cache/update-motd}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
UPDATE_MOTD_OUTPUT_COLOR_1="${UPDATE_MOTD_OUTPUT_COLOR_1:-33}"
UPDATE_MOTD_OUTPUT_COLOR_2="${UPDATE_MOTD_OUTPUT_COLOR_2:-5}"
UPDATE_MOTD_OUTPUT_COLOR_GOOD="${UPDATE_MOTD_OUTPUT_COLOR_GOOD:-2}"
UPDATE_MOTD_OUTPUT_COLOR_ERROR="${UPDATE_MOTD_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
UPDATE_MOTD_NOTIFY_ENABLED="${UPDATE_MOTD_NOTIFY_ENABLED:-yes}"
UPDATE_MOTD_GOOD_NAME="${UPDATE_MOTD_GOOD_NAME:-Great:}"
UPDATE_MOTD_ERROR_NAME="${UPDATE_MOTD_ERROR_NAME:-Error:}"
UPDATE_MOTD_GOOD_MESSAGE="${UPDATE_MOTD_GOOD_MESSAGE:-No errors reported}"
UPDATE_MOTD_ERROR_MESSAGE="${UPDATE_MOTD_ERROR_MESSAGE:-Errors were reported}"
UPDATE_MOTD_NOTIFY_CLIENT_NAME="${UPDATE_MOTD_NOTIFY_CLIENT_NAME:-$APPNAME}"
UPDATE_MOTD_NOTIFY_CLIENT_ICON="${UPDATE_MOTD_NOTIFY_CLIENT_ICON:-notification-new}"
UPDATE_MOTD_NOTIFY_CLIENT_URGENCY="${UPDATE_MOTD_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
UPDATE_MOTD_KERNEL_VERSION="$(uname -r)"
UPDATE_MOTD_ENABLED="${UPDATE_MOTD_ENABLED:-true}"
UPDATE_MOTD_COWSAY_FILE="${UPDATE_MOTD_COWSAY_FILE:-true}"
UPDATE_MOTD_COWSAY_PROGRAM="${UPDATE_MOTD_COWSAY_PROGRAM:-cowsay}"
UPDATE_MOTD_MESSAGE_DIR="${UPDATE_MOTD_MESSAGE_DIR:-/etc/casjaysdev/messages}"
UPDATE_MOTD_VERSION_DIR="${UPDATE_MOTD_VERSION_DIR:-/etc/casjaysdev/updates/versions}"
UPDATE_MOTD_GIT_VERSION_FORMAT="${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}"
UPDATE_MOTD_DEFAULT_MESSAGE="${UPDATE_MOTD_DEFAULT_MESSAGE:-Well I guess its work time...}"
UPDATE_MOTD_DOCKER_VERSION="$(type -P docker && docker --version 2>/dev/null | sed 's|.*version ||g;s|,.*||g')"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE" ] && . "$UPDATE_MOTD_CONFIG_DIR/$UPDATE_MOTD_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$UPDATE_MOTD_LOG_DIR" ] || mkdir -p "$UPDATE_MOTD_LOG_DIR" |& __devnull
[ -d "$UPDATE_MOTD_TEMP_DIR" ] || mkdir -p "$UPDATE_MOTD_TEMP_DIR" |& __devnull
[ -d "$UPDATE_MOTD_CACHE_DIR" ] || mkdir -p "$UPDATE_MOTD_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
UPDATE_MOTD_TEMP_FILE="${UPDATE_MOTD_TEMP_FILE:-$(mktemp $UPDATE_MOTD_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$UPDATE_MOTD_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$UPDATE_MOTD_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$UPDATE_MOTD_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$UPDATE_MOTD_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$UPDATE_MOTD_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$UPDATE_MOTD_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",force,console"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    UPDATE_MOTD_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    UPDATE_MOTD_CWD="$2"
    [ -d "$UPDATE_MOTD_CWD" ] || mkdir -p "$UPDATE_MOTD_CWD" |& __devnull
    shift 2
    ;;
  --force)
    shift 1
    force_removal="true"
    ;;
  --console)
    shift 1
    show_console="true"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# UPDATE_MOTD_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# UPDATE_MOTD_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && UPDATE_MOTD_CWD="$1" && shift 1 || UPDATE_MOTD_CWD="${UPDATE_MOTD_CWD:-$PWD}"
UPDATE_MOTD_CWD="$(realpath "${UPDATE_MOTD_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$UPDATE_MOTD_CWD" ] && cd "$UPDATE_MOTD_CWD"; then
# if [ "$UPDATE_MOTD_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $UPDATE_MOTD_CWD"
# fi
# else
# printf_exit "ðŸ’” $UPDATE_MOTD_CWD does not exist ðŸ’”"
# fi
export UPDATE_MOTD_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__sudoif
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__create_dirs
__fix_resolver
__execute_update_motd
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
