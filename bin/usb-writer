#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202510020319-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  usb-writer --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 18, 2022 03:01 EDT
# @@File             :  usb-writer
# @@Description      :  Create bootable USB with multi-boot support and GRUB menu
# @@Changelog        :  Added multi-boot support, GRUB auto-menu generation, ISO management
# @@TODO             :  Add persistent storage support
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202510020319-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
USB_WRITER_REQUIRE_SUDO="${USB_WRITER_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  local exitCode=0
  [ -n "$1" ] || return 0
  for cmd in "$@"; do
    if builtin command -v "$cmd" &>/dev/null; then
      exitCode=$((exitCode + 0))
    else
      exitCode=$((exitCode + 1))
    fi
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE"
  fi
  [ -d "$USB_WRITER_CONFIG_DIR" ] || mkdir -p "$USB_WRITER_CONFIG_DIR"
  [ -d "$USB_WRITER_CONFIG_BACKUP_DIR" ] || mkdir -p "$USB_WRITER_CONFIG_BACKUP_DIR"
  [ -f "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE" ] &&
    cp -Rf "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE" "$USB_WRITER_CONFIG_BACKUP_DIR/$USB_WRITER_CONFIG_FILE.$$"
  cat <<EOF >"$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE"
# Settings for usb-writer

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
USB_WRITER_OUTPUT_COLOR_1="${USB_WRITER_OUTPUT_COLOR_1:-}"
USB_WRITER_OUTPUT_COLOR_2="${USB_WRITER_OUTPUT_COLOR_2:-}"
USB_WRITER_OUTPUT_COLOR_GOOD="${USB_WRITER_OUTPUT_COLOR_GOOD:-}"
USB_WRITER_OUTPUT_COLOR_ERROR="${USB_WRITER_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
USB_WRITER_NOTIFY_ENABLED="${USB_WRITER_NOTIFY_ENABLED:-}"
USB_WRITER_GOOD_NAME="${USB_WRITER_GOOD_NAME:-}"
USB_WRITER_ERROR_NAME="${USB_WRITER_ERROR_NAME:-}"
USB_WRITER_GOOD_MESSAGE="${USB_WRITER_GOOD_MESSAGE:-}"
USB_WRITER_ERROR_MESSAGE="${USB_WRITER_ERROR_MESSAGE:-}"
USB_WRITER_NOTIFY_CLIENT_NAME="${USB_WRITER_NOTIFY_CLIENT_NAME:-}"
USB_WRITER_NOTIFY_CLIENT_ICON="${USB_WRITER_NOTIFY_CLIENT_ICON:-}"
USB_WRITER_NOTIFY_CLIENT_URGENCY="${USB_WRITER_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "usb-writer:  Multi-boot USB creator with GRUB - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: usb-writer [options] [command] [arguments]"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Commands"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "create [device]                 - Initialize multi-boot USB with GRUB"
  __printf_line "mount [device]                  - Mount multi-boot USB"
  __printf_line "unmount [device]                - Unmount multi-boot USB"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "ISO Management Commands"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "iso add [iso] [category]        - Add ISO to multi-boot USB"
  __printf_line "iso remove [iso]                - Remove ISO from multi-boot USB"
  __printf_line "iso list [device]               - List all ISOs on multi-boot USB"
  __printf_line "iso menu [device]               - Regenerate GRUB menu from ISOs"
  __printf_line "iso write [iso] [device]        - Write single ISO to device (dd mode)"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Categories (for iso add command)"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "linux                           - Linux distributions"
  __printf_line "windows                         - Windows installers"
  __printf_line "bsd                             - BSD distributions"
  __printf_line "utilities                       - System utilities and recovery tools"
  __printf_line "tools                           - Tools (memdisk support)"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_line "--label [name]                  - Set USB volume label (default: MULTIBOOT)"
  __printf_line "--no-verify                     - Skip ISO verification"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Examples"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "usb-writer create /dev/sdb"
  __printf_line "usb-writer iso add ubuntu-22.04.iso linux"
  __printf_line "usb-writer iso add gparted.iso utilities"
  __printf_line "usb-writer iso menu /dev/sdb"
  __printf_line "usb-writer iso list /dev/sdb"
  __printf_line "usb-writer iso write ubuntu.iso /dev/sdb"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$USB_WRITER_REQUIRE_SUDO" = "yes" ] && [ -z "$USB_WRITER_REQUIRE_SUDO_RUN" ]; then
    export USB_WRITER_REQUIRE_SUDO="no"
    export USB_WRITER_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$USB_WRITER_TEMP_FILE" ] && rm -Rf "$USB_WRITER_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__test_device() {
  local device="${1:-$device}"
  [ -b "$device" ] || [ "$device" = "/dev/null" ] && return 0
  printf_exit "Sorry but $device does not exist"
  showd="$(find /dev 2>/dev/null | grep -E '/dev/[shvx]d[a-z]$')"
  if [ -n "$showd" ]; then
    printf_green "Available devices:"
    for dev in $showd; do
      printf_cyan "$dev"
    done
  fi
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__test_iso() {
  local iso="${1:-$iso}"
  if [ -f "$iso" ]; then
    return 0
  else
    printf_exit "Sorry but $iso does not exist"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__normalize_device() {
  local device="$1"
  device="$(echo "$device" | sed -e 's|/dev/||g;s|^|/dev/|g')"
  echo "$device"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__get_partition() {
  local device="$1"
  local partition_num="$2"
  if echo "$device" | grep -q 'nvme\|mmcblk'; then
    echo "${device}p${partition_num}"
  else
    echo "${device}${partition_num}"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__dd() {
  set -eo pipefail
  local iso="" device=""
  iso="$1"
  device="$(__normalize_device "$2")"
  __test_device "$device" && __test_iso "$iso" || exit 1
  printf_cyan "🖥 Writing $iso to $device 🖥"
  if __sudoif; then
    __sudo dd if="$iso" of="$device" bs=8M status=progress oflag=direct 2>&1 || false
    exitCode=$?
  else
    printf_exit "⚠️ Sorry, but this requires root privileges ⚠️"
  fi
  if [ "${exitCode:-0}" = 0 ]; then
    printf_green "💿 Writing iso to usb has completed 💿"
    return 0
  else
    printf_red "😿 Failed to write iso file 😿"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_partitions() {
  local device="$1"
  local USB_WRITER_LABEL="${USB_WRITER_LABEL:-MULTIBOOT}"

  printf_cyan "Creating partition table on $device"

  if __sudoif; then
    # Unmount any mounted partitions
    __sudo umount "${device}"* 2>/dev/null || true

    # Create GPT partition table with ESP and data partition
    __sudo parted -s "$device" mklabel gpt || return 1
    __sudo parted -s "$device" mkpart primary fat32 1MiB 551MiB || return 1
    __sudo parted -s "$device" set 1 esp on || return 1
    __sudo parted -s "$device" mkpart primary ext4 551MiB 100% || return 1

    # Wait for kernel to recognize partitions
    sleep 2
    __sudo partprobe "$device" 2>/dev/null || true
    sleep 2

    local esp_part="$(__get_partition "$device" 1)"
    local data_part="$(__get_partition "$device" 2)"

    # Format partitions
    printf_cyan "Formatting ESP partition as FAT32"
    __sudo mkfs.vfat -F 32 -n "ESP" "$esp_part" || return 1

    printf_cyan "Formatting data partition as ext4"
    __sudo mkfs.ext4 -F -L "$USB_WRITER_LABEL" "$data_part" || return 1

    printf_green "Partitions created successfully"
    return 0
  else
    printf_exit "⚠️ Root privileges required ⚠️"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mount_usb() {
  local device="$1"
  local USB_WRITER_MOUNT="${USB_WRITER_MOUNT:-/mnt/usb-multiboot}"
  local esp_part="$(__get_partition "$device" 1)"
  local data_part="$(__get_partition "$device" 2)"

  if __sudoif; then
    __sudo mkdir -p "$USB_WRITER_MOUNT" "$USB_WRITER_MOUNT/esp" || return 1
    __sudo mount "$data_part" "$USB_WRITER_MOUNT" 2>/dev/null || {
      printf_red "Failed to mount data partition"
      return 1
    }
    __sudo mkdir -p "$USB_WRITER_MOUNT/esp" || true
    __sudo mount "$esp_part" "$USB_WRITER_MOUNT/esp" 2>/dev/null || {
      printf_red "Failed to mount ESP partition"
      __sudo umount "$USB_WRITER_MOUNT" 2>/dev/null
      return 1
    }
    printf_green "USB mounted at $USB_WRITER_MOUNT"
    echo "$USB_WRITER_MOUNT"
    return 0
  else
    printf_exit "⚠️ Root privileges required ⚠️"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__unmount_usb() {
  local device="$1"
  local USB_WRITER_MOUNT="${USB_WRITER_MOUNT:-/mnt/usb-multiboot}"

  if __sudoif; then
    __sudo umount "$USB_WRITER_MOUNT/esp" 2>/dev/null || true
    __sudo umount "$USB_WRITER_MOUNT" 2>/dev/null || true
    printf_green "USB unmounted"
    return 0
  else
    printf_red "Failed to unmount USB"
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_directory_structure() {
  local mount_point="$1"

  if __sudoif; then
    printf_cyan "Creating directory structure"
    __sudo mkdir -p "$mount_point/ISOs/Linux" || return 1
    __sudo mkdir -p "$mount_point/ISOs/Windows" || return 1
    __sudo mkdir -p "$mount_point/ISOs/BSD" || return 1
    __sudo mkdir -p "$mount_point/ISOs/Utilities" || return 1
    __sudo mkdir -p "$mount_point/ISOs/Tools" || return 1
    __sudo mkdir -p "$mount_point/esp/EFI/BOOT" || return 1
    __sudo mkdir -p "$mount_point/esp/boot/grub" || return 1
    printf_green "Directory structure created"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__install_grub() {
  local device="$1"
  local mount_point="$2"

  if ! __cmd_exists grub-install; then
    printf_red "GRUB not found. Please install grub2/grub-efi"
    return 1
  fi

  printf_cyan "Installing GRUB bootloader"

  if __sudoif; then
    # Install GRUB for UEFI
    __sudo grub-install --target=x86_64-efi --efi-directory="$mount_point/esp" \
      --boot-directory="$mount_point/esp/boot" --removable --recheck 2>&1 || {
      printf_red "UEFI GRUB installation failed"
    }

    # Install GRUB for BIOS
    __sudo grub-install --target=i386-pc --boot-directory="$mount_point/esp/boot" \
      --recheck "$device" 2>&1 || {
      printf_red "BIOS GRUB installation failed (non-fatal)"
    }

    printf_green "GRUB installed successfully"
    return 0
  else
    printf_exit "⚠️ Root privileges required ⚠️"
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__generate_grub_menu() {
  local mount_point="$1"
  local grub_cfg="$mount_point/esp/boot/grub/grub.cfg"

  printf_cyan "Generating GRUB menu"

  if __sudoif; then
    # Create main GRUB config
    __sudo tee "$grub_cfg" > /dev/null << 'GRUBEOF'
# GRUB Configuration for Multi-Boot USB
# Generated by usb-writer

set timeout=30
set default=0

# Set theme
set menu_color_normal=white/black
set menu_color_highlight=black/light-gray

# Main Menu
menuentry 'Boot from First Hard Disk' {
    insmod part_gpt
    insmod part_msdos
    insmod chain
    set root=(hd1)
    chainloader +1
    boot
}

menuentry 'Reboot' {
    reboot
}

menuentry 'Power Off' {
    halt
}

submenu '>>> Linux Distributions <<<' {
GRUBEOF

    # Add Linux ISOs
    if [ -d "$mount_point/ISOs/Linux" ]; then
      for iso in "$mount_point/ISOs/Linux"/*.iso; do
        [ -f "$iso" ] || continue
        local iso_name="$(basename "$iso" .iso)"
        __sudo tee -a "$grub_cfg" > /dev/null << ISOEOF
    menuentry '$iso_name' {
        set isofile="/ISOs/Linux/$(basename "$iso")"
        loopback loop \$isofile
        linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile noprompt noeject quiet splash ---
        initrd (loop)/casper/initrd
    }
ISOEOF
      done
    fi

    __sudo tee -a "$grub_cfg" > /dev/null << 'GRUBEOF'
}

submenu '>>> Windows Installers <<<' {
GRUBEOF

    # Add Windows ISOs
    if [ -d "$mount_point/ISOs/Windows" ]; then
      for iso in "$mount_point/ISOs/Windows"/*.iso; do
        [ -f "$iso" ] || continue
        local iso_name="$(basename "$iso" .iso)"
        __sudo tee -a "$grub_cfg" > /dev/null << ISOEOF
    menuentry '$iso_name' {
        set isofile="/ISOs/Windows/$(basename "$iso")"
        loopback loop \$isofile
        chainloader (loop)/bootmgr
    }
ISOEOF
      done
    fi

    __sudo tee -a "$grub_cfg" > /dev/null << 'GRUBEOF'
}

submenu '>>> BSD Distributions <<<' {
GRUBEOF

    # Add BSD ISOs
    if [ -d "$mount_point/ISOs/BSD" ]; then
      for iso in "$mount_point/ISOs/BSD"/*.iso; do
        [ -f "$iso" ] || continue
        local iso_name="$(basename "$iso" .iso)"
        __sudo tee -a "$grub_cfg" > /dev/null << ISOEOF
    menuentry '$iso_name' {
        set isofile="/ISOs/BSD/$(basename "$iso")"
        loopback loop \$isofile
        kfreebsd (loop)/boot/kernel/kernel
    }
ISOEOF
      done
    fi

    __sudo tee -a "$grub_cfg" > /dev/null << 'GRUBEOF'
}

submenu '>>> System Utilities <<<' {
GRUBEOF

    # Add Utilities ISOs
    if [ -d "$mount_point/ISOs/Utilities" ]; then
      for iso in "$mount_point/ISOs/Utilities"/*.iso; do
        [ -f "$iso" ] || continue
        local iso_name="$(basename "$iso" .iso)"
        __sudo tee -a "$grub_cfg" > /dev/null << ISOEOF
    menuentry '$iso_name' {
        set isofile="/ISOs/Utilities/$(basename "$iso")"
        loopback loop \$isofile
        linux (loop)/vmlinuz iso-scan/filename=\$isofile boot=live
        initrd (loop)/initrd.img
    }
ISOEOF
      done
    fi

    __sudo tee -a "$grub_cfg" > /dev/null << 'GRUBEOF'
}

submenu '>>> Tools (Memdisk) <<<' {
GRUBEOF

    # Add Tools with memdisk
    if [ -d "$mount_point/ISOs/Tools" ]; then
      for iso in "$mount_point/ISOs/Tools"/*.iso; do
        [ -f "$iso" ] || continue
        local iso_name="$(basename "$iso" .iso)"
        __sudo tee -a "$grub_cfg" > /dev/null << ISOEOF
    menuentry '$iso_name' {
        set isofile="/ISOs/Tools/$(basename "$iso")"
        linux16 /boot/memdisk iso
        initrd16 \$isofile
    }
ISOEOF
      done
    fi

    __sudo tee -a "$grub_cfg" > /dev/null << 'GRUBEOF'
}
GRUBEOF

    printf_green "GRUB menu generated successfully"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cmd_create_multiboot() {
  local device="$(__normalize_device "$1")"

  if [ -z "$device" ]; then
    printf_red "Device required"
    __help
    return 1
  fi

  __test_device "$device" || return 1

  # Confirm destructive operation
  printf_yellow "⚠️  WARNING: This will erase ALL data on $device ⚠️"
  printf_cyan "Available devices:"
  lsblk -o NAME,SIZE,TYPE,MOUNTPOINT "$device" 2>/dev/null || true
  printf_yellow "Continue? (yes/no): "
  read -r confirm
  if [ "$confirm" != "yes" ]; then
    printf_cyan "Cancelled"
    return 0
  fi

  # Create partitions
  __create_partitions "$device" || return 1

  # Mount USB
  local mount_point="$(__mount_usb "$device")"
  if [ -z "$mount_point" ]; then
    return 1
  fi

  # Create directory structure
  __create_directory_structure "$mount_point" || {
    __unmount_usb "$device"
    return 1
  }

  # Install GRUB
  __install_grub "$device" "$mount_point" || {
    __unmount_usb "$device"
    return 1
  }

  # Generate initial menu
  __generate_grub_menu "$mount_point" || {
    __unmount_usb "$device"
    return 1
  }

  # Unmount
  __unmount_usb "$device"

  printf_green "✓ Multi-boot USB created successfully!"
  printf_cyan "You can now add ISOs with: usb-writer add-iso <file> <category>"
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cmd_add_iso() {
  local iso_file="$1"
  local category="${2:-linux}"
  local device="$3"

  if [ -z "$iso_file" ]; then
    printf_red "ISO file required"
    return 1
  fi

  __test_iso "$iso_file" || return 1

  # Normalize category
  category="$(echo "$category" | tr '[:upper:]' '[:lower:]')"
  local category_dir=""
  case "$category" in
    linux) category_dir="Linux" ;;
    windows) category_dir="Windows" ;;
    bsd) category_dir="BSD" ;;
    utilities|utility) category_dir="Utilities" ;;
    tools|tool) category_dir="Tools" ;;
    *)
      printf_red "Invalid category. Use: linux, windows, bsd, utilities, tools"
      return 1
      ;;
  esac

  # Find and mount multiboot USB if device provided
  if [ -n "$device" ]; then
    device="$(__normalize_device "$device")"
    local mount_point="$(__mount_usb "$device")"
  else
    # Look for mounted multiboot USB
    local USB_WRITER_MOUNT="${USB_WRITER_MOUNT:-/mnt/usb-multiboot}"
    if [ -d "$USB_WRITER_MOUNT/ISOs" ]; then
      mount_point="$USB_WRITER_MOUNT"
    else
      printf_red "Multi-boot USB not found. Please specify device or mount it first"
      return 1
    fi
  fi

  local dest_dir="$mount_point/ISOs/$category_dir"
  local iso_name="$(basename "$iso_file")"

  printf_cyan "Copying $iso_name to $category_dir category..."

  if __sudoif; then
    __sudo cp "$iso_file" "$dest_dir/" || {
      printf_red "Failed to copy ISO"
      [ -n "$device" ] && __unmount_usb "$device"
      return 1
    }

    # Update menu
    __generate_grub_menu "$mount_point"

    if [ -n "$device" ]; then
      __unmount_usb "$device"
    fi

    printf_green "✓ ISO added successfully"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cmd_remove_iso() {
  local iso_name="$1"
  local device="$2"

  if [ -z "$iso_name" ]; then
    printf_red "ISO name required"
    return 1
  fi

  # Find and mount multiboot USB if device provided
  if [ -n "$device" ]; then
    device="$(__normalize_device "$device")"
    local mount_point="$(__mount_usb "$device")"
  else
    local USB_WRITER_MOUNT="${USB_WRITER_MOUNT:-/mnt/usb-multiboot}"
    if [ -d "$USB_WRITER_MOUNT/ISOs" ]; then
      mount_point="$USB_WRITER_MOUNT"
    else
      printf_red "Multi-boot USB not found"
      return 1
    fi
  fi

  # Find the ISO
  local found_iso=""
  for iso in "$mount_point/ISOs"/*/"$iso_name"* "$mount_point/ISOs"/*/*/"$iso_name"*; do
    if [ -f "$iso" ]; then
      found_iso="$iso"
      break
    fi
  done

  if [ -z "$found_iso" ]; then
    printf_red "ISO not found: $iso_name"
    [ -n "$device" ] && __unmount_usb "$device"
    return 1
  fi

  printf_cyan "Removing $(basename "$found_iso")..."

  if __sudoif; then
    __sudo rm -f "$found_iso" || {
      printf_red "Failed to remove ISO"
      [ -n "$device" ] && __unmount_usb "$device"
      return 1
    }

    # Update menu
    __generate_grub_menu "$mount_point"

    if [ -n "$device" ]; then
      __unmount_usb "$device"
    fi

    printf_green "✓ ISO removed successfully"
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cmd_update_menu() {
  local device="$1"

  if [ -z "$device" ]; then
    printf_red "Device required"
    return 1
  fi

  device="$(__normalize_device "$device")"
  local mount_point="$(__mount_usb "$device")"

  if [ -z "$mount_point" ]; then
    return 1
  fi

  __generate_grub_menu "$mount_point"
  __unmount_usb "$device"

  printf_green "✓ GRUB menu updated successfully"
  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__cmd_list_isos() {
  local device="$1"

  # Find and mount multiboot USB if device provided
  if [ -n "$device" ]; then
    device="$(__normalize_device "$device")"
    local mount_point="$(__mount_usb "$device")"
  else
    local USB_WRITER_MOUNT="${USB_WRITER_MOUNT:-/mnt/usb-multiboot}"
    if [ -d "$USB_WRITER_MOUNT/ISOs" ]; then
      mount_point="$USB_WRITER_MOUNT"
    else
      printf_red "Multi-boot USB not found"
      return 1
    fi
  fi

  printf_cyan "ISOs on multi-boot USB:"
  printf_cyan "======================="

  for category in Linux Windows BSD Utilities Tools; do
    local category_dir="$mount_point/ISOs/$category"
    if [ -d "$category_dir" ]; then
      local count=0
      for iso in "$category_dir"/*.iso; do
        [ -f "$iso" ] || continue
        count=$((count + 1))
      done

      if [ $count -gt 0 ]; then
        printf_green "\n$category ($count):"
        for iso in "$category_dir"/*.iso; do
          [ -f "$iso" ] || continue
          local size="$(du -h "$iso" | cut -f1)"
          printf_cyan "  - $(basename "$iso") [$size]"
        done
      fi
    fi
  done

  if [ -n "$device" ]; then
    __unmount_usb "$device"
  fi

  return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_usb-writer() {
  local command="$1"
  shift

  case "$command" in
    create | create-multiboot)
      __cmd_create_multiboot "$@"
      ;;
    mount)
      __mount_usb "$1"
      ;;
    unmount)
      __unmount_usb "$1"
      ;;
    iso)
      # ISO management subcommands
      local subcommand="$1"
      shift
      case "$subcommand" in
        add | add-iso)
          __cmd_add_iso "$@"
          ;;
        remove | remove-iso)
          __cmd_remove_iso "$@"
          ;;
        list | list-isos)
          __cmd_list_isos "$@"
          ;;
        menu | update-menu)
          __cmd_update_menu "$@"
          ;;
        write | write-iso)
          local ISO="$1"
          local DEV="$2"
          if [ $# -ne 2 ]; then
            __help
            exit 1
          fi
          __dd "$ISO" "$DEV"
          ;;
        *)
          printf_red "Unknown iso subcommand: $subcommand"
          printf_cyan "Available: add, remove, list, menu, write"
          exit 1
          ;;
      esac
      ;;
    # Legacy compatibility
    write-iso)
      local ISO="$1"
      local DEV="$2"
      if [ $# -ne 2 ]; then
        __help
        exit 1
      fi
      __dd "$ISO" "$DEV"
      ;;
    add-iso)
      __cmd_add_iso "$@"
      ;;
    remove-iso)
      __cmd_remove_iso "$@"
      ;;
    update-menu)
      __cmd_update_menu "$@"
      ;;
    list-isos)
      __cmd_list_isos "$@"
      ;;
    *)
      # Legacy mode for backward compatibility: usb-writer iso.iso /dev/sdX
      if [ -n "$command" ] && [ -n "$1" ]; then
        __dd "$command" "$1"
      else
        __help
        exit 1
      fi
      ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
USB_WRITER_CONFIG_FILE="${USB_WRITER_CONFIG_FILE:-settings.conf}"
USB_WRITER_CONFIG_DIR="${USB_WRITER_CONFIG_DIR:-$HOME/.config/myscripts/usb-writer}"
USB_WRITER_CONFIG_BACKUP_DIR="${USB_WRITER_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/usb-writer/backups}"
USB_WRITER_LOG_DIR="${USB_WRITER_LOG_DIR:-$HOME/.local/log/usb-writer}"
USB_WRITER_TEMP_DIR="${USB_WRITER_TEMP_DIR:-$HOME/.local/tmp/system_scripts/usb-writer}"
USB_WRITER_CACHE_DIR="${USB_WRITER_CACHE_DIR:-$HOME/.cache/usb-writer}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
USB_WRITER_OUTPUT_COLOR_1="${USB_WRITER_OUTPUT_COLOR_1:-33}"
USB_WRITER_OUTPUT_COLOR_2="${USB_WRITER_OUTPUT_COLOR_2:-5}"
USB_WRITER_OUTPUT_COLOR_GOOD="${USB_WRITER_OUTPUT_COLOR_GOOD:-2}"
USB_WRITER_OUTPUT_COLOR_ERROR="${USB_WRITER_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
USB_WRITER_NOTIFY_ENABLED="${USB_WRITER_NOTIFY_ENABLED:-yes}"
USB_WRITER_GOOD_NAME="${USB_WRITER_GOOD_NAME:-Great:}"
USB_WRITER_ERROR_NAME="${USB_WRITER_ERROR_NAME:-Error:}"
USB_WRITER_GOOD_MESSAGE="${USB_WRITER_GOOD_MESSAGE:-No errors reported}"
USB_WRITER_ERROR_MESSAGE="${USB_WRITER_ERROR_MESSAGE:-Errors were reported}"
USB_WRITER_NOTIFY_CLIENT_NAME="${USB_WRITER_NOTIFY_CLIENT_NAME:-$APPNAME}"
USB_WRITER_NOTIFY_CLIENT_ICON="${USB_WRITER_NOTIFY_CLIENT_ICON:-notification-new}"
USB_WRITER_NOTIFY_CLIENT_URGENCY="${USB_WRITER_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE" ] && . "$USB_WRITER_CONFIG_DIR/$USB_WRITER_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$USB_WRITER_LOG_DIR" ] || mkdir -p "$USB_WRITER_LOG_DIR" |& __devnull
[ -d "$USB_WRITER_TEMP_DIR" ] || mkdir -p "$USB_WRITER_TEMP_DIR" |& __devnull
[ -d "$USB_WRITER_CACHE_DIR" ] || mkdir -p "$USB_WRITER_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
USB_WRITER_TEMP_FILE="${USB_WRITER_TEMP_FILE:-$(mktemp $USB_WRITER_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$USB_WRITER_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$USB_WRITER_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$USB_WRITER_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$USB_WRITER_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$USB_WRITER_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$USB_WRITER_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent,label:,no-verify"
LONGOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY=""
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    USB_WRITER_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    USB_WRITER_CWD="$2"
    [ -d "$USB_WRITER_CWD" ] || mkdir -p "$USB_WRITER_CWD" |& __devnull
    shift 2
    ;;
  --label)
    USB_WRITER_LABEL="$2"
    shift 2
    ;;
  --no-verify)
    USB_WRITER_NO_VERIFY="true"
    shift 1
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# USB_WRITER_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# USB_WRITER_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && USB_WRITER_CWD="$1" && shift 1 || USB_WRITER_CWD="${USB_WRITER_CWD:-$PWD}"
USB_WRITER_CWD="$(realpath "${USB_WRITER_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$USB_WRITER_CWD" ] && cd "$USB_WRITER_CWD"; then
# if [ "$USB_WRITER_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $USB_WRITER_CWD"
# fi
# else
# printf_exit "💔 $USB_WRITER_CWD does not exist 💔"
# fi
export USB_WRITER_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
__execute_usb-writer "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
