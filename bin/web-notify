#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202501191000-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  web-notify --help
# @@Copyright        :  Copyright: (c) 2023 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Aug 17, 2023 11:43 EDT
# @@File             :  web-notify
# @@Description      :
# @@Changelog        :  Fixed stray apostrophes
# @@TODO             :  add ntfy/gotify/pushover/pushbullet
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1001,SC1003,SC2001,SC2003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317,SC2329
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202501191000-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
WEB_NOTIFY_REQUIRE_SUDO="${WEB_NOTIFY_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD/#$HOME/~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && WEB_NOTIFY_EXIT_STATUS=0 || WEB_NOTIFY_EXIT_STATUS=1
  return ${WEB_NOTIFY_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && WEB_NOTIFY_EXIT_STATUS=0 || WEB_NOTIFY_EXIT_STATUS=1
  return ${WEB_NOTIFY_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# See if the executable exists
__cmd_exists() {
  WEB_NOTIFY_EXIT_STATUS=0
  [ -n "$1" ] && local WEB_NOTIFY_EXIT_STATUS="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && WEB_NOTIFY_EXIT_STATUS+=$(($WEB_NOTIFY_EXIT_STATUS + 0)) || WEB_NOTIFY_EXIT_STATUS+=$(($WEB_NOTIFY_EXIT_STATUS + 1))
  done
  [ $WEB_NOTIFY_EXIT_STATUS -eq 0 ] || WEB_NOTIFY_EXIT_STATUS=3
  return ${WEB_NOTIFY_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local WEB_NOTIFY_EXIT_STATUS=0
  curl -q -LSsfI --max-time 1 --retry 0 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || WEB_NOTIFY_EXIT_STATUS=4
  return ${WEB_NOTIFY_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE"
  fi
  [ -d "$WEB_NOTIFY_CONFIG_DIR" ] || mkdir -p "$WEB_NOTIFY_CONFIG_DIR"
  [ -d "$WEB_NOTIFY_CONFIG_BACKUP_DIR" ] || mkdir -p "$WEB_NOTIFY_CONFIG_BACKUP_DIR"
  [ -f "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE" ] &&
    cp -Rf "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE" "$WEB_NOTIFY_CONFIG_BACKUP_DIR/$WEB_NOTIFY_CONFIG_FILE.$$"
  cat <<EOF >"$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE"
# Settings for web-notify
WEB_NOTIFY_DEFAULT_MESSAGE="${WEB_NOTIFY_DEFAULT_MESSAGE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# telegram
WEB_NOTIFY_TELEGRAM_API="${WEB_NOTIFY_TELEGRAM_API:-}"
WEB_NOTIFY_TELEGRAM_CHANNEL="${WEB_NOTIFY_TELEGRAM_CHANNEL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# slack
WEB_NOTIFY_SLACK_WEBHOOK="${WEB_NOTIFY_SLACK_WEBHOOK:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# discord
WEB_NOTIFY_DISCORD_WEBHOOK="${WEB_NOTIFY_DISCORD_WEBHOOK:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pushover
WEB_NOTIFY_PUSHOVER_API_KEY="${WEB_NOTIFY_PUSHOVER_API_KEY:-$PUSHOVER_API_KEY}"
WEB_NOTIFY_PUSHOVER_API_ID="${WEB_NOTIFY_PUSHOVER_API_ID:-a8xbbw7e7jrnqpg7ngdrtwd6vxfyv5}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN="${WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN:-$PUSHBULLET_ACCESS_TOKEN}"
WEB_NOTIFY_PUSHBULLET_API_HOST="${WEB_NOTIFY_PUSHBULLET_API_HOST:-https://api.pushbullet.com/v2/pushes}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WEB_NOTIFY_NTFY_URL="${WEB_NOTIFY_NTFY_URL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WEB_NOTIFY_GOTIFY_URL="${WEB_NOTIFY_GOTIFY_URL:-}"
WEB_NOTIFY_GOTIFY_TOKEN="${WEB_NOTIFY_GOTIFY_TOKEN:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
WEB_NOTIFY_OUTPUT_COLOR_1="${WEB_NOTIFY_OUTPUT_COLOR_1:-}"
WEB_NOTIFY_OUTPUT_COLOR_2="${WEB_NOTIFY_OUTPUT_COLOR_2:-}"
WEB_NOTIFY_OUTPUT_COLOR_GOOD="${WEB_NOTIFY_OUTPUT_COLOR_GOOD:-}"
WEB_NOTIFY_OUTPUT_COLOR_ERROR="${WEB_NOTIFY_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
WEB_NOTIFY_NOTIFY_ENABLED="${WEB_NOTIFY_NOTIFY_ENABLED:-}"
WEB_NOTIFY_GOOD_NAME="${WEB_NOTIFY_GOOD_NAME:-}"
WEB_NOTIFY_ERROR_NAME="${WEB_NOTIFY_ERROR_NAME:-}"
WEB_NOTIFY_GOOD_MESSAGE="${WEB_NOTIFY_GOOD_MESSAGE:-}"
WEB_NOTIFY_ERROR_MESSAGE="${WEB_NOTIFY_ERROR_MESSAGE:-}"
WEB_NOTIFY_NOTIFY_CLIENT_NAME="${WEB_NOTIFY_NOTIFY_CLIENT_NAME:-}"
WEB_NOTIFY_NOTIFY_CLIENT_ICON="${WEB_NOTIFY_NOTIFY_CLIENT_ICON:-}"
WEB_NOTIFY_NOTIFY_CLIENT_URGENCY="${WEB_NOTIFY_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE"
    WEB_NOTIFY_EXIT_STATUS=0
  else
    printf_red "Failed to create the config file"
    WEB_NOTIFY_EXIT_STATUS=1
  fi
  return ${WEB_NOTIFY_EXIT_STATUS:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() { #
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "web-notify:  - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: web-notify [options] [commands]"
  __printf_line "discord                         - Send notification via discord"
  __printf_line "slack                           - Send notification via slack"
  __printf_line "telegram                        - Send notification via telegram"
  __printf_line "pushover                        - Send notification via pushover"
  __printf_line "pushbullet                      - Send notification via pushbullet"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grep() { grep "$@" 2>/dev/null; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$WEB_NOTIFY_REQUIRE_SUDO" = "yes" ] && [ -z "$WEB_NOTIFY_REQUIRE_SUDO_RUN" ]; then
    export WEB_NOTIFY_REQUIRE_SUDO="no"
    export WEB_NOTIFY_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    WEB_NOTIFY_EXIT_STATUS=$?
  else
    printf '%s\n' "This requires root to run"
    WEB_NOTIFY_EXIT_STATUS=1
  fi
  return ${WEB_NOTIFY_EXIT_STATUS:-0}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  WEB_NOTIFY_EXIT_STATUS=${WEB_NOTIFY_EXIT_STATUS:-0}
  [ -f "$WEB_NOTIFY_TEMP_FILE" ] && rm -Rf "$WEB_NOTIFY_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD/#$HOME/~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $WEB_NOTIFY_EXIT_STATUS
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create a --no-* options function
__no_options_function() {
  case $1 in
  *) ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
format_file_as_JSON_string() { sed -e 's/\\\\/\\\\\\\\/g' -e 's/$/\\\\n/g' -e 's/"/\\\\"/g' -e 's/\\t/\\\\t/g' | tr -d "\n"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_auth_header() {
  local service="$1"
  local header=""
  case "$service" in
  ntfy) [ -n "$WEB_NOTIFY_NTFY_API_KEY" ] && header="Authorization: Bearer $WEB_NOTIFY_NTFY_API_KEY" ;;
  gotify) [ -n "$WEB_NOTIFY_GOTIFY_API_KEY" ] && header="X-Gotify-Key: $WEB_NOTIFY_GOTIFY_API_KEY" ;;
  matrix) [ -n "$WEB_NOTIFY_MATRIX_TOKEN" ] && header="Authorization: Bearer $WEB_NOTIFY_MATRIX_TOKEN" ;;
  esac
  [ -n "$header" ] && printf '%s' "$header" || true
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ntfy() {
  local service="ntfy"
  local message="$*"
  local exitCode=0
  local title="${SEND_TITLE:-$WEB_NOTIFY_TITLE}"
  local url="${WEB_NOTIFY_NTFY_HOST}/${WEB_NOTIFY_NTFY_TOPIC}"

  if [ -z "$WEB_NOTIFY_NTFY_HOST" ]; then
    printf_red "WEB_NOTIFY_NTFY_HOST is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_NTFY_TOPIC" ]; then
    printf_red "WEB_NOTIFY_NTFY_TOPIC is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  local auth_header="$(__set_auth_header ntfy)"
  if [ -z "$auth_header" ]; then
    curl -q -LSsf -H "Title: $title" -d "$message" "$url" >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  else
    curl -q -LSsf -H "Title: $title" -H "$auth_header" -d "$message" "$url" >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gotify() {
  local service="gotify"
  local message="$*"
  local exitCode=0
  local title="${SEND_TITLE:-$WEB_NOTIFY_TITLE}"
  local url="${WEB_NOTIFY_GOTIFY_HOST}/message"

  if [ -z "$WEB_NOTIFY_GOTIFY_HOST" ]; then
    printf_red "WEB_NOTIFY_GOTIFY_HOST is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_GOTIFY_API_KEY" ]; then
    printf_red "WEB_NOTIFY_GOTIFY_API_KEY is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  local auth_header="$(__set_auth_header gotify)"
  if [ -z "$auth_header" ]; then
    curl -q -LSsf -X POST "$url" \
      -F "title=$title" \
      -F "message=$message" \
      -F "priority=5" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  else
    curl -q -LSsf -X POST "$url" \
      -H "$auth_header" \
      -F "title=$title" \
      -F "message=$message" \
      -F "priority=5" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__pushover() {
  local service="pushover"
  local message="$*"
  local exitCode=0
  local title="${SEND_TITLE:-$WEB_NOTIFY_TITLE}"
  local url="https://api.pushover.net/1/messages.json"

  if [ -z "$WEB_NOTIFY_PUSHOVER_API_KEY" ]; then
    printf_red "WEB_NOTIFY_PUSHOVER_API_KEY is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_PUSHOVER_API_ID" ]; then
    printf_red "WEB_NOTIFY_PUSHOVER_API_ID is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -X POST "$url" \
    -d "token=$WEB_NOTIFY_PUSHOVER_API_KEY" \
    -d "user=$WEB_NOTIFY_PUSHOVER_API_ID" \
    -d "title=$title" \
    -d "message=$message" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__pushbullet() {
  local service="pushbullet"
  local message="$*"
  local exitCode=0
  local title="${SEND_TITLE:-$WEB_NOTIFY_TITLE}"
  local url="${WEB_NOTIFY_PUSHBULLET_API_HOST}"

  if [ -z "$WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN" ]; then
    printf_red "WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -u "$WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN:" -X POST "$url" \
    -d type="note" \
    -d title="$title" \
    -d body="$message" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__telegram() {
  local service="telegram"
  local message="$*"
  local exitCode=0
  local response
  local chat_id="${WEB_NOTIFY_TELEGRAM_CHAT_ID:-$WEB_NOTIFY_TELEGRAM_CHANNEL}"
  local url="https://api.telegram.org/bot${WEB_NOTIFY_TELEGRAM_API}/sendMessage"

  if [ -z "$WEB_NOTIFY_TELEGRAM_API" ]; then
    printf_red "WEB_NOTIFY_TELEGRAM_API is not set"
    return 1
  elif [ -z "$chat_id" ]; then
    printf_red "WEB_NOTIFY_TELEGRAM_CHANNEL is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  response=$(curl -q -LSs -X POST "$url" \
    -H "Content-Type: application/json" \
    -d "{\"chat_id\":\"-$chat_id\",\"text\":\"$message\"}")

  if [ "$exitCode" -eq 0 ] && echo "$response" | grep -q '"ok":true'; then
    __append_log "Message was sent to $service"
  else
    printf '%s\n' "$response" >"$WEB_NOTIFY_LOG_ERROR_FILE"
    __append_log "Failed to send message to $service: $response"
    exitCode=1
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__discord() {
  local service="discord"
  local message="$*"
  local exitCode=0
  local message="$(printf '%b\n' "$message" | format_file_as_JSON_string)"
  local url="https://discord.com/api/webhooks/$WEB_NOTIFY_DISCORD_WEBHOOK"

  if [ -z "$WEB_NOTIFY_DISCORD_WEBHOOK" ]; then
    printf_red "WEB_NOTIFY_DISCORD_WEBHOOK is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -X POST -H "Content-Type: application/json" \
    -d "{\"content\": \"$message\"}" "$url" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__slack() {
  local service="slack"
  local message="$*"
  local exitCode=0
  local url="$WEB_NOTIFY_SLACK_WEBHOOK"

  if [ -z "$WEB_NOTIFY_SLACK_WEBHOOK" ]; then
    printf_red "WEB_NOTIFY_SLACK_WEBHOOK is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -X POST "$url" \
    -H "Content-Type: application/json" \
    -d "{\"text\": \"$message\"}" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__teams() {
  local service="teams"
  local message="$*"
  local exitCode=0
  local message="$(printf '%b\n' "$message" | format_file_as_JSON_string)"
  local url="$WEB_NOTIFY_TEAMS_WEBHOOK"

  if [ -z "$WEB_NOTIFY_TEAMS_WEBHOOK" ]; then
    printf_red "WEB_NOTIFY_TEAMS_WEBHOOK is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -X POST -H "Content-Type: application/json" \
    -d "{\"text\": \"$message\"}" "$url" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mattermost() {
  local service="mattermost"
  local message="$*"
  local exitCode=0
  local message="$(printf '%b\n' "$message" | format_file_as_JSON_string)"
  local url="$WEB_NOTIFY_MATTERMOST_WEBHOOK"

  if [ -z "$WEB_NOTIFY_MATTERMOST_WEBHOOK" ]; then
    printf_red "WEB_NOTIFY_MATTERMOST_WEBHOOK is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -X POST -H "Content-Type: application/json" \
    -d "{\"text\": \"$message\"}" "$url" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__rocketchat() {
  local service="rocketchat"
  local message="$*"
  local exitCode=0
  local message="$(printf '%b\n' "$message" | format_file_as_JSON_string)"
  local url="$WEB_NOTIFY_ROCKETCHAT_WEBHOOK"

  if [ -z "$WEB_NOTIFY_ROCKETCHAT_WEBHOOK" ]; then
    printf_red "WEB_NOTIFY_ROCKETCHAT_WEBHOOK is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -X POST -H "Content-Type: application/json" \
    -d "{\"text\": \"$message\"}" "$url" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__zulip() {
  local service="zulip"
  local message="$*"
  local exitCode=0
  local stream="${WEB_NOTIFY_ZULIP_STREAM:-general}"
  local topic="${WEB_NOTIFY_ZULIP_TOPIC:-notifications}"
  local url="${WEB_NOTIFY_ZULIP_API_HOST}/api/v1/messages"

  if [ -z "$WEB_NOTIFY_ZULIP_API_KEY" ]; then
    printf_red "WEB_NOTIFY_ZULIP_API_KEY is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_ZULIP_EMAIL" ]; then
    printf_red "WEB_NOTIFY_ZULIP_EMAIL is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -X POST "$url" \
    -u "$WEB_NOTIFY_ZULIP_EMAIL:$WEB_NOTIFY_ZULIP_API_KEY" \
    -d "type=stream" \
    -d "to=$stream" \
    -d "topic=$topic" \
    -d "content=$message" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__matrix() {
  local service="matrix"
  local message="$*"
  local exitCode=0
  local msg_payload="{\"msgtype\":\"m.text\",\"body\":\"$message\"}"
  local url="${WEB_NOTIFY_MATRIX_HOMESERVER}/_matrix/client/v3/rooms/${WEB_NOTIFY_MATRIX_ROOM_ID}/send/m.room.message?access_token=${WEB_NOTIFY_MATRIX_TOKEN}"

  if [ -z "$WEB_NOTIFY_MATRIX_HOMESERVER" ]; then
    printf_red "WEB_NOTIFY_MATRIX_HOMESERVER is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_MATRIX_ROOM_ID" ]; then
    printf_red "WEB_NOTIFY_MATRIX_ROOM_ID is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_MATRIX_TOKEN" ]; then
    printf_red "WEB_NOTIFY_MATRIX_TOKEN is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  local auth_header="$(__set_auth_header matrix)"
  if [ -z "$auth_header" ]; then
    curl -q -LSsf -X PUT "$url" \
      -H "Content-Type: application/json" \
      -d "$msg_payload" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  else
    curl -q -LSsf -X PUT "$url" \
      -H "Content-Type: application/json" \
      -H "$auth_header" \
      -d "$msg_payload" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__twilio() {
  local service="twilio"
  local message="$*"
  local exitCode=0
  local url="https://api.twilio.com/2010-04-01/Accounts/$WEB_NOTIFY_TWILIO_SID/Messages.json"

  if [ -z "$WEB_NOTIFY_TWILIO_SID" ]; then
    printf_red "WEB_NOTIFY_TWILIO_SID is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_TWILIO_AUTH_TOKEN" ]; then
    printf_red "WEB_NOTIFY_TWILIO_AUTH_TOKEN is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_TWILIO_FROM" ]; then
    printf_red "WEB_NOTIFY_TWILIO_FROM is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_TWILIO_TO" ]; then
    printf_red "WEB_NOTIFY_TWILIO_TO is not set"
    return 1
  fi

  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf -u "$WEB_NOTIFY_TWILIO_SID:$WEB_NOTIFY_TWILIO_AUTH_TOKEN" \
    -X POST "$url" \
    --data-urlencode "From=$WEB_NOTIFY_TWILIO_FROM" \
    --data-urlencode "To=$WEB_NOTIFY_TWILIO_TO" \
    --data-urlencode "Body=$message" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mailx() {
  local service="email"
  local message="$*"
  local exitCode=0
  local title="${SEND_TITLE:-$WEB_NOTIFY_TITLE}"
  echo "$message" | mailx -s "$title" -r "$WEB_NOTIFY_EMAIL_FROM" "$WEB_NOTIFY_EMAIL_TO" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  [ "$exitCode" = 0 ] && __append_log "Message was sent via $service" || __append_log "Failed to send message via $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__sendgrid() {
  local service="sendgrid"
  local message="$*"
  local exitCode=0
  local subject="${SEND_SUBJECT:-$WEB_NOTIFY_SUBJECT}"
  local from="$WEB_NOTIFY_EMAIL_FROM"
  local to="$WEB_NOTIFY_EMAIL_TO"
  local content="$(printf '%b\n' "$message")"
  local url="https://api.sendgrid.com/v3/mail/send"

  if [ -z "$WEB_NOTIFY_SENDGRID_API_KEY" ]; then
    printf_red "WEB_NOTIFY_SENDGRID_API_KEY is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  local auth_header="Authorization: Bearer $WEB_NOTIFY_SENDGRID_API_KEY"
  if [ -z "$auth_header" ]; then
    curl -q -LSsf -X POST "$url" \
      -H "Content-Type: application/json" \
      -d "{\"personalizations\":[{\"to\":[{\"email\":\"$to\"}]}],\"from\":{\"email\":\"$from\"},\"subject\":\"$subject\",\"content\":[{\"type\":\"text/plain\",\"value\":\"$content\"}]}" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  else
    curl -q -LSsf -X POST "$url" \
      -H "Content-Type: application/json" \
      -H "$auth_header" \
      -d "{\"personalizations\":[{\"to\":[{\"email\":\"$to\"}]}],\"from\":{\"email\":\"$from\"},\"subject\":\"$subject\",\"content\":[{\"type\":\"text/plain\",\"value\":\"$content\"}]}" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mailgun() {
  local service="mailgun"
  local message="$*"
  local exitCode=0
  local subject="${SEND_SUBJECT:-$WEB_NOTIFY_SUBJECT}"
  local from="$WEB_NOTIFY_EMAIL_FROM"
  local to="$WEB_NOTIFY_EMAIL_TO"
  local url="https://api.mailgun.net/v3/$WEB_NOTIFY_MAILGUN_DOMAIN/messages"

  if [ -z "$WEB_NOTIFY_MAILGUN_API_KEY" ]; then
    printf_red "WEB_NOTIFY_MAILGUN_API_KEY is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_MAILGUN_DOMAIN" ]; then
    printf_red "WEB_NOTIFY_MAILGUN_DOMAIN is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  local auth_header="Authorization: Basic $(printf 'api:%s' "$WEB_NOTIFY_MAILGUN_API_KEY" | base64)"
  if [ -z "$auth_header" ]; then
    curl -q -LSsf -X POST "$url" \
      -F from="$from" \
      -F to="$to" \
      -F subject="$subject" \
      -F text="$message" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  else
    curl -q -LSsf -X POST "$url" \
      -H "$auth_header" \
      -F from="$from" \
      -F to="$to" \
      -F subject="$subject" \
      -F text="$message" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__postmark() {
  local service="postmark"
  local message="$*"
  local exitCode=0
  local subject="${SEND_SUBJECT:-$WEB_NOTIFY_SUBJECT}"
  local from="$WEB_NOTIFY_EMAIL_FROM"
  local to="$WEB_NOTIFY_EMAIL_TO"
  local url="https://api.postmarkapp.com/email"

  if [ -z "$WEB_NOTIFY_POSTMARK_API_KEY" ]; then
    printf_red "WEB_NOTIFY_POSTMARK_API_KEY is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  local auth_header="X-Postmark-Server-Token: $WEB_NOTIFY_POSTMARK_API_KEY"
  if [ -z "$auth_header" ]; then
    curl -q -LSsf -X POST "$url" \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -d "{\"From\": \"$from\", \"To\": \"$to\", \"Subject\": \"$subject\", \"TextBody\": \"$message\"}" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  else
    curl -q -LSsf -X POST "$url" \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "$auth_header" \
      -d "{\"From\": \"$from\", \"To\": \"$to\", \"Subject\": \"$subject\", \"TextBody\": \"$message\"}" \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__mailjet() {
  local service="mailjet"
  local message="$*"
  local exitCode=0
  local subject="${SEND_SUBJECT:-$WEB_NOTIFY_SUBJECT}"
  local from_email="${WEB_NOTIFY_EMAIL_FROM}"
  local to_email="${WEB_NOTIFY_EMAIL_TO}"
  local url="https://api.mailjet.com/v3.1/send"

  if [ -z "$WEB_NOTIFY_MAILJET_API_KEY" ]; then
    printf_red "WEB_NOTIFY_MAILJET_API_KEY is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_MAILJET_SECRET_KEY" ]; then
    printf_red "WEB_NOTIFY_MAILJET_SECRET_KEY is not set"
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  local auth_header="Authorization: Basic $(printf "%s:%s" "$WEB_NOTIFY_MAILJET_API_KEY" "$WEB_NOTIFY_MAILJET_SECRET_KEY" | base64)"
  if [ -z "$auth_header" ]; then
    curl -q -LSsf -X POST "$url" \
      -H "Content-Type: application/json" \
      -d '{
        "Messages": [{
          "From": {"Email": "'"$from_email"'", "Name": "'"$APPNAME"'"},
          "To": [{"Email": "'"$to_email"'", "Name": "Recipient"}],
          "Subject": "'"$subject"'",
          "TextPart": "'"$message"'"
        }]
      }' \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  else
    curl -q -LSsf -X POST "$url" \
      -H "Content-Type: application/json" \
      -H "$auth_header" \
      -d '{
        "Messages": [{
          "From": {"Email": "'"$from_email"'", "Name": "'"$APPNAME"'"},
          "To": [{"Email": "'"$to_email"'", "Name": "Recipient"}],
          "Subject": "'"$subject"'",
          "TextPart": "'"$message"'"
        }]
      }' \
      >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  fi
  if [ "$exitCode" = 0 ]; then
    __append_log "Message was sent to $service"
  else
    __append_log "Failed to send message to $service"
  fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ses() {
  local service="ses"
  local message="$*"
  local exitCode=0
  local region="$WEB_NOTIFY_SES_REGION"
  local from="$WEB_NOTIFY_SES_FROM"
  local to="$WEB_NOTIFY_SES_TO"
  local subject="${SEND_SUBJECT:-$WEB_NOTIFY_SUBJECT}"

  if [ -z "$WEB_NOTIFY_SES_ACCESS_KEY" ]; then
    printf_red "WEB_NOTIFY_SES_ACCESS_KEY is not set"
    return 1
  elif [ -z "$WEB_NOTIFY_SES_SECRET_KEY" ]; then
    printf_red "WEB_NOTIFY_SES_SECRET_KEY is not set"
    return 1
  elif [ -z "$from" ] || [ -z "$to" ]; then
    printf_red "WEB_NOTIFY_SES_FROM or TO is not set"
    return 1
  fi

  local url="https://email.$region.amazonaws.com"
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"

  curl -q -LSsf -X POST "$url" \
    -d "Action=SendEmail" \
    -d "Source=$from" \
    -d "Destination.ToAddresses.member.1=$to" \
    -d "Message.Subject.Data=$subject" \
    -d "Message.Body.Text.Data=$message" \
    -u "$WEB_NOTIFY_SES_ACCESS_KEY:$WEB_NOTIFY_SES_SECRET_KEY" \
    >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1

  [ "$exitCode" = 0 ] && __append_log "Message was sent to $service" || __append_log "Failed to send message to $service"
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__example() {
  local service="<service>"
  local message="$*"
  local exitCode=0
  local message="..." # format appropriately
  local url="..."     # from WEB_NOTIFY_*

  if [ -z "$ENV1" ]; then
    printf_red "..."
    return 1
  elif [ -z "$ENV2" ]; then
    printf_red "..."
    return 1
  fi
  printf '%s\n' "Attempting to send to $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  printf '%s\n' "$message" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  curl -q -LSsf ... >>"$WEB_NOTIFY_LOG_STATUS_FILE" 2>>"$WEB_NOTIFY_LOG_ERROR_FILE" || exitCode=1
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__append_log() { printf '%s\n' "$*" >>"$WEB_NOTIFY_LOG_STATUS_FILE"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__end_log() {
  local code="$1"
  local service="$2"
  local last_line=""
  if [ "$code" -eq 0 ]; then
    rm -f "$WEB_NOTIFY_LOG_ERROR_FILE" 2>/dev/null
    printf '%s\n' "Notification sent via $service" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
    printf_green "âœ” Notification sent via $service"
  else
    if [ -f "$WEB_NOTIFY_LOG_ERROR_FILE" ]; then
      last_line="$(grep -v '^[[:space:]]*$' "$WEB_NOTIFY_LOG_ERROR_FILE" | head -n 1 | tr -d '\r\n')"
    fi
    if [ -n "$last_line" ]; then
      printf_red "âœ˜ $service failed: $last_line"
    else
      printf_red "âœ˜ $service failed: Unknown error - check $WEB_NOTIFY_LOG_ERROR_FILE"
    fi
  fi

  if [ -s "$WEB_NOTIFY_LOG_ERROR_FILE" ]; then
    cat "$WEB_NOTIFY_LOG_ERROR_FILE" >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  fi
  printf '%s\n\n' '# - - - - - - - - - - - - - - - - END - - - - - - - - - - - - - - - - -' >>"$WEB_NOTIFY_LOG_STATUS_FILE"
  WEB_NOTIFY_EXIT_STATUS="$code"
  return $WEB_NOTIFY_EXIT_STATUS
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default exit code
WEB_NOTIFY_EXIT_STATUS=0
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
WEB_NOTIFY_CONFIG_DIR="${WEB_NOTIFY_CONFIG_DIR:-$HOME/.config/myscripts/web-notify}"
WEB_NOTIFY_CONFIG_BACKUP_DIR="${WEB_NOTIFY_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/web-notify/backups}"
WEB_NOTIFY_LOG_DIR="${WEB_NOTIFY_LOG_DIR:-$HOME/.local/log/web-notify}"
WEB_NOTIFY_RUN_DIR="${WEB_NOTIFY_RUN_DIR:-$HOME/.local/run/system_scripts/$WEB_NOTIFY_SCRIPTS_PREFIX}"
WEB_NOTIFY_TEMP_DIR="${WEB_NOTIFY_TEMP_DIR:-$HOME/.local/tmp/system_scripts/web-notify}"
WEB_NOTIFY_CACHE_DIR="${WEB_NOTIFY_CACHE_DIR:-$HOME/.cache/web-notify}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# File settings
WEB_NOTIFY_CONFIG_FILE="${WEB_NOTIFY_CONFIG_FILE:-settings.conf}"
WEB_NOTIFY_LOG_ERROR_FILE="${WEB_NOTIFY_LOG_ERROR_FILE:-$WEB_NOTIFY_LOG_DIR/error.log}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
WEB_NOTIFY_OUTPUT_COLOR_1="${WEB_NOTIFY_OUTPUT_COLOR_1:-33}"
WEB_NOTIFY_OUTPUT_COLOR_2="${WEB_NOTIFY_OUTPUT_COLOR_2:-5}"
WEB_NOTIFY_OUTPUT_COLOR_GOOD="${WEB_NOTIFY_OUTPUT_COLOR_GOOD:-2}"
WEB_NOTIFY_OUTPUT_COLOR_ERROR="${WEB_NOTIFY_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
WEB_NOTIFY_NOTIFY_ENABLED="${WEB_NOTIFY_NOTIFY_ENABLED:-yes}"
WEB_NOTIFY_GOOD_NAME="${WEB_NOTIFY_GOOD_NAME:-Great:}"
WEB_NOTIFY_ERROR_NAME="${WEB_NOTIFY_ERROR_NAME:-Error:}"
WEB_NOTIFY_GOOD_MESSAGE="${WEB_NOTIFY_GOOD_MESSAGE:-No errors reported}"
WEB_NOTIFY_ERROR_MESSAGE="${WEB_NOTIFY_ERROR_MESSAGE:-Errors were reported}"
WEB_NOTIFY_NOTIFY_CLIENT_NAME="${WEB_NOTIFY_NOTIFY_CLIENT_NAME:-$APPNAME}"
WEB_NOTIFY_NOTIFY_CLIENT_ICON="${WEB_NOTIFY_NOTIFY_CLIENT_ICON:-notification-new}"
WEB_NOTIFY_NOTIFY_CLIENT_URGENCY="${WEB_NOTIFY_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
WEB_NOTIFY_TITLE="${WEB_NOTIFY_TITLE:-$APPNAME}"
WEB_NOTIFY_SUBJECT="${WEB_NOTIFY_SUBJECT:-$APPNAME on $HOSTNAME}"
WEB_NOTIFY_LOG_STATUS_FILE="${WEB_NOTIFY_LOG_STATUS_FILE:-$WEB_NOTIFY_LOG_DIR/status.log}"
# services
WEB_NOTIFY_NTFY_HOST="${WEB_NOTIFY_NTFY_HOST:-https://ntfy.sh}"
WEB_NOTIFY_NTFY_TOPIC="${WEB_NOTIFY_NTFY_TOPIC:-}"
WEB_NOTIFY_NTFY_API_KEY="${WEB_NOTIFY_NTFY_API_KEY:-$NTFY_API_KEY}"
WEB_NOTIFY_GOTIFY_HOST="${WEB_NOTIFY_GOTIFY_HOST:-}"
WEB_NOTIFY_GOTIFY_API_KEY="${WEB_NOTIFY_GOTIFY_API_KEY:-}"
WEB_NOTIFY_TELEGRAM_API="${WEB_NOTIFY_TELEGRAM_API:-$TELEGRAM_API_TOKEN}"
WEB_NOTIFY_TELEGRAM_CHANNEL="${WEB_NOTIFY_TELEGRAM_CHANNEL:-$TELEGRAM_API_CHANNEL}"
WEB_NOTIFY_SLACK_WEBHOOK="${WEB_NOTIFY_SLACK_WEBHOOK:-$SLACK_WEBHOOK_URL}"
WEB_NOTIFY_DISCORD_WEBHOOK="${WEB_NOTIFY_DISCORD_WEBHOOK:-$DISCORD_WEBHOOK_URL}"
WEB_NOTIFY_PUSHOVER_API_KEY="${WEB_NOTIFY_PUSHOVER_API_KEY:-$PUSHOVER_API_KEY}"
WEB_NOTIFY_PUSHOVER_API_ID="${WEB_NOTIFY_PUSHOVER_API_ID:-a8xbbw7e7jrnqpg7ngdrtwd6vxfyv5}"
WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN="${WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN:-$PUSHBULLET_ACCESS_TOKEN}"
WEB_NOTIFY_PUSHBULLET_API_HOST="${WEB_NOTIFY_PUSHBULLET_API_HOST:-https://api.pushbullet.com/v2/pushes}"
# Webhook + Chat Services
WEB_NOTIFY_TEAMS_WEBHOOK="${WEB_NOTIFY_TEAMS_WEBHOOK:-$TEAMS_WEBHOOK_URL}"
WEB_NOTIFY_MATTERMOST_WEBHOOK="${WEB_NOTIFY_MATTERMOST_WEBHOOK:-$MATTERMOST_WEBHOOK_URL}"
WEB_NOTIFY_ROCKETCHAT_WEBHOOK="${WEB_NOTIFY_ROCKETCHAT_WEBHOOK:-$ROCKETCHAT_WEBHOOK_URL}"
# Zulip
WEB_NOTIFY_ZULIP_API_KEY="${WEB_NOTIFY_ZULIP_API_KEY:-}"
WEB_NOTIFY_ZULIP_EMAIL="${WEB_NOTIFY_ZULIP_EMAIL:-}"
WEB_NOTIFY_ZULIP_STREAM="${WEB_NOTIFY_ZULIP_STREAM:-general}"
WEB_NOTIFY_ZULIP_TOPIC="${WEB_NOTIFY_ZULIP_TOPIC:-notifications}"
WEB_NOTIFY_ZULIP_API_HOST="${WEB_NOTIFY_ZULIP_API_HOST:-https://zulip.com}"
# Matrix
WEB_NOTIFY_MATRIX_HOMESERVER="${WEB_NOTIFY_MATRIX_HOMESERVER:-}"
WEB_NOTIFY_MATRIX_TOKEN="${WEB_NOTIFY_MATRIX_TOKEN:-}"
WEB_NOTIFY_MATRIX_ROOM_ID="${WEB_NOTIFY_MATRIX_ROOM_ID:-}"
# Email (mailx or generic SMTP shell tools)
WEB_NOTIFY_EMAIL_FROM="${WEB_NOTIFY_EMAIL_FROM:-$APPNAME <no-reply@$HOSTNAME>}"
WEB_NOTIFY_EMAIL_TO="${WEB_NOTIFY_EMAIL_TO:-root@$HOSTNAME}"
# SendGrid
WEB_NOTIFY_SENDGRID_API_KEY="${WEB_NOTIFY_SENDGRID_API_KEY:-}"
# Mailgun
WEB_NOTIFY_MAILGUN_API_KEY="${WEB_NOTIFY_MAILGUN_API_KEY:-}"
WEB_NOTIFY_MAILGUN_DOMAIN="${WEB_NOTIFY_MAILGUN_DOMAIN:-}"
# Postmark
WEB_NOTIFY_POSTMARK_API_KEY="${WEB_NOTIFY_POSTMARK_API_KEY:-}"
# Mailjet
WEB_NOTIFY_MAILJET_API_KEY="${WEB_NOTIFY_MAILJET_API_KEY:-}"
WEB_NOTIFY_MAILJET_SECRET_KEY="${WEB_NOTIFY_MAILJET_SECRET_KEY:-}"
# Amazon SES
WEB_NOTIFY_SES_REGION="${WEB_NOTIFY_SES_REGION:-us-east-1}"
WEB_NOTIFY_SES_ACCESS_KEY="${WEB_NOTIFY_SES_ACCESS_KEY:-}"
WEB_NOTIFY_SES_SECRET_KEY="${WEB_NOTIFY_SES_SECRET_KEY:-}"
WEB_NOTIFY_SES_FROM="${WEB_NOTIFY_SES_FROM:-}"
WEB_NOTIFY_SES_TO="${WEB_NOTIFY_SES_TO:-}"
# Twilio
WEB_NOTIFY_TWILIO_SID="${WEB_NOTIFY_TWILIO_SID:-}"
WEB_NOTIFY_TWILIO_AUTH_TOKEN="${WEB_NOTIFY_TWILIO_AUTH_TOKEN:-}"
WEB_NOTIFY_TWILIO_FROM="${WEB_NOTIFY_TWILIO_FROM:-}"
WEB_NOTIFY_TWILIO_TO="${WEB_NOTIFY_TWILIO_TO:-}"
# Fallback to use these services if none is specified
WEB_NOTIFY_FALLBACK_SERVICES="${WEB_NOTIFY_FALLBACK_SERVICES:-discord telegram}"
# Default message to use if no message is specified
WEB_NOTIFY_DEFAULT_MESSAGE="${WEB_NOTIFY_DEFAULT_MESSAGE:-Test message sent from $HOSTNAME}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE" ] && . "$WEB_NOTIFY_CONFIG_DIR/$WEB_NOTIFY_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$WEB_NOTIFY_RUN_DIR" ] || mkdir -p "$WEB_NOTIFY_RUN_DIR" |& __devnull
[ -d "$WEB_NOTIFY_LOG_DIR" ] || mkdir -p "$WEB_NOTIFY_LOG_DIR" |& __devnull
[ -d "$WEB_NOTIFY_TEMP_DIR" ] || mkdir -p "$WEB_NOTIFY_TEMP_DIR" |& __devnull
[ -d "$WEB_NOTIFY_CACHE_DIR" ] || mkdir -p "$WEB_NOTIFY_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WEB_NOTIFY_TEMP_FILE="${WEB_NOTIFY_TEMP_FILE:-$(mktemp $WEB_NOTIFY_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$WEB_NOTIFY_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$WEB_NOTIFY_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$WEB_NOTIFY_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$WEB_NOTIFY_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$WEB_NOTIFY_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$WEB_NOTIFY_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent,force,no-*,"
LONGOPTS+="discord-token:,slack-token:,telegram-token:,telegram-channel:,pushover-token:,pushbullet-token:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="discord gotify mailgun mailjet mailx matrix mattermost postmark pushbullet pushover rocketchat sendgrid ses slack teams twilio zulip"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    WEB_NOTIFY_SILENT="true"
    ;;
  --force)
    shift 1
    WEB_NOTIFY_FORCE="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    WEB_NOTIFY_CWD="$2"
    [ -d "$WEB_NOTIFY_CWD" ] || mkdir -p "$WEB_NOTIFY_CWD" |& __devnull
    shift 2
    ;;
  --no-*)
    shift 1
    __no_options_function "$@"
    ;;
  --pushbullet-token)
    WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN="$2"
    shift 2
    ;;
  --pushover-token)
    WEB_NOTIFY_PUSHOVER_API_KEY="$2"
    shift 2
    ;;
  --discord-*)
    case "$1" in
    *-token)
      DISCORD_WEBHOOK_URL="$2"
      shift 2
      ;;
    esac
    ;;
  --slack-*)
    case "$1" in
    *-token)
      SLACK_WEBHOOK_URL="$2"
      shift 2
      ;;
    esac
    ;;
  --telegram-*)
    case "$1" in
    *-token)
      TELEGRAM_API_TOKEN="$2"
      shift 2
      ;;
    *-channel)
      WEB_NOTIFY_TELEGRAM_CHANNEL="$2"
      shift 2
      ;;
    esac
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# WEB_NOTIFY_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# WEB_NOTIFY_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && WEB_NOTIFY_CWD="$1" && shift 1 || WEB_NOTIFY_CWD="${WEB_NOTIFY_CWD:-$PWD}"
WEB_NOTIFY_CWD="$(realpath "${WEB_NOTIFY_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$WEB_NOTIFY_CWD" ] && cd "$WEB_NOTIFY_CWD"; then
# if [ "$WEB_NOTIFY_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $WEB_NOTIFY_CWD"
# fi
# else
# printf_exit "ðŸ’” $WEB_NOTIFY_CWD does not exist ðŸ’”"
# fi
export WEB_NOTIFY_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
printf '%s\n' "# Start Log $(date)" >>"$WEB_NOTIFY_LOG_ERROR_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Export variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
ntfy)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME ntfy
  $APPNAME ntfy [file | message]
  Env Vars: WEB_NOTIFY_NTFY_HOST, WEB_NOTIFY_NTFY_TOPIC
  Docs: https://docs.ntfy.sh/publish/
  URL: http://<WEB_NOTIFY_NTFY_HOST>" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __ntfy "$SEND"
  __end_log $? ntfy
  ;;
gotify)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME gotify
  $APPNAME gotify [file | message]
  Env Vars: WEB_NOTIFY_GOTIFY_HOST, WEB_NOTIFY_GOTIFY_API_KEY
  Docs: https://gotify.net/docs/
  Create Token: http://<WEB_NOTIFY_GOTIFY_HOST>/#settings" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __gotify "$SEND"
  __end_log $? gotify
  ;;
pushover)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME pushover
  $APPNAME pushover [file | message]
  Env Vars: WEB_NOTIFY_PUSHOVER_API_KEY, WEB_NOTIFY_PUSHOVER_API_ID
  Docs: https://pushover.net/api
  Create App: https://pushover.net/apps/build" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __pushover "$SEND"
  __end_log $? pushover
  ;;
pushbullet)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME pushbullet
  $APPNAME pushbullet [file | message]
  Env Vars: WEB_NOTIFY_PUSHBULLET_ACCESS_TOKEN
  Docs: https://docs.pushbullet.com/#create-access-token
  Access Token: https://www.pushbullet.com/#settings" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __pushbullet "$SEND"
  __end_log $? pushbullet
  ;;
telegram)
  shift 1
  exitCode=0
  [ "$1" = "telegram" ] && [ "$2" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME telegram
  $APPNAME telegram [file | message]
  Env Vars:
    WEB_NOTIFY_TELEGRAM_API      # Bot token, e.g. 123456789:ABC...
    WEB_NOTIFY_TELEGRAM_CHAT_ID  # Chat or group ID to send the message to
  Docs:
    https://core.telegram.org/bots/api#sendmessage
    https://t.me/BotFather (create bot)" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __telegram "$SEND"
  __end_log $? telegram
  ;;
discord)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME discord
  $APPNAME discord [file | message]
  Env Vars: WEB_NOTIFY_DISCORD_WEBHOOK
  Docs: https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks
  Create Webhook: https://discord.com/developers/docs/resources/webhook" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __discord "$SEND"
  __end_log $? discord
  ;;
slack)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME slack
  $APPNAME slack [file | message]
  Env Vars: WEB_NOTIFY_SLACK_WEBHOOK
  Docs: https://api.slack.com/messaging/webhooks
  Create Webhook: https://api.slack.com/apps -> Incoming Webhooks" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __slack "$SEND"
  __end_log $? slack
  ;;
teams)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME teams
  $APPNAME teams [file | message]
  Env Vars: WEB_NOTIFY_TEAMS_WEBHOOK
  Docs: https://learn.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook
  Create Webhook: from Teams â†’ Connectors â†’ Incoming Webhook" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __teams "$SEND"
  __end_log $? teams
  ;;
mattermost)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME mattermost
  $APPNAME mattermost [file | message]
  Env Vars: WEB_NOTIFY_MATTERMOST_WEBHOOK
  Docs: https://docs.mattermost.com/developer/webhooks-incoming.html
  Create Webhook: https://<your-mattermost-url>/hooks" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __mattermost "$SEND"
  __end_log $? mattermost
  ;;
rocketchat)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME rocketchat
  $APPNAME rocketchat [file | message]
  Env Vars: WEB_NOTIFY_ROCKETCHAT_WEBHOOK
  Docs: https://developer.rocket.chat/guides/rest-api/webhooks
  Create Webhook: Admin Panel â†’ Integrations â†’ Incoming Webhook" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __rocketchat "$SEND"
  __end_log $? rocketchat
  ;;
zulip)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME zulip
  $APPNAME zulip [file | message]
  Env Vars: WEB_NOTIFY_ZULIP_API_KEY, WEB_NOTIFY_ZULIP_EMAIL, WEB_NOTIFY_ZULIP_STREAM
  Docs: https://zulip.com/api/send-message
  Create Key: https://zulip.com/api/api-keys" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __zulip "$SEND"
  __end_log $? zulip
  ;;
matrix)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME matrix
  $APPNAME matrix [file | message]
  Env Vars: WEB_NOTIFY_MATRIX_HOMESERVER, WEB_NOTIFY_MATRIX_TOKEN, WEB_NOTIFY_MATRIX_ROOM_ID
  Docs: https://matrix.org/docs/spec/client_server/latest#post-matrix-client-r0-rooms-roomid-send-eventtype-txnid
  Access Token: http://<WEB_NOTIFY_MATRIX_HOMESERVER>/_matrix/client" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __matrix "$SEND"
  __end_log $? matrix
  ;;
mailx)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME mailx
  $APPNAME mailx [file | message]
  Env Vars: WEB_NOTIFY_EMAIL_FROM, WEB_NOTIFY_EMAIL_TO
  Docs: https://man7.org/linux/man-pages/man1/mailx.1.html
  Config: install mailx and configure /etc/mail.rc or postfix/sendmail" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __mailx "$SEND"
  __end_log $? mailx
  ;;
sendgrid)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME sendgrid
  $APPNAME sendgrid [file | message]
  Env Vars: WEB_NOTIFY_SENDGRID_API_KEY, WEB_NOTIFY_EMAIL_FROM, WEB_NOTIFY_EMAIL_TO
  Docs: https://docs.sendgrid.com/for-developers/sending-email/api-getting-started
  Create Key: https://app.sendgrid.com/settings/api_keys" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __sendgrid "$SEND"
  __end_log $? sendgrid
  ;;
mailgun)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME mailgun
  $APPNAME mailgun [file | message]
  Env Vars: WEB_NOTIFY_MAILGUN_API_KEY, WEB_NOTIFY_MAILGUN_DOMAIN, WEB_NOTIFY_EMAIL_FROM, WEB_NOTIFY_EMAIL_TO
  Docs: https://documentation.mailgun.com/en/latest/quickstart-sending.html
  API Key: https://app.mailgun.com/app/account/security/api_keys" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __mailgun "$SEND"
  __end_log $? mailgun
  ;;
postmark)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME postmark
  $APPNAME postmark [file | message]
  Env Vars: WEB_NOTIFY_POSTMARK_API_KEY, WEB_NOTIFY_EMAIL_FROM, WEB_NOTIFY_EMAIL_TO
  Docs: https://postmarkapp.com/developer/user-guide/send-email-with-api
  Create Key: https://account.postmarkapp.com/servers" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __postmark "$SEND"
  __end_log $? postmark
  ;;
mailjet)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME mailjet
  $APPNAME mailjet [file | message]
  Env Vars: WEB_NOTIFY_MAILJET_API_KEY, WEB_NOTIFY_MAILJET_SECRET_KEY, WEB_NOTIFY_EMAIL_FROM, WEB_NOTIFY_EMAIL_TO
  Docs: https://dev.mailjet.com/email/guides/send-api-v31/
  Get Credentials: https://app.mailjet.com/account/api_keys" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __mailjet "$SEND"
  __end_log $? mailjet
  ;;
ses)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME ses
  $APPNAME ses [file | message]
  Env Vars: WEB_NOTIFY_SES_ACCESS_KEY, WEB_NOTIFY_SES_SECRET_KEY, WEB_NOTIFY_SES_FROM, WEB_NOTIFY_SES_TO, WEB_NOTIFY_SES_REGION
  Docs: https://docs.aws.amazon.com/ses/latest/APIReference/API_SendEmail.html
  Get Keys: https://console.aws.amazon.com/iam/home#/security_credentials" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __ses "$SEND"
  __end_log $? ses
  ;;
twilio)
  shift 1
  [ "$1" = "help" ] && printf_help "Usage:
  printf 'your message' | $APPNAME twilio
  $APPNAME twilio [file | message]
  Env Vars: WEB_NOTIFY_TWILIO_SID, WEB_NOTIFY_TWILIO_AUTH_TOKEN, WEB_NOTIFY_TWILIO_FROM, WEB_NOTIFY_TWILIO_TO
  Docs: https://www.twilio.com/docs/sms/send-messages
  Create Token: https://console.twilio.com/" && exit 0
  message="$*"
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else SEND="${message:-$WEB_NOTIFY_DEFAULT_MESSAGE}"; fi
  __twilio "$SEND"
  __end_log $? twilio
  ;;

*)
  exitCode=0

  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    SEND="$(cat -)"
  elif [ -f "$1" ]; then
    SEND="$(<"$1")"
  else
    SEND="$(printf '%b\n' "$*")"
  fi
  if [ -z "$SEND" ]; then
    SEND="$WEB_NOTIFY_DEFAULT_MESSAGE"
  fi
  # Check for unsafe shell constructs before eval
  if printf '%s' "$SEND" | grep -Eq '(\$\(|`|;|&&|\|\||>|<)'; then
    printf_yellow "Warning: unsafe content detected â€” skipping variable expansion."
  else
    SEND="$(eval "printf '%b\n' \"$SEND\"")"
  fi
  for toUse in $WEB_NOTIFY_FALLBACK_SERVICES; do
    if declare -f "__${toUse}" >/dev/null 2>&1; then
      __${toUse} "$SEND" >/dev/null
      result=$?
      __end_log "$result" "$toUse"
      if [ "$result" -ne 0 ]; then
        exitCode=$((exitCode + 1))
      fi
    else
      printf_yellow "Warning: service '$toUse' not available"
    fi
  done
  WEB_NOTIFY_EXIT_STATUS=$exitCode
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
WEB_NOTIFY_EXIT_STATUS="${WEB_NOTIFY_EXIT_STATUS:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${WEB_NOTIFY_EXIT_STATUS:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
