#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202209201923-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  LICENSE.md
# @@ReadME           :  ytda --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Wednesday, Sep 21, 2022 10:54 EDT
# @@File             :  ytda
# @@Description      :  Video downloader and mp3 converter
# @@Changelog        :  New script
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202209201923-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
YTDA_REQUIRE_SUDO="${YTDA_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2│;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE"
  fi
  [ -d "$YTDA_CONFIG_DIR" ] || mkdir -p "$YTDA_CONFIG_DIR"
  [ -d "$YTDA_CONFIG_BACKUP_DIR" ] || mkdir -p "$YTDA_CONFIG_BACKUP_DIR"
  [ -f "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE" ] &&
    cp -Rf "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE" "$YTDA_CONFIG_BACKUP_DIR/$YTDA_CONFIG_FILE.$$"
  cat <<EOF >"$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE"
# Settings for ytda
YTDA_BIN_NAME="${YTDA_BIN_NAME:-}"
YTDA_COOKIE_FILE="${YTDA_COOKIE_FILE:-}"
YTDA_RETRY_LIMIT="${YTDA_RETRY_LIMIT:-}"
YTDA_SLEEP_INTERVAL="${YTDA_SLEEP_INTERVAL:-}"
YTDA_DEFAULT_URL="${YTDA_DEFAULT_URL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
YTDA_OUTPUT_COLOR_1="${YTDA_OUTPUT_COLOR_1:-}"
YTDA_OUTPUT_COLOR_2="${YTDA_OUTPUT_COLOR_2:-}"
YTDA_OUTPUT_COLOR_GOOD="${YTDA_OUTPUT_COLOR_GOOD:-}"
YTDA_OUTPUT_COLOR_ERROR="${YTDA_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
YTDA_NOTIFY_ENABLED="${YTDA_NOTIFY_ENABLED:-}"
YTDA_GOOD_NAME="${YTDA_GOOD_NAME:-}"
YTDA_ERROR_NAME="${YTDA_ERROR_NAME:-}"
YTDA_GOOD_MESSAGE="${YTDA_GOOD_MESSAGE:-}"
YTDA_ERROR_MESSAGE="${YTDA_ERROR_MESSAGE:-}"
YTDA_NOTIFY_CLIENT_NAME="${YTDA_NOTIFY_CLIENT_NAME:-}"
YTDA_NOTIFY_CLIENT_ICON="${YTDA_NOTIFY_CLIENT_ICON:-}"
YTDA_NOTIFY_CLIENT_URGENCY="${YTDA_NOTIFY_CLIENT_URGENCY:-}"

EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() { #           *
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "ytda: Video downloader and mp3 converter - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: ytda [options] [commands]"
  __printf_line "*                               - "
  __printf_line "yta                             - "
  __printf_line "aac                             - "
  __printf_line "m4a                             - "
  __printf_line "mp3                             - "
  __printf_line "wav                             - "
  __printf_line "opus                            - "
  __printf_line "flac                            - "
  __printf_line "ytda                            - "
  __printf_line "vorbis                          - "
  __printf_line "nightcore                       - "
  __printf_line "--dir                           - Sets the working directory"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  if { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; }; then return 1; else return 0; fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$YTDA_REQUIRE_SUDO" = "yes" ] && [ -z "$YTDA_REQUIRE_SUDO_RUN" ]; then
    export YTDA_REQUIRE_SUDO="no"
    export YTDA_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$YTDA_TEMP_FILE" ] && rm -Rf "$YTDA_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2│;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
__is_url() {
  if echo "$1" | grep -qE '[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]\.[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'; then
    return 0
  else
    return 1
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__check_yt_conf() { [ -f "$1" ] && return 0 || return 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__generate_playlists() {
  local channel="$1"
  local releases="${YTDA_CHANNEL_NAME:-channels}"
  local filename="$YTDA_CONFIG_DIR/$releases/$channel.txt"
  local playlist_url="https://www.youtube.com/user/$channel/$releases"
  local playlists="$($ytbdl_bin -ij --flat -- $playlist_url | ConvertFrom-Json | jq -r '.id')"
  [ -d "$$YTDA_CONFIG_DIR/$releases" ] || mkdir -p "$YTDA_CONFIG_DIR/$releases"
  if [ -n "$playlists" ]; then
    for pl in $playlists; do
      if grep -qs "$pl" "$filename"; then
        printf_cyan "Added $pl to $filename"
        echo "$pl" >"$filename"
      fi
    done
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__youtube_dl() {
  local opts="${YTDL_OPTS:-}"
  local retries="${YTDA_RETRY_LIMIT:-15}"
  local sleep="${YTDA_SLEEP_INTERVAL:-5}"
  local ytbdl_bin="$YTDA_BIN_FILE"
  $ytbdl_bin --restrict-filenames --no-progress --mark-watched --ignore-errors --continue --no-warnings \
    --download-archive "$YTDA_CONFIG_DIR/archive/ytdl.txt" --sleep-interval $sleep --retries $retries $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
nightcorea() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/nightcorea"
  local dir="$HOME/Music/Nightcore"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format mp3 -o "$dir/$filename" --metadata-from-title "「Nightcore」→ (?P<title>.+)" \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-aac() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format aac -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-best() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format mp3 -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-flac() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format flac -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-m4a() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format m4a -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-mp3() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format mp3 -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-opus() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format opus -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-vorbis() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format vorbis -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
yta-wav() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format wav -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ytda() {
  local config="$YTDA_YOUTUBE_DL_CONF_DIR/music"
  local dir="$HOME/Music/ytdl/$YTDA_FOLDER_FORMAT"
  local filename="%(artist)s - %(title)s.%(ext)s"
  __check_yt_conf "$config" && opts="--config-location $config" || opts="--ignore-config"
  __youtube_dl --audio-format mp3 -f bestaudio -o "$dir/$filename" --metadata-from-title '(?P<artist>.+?) - (?P<title>.+)' \
    --add-metadata --embed-thumbnail --extract-audio --audio-quality 320k $YTDA_AUDIO_CONF $opts "$@"
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__grab_file() {
  {
    printf '%s\n' "#### Downloading from $2"
    $1 "$2"
    exitStatus=$?
    printf '\n%s\n\n' "#### Downloading finished with exit code: $exitStatus"
  } &>>"$YTDA_YOUTUBE_DL_LOG_FILE"
  printf '\n'
  return $exitStatus
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__download() {
  local exitCode=0 urls=""
  local action="$1" && shift 1
  local search_term=""
  local archive_file=""
  urls=$(echo "$@" | tr ',' '\n' | tr ' ' '\n' | sed "s|[']||g")
  for url in $urls; do
    pretty="${url//*:\/\//}"
    if echo "$url" | grep -q 'list='; then
      pretty="${pretty//\/*/}"
      list="$(echo "$url" | awk -F 'list=' '{print $2}' | sed 's|?.*||g;s|&.*||g')"
      search_term="$pretty: $list"
      YTDA_FOLDER_FORMAT="%(creator,uploader)s/%(playlist_title)s"
      archive_file="$YTDA_CONFIG_DIR/archive/playlists.txt"
      printf '%b ' "🔻 ${CYAN}Downloading videos from playlist: $list${NC} 🔻 "
      message="Successfully downloaded from $pretty"
    else
      search_term="$url"
      YTDA_FOLDER_FORMAT="%(channel)s"
      archive_file="$YTDA_CONFIG_DIR/archive/videos.txt"
      printf '%b ' "🔻 ${CYAN}Downloading video from $pretty${NC} 🔻 "
      message="Successfully downloaded $pretty"
    fi
    if __is_url "$url"; then
      file_url="$url"
    else
      file_url="${YTDA_DEFAULT_URL}$url"
    fi
    grep -shq "$search_term" "$archive_file" || echo "$search_term" >>"$archive_file"
    pretty="${file_url//*:\/\//}"
    pretty="${pretty//\/*/}"
    __grab_file "$action" "$file_url" "$message"
    if [ $? -eq 0 ]; then
      rm -Rf "$YTDA_YOUTUBE_DL_LOG_FILE"
      printf_green "😀 $message 😀 "
      exitCode=$(($exitCode + 0))
    else
      __show_error_log "$pretty"
      exitCode=$(($exitCode + 1))
    fi
    printf '\n'
  done
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__show_error_log() {
  local error=""
  local url="$1"
  if [ -f "$YTDA_YOUTUBE_DL_LOG_FILE" ]; then
    #error="$(grep --no-filename -B5 '^ERROR: ' "$YTDA_YOUTUBE_DL_LOG_FILE" | __gen_error_message || echo '')"
    error="$(grep --no-filename -B5 -E '^ERROR: |WARNING: ' "$YTDA_YOUTUBE_DL_LOG_FILE" | sed 's|\[.*\]||g;s/[^ ]* //;s|:||g;s|-||g;s|Downloading webpage||g' | tail -n1 || echo '')"
    if [ -n "$error" ]; then
      printf_yellow "Full error is in $YTDA_YOUTUBE_DL_LOG_FILE"
      printf_red "💔 I'm sorry but an error has occured : ${error:0:100} 💔 "
    else
      printf_yellow "💔 I'm sorry but an error has occured: Full error is in $YTDA_YOUTUBE_DL_LOG_FILE 💔 "
    fi
  else
    printf_red "😿 Failed to download files from $url 😿 "
  fi
  return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__gen_error_message() {
  sed 's|\[.*\]||g;s/[^ ]* //;s|:||g;s|-||g;s|Downloading webpage||g' | tail -n2 | __find_error_message | tr '\n' '|' | awk -F '|' '{print $2" : "$1}' | grep '^' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init() {
  local bin="$YTDA_BIN_FILE"
  local name="${YTDA_BIN_NAME:-$(basename -- "$bin")}"
  printf_yellow "Setting the logfile to: $YTDA_YOUTUBE_DL_LOG_FILE"
  echo "" >"$YTDA_YOUTUBE_DL_LOG_FILE"
  if [ ! -x "$bin" ]; then
    printf_green "Installing $name"
    if [ "$name" = "yt-dlp" ]; then
      curl -q -LSsf "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp" -o "$HOME/.local/bin/yt-dlp" 2>>"$YTDA_YOUTUBE_DL_LOG_FILE"
      chmod a+rx "$HOME/.local/bin/yt-dlp"
      [ -x "$HOME/.local/bin/yt-dlp" ] || printf_exit "Failed to install yt-dlp"
    elif [ "$name" = "youtube-dl" ]; then
      curl -q -LSsf "https://yt-dl.org/downloads/latest/youtube-dl" -o "$HOME/.local/bin/youtube-dl" 2>>"$YTDA_YOUTUBE_DL_LOG_FILE"
      chmod a+rx "$HOME/.local/bin/youtube-dl"
      [ -x "$HOME/.local/bin/youtube-dl" ] || printf_exit "Failed to install youtube-dl"
    else
      printf_exit "Failed to Initialize $APPNAME"
    fi
    __gen_config &>/dev/null
    printf_cyan "Installed $name to $bin"
  fi
  [ "$name" = "yt-dlp" ] && __find_error_message() { awk -F '. ' '{print $1}'; }
  [ "$name" = "youtube-dl" ] && __find_error_message() { awk -F ';' '{print $1}'; }
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
YTDA_CONFIG_FILE="${YTDA_CONFIG_FILE:-settings.conf}"
YTDA_CONFIG_DIR="${YTDA_CONFIG_DIR:-$HOME/.config/myscripts/ytda}"
YTDA_CONFIG_BACKUP_DIR="${YTDA_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/ytda/backups}"
YTDA_LOG_DIR="${YTDA_LOG_DIR:-$HOME/.local/log/ytda}"
YTDA_TEMP_DIR="${YTDA_TEMP_DIR:-$HOME/.local/tmp/system_scripts/ytda}"
YTDA_CACHE_DIR="${YTDA_CACHE_DIR:-$HOME/.cache/ytda}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
YTDA_OUTPUT_COLOR_1="${YTDA_OUTPUT_COLOR_1:-33}"
YTDA_OUTPUT_COLOR_2="${YTDA_OUTPUT_COLOR_2:-5}"
YTDA_OUTPUT_COLOR_GOOD="${YTDA_OUTPUT_COLOR_GOOD:-2}"
YTDA_OUTPUT_COLOR_ERROR="${YTDA_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
YTDA_NOTIFY_ENABLED="${YTDA_NOTIFY_ENABLED:-yes}"
YTDA_GOOD_NAME="${YTDA_GOOD_NAME:-Great:}"
YTDA_ERROR_NAME="${YTDA_ERROR_NAME:-Error:}"
YTDA_GOOD_MESSAGE="${YTDA_GOOD_MESSAGE:-No errors reported}"
YTDA_ERROR_MESSAGE="${YTDA_ERROR_MESSAGE:-Errors were reported}"
YTDA_NOTIFY_CLIENT_NAME="${YTDA_NOTIFY_CLIENT_NAME:-$APPNAME}"
YTDA_NOTIFY_CLIENT_ICON="${YTDA_NOTIFY_CLIENT_ICON:-notification-new}"
YTDA_NOTIFY_CLIENT_URGENCY="${YTDA_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
YTDA_BIN_NAME="${YTDA_BIN_NAME:-}"
YTDA_AUDIO_CONF="${YTDA_AUDIO_CONF:-}"
YTDA_RETRY_LIMIT="${YTDA_RETRY_LIMIT:-15}"
YTDA_SLEEP_INTERVAL="${YTDA_SLEEP_INTERVAL:-5}"
YTDA_YOUTUBE_DL_LOG_FILE="${YTDA_YOUTUBE_DL_LOG_FILE:-}"
YTDA_COOKIE_FILE="${YTDA_COOKIE_FILE:-$YTDA_CONFIG_DIR/cookies.txt}"
YTDA_DEFAULT_URL="${YTDA_DEFAULT_URL:-https://youtube.com/watch?v=}"
YTDA_YOUTUBE_DL_CONF_DIR="${YTDA_YOUTUBE_DL_CONF_DIR:-$HOME/.config/ytda/inc}"
YTDA_BIN_FILE="${YTDA_BIN_FILE:-$(builtin type -P "$YTDA_BIN_NAME" || builtin type -P yt-dlp || builtin type -P youtube-dl || echo 'yt-dlp')}"
YTDA_URL=("")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -n "$YTDA_BIN_FILE" ] && [ -z "$YTDA_BIN_NAME" ] && YTDA_BIN_NAME="$(basename -- "$YTDA_BIN_FILE")"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE" ] && . "$YTDA_CONFIG_DIR/$YTDA_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$YTDA_LOG_DIR" ] || mkdir -p "$YTDA_LOG_DIR" |& __devnull
[ -d "$YTDA_TEMP_DIR" ] || mkdir -p "$YTDA_TEMP_DIR" |& __devnull
[ -d "$YTDA_CACHE_DIR" ] || mkdir -p "$YTDA_CACHE_DIR" |& __devnull
[ -d "$YTDA_CONFIG_DIR/archive" ] || mkdir -p "$YTDA_CONFIG_DIR/archive" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
YTDA_TEMP_FILE="${YTDA_TEMP_FILE:-$(mktemp $YTDA_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$YTDA_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$YTDA_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$YTDA_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$YTDA_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$YTDA_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$YTDA_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",username:,password:,netrc,channel:"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="playlist yta ytda nightcore aac flac m4a mp3 opus vorbis wav"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    YTDA_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    YTDA_CWD="$2"
    [ -d "$YTDA_CWD" ] || mkdir -p "$YTDA_CWD" |& __devnull
    shift 2
    ;;
  --username)
    YTDL_OPTS="--username $2 "
    shift 2
    ;;
  --password)
    YTDL_OPTS="--password $2 "
    shift 2
    ;;
  --netrc)
    shift 1
    YTDL_OPTS="--netrc "
    ;;
  --channel)
    YTDA_CHANNEL_NAME="$2"
    shift 2
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# YTDA_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# YTDA_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
# [ -d "$1" ] && __is_an_option "$1" && YTDA_CWD="$1" && shift 1 || YTDA_CWD="${YTDA_CWD:-$PWD}"
YTDA_CWD="$(realpath "${YTDA_CWD:-$PWD}" 2>/dev/null)"
# if [ -d "$YTDA_CWD" ] && cd "$YTDA_CWD"; then
# if [ "$YTDA_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $YTDA_CWD"
# fi
# else
# printf_exit "💔 $YTDA_CWD does not exist 💔"
# fi
export YTDA_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
[ -d "$YTDA_YOUTUBE_DL_CONF_DIR" ] || mkdir -p "$YTDA_YOUTUBE_DL_CONF_DIR"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides
[ -n "$OPTS" ] && YTDL_OPTS="$YTDL_OPTS $OPTS"
[ -f "$YTDA_COOKIE_FILE" ] && YTDL_OPTS="$YTDL_OPTS --cookies $YTDA_COOKIE_FILE"
[ -z "$YTDA_YOUTUBE_DL_LOG_FILE" ] && YTDA_YOUTUBE_DL_LOG_FILE="$YTDA_LOG_DIR/ytda.$$.log"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__init "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute functions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute commands

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# begin main app
case "$1" in
playlist)
  shift 1
  [ -n "$1" ] || printf_exit "Usage: $APPNAME playlist <CHANNEL_ID>"
  __generate_playlists "$1"
  ;;
yta)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-best "${YTDA_URL[@]:-$@}"
  ;;
ytda)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-mp3 "${YTDA_URL[@]:-$@}"
  ;;
nightcore)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download nightcorea "${YTDA_URL[@]:-$@}"
  ;;
aac)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-aac "${YTDA_URL[@]:-$@}"
  ;;
flac)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-flac "${YTDA_URL[@]:-$@}"
  ;;
m4a)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-m4a "${YTDA_URL[@]:-$@}"
  ;;
mp3)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-mp3 "${YTDA_URL[@]:-$@}"
  ;;
opus)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-opus "${YTDA_URL[@]:-$@}"
  ;;
vorbis)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-vorbis "${YTDA_URL[@]:-$@}"
  ;;
wav)
  shift 1
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-wav "${YTDA_URL[@]:-$@}"
  ;;
*)
  if [ $# -eq 0 ] && [ -p "/dev/stdin" ]; then
    YTDA_URL=($(</dev/stdin))
  elif [ -f "$1" ]; then
    YTDA_URL=($(<"$1"))
  fi
  __download yta-mp3 "${YTDA_URL[@]:-$@}"
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
