#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202207211100-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  buildx --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Thursday, Jul 21, 2022 11:00 EDT
# @@File             :  buildx
# @@Description      :  Docker buildx wrapper
# @@Changelog        :
# @@TODO             :  Better documentation
# @@Other            :
# @@Resource         :
# @@sudo/root        :  no
# @@Template         :  completions/system
# - - - - - - - - - - - - - - - - - - - - - - - - -
_buildx_completion() {
  ___list_dockerfiles() { find "." -maxdepth 3 -iname 'Dockerfile*' -type f -not -path '*/.git' 2>/dev/null | grep -v '^$'; }
  ___findcmd() { find -L "${1:-$CONFDIR/}" -maxdepth ${3:-3} -type ${2:-f} 2>/dev/null | sed 's#'${1:-$CONFDIR}'##g' | grep '^' || return 1; }
  local CONFDIR="$HOME/.config/myscripts/buildx"
  local SEARCHDIR="${CONFDIR:-$HOME/.config/myscripts/buildx}"
  local CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
  local CONFFILE="settings.conf"
  local cur prev words cword opts split
  local cur="${COMP_WORDS[$COMP_CWORD]}"
  local prev="${COMP_WORDS[$COMP_CWORD - 1]}"
  #local SEARCHCMD="$(___findcmd "$SEARCHDIR/" "d" "1" | sort -u)"
  local SHOW_COMP_OPTS=""
  local FILEDIR=""
  local LONGOPTS="--completions --config --debug --dir --help --options --raw --version --silent --force --cleanup --no-pull "
  local LONGOPTS+="--repo --no-registry --no-repo --platform --tag --all --build --url --script --init --user --image --registry --gen-script --cron --files "
  local SHORTOPTS=""
  local ARRAY="all build run init status version api cron automated "
  local API_OPTS="tags list search sources clone delete update"

  _init_completion || return

  if [ "$SHOW_COMP_OPTS" != "" ]; then
    local SHOW_COMP_OPTS_SEP="${SHOW_COMP_OPTS//,/ }"
    compopt -o $SHOW_COMP_OPTS_SEP
  fi

  if [[ ${cur} == --* ]]; then
    COMPREPLY=($(compgen -W '${LONGOPTS}' -- ${cur}))
  elif [[ ${cur} == -* ]]; then
    COMPREPLY=($(compgen -W '${SHORTOPTS:---}' -- ${cur})) && compopt -o nospace
  else
    case "${prev:-${COMP_WORDS[1]}}" in
    --debug | --raw | --help | --version | --config | --options)
      COMPREPLY=($(compgen -W '${ARRAY} ${LONGOPTS} ${SHORTOPTS}' -- ${cur}))
      return 0
      ;;
    --dir)
      prev="dir"
      [ "$cword" -le 2 ] && _filedir -d ||
        COMPREPLY=($(compgen -W '${ARRAY}' -- "$cur"))
      ;;
    --files)
      prev="files"
      _filedir -d
      ;;
    --registry)
      COMPREPLY=($(compgen -W 'docker.io ghcr.io quay.io registry.gitlab.com' -- "$cur"))
      ;;
    --platform)
      COMPREPLY=($(compgen -W 'x64 arm arm64 linux/amd64 linux/arm64 linux/arm/v7' -- "$cur"))
      ;;
    --user|--repo|--image|--tag|--url)
      # These expect custom input, no completion
      ;;
    api)
      prev=api
      COMPREPLY=($(compgen -W '${API_OPTS}' -- "$cur"))
      if [[ "$prev" = "clone" ]]; then
        COMPREPLY=($(compgen -W '$(echo {0..9} {a..z})' -- "$cur"))
        compopt -o nospace
      elif [[ "$prev" = "search" ]]; then
        COMPREPLY=($(compgen -W '$(echo {0..9} {a..z})' -- "$cur"))
        compopt -o nospace
      elif [[ "$prev" = "update" ]]; then
        COMPREPLY=($(compgen -W '$(echo {0..9} {a..z})' -- "$cur"))
        compopt -o nospace
      elif [[ "$prev" = "delete" ]]; then
        COMPREPLY=($(compgen -W '$(echo {0..9} {a..z})' -- "$cur"))
        compopt -o nospace
      elif [[ "$prev" = "sources" ]]; then
        COMPREPLY=($(compgen -W '$(echo {0..9} {a..z})' -- "$cur"))
        compopt -o nospace
      elif [[ "$prev" = "list" ]]; then
        COMPREPLY=($(compgen -W '' -- "$cur"))
        compopt -o nospace
      fi
      return
      ;;
    dir)
      _filedir -d
      ;;
    run)
      prev="run"
      COMPREPLY=($(compgen -W '$(___list_dockerfiles)' -- "$cur"))
      ;;
    all)
      prev="all"
      _filedir -d
      ;;
    build)
      prev="all"
      _filedir -d
      ;;
    cron|automated)
      prev="cron"
      _filedir -d
      ;;
    *)
      { [ $cword -gt 2 ] && COMPREPLY=($(compgen -W '${LONGOPTS}' -- "$cur")); } ||
        { [ $cword -eq 1 ] && _filedir; } ||
        { [ $cword -eq 2 ] && COMPREPLY=($(compgen -W '${ARRAY}' -- "$cur")); }
      ;;
    esac
  fi

  $split && return
} &&
  # - - - - - - - - - - - - - - - - - - - - - - - - -
  # enable completions
  complete -F _buildx_completion buildx
