#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202409241950-git
# @Author            :  Jason Hempstead
# @Contact           :  jason@casjaysdev.pro
# @License           :  WTFPL
# @ReadME            :  dictionary --help
# @Copyright         :  Copyright: (c) 2024 Jason Hempstead, Casjays Developments
# @Created           :  Tuesday, Sep 24, 2024 19:50 EDT
# @File              :  dictionary
# @Description       :  Dictionary completion
# @TODO              :
# @Other             :
# @Resource          :
# - - - - - - - - - - - - - - - - - - - - - - - - -'
_dictionary() {
  ___findcmd() { find -L "${1:-$CONFDIR/}" -maxdepth ${3:-3} -type ${2:-f} 2>/dev/null | sed 's#'${1:-$CONFDIR}'##g' | grep '^' || return 1; }
  local CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
  local cur prev words cword opts split
  local cur="${COMP_WORDS[$COMP_CWORD]}"
  local prev="${COMP_WORDS[$COMP_CWORD - 1]}"
  local CONFFILE="settings.conf"
  local CONFDIR="$HOME/.config/myscripts/dictionary"
  local SEARCHDIR="${CONFDIR:-$HOME/.config/myscripts/dictionary}"
  local SHOW_COMP_OPTS=""
  local FILEDIR=""
  local OPTS=""
  local LONGOPTS="--options --config --version --help --dir --debug --raw --silent"
  local SHORTOPTS=""
  local ARRAY="phonetic definition example synonym antonym origin history save-word save list-words words random"
  local WORD_LISTS="$(ls $HOME/.cache/dictionary/wordlist_*.txt 2>/dev/null | sed 's|.*wordlist_||; s|\.txt$||' || echo 'favorites')"

  _init_completion || return

  if [[ "$SHOW_COMP_OPTS" != "" ]]; then
    local SHOW_COMP_OPTS_SEP="${SHOW_COMP_OPTS//,/ }"
    compopt -o $SHOW_COMP_OPTS_SEP
  fi

  if [[ ${cur} == --* ]]; then
    COMPREPLY=($(compgen -W '${LONGOPTS}' -- ${cur}))
    return
  elif [[ ${cur} == -* ]]; then
    COMPREPLY=($(compgen -W '${SHORTOPTS}' -- ${cur}))
    return
  else
    case "${COMP_WORDS[1]}" in
    phonetic|definition|example|synonym|antonym|origin)
      # These commands need a word argument - no specific completion
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    history)
      if [ $COMP_CWORD -eq 2 ]; then
        COMPREPLY=($(compgen -W 'clear' -- "${cur}"))
      fi
      ;;
    save-word|save)
      if [ $COMP_CWORD -eq 3 ]; then
        # Complete with existing word lists for third argument
        COMPREPLY=($(compgen -W '${WORD_LISTS} favorites advanced technical' -- "${cur}"))
      else
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      fi
      ;;
    list-words|words)
      # Complete with available word lists
      COMPREPLY=($(compgen -W '${WORD_LISTS}' -- "${cur}"))
      ;;
    random)
      # No arguments needed
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    --dir)
      _filedir
      return
      ;;
    --options|--config|--help|--version|--debug|--raw|--silent)
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    *)
      if [ $COMP_CWORD -eq 1 ]; then
        # First argument: complete with commands
        COMPREPLY=($(compgen -W '${ARRAY}' -- "${cur}"))
      else
        # Second+ argument: no specific completion for words
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      fi
      ;;
    esac
  fi
  $split && return
} &&
  # - - - - - - - - - - - - - - - - - - - - - - - - -
  # enable completions
  complete -F _dictionary dictionary