#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202108121903-git
# @Author            :  Jason Hempstead
# @Contact           :  jason@casjaysdev.pro
# @License           :  WTFPL
# @ReadME            :  dockermgr --help
# @Copyright         :  Copyright: (c) 2021 Jason Hempstead, Casjays Developments
# @Created           :  Thursday, Aug 12, 2021 19:03 EDT
# @File              :  dockermgr
# @Description       :  docker script to manage containers
# @TODO              :
# @Other             :
# @Resource          :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
_dockermgr() {
  ___findcmd() { find -L "${1:-$CONFDIR/}" -maxdepth ${3:-3} -type ${2:-f} 2>/dev/null | sed 's#'${1:-$CONFDIR}'##g' | grep '^' || return 1; }
  ___docker_ps() { [ -f "$docker" ] && eval $docker ps -a 2>/dev/null | grep -v 'NAMES' | awk '{print $NF}'; }
  ___docker_net() { [ -f "$docker" ] && eval $docker network ls 2>/dev/null | grep -v 'NETWORK' | awk '{print $2}'; }
  ___docker_cont() { [ -f "$docker" ] && eval $docker images 2>/dev/null | grep -vE "REPOSITORY|<.*.>" | awk '{print $1}' | sort -u; }
  local CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
  local docker="$(type -P docker 2>/dev/null || type -P podman 2>/dev/null)"
  local cur prev words cword opts split
  local cur="${COMP_WORDS[$COMP_CWORD]}"
  local prev="${COMP_WORDS[$COMP_CWORD - 1]}"
  local CONFFILE="settings.conf"
  local CONFDIR="$HOME/.config/myscripts/dockermgr"
  local SEARCHDIR="${CONFDIR:-$HOME/.config/myscripts/dockermgr}"
  #local SEARCHCMD="$(___findcmd "$SEARCHDIR/" "d" "1" | sort -u)"
  local SHOW_COMP_OPTS=""
  local FILEDIR=""
  local OPTS=""
  local SHORTOPTS="-p -P -v -m -e -d -u -w"
  local LONGOPTS="--raw --completions --options --config --version --help --dir --force --all --describe --platform --dockerfile "
  local LONGOPTS+="--name --info --domain --hostname --network --registry --tagno-delete --interactive --cron --hub"
  local ARRAY="service proxy health attach multiarch builder api enter test exec active available connect cron download inactive init install k3b minikube "
  local ARRAY+=" list log ps rancher remove rm rmi run search status update version ds network helm prune generate manifest rebuild "
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  local LIST="airsonic ampache apache2 aria2 buildah bun caddy cherokee community coolify couchdb daapd ddns deno dictd docker dockerproxy flaresolverr "
  local LIST+="gitea gohttpserver hub ifconfig it-tools jekyll lenpaste lidarr lighttpd mariadb mongodb navidrome nextcloud nginx nginx-manager opengist "
  local LIST+=" php pihole podman portainer postgres prowlarr radarr rancher rarbg readarr readmes redis registry search soft-serve sonarr stikked supabase  "
  local LIST+="tor tor-browser traefik transmission uptime vault watchtower webvirtmgr wireguard yacht ympd youtubedl-web  "

  _init_completion || return

  local special i
  for ((i = 1; i < ${#words[@]} - 1; i++)); do
    if [[ ${words[i]} == @(cron|update|remove) ]]; then
      special=${words[i]}
      break
    fi
  done

  if [[ -v special ]]; then
    [[ $cur == @(*/|[.~])* && $special == @(cron|update|remove|version) ]]
  fi

  if [[ "$SHOW_COMP_OPTS" != "" ]]; then
    local SHOW_COMP_OPTS_SEP="${SHOW_COMP_OPTS//,/ }"
    compopt -o $SHOW_COMP_OPTS_SEP
  fi

  if [[ ${cur} == --* ]]; then
    COMPREPLY=($(compgen -W '${LONGOPTS}' -- ${cur}))
    return
  elif [[ ${cur} == -* ]]; then
    COMPREPLY=($(compgen -W '${SHORTOPTS}' -- ${cur}))
    return
  else
    case "${COMP_WORDS[1]:-$prev}" in
    --options)
      local prev="--options"
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;

    --config)
      local prev="--config"
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;

    --help)
      local prev="--help"
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;

    --version)
      local prev="--version"
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;

    --dir)
      local prev="dir"
      _filedir
      return
      ;;

    list | status | helm | available | active | inactive | init | rancher | k3b | ds)
      local prev="endopts"
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;

    search)
      local prev="search"
      COMPREPLY=($(compgen -W '$(echo {0..9} {a..z})' -- "${cur}"))
      compopt -o nospace
      ;;

    install | download)
      local prev="--all"
      COMPREPLY=($(compgen -W '' -- "${cur}")) || { prev="install" && COMPREPLY=($(compgen -W '--all ${LIST}' -- "${cur}")); }
      ;;

    update | cron | remove | version)
      local prev="$special"
      k=0
      i="$HOME/.local/share/CasjaysDev/apps/dockermgr"
      for j in $(compgen -f "$i/$cur"); do
        [ -e "$j" ] && p="${j}" || return
        COMPREPLY[k++]=${p#"$i"/}
      done
      return 0
      ;;

    test | enter | exec | connect | run | log)
      local prev="test"
      if [[ ${#COMP_WORDS[*]} -gt 3 ]]; then
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      else
        COMPREPLY=($(compgen -W '$(___docker_ps)' -- "${cur}"))
      fi
      ;;

    rmi)
      local prev="rmi"
      COMPREPLY=($(compgen -W '$(___docker_cont)' -- "${cur}"))
      ;;

    rm)
      local prev="rm"
      COMPREPLY=($(compgen -W '$(___docker_ps)' -- "${cur}"))
      ;;

    pull | push)
      local prev="pull"
      COMPREPLY=($(compgen -W '$(___docker_cont)' -- "${cur}"))
      ;;

    org)
      local prev="org"
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;

    api)
      case "$prev" in
      sources)
        local prev="sources"
        COMPREPLY=($(compgen -W 'help name url' -- "${cur}"))
        compopt -o nospace
        ;;
      clone)
        local prev="clone"
        COMPREPLY=($(compgen -W '${SRCS}' -- "${cur}"))
        ;;
      *)
        local prev="api"
        COMPREPLY=($(compgen -W 'auth list delete info update readme sources clone' -- "${cur}"))
        ;;
      esac
      ;;

    compose)
      if [[ ${#COMP_WORDS[*]} -gt 3 ]]; then
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      else
        COMPREPLY=($(compgen -W 'update' -- "${cur}"))
      fi
      ;;

    manifest)
      COMPREPLY=($(compgen -W 'download' -- "${cur}")) && _filedir
      ;;

    minikube)
      if [[ ${#COMP_WORDS[*]} -gt 3 ]]; then
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      else
        local prev="minikube"
        COMPREPLY=($(compgen -W 'delete init services dashboard' -- "${cur}"))
      fi
      ;;

    network)
      if [[ ${#COMP_WORDS[*]} -gt 3 ]]; then
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      else
        local prev="network"
        COMPREPLY=($(compgen -W '$(___docker_net)' -- "${cur}"))
      fi
      ;;

    *)
      if [[ -n "$FILEDIR" ]]; then _filedir; fi
      if [[ "$ARRAY" = "show__none" ]]; then
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      elif [[ "$ARRAY" = "show__filedir" ]]; then
        _filedir
      elif [[ "$ARRAY" = "show__commands" ]]; then
        COMPREPLY=($(compgen -c -- "${cur}"))
      elif [ "$ARRAY" != "" ]; then
        COMPREPLY=($(compgen -W '${ARRAY}' -- "${cur}"))
      elif [ -n "$OPTS" ]; then
        COMPREPLY=($(compgen -W '${OPTS}' -- "${cur}"))
      elif [[ -n "$ARRAY" ]]; then
        [ $COMP_CWORD -lt 2 ] &&
          COMPREPLY=($(compgen -W '${ARRAY}' -- "${cur}"))
      elif [[ -n "$OPTS" ]]; then
        [ $COMP_CWORD -gt 2 ] &&
          COMPREPLY=($(compgen -W '' -- "${cur}"))
      else
        COMPREPLY=($(compgen -W '${ARRAY}' -- "${cur}"))
      # elif [[ ${cword} -gt 2 ]]; then
      #   return
      # elif [[ ${cword} == 2 ]]; then
      #   _filedir
      #   compopt -o nospace
      #   return
      # elif [[ $cword -eq 1 ]]; then
      #   COMPREPLY=($(compgen -W '{a..z}{a..z}' -- "${cur}"))
      #   compopt -o nospace
      #   return
      fi
      ;;
    esac
  fi
  #
  # [[ ${cword} == 2 ]] && _filedir && compopt -o nospace
  # [[ $COMP_CWORD -eq 2 ] && COMPREPLY=($(compgen -W '{a..z} {A..Z} {0..9}' -o nospace -- "${cur}"))
  # [[ $COMP_CWORD -eq 3 ] && COMPREPLY=($(compgen -W '$(_filedir)' -o filenames -o dirnames -- "${cur}"))
  # [[ $COMP_CWORD -gt 3 ] && COMPREPLY=($(compgen -W '' -- "${cur}"))
  #prev=""
  #compopt -o nospace
  $split && return
} &&
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # enable completions
  complete -F _dockermgr dockermgr
