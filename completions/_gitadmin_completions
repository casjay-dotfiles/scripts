#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202510101230-git
# @Author            :  Jason Hempstead
# @Contact           :  jason@casjaysdev.pro
# @License           :  WTFPL
# @ReadME            :  gitadmin --help
# @Copyright         :  Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created           :  Friday, Feb 05, 2021 11:22 EST
# @File              :  gitadmin
# @Description       :  autocomplete for gitadmin
# @Changelog         :  Added completions for 7 new git providers (bitbucket, codeberg, forgejo, gitea, gogs, azure, aws) with full clone/push/pull/user/org support
# @TODO              :
# @Other             :
# @Resource          :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC2125
# shellcheck disable=SC2269
# shellcheck disable=SC2295
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_gitadmin() {
  ___findcmd() { find -L "${1:-$CONFDIR/}" -maxdepth ${3:-3} -type ${2:-f} 2>/dev/null | sed 's#'${1:-$CONFDIR}'##g' | grep '^' || return 1; }
  local CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
  local cur prev words cword opts split
  local cur="${COMP_WORDS[$COMP_CWORD]}"
  local prev="${COMP_WORDS[$COMP_CWORD - 1]}"
  local CONFFILE="settings.conf"
  local CONFDIR="$HOME/.config/myscripts/gitadmin"
  local SEARCHDIR="${CONFDIR:-$HOME/.config/myscripts/gitadmin}"
  #local SEARCHCMD="$(___findcmd "$SEARCHDIR/" "d" "1" | sort -u)"
  local SHOW_COMP_OPTS=""
  local FILEDIR=""
  local OPTS=""
  local LONGOPTS="--completions --config --debug --dir --help --options --raw --version --silent "
  local LONGOPTS+="--user --org --single --nolicense --noreadme --automated --cd --desc --site --delete "
  local LONGOPTS+="--nopush --message --type --all --visible "
  local LONGOPTS+="--github --gitlab --gitea --platform --private --public --homepage --description "
  local LONGOPTS+="--issues --wiki --projects --default-branch"
  local SHORTOPTS="-u -o -s"
  local ARRAY="project is shorten web latest newsite stow s status l log init setup reset lfs diff branch commit update modify create "
  local ARRAY+="delete push pull clone merge rebase switch squash remote list gist single user org github gitlab private issues "
  local ARRAY+="bitbucket codeberg forgejo gitea gogs azure aws "
  local automatedOpts="--automated"
  local updateOpts="--while"
  local GIST="clone create delete edit list search"
  local repos="$(find "${GITADMIN_DEFAULT_PROJECT_DIR:-$HOME/Projects}"/*/* -maxdepth 1 -type d -not -path '*/.git*' 2>/dev/null | grep -Ev '.*/.Trash-*|.*/local/*')"

  _init_completion || return

  local special i
  for ((i = 1; i < ${#words[@]} - 1; i++)); do
    if [[ ${words[i]} == @(cron|update|remove) ]]; then
      special=${words[i]}
      break
    fi
  done

  if [ "$SHOW_COMP_OPTS" != "" ]; then
    local SHOW_COMP_OPTS_SEP="${SHOW_COMP_OPTS//,/ }"
    compopt -o $SHOW_COMP_OPTS_SEP
  fi

  if [[ ${cur} == --* ]]; then
    COMPREPLY=($(compgen -W '${LONGOPTS}' -- ${cur}))
  elif [[ ${cur} == -* ]]; then
    COMPREPLY=($(compgen -W '${SHORTOPTS}' -- ${cur}))
  else
    case "${COMP_WORDS[1]}" in
    --options) prev="--options" && COMPREPLY=($(compgen -W '' -- "${cur}")) ;;
    -c | --config) prev="--config" && COMPREPLY=($(compgen -W '' -- "${cur}")) ;;
    -h | --help) prev="--help" && COMPREPLY=($(compgen -W '' -- "${cur}")) ;;
    -v | --version) prev="--version" && COMPREPLY=($(compgen -W '' -- "${cur}")) ;;
    -s | --single | -u | --user | -o | --org) prev="--single" && COMPREPLY=($(compgen -W '{a..z}' -- "${cur}")) ;;
    --visible) prev="--visible" && COMPREPLY=($(compgen -W 'yes no' -- "${cur}")) ;;
    --platform) prev="--platform" && COMPREPLY=($(compgen -W 'github gitlab gitea' -- "${cur}")) ;;
    --private | --public) prev="${COMP_WORDS[1]}" && COMPREPLY=($(compgen -W '' -- "${cur}")) ;;
    --homepage | --description | --default-branch) prev="${COMP_WORDS[1]}" && COMPREPLY=($(compgen -W '' -- "${cur}")) ;;
    --issues | --wiki | --projects) prev="${COMP_WORDS[1]}" && COMPREPLY=($(compgen -W 'true false' -- "${cur}")) ;;
    setup) COMPREPLY=($(compgen -W '${automatedOpts}' -- "$cur")) && prev="setup" ;;
    update) COMPREPLY=($(compgen -W '${updateOpts}' -- "$cur")) && prev="update" ;;
    gist) COMPREPLY=($(compgen -W '${GIST}' -- '[a..z]' "$cur")) && compopt +o nospace && prev="gist" ;;
    clone) COMPREPLY=($(compgen -W '/ http:// https:// git://' -- "$cur")) && compopt +o nospace && prev="clone" ;;
    shorten) COMPREPLY=($(compgen -W 'https://' -- "$cur")) && compopt +o nospace && prev=shorten ;;
    project) [ $COMP_CWORD -ge 2 ] && COMPREPLY=($(compgen -W '' -- "$cur")) || COMPREPLY=($(compgen -W '${repos}' -- "$cur")) ;;
    --type)
      prev="type"
      COMPREPLY=($(compgen -W 'all public private forks sources member' -- "${cur}"))
      ;;

    is)
      local prev="is"
      COMPREPLY=($(compgen -W 'clean dirty' -- "${cur}"))
      ;;

    web)
      prev="web"
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    lfs)
      prev="lfs"
      COMPREPLY=($(compgen -W 'init fetch checkout add pull clone' -- "${cur}"))
      ;;

    branch)
      prev="branch"
      COMPREPLY=($(compgen -W 'rename' -- "${cur}"))
      ;;

    switch)
      prev="switch"
      COMPREPLY=($(compgen -W 'create' -- "${cur}"))
      ;;

    squash)
      prev="switch"
      COMPREPLY=($(compgen -W 'head merge rebase' -- "${cur}"))
      ;;

    remote)
      prev="switch"
      COMPREPLY=($(compgen -W 'show add' -- "${cur}"))
      ;;

    user)
      prev="user"
      COMPREPLY=($(compgen -W 'orgs clone' -- "${cur}"))
      ;;

    org)
      prev="org"
      if [ $COMP_CWORD -eq 2 ]; then
        COMPREPLY=($(compgen -W 'repos all push pull clone' -- "${cur}"))
      else
        k=0
        i="$HOME/Projects"/*
        for d in $i; do
          for j in $(compgen -f "$d/$cur"); do
            [ -d "$j" ] && j="${j}"
            COMPREPLY[k++]=${j#$d/}
          done
        done
      fi
      return 0
      ;;

    github)
      if [ "$prev" = "github" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="github"
        COMPREPLY=($(compgen -W 'init clone push pull remote update' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "pages" ] || [ "$prev" = "pages" ]; then
        COMPREPLY=($(compgen -W 'build create update delete health' -- "$cur"))
        prev="pages"
      elif [ "${words[$COMP_CWORD]}" = "update" ] || [ "$prev" = "update" ]; then
        COMPREPLY=($(compgen -o nospace -W "description= homepage= visibility=" -- "$cur"))
        compopt -o nospace
        prev="update"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    gitlab)
      prev="gitlab"
      COMPREPLY=($(compgen -W 'init clone push pull remote repos branch' -- "${cur}"))
      ;;

    bitbucket)
      if [ "$prev" = "bitbucket" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="bitbucket"
        COMPREPLY=($(compgen -W 'clone push pull user org' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "user" ] || [ "$prev" = "user" ]; then
        COMPREPLY=($(compgen -W 'clone' -- "$cur"))
        prev="user"
      elif [ "${words[$COMP_CWORD]}" = "org" ] || [ "$prev" = "org" ]; then
        COMPREPLY=($(compgen -W 'all' -- "$cur"))
        prev="org"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    codeberg)
      if [ "$prev" = "codeberg" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="codeberg"
        COMPREPLY=($(compgen -W 'clone push pull user org' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "user" ] || [ "$prev" = "user" ]; then
        COMPREPLY=($(compgen -W 'clone' -- "$cur"))
        prev="user"
      elif [ "${words[$COMP_CWORD]}" = "org" ] || [ "$prev" = "org" ]; then
        COMPREPLY=($(compgen -W 'all' -- "$cur"))
        prev="org"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    forgejo)
      if [ "$prev" = "forgejo" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="forgejo"
        COMPREPLY=($(compgen -W 'clone push pull user org' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "user" ] || [ "$prev" = "user" ]; then
        COMPREPLY=($(compgen -W 'clone' -- "$cur"))
        prev="user"
      elif [ "${words[$COMP_CWORD]}" = "org" ] || [ "$prev" = "org" ]; then
        COMPREPLY=($(compgen -W 'all' -- "$cur"))
        prev="org"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    gitea)
      if [ "$prev" = "gitea" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="gitea"
        COMPREPLY=($(compgen -W 'clone push pull user org' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "user" ] || [ "$prev" = "user" ]; then
        COMPREPLY=($(compgen -W 'clone' -- "$cur"))
        prev="user"
      elif [ "${words[$COMP_CWORD]}" = "org" ] || [ "$prev" = "org" ]; then
        COMPREPLY=($(compgen -W 'all' -- "$cur"))
        prev="org"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    gogs)
      if [ "$prev" = "gogs" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="gogs"
        COMPREPLY=($(compgen -W 'clone push pull user org' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "user" ] || [ "$prev" = "user" ]; then
        COMPREPLY=($(compgen -W 'clone' -- "$cur"))
        prev="user"
      elif [ "${words[$COMP_CWORD]}" = "org" ] || [ "$prev" = "org" ]; then
        COMPREPLY=($(compgen -W 'all' -- "$cur"))
        prev="org"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    azure)
      if [ "$prev" = "azure" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="azure"
        COMPREPLY=($(compgen -W 'clone push pull org' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "org" ] || [ "$prev" = "org" ]; then
        COMPREPLY=($(compgen -W 'all' -- "$cur"))
        prev="org"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    aws)
      if [ "$prev" = "aws" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="aws"
        COMPREPLY=($(compgen -W 'clone push pull' -- "$cur"))
        prev=$cur
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    private)
      if [ "$prev" = "private" ] || [ $COMP_CWORD -lt 2 ]; then
        prev="private"
        COMPREPLY=($(compgen -W 'init clone push pull remote update branch repos migrate' -- "$cur"))
        prev=$cur
      elif [ "${words[$COMP_CWORD]}" = "update" ] || [ "$prev" = "update" ]; then
        COMPREPLY=($(compgen -o nospace -W "description= website= private= has_issues= has_projects= has_wiki=" -- "$cur"))
        compopt -o nospace
        prev="update"
      elif [ "${words[$COMP_CWORD]}" = "create" ] || [ "$prev" = "create" ]; then
        COMPREPLY=($(compgen -W "repo org" -- "$cur"))
        compopt -o nospace
        prev="create"
      else
        COMPREPLY=($(compgen -W '' -- "$cur"))
        return
      fi
      ;;

    issues)
      prev="issues"
      COMPREPLY=($(compgen -W 'count list create edit delete' -- "${cur}"))
      ;;

    cron)
      prev="cron"
      COMPREPLY=($(compgen -W 'run remove add' -- "${cur}"))
      ;;

    modify)
      prev="modify"
      if [ $COMP_CWORD -eq 2 ]; then
        COMPREPLY=($(compgen -W '$(ls -d $HOME/Projects/*/*/ 2>/dev/null | xargs -n1 basename)' -- "${cur}"))
      else
        COMPREPLY=($(compgen -W '--platform --description --homepage --private --public --issues --wiki --projects --default-branch' -- "${cur}"))
      fi
      ;;

    create)
      prev="create"
      if [ $COMP_CWORD -eq 2 ]; then
        COMPREPLY=($(compgen -W '{a..z}' -- "${cur}"))
      else
        COMPREPLY=($(compgen -W '--platform --github --gitlab --gitea --private --public --description --homepage' -- "${cur}"))
      fi
      ;;

    delete)
      prev="delete"
      if [ $COMP_CWORD -eq 2 ]; then
        COMPREPLY=($(compgen -W '$(ls -d $HOME/Projects/*/*/ 2>/dev/null | xargs -n1 basename)' -- "${cur}"))
      else
        COMPREPLY=($(compgen -W '--platform --github --gitlab --gitea' -- "${cur}"))
      fi
      ;;

    push)
      k=0
      i="$HOME/Projects"/*
      for d in $(ls -d $i/*); do
        for j in $(compgen -f "$d/$cur"); do
          [ -d "$j" ] && j="${j}"
          COMPREPLY[k++]=${j}
        done
      done
      return 0
      ;;

    pull)
      k=0
      i="$HOME/Projects"/*
      for d in $i/*; do
        for j in $(compgen -f "$d/$cur"); do
          [ -d "$j" ] && j="${j} "
          COMPREPLY[k++]=${j}
        done
      done
      return 0
      ;;

    *)
      prev=""
      if [ -n "$FILEDIR" ]; then _filedir; fi
      if [[ "$ARRAY" = "show__none" ]]; then
        COMPREPLY=($(compgen -W '' -- "${cur}"))
      elif [[ "$ARRAY" = "show__filedir" ]]; then
        _filedir
      elif [[ "$ARRAY" = "show__commands" ]]; then
        COMPREPLY=($(compgen -c -- "${cur}"))
      elif [[ -n "$ARRAY" ]]; then
        [ $COMP_CWORD -lt 2 ] &&
          COMPREPLY=($(compgen -W '${ARRAY}' -- "${cur}"))
      elif [[ -n "$OPTS" ]]; then
        [ $COMP_CWORD -gt 2 ] &&
          COMPREPLY=($(compgen -W '' -- "${cur}"))
      fi
      ;;
    esac
  fi
  $split && return
} &&
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # enable completions
  complete -F _gitadmin -o default gitadmin
