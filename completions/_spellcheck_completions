#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202409241915-git
# @Author            :  Jason Hempstead
# @Contact           :  jason@casjaysdev.pro
# @License           :  WTFPL
# @ReadME            :  spellcheck --help
# @Copyright         :  Copyright: (c) 2021 Jason Hempstead, Casjays Developments
# @Created           :  Thursday, Aug 12, 2021 19:03 EDT
# @File              :  spellcheck
# @Description       :  Script to check spelling
# @TODO              :  Add function to keep open/Add notification support
# @Other             :
# @Resource          :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
_spellcheck() {
  ___findcmd() { find -L "${1:-$CONFDIR/}" -maxdepth ${3:-3} -type ${2:-f} 2>/dev/null | sed 's#'${1:-$CONFDIR}'##g' | grep '^' || return 1; }
  local CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
  local cur prev words cword opts split
  local cur="${COMP_WORDS[$COMP_CWORD]}"
  local prev="${COMP_WORDS[$COMP_CWORD - 1]}"
  local CONFFILE="settings.conf"
  local CONFDIR="$HOME/.config/myscripts/spellcheck"
  local SEARCHDIR="${CONFDIR:-$HOME/.config/myscripts/spellcheck}"
  #local SEARCHCMD="$(___findcmd "$SEARCHDIR/" "d" "1" | sort -u)"
  local SHOW_COMP_OPTS=""
  local FILEDIR=""
  local OPTS=""
  local LONGOPTS="--options --config --version --help --dir --debug --raw --silent"
  local SHORTOPTS=""
  local ARRAY="batch interactive check add-word add list-dicts dicts set-lang lang"
  local TEXTFILES="$(find . -maxdepth 2 -name "*.txt" -o -name "*.md" -o -name "*.rst" -o -name "*.tex" 2>/dev/null | head -20)"
  local DICTIONARIES="$(aspell dump dicts 2>/dev/null || echo 'en en_US en_GB')"

  _init_completion || return

  if [[ "$SHOW_COMP_OPTS" != "" ]]; then
    local SHOW_COMP_OPTS_SEP="${SHOW_COMP_OPTS//,/ }"
    compopt -o $SHOW_COMP_OPTS_SEP
  fi

  if [[ ${cur} == --* ]]; then
    COMPREPLY=($(compgen -W '${LONGOPTS}' -- ${cur}))
    return
  elif [[ ${cur} == -* ]]; then
    COMPREPLY=($(compgen -W '${SHORTOPTS}' -- ${cur}))
    return
  else
    case "${COMP_WORDS[1]}" in
    batch)
      # Complete with text files for batch processing
      _filedir '@(txt|md|rst|tex|doc|docx)'
      compopt -o filenames
      ;;
    interactive|check)
      # No completion for interactive mode (user will type word)
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    add-word|add)
      # No completion for adding words (user will type new word)
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    list-dicts|dicts)
      # No arguments needed
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    set-lang|lang)
      # Complete with available dictionaries
      COMPREPLY=($(compgen -W '${DICTIONARIES}' -- "${cur}"))
      ;;
    --dir)
      _filedir
      return
      ;;
    --options|--config|--help|--version|--debug|--raw|--silent)
      COMPREPLY=($(compgen -W '' -- "${cur}"))
      ;;
    *)
      if [ $COMP_CWORD -eq 1 ]; then
        # First argument: complete with commands and text files
        COMPREPLY=($(compgen -W '${ARRAY}' -- "${cur}"))
        compgen -f -X '!*.@(txt|md|rst|tex|doc|docx)' -- "${cur}" 2>/dev/null && compopt -o filenames
      else
        # Second+ argument: complete with files for most commands
        _filedir '@(txt|md|rst|tex|doc|docx)'
        compopt -o filenames
      fi
      ;;
    esac
  fi
  #
  # [[ ${cword} == 2 ]] && _filedir && compopt -o nospace
  # [[ $COMP_CWORD -eq 2 ] && COMPREPLY=($(compgen -W '{a..z} {A..Z} {0..9}' -o nospace -- "${cur}"))
  # [[ $COMP_CWORD -eq 3 ] && COMPREPLY=($(compgen -W '$(_filedir)' -o filenames -o dirnames -- "${cur}"))
  # [[ $COMP_CWORD -gt 3 ] && COMPREPLY=($(compgen -W '' -- "${cur}"))
  #prev=""
  #compopt -o nospace
  $split && return
} &&
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # enable completions
  complete -F _spellcheck spellcheck
