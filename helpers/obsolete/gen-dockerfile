#!/usr/bin/env bash
# shellcheck shell=bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  202208072314-git
# @@Author           :  Jason Hempstead
# @@Contact          :  jason@casjaysdev.pro
# @@License          :  WTFPL
# @@ReadME           :  gen-dockerfile --help
# @@Copyright        :  Copyright: (c) 2022 Jason Hempstead, Casjays Developments
# @@Created          :  Sunday, Aug 07, 2022 23:14 EDT
# @@File             :  gen-dockerfile
# @@Description      :  Create a Dockerfile
# @@Changelog        :  New script
# @@TODO             :  Rewite/Cleanup variables
# @@Other            :
# @@Resource         :
# @@Terminal App     :  no
# @@sudo/root        :  no
# @@Template         :  bash/system
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shellcheck disable=SC1003,SC2016,SC2031,SC2120,SC2155,SC2199,SC2317
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
APPNAME="$(basename -- "$0" 2>/dev/null)"
VERSION="202208072314-git"
USER="${SUDO_USER:-$USER}"
RUN_USER="${RUN_USER:-$USER}"
USER_HOME="${USER_HOME:-$HOME}"
SCRIPT_SRC_DIR="${BASH_SOURCE%/*}"
GEN_DOCKERFILE_REQUIRE_SUDO="${GEN_DOCKERFILE_REQUIRE_SUDO:-no}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Reopen in a terminal
#if [ ! -t 0 ] && { [ "$1" = --term ] || [ $# = 0 ]; }; then { [ "$1" = --term ] && shift 1 || true; } && TERMINAL_APP="TRUE" myterminal -e "$APPNAME $*" && exit || exit 1; fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set script title
#CASJAYS_DEV_TILE_FORMAT="${USER}@${HOSTNAME}:${PWD//$HOME/\~} - $APPNAME"
#CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}"
#[ -z "$CASJAYSDEV_TITLE_SET" ] && printf '\033]2â”‚;%s\033\\' "$CASJAYS_DEV_TILE_FORMAT" && CASJAYSDEV_TITLE_SET="$APPNAME"
export CASJAYSDEV_TITLE_PREV="${CASJAYSDEV_TITLE_PREV:-${CASJAYSDEV_TITLE_SET:-$APPNAME}}" CASJAYSDEV_TITLE_SET
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Initial debugging
[ "$1" = "--debug" ] && set -x && export SCRIPT_OPTS="--debug" && export _DEBUG="on"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Disables colorization
[ "$1" = "--raw" ] && export SHOW_RAW="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pipes fail
set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import functions
CASJAYSDEVDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}"
SCRIPTSFUNCTDIR="${CASJAYSDEVDIR:-/usr/local/share/CasjaysDev/scripts}/functions"
SCRIPTSFUNCTFILE="${SCRIPTSAPPFUNCTFILE:-testing.bash}"
SCRIPTSFUNCTURL="${SCRIPTSAPPFUNCTURL:-https://github.com/dfmgr/installer/raw/main/functions}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "$PWD/$SCRIPTSFUNCTFILE" ]; then
  . "$PWD/$SCRIPTSFUNCTFILE"
elif [ -f "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" ]; then
  . "$SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE"
else
  echo "Can not load the functions file: $SCRIPTSFUNCTDIR/$SCRIPTSFUNCTFILE" 1>&2
  exit 1
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Options are: *_install
# system user desktopmgr devenvmgr dfmgr dockermgr fontmgr iconmgr pkmgr systemmgr thememgr wallpapermgr
user_install && __options "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Send all output to /dev/null
__devnull() {
  tee &>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# Send errors to /dev/null
__devnull2() {
  [ -n "$1" ] && local cmd="$1" && shift 1 || return 1
  eval $cmd "$*" 2>/dev/null && exitCode=0 || exitCode=1
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
# See if the executable exists
__cmd_exists() {
  exitCode=0
  [ -n "$1" ] && local exitCode="" || return 0
  for cmd in "$@"; do
    builtin command -v "$cmd" &>/dev/null && exitCode+=$(($exitCode + 0)) || exitCode+=$(($exitCode + 1))
  done
  [ $exitCode -eq 0 ] || exitCode=3
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for a valid internet connection
__am_i_online() {
  local exitCode=0
  curl -q -LSsfI --max-time 2 --retry 1 "${1:-https://1.1.1.1}" 2>&1 | grep -qi 'server:.*cloudflare' || exitCode=4
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# colorization
if [ "$SHOW_RAW" = "true" ]; then
  NC=""
  RESET=""
  BLACK=""
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  PURPLE=""
  CYAN=""
  WHITE=""
  ORANGE=""
  LIGHTRED=""
  BG_GREEN=""
  BG_RED=""
  ICON_INFO="[ info ]"
  ICON_GOOD="[ ok ]"
  ICON_WARN="[ warn ]"
  ICON_ERROR="[ error ]"
  ICON_QUESTION="[ ? ]"
  printf_column() { tee | grep '^'; }
  printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
else
  printf_color() { printf "%b" "$(tput setaf "${2:-7}" 2>/dev/null)" "$1" "$(tput sgr0 2>/dev/null)"; }
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional printf_ colors
__printf_head() { printf_blue "$1"; }
__printf_opts() { printf_purple "$1"; }
__printf_line() { printf_cyan "$1"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# output version
__version() { printf_cyan "$VERSION"; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# list options
__list_options() {
  printf_color "$1: " "$5"
  echo -ne "$2" | sed 's|:||g;s/'$3'/ '$4'/g' | tr '\n' ' '
  printf_newline
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# create the config file
__gen_config() {
  local NOTIFY_CLIENT_NAME="$APPNAME"
  if [ "$INIT_CONFIG" != "TRUE" ]; then
    printf_blue "Generating the config file in"
    printf_cyan "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
  fi
  [ -d "$GEN_DOCKERFILE_CONFIG_DIR" ] || mkdir -p "$GEN_DOCKERFILE_CONFIG_DIR"
  [ -d "$GEN_DOCKERFILE_CONFIG_BACKUP_DIR" ] || mkdir -p "$GEN_DOCKERFILE_CONFIG_BACKUP_DIR"
  [ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ] &&
    cp -Rf "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" "$GEN_DOCKERFILE_CONFIG_BACKUP_DIR/$GEN_DOCKERFILE_CONFIG_FILE.$$"
  cat <<EOF >"$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
# Settings for gen-dockerfile
GEN_DOCKER_GIT_AUTO_INIT="${GEN_DOCKER_GIT_AUTO_INIT:-}"
GEN_DOCKERFILE_GIT_BASE="${GEN_DOCKERFILE_GIT_BASE:-}"
GEN_DOCKERFILE_HUB_BASE="${GEN_DOCKERFILE_HUB_BASE:-}"
GEN_DOCKERFILE_DEFAULT_IMAGE="${GEN_DOCKERFILE_DEFAULT_IMAGE:-}"
GEN_DOCKERFILE_VENDOR="${GEN_DOCKERFILE_VENDOR:-}"
GEN_DOCKERFILE_AUTHOR="${GEN_DOCKERFILE_AUTHOR:-}"
GEN_DOCKERFILE_MAINTAINER="${GEN_DOCKERFILE_MAINTAINER:-}"
GEN_DOCKER_VERSION_FORMAT="${GEN_DOCKER_VERSION_FORMAT:-}"
GEN_DOCKER_SPECIFY_CERT_BOT_PLUGINS="${GEN_DOCKER_SPECIFY_CERT_BOT_PLUGINS:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specifiy default versions and image repo for alpine
GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specifiy default versions and image repo for debian
GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specifiy default versions and image repo for ubuntu
GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU:-}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specifiy default versions and image repo for rockylinux
GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Specifiy default versions and image repo for rockylinux
GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX:-}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Global packages
# Defaults: ${GEN_DOCKER_FILE_PKGS_ALL:-none}
GEN_DOCKER_FILE_PKGS_ALL+=""
GEN_DOCKER_FILE_PKGS_ALL+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# debian - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_DEBIAN:-none}
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
GEN_DOCKER_FILE_PKGS_DEBIAN+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ubuntu - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_UBUNTU:-none}
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
GEN_DOCKER_FILE_PKGS_UBUNTU+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# almalinux - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_RHEL:-none}
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
GEN_DOCKER_FILE_PKGS_RHEL+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# alpine - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_ALPINE:-none}
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
GEN_DOCKER_FILE_PKGS_ALPINE+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# archlinux - comma seperated list
# Defaults ${GEN_DOCKER_FILE_PKGS_ARCH:-none}
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
GEN_DOCKER_FILE_PKGS_ARCH+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_DOCKERFILE_OUTPUT_COLOR_1="${GEN_DOCKERFILE_OUTPUT_COLOR_1:-}"
GEN_DOCKERFILE_OUTPUT_COLOR_2="${GEN_DOCKERFILE_OUTPUT_COLOR_2:-}"
GEN_DOCKERFILE_OUTPUT_COLOR_GOOD="${GEN_DOCKERFILE_OUTPUT_COLOR_GOOD:-}"
GEN_DOCKERFILE_OUTPUT_COLOR_ERROR="${GEN_DOCKERFILE_OUTPUT_COLOR_ERROR:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_DOCKERFILE_NOTIFY_ENABLED="${GEN_DOCKERFILE_NOTIFY_ENABLED:-}"
GEN_DOCKERFILE_GOOD_NAME="${GEN_DOCKERFILE_GOOD_NAME:-}"
GEN_DOCKERFILE_ERROR_NAME="${GEN_DOCKERFILE_ERROR_NAME:-}"
GEN_DOCKERFILE_GOOD_MESSAGE="${GEN_DOCKERFILE_GOOD_MESSAGE:-}"
GEN_DOCKERFILE_ERROR_MESSAGE="${GEN_DOCKERFILE_ERROR_MESSAGE:-}"
GEN_DOCKERFILE_NOTIFY_CLIENT_NAME="${GEN_DOCKERFILE_NOTIFY_CLIENT_NAME:-}"
GEN_DOCKERFILE_NOTIFY_CLIENT_ICON="${GEN_DOCKERFILE_NOTIFY_CLIENT_ICON:-}"
GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY="${GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY:-}"
EOF
  if builtin type -t __gen_config_local | grep -q 'function'; then __gen_config_local; fi
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ]; then
    [ "$INIT_CONFIG" = "TRUE" ] || printf_green "Your config file for $APPNAME has been created"
    . "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
    exitCode=0
  else
    printf_red "Failed to create the config file"
    exitCode=1
  fi
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Help function - Align to 50
__help() {
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "gen-dockerfile:  Create a Dockerfile - $VERSION"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "Usage: gen-dockerfile [options] [dir] [template] [imageName] [repo]"
  __printf_line "scratch                         - A simple template"
  __printf_line "alpine                          - Use alpine template"
  __printf_line "debian                          - Use debian template"
  __printf_line "rhel                            - Use rockylinux template"
  __printf_line "xorg                            - Use xorg template"
  __printf_line "web                             - Use web template"
  __printf_line "--nogit                         - Do not Initialize a git repo"
  __printf_line "--template                      - Specifiy the template"
  __printf_line "--tag                           - Specifiy the image tag"
  __printf_line "--image                         - Specifiy the image repo"
  __printf_line "--dockerfile                    - Create only a Dockerfile"
  __printf_line "--distro-name                   - Specify the distro name"
  __printf_line "--distro-tag                    - Specify the distro version"
  __printf_line "--startup                       - Create an init scripts"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_opts "Other Options"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  __printf_line "--help                          - Shows this message"
  __printf_line "--config                        - Generate user config file"
  __printf_line "--version                       - Show script version"
  __printf_line "--options                       - Shows all available options"
  __printf_line "--debug                         - Enables script debugging"
  __printf_line "--raw                           - Removes all formatting on output"
  __printf_head "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# check if arg is a builtin option
__is_an_option() { if echo "$ARRAY" | grep -q "${1:-^}"; then return 1; else return 0; fi; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user root
__user_is_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Is current user not root
__user_is_not_root() {
  { [ $(id -u) -eq 0 ] || [ $EUID -eq 0 ] || [ "$WHOAMI" = "root" ]; } && return 1 || return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check if user is a member of sudo
__sudo_group() {
  grep -sh "${1:-$USER}" "/etc/group" | grep -Eq 'wheel|adm|sudo' || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# # Get sudo password
__sudoask() {
  ask_for_password sudo true && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run sudo
__sudorun() {
  __sudoif && __cmd_exists sudo && sudo -HE "$@" || { __sudoif && eval "$@"; }
  return $?
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Test if user has access to sudo
__can_i_sudo() {
  (sudo -vn && sudo -ln) 2>&1 | grep -vq 'may not' >/dev/null && return 0
  __sudo_group "${1:-$USER}" || __sudoif || __sudo true &>/dev/null || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User can run sudo
__sudoif() {
  __user_is_root && return 0
  __can_i_sudo "${RUN_USER:-$USER}" && return 0
  __user_is_not_root && __sudoask && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Run command as root
requiresudo() {
  if [ "$GEN_DOCKERFILE_REQUIRE_SUDO" = "yes" ] && [ -z "$GEN_DOCKERFILE_REQUIRE_SUDO_RUN" ]; then
    export GEN_DOCKERFILE_REQUIRE_SUDO="no"
    export GEN_DOCKERFILE_REQUIRE_SUDO_RUN="true"
    __sudo "$@"
    exit $?
  else
    return 0
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Execute sudo
__sudo() {
  CMD="${1:-echo}" && shift 1
  CMD_ARGS="${*:--e "${RUN_USER:-$USER}"}"
  SUDO="$(builtin command -v sudo 2>/dev/null || echo 'eval')"
  [ "$(basename -- "$SUDO" 2>/dev/null)" = "sudo" ] && OPTS="--preserve-env=PATH -HE"
  if __sudoif; then
    export PATH="$PATH"
    $SUDO ${OPTS:-} $CMD $CMD_ARGS && true || false
    exitCode=$?
  else
    printf '%s\n' "This requires root to run"
    exitCode=1
  fi
  return ${exitCode:-1}
}
# End of sudo functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trap_exit() {
  exitCode=${exitCode:-0}
  [ -f "$GEN_DOCKERFILE_TEMP_FILE" ] && rm -Rf "$GEN_DOCKERFILE_TEMP_FILE" &>/dev/null
  #unset CASJAYSDEV_TITLE_SET && printf '\033]2â”‚;%s\033\\' "${USER}@${HOSTNAME}:${PWD//$HOME/\~} - ${CASJAYSDEV_TITLE_PREV:-$SHELL}"
  if builtin type -t __trap_exit_local | grep -q 'function'; then __trap_exit_local; fi
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__remove_extra_spaces() { sed 's/\( \)*/\1/g;s|^ ||g'; }
__dockerignore() { __cmd_exists dockerignore && dockerignore || true; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__trim() {
  local var="${*//;/ }"
  var="${var#"${var%%[![:space:]]*}"}" # remove leading whitespace characters
  var="${var%"${var##*[![:space:]]}"}" # remove trailing whitespace characters
  var="$(echo "$var" | __remove_extra_spaces)"
  printf '%s' "$var" | grep -v '^$'
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_git() {
  gitignore --dir "$dir" default --automated &>/dev/null && printf_purple "Created $dir/.gitignore"
  gen-gitattr --dir "$dir" default --automated &>/dev/null && printf_purple "Created $dir/.gitattributes"
  # Create .dockerignore
  __dockerignore &>/dev/null && printf_purple "Created $dir/.dockerignore"
  # create README.md
  [ -f "$dir/README.md" ] || gen-readme projects docker.md "$dir/README.md" &>/dev/null && printf_purple "Created $dir/README.md"
  # create LICENSE.md
  [ -f "$dir/LICENSE.md" ] || gen-license wtfpl "$dir/LICENSE.md" &>/dev/null && printf_purple "Created $dir/LICENSE.md"
  printf_green "Using $repo as VCS url"
  if [ -d "$rootfs_dir/usr/local/bin" ] && [ -d "$template_dir/data" ] && [ -d "$template_dir/config" ] || [ "$GEN_DOCKERFILE_TEMPLATE" = "scratch" ]; then
    printf_blue "All files and Directories have been created"
    if [ "$GEN_DOCKER_INIT" = "true" ]; then rm -Rf "$file"; fi
    if [ -f "$file" ] && [ "$GEN_DOCKER_GIT_AUTO_INIT" = "yes" ]; then
      if [ ! -d "$dir/.git" ] && [ ! -f "$dir/.nogit" ]; then
        if [ "$GEN_DOCKER_AUTOMATED" = "true" ]; then
          gitadmin --dir "$dir" setup "$repo" --automated
        else
          [ -f "$dir/.gitignore" ] || gitignore "$dir" default
          gitadmin --dir "$dir" setup "$repo"
        fi
      fi
    fi
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__execute_gen_dockerfile() {
  if [ $# -lt 3 ]; then
    name="$(basename -- "$GEN_DOCKERFILE_CWD")"
    __docker_file "${1:-$GEN_DOCKERFILE_CWD/Dockerfile}" "$name" ${2:-}
  elif [ $# -eq 3 ]; then
    __docker_file "$1" "$2" ${3:-}
  else
    printf_red "Usage: [Dockerfile] [name] [gitRepo]"
    printf_exit "IE: ./Dockerfile alpine https://github.com/[orgname]/[reponame]"
  fi
  echo ""
  return $exitCode
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__docker_file() {
  # variables
  local date="" name="" repo="" dir="" bak_ext="bak" tmpFile=""
  __set_make_file_variables "$@"
  dotenv_file="$dir/.env.scripts"
  if [ "$GEN_DOCKER_INIT" != "true" ]; then
    if [ -f "$dotenv_file" ] && [ -f "$dir/rootfs/usr/local/etc/docker/functions/entrypoint.sh" ]; then
      GEN_DOCKER_ONLY_DOCKERFILE="true"
      GEN_DOCKER_INIT=""
    fi
  fi
  if [ -f "$dir/.env.scripts.${file_version:-latest}" ]; then
    printf_cyan "Setting version to ${file_version:-latest}"
    dotenv_file="$dir/.env.scripts.${file_version:-latest}"
    . "$dir/.env.scripts.${file_version:-latest}"
    __set_variables
    __set_make_file_variables "$@"
  elif [ -f "$dir/.env.scripts" ]; then
    [ -f "$GEN_DOCKERFILE_CWD/.env.scripts" ] && . "$GEN_DOCKERFILE_CWD/.env.scripts"
    . "$dotenv_file"
    __set_variables
    __set_make_file_variables "$@"
  fi
  # Rewite dockerfile to version number
  echo "$file" | grep -v "Dockerfile" | grep -q "$file_version" && file="Dockerfile" && is_file_versioned="false"
  [ -n "$file_version" ] && [ "$is_file_versioned" = "false" ] && file="$file.$file_version" && dotenv_file="$dir/.env.scripts.$file_version"
  GEN_DOCKERFILE_DOCKERFILE_NAME="$(basename -- "$file")"
  # begin
  [ -f "$dotenv_file" ] || GEN_DOCKER_INIT="true"
  if [ "$GEN_DOCKER_INIT" = "true" ]; then
    GEN_DOCKER_AUTOMATED="true"
    printf_blue "Initialize $name in: $dir"
  else
    printf_blue "Initialize $name with tag[s]: ${version//\$\{IMAGE_VERSION\}/latest} in: $file"
  fi
  if [ "$GEN_DOCKER_AUTOMATED" != "true" ]; then
    [ -f "$file" ] && printf_pause "If this is what you want press enter or control-c to exit"
  fi
  if [ -f "$file" ] && [ -f "$file.$bak_ext" ]; then
    printf_yellow "Found an existing Dockerfile at: $file"
    printf_cyan "Backing up to: $file.$date.$bak_ext"
    mv -f "$file.bak" "$file.$date.$bak_ext"
    mv -f "$file" "$file.$bak_ext"
  elif [ -f "$file" ]; then
    printf_yellow "Found an existing Dockerfile at: $file"
    printf_cyan "Backing up to: $file.$bak_ext"
    mv -f "$file" "$file.$bak_ext"
  fi
  # Init Dockerfile functions
  __configure_dockerfile "$name"
  #
  [ -f "$dotenv_file" ] && printf_blue "Updating $dotenv_file" || printf_purple "Creating $dotenv_file"
  cat <<EOF >"$dotenv_file"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version           :  $(date +'%Y%m%d%H%M-git')
# @@Author           :  $GEN_DOCKERFILE_AUTHOR
# @@Contact          :  $GEN_DOCKERFILE_MAINTAINER
# @@License          :  MIT
# @@ReadME           :
# @@Copyright        :  Copyright $(date +'%Y') $GEN_DOCKERFILE_VENDOR
# @@Created          :  $(date)
# @@File             :  .env.scripts
# @@Description      :  Variables for .env.scripts
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Dockerfile name
ENV_DOCKERFILE="$(basename -- "${ENV_DOCKERFILE:-${file//$tmpFile/Dockerfile}}")"
ENV_IMAGE_NAME="$(basename -- "${ENV_IMAGE_NAME:-$name}")"
# Maintainer info
ENV_VENDOR="${ENV_VENDOR:-$GEN_DOCKERFILE_VENDOR}"
ENV_AUTHOR="${ENV_AUTHOR:-$GEN_DOCKERFILE_AUTHOR}"
ENV_MAINTAINER="${ENV_MAINTAINER:-$GEN_DOCKERFILE_MAINTAINER}"
ENV_GIT_REPO_URL="${ENV_GIT_REPO_URL:-$GEN_DOCKERFILE_GIT_BASE}"
ENV_REGISTRY_URL="${ENV_REGISTRY_URL:-$GEN_DOCKERFILE_HUB_BASE}"
ENV_USE_TEMPLATE="${ENV_USE_TEMPLATE:-$GEN_DOCKERFILE_TEMPLATE}"
# REPO info
ENV_ORG_NAME="${ENV_ORG_NAME:-$organization}"
# Push image info
ENV_IMAGE_REPO="${ENV_IMAGE_REPO:-${ENV_ORG_NAME:-casjaysdevdocker}/$name}"
ENV_IMAGE_TAG="${ENV_IMAGE_TAG:-$GEN_DOCKERFILE_SET_VERSION}"
ENV_ADD_TAGS="${ENV_ADD_TAGS:-$GEN_DOCKERFILE_SET_TAG}"
# Pull image info
ENV_PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${ENV_IMAGE_REPO:-casjaysdev/$GEN_DOCKERFILE_TEMPLATE}}"
ENV_DISTRO_TAG="${ENV_DISTRO_TAG:-${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$ENV_IMAGE_TAG}}"
# Env
SERVICE_PORT="${SERVICE_PORT:-}"
EXPOSE_PORTS="${EXPOSE_PORTS:-}"
PHP_VERSION="${PHP_VERSION:-}"
NODE_VERSION="${NODE_VERSION:-}"
NODE_MANAGER="${NODE_MANAGER:-}"
# Default directories
WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"
EOF
  if [ -f "$rootfs_dir/usr/local/bin/entrypoint.sh" ] && [ -f "$file.$bak_ext" ]; then
    printf_cyan "Generating your Dockerfile using template: $GEN_DOCKERFILE_TEMPLATE"
    if __make_file "$GEN_DOCKERFILE_TEMPLATE" "$file"; then
      printf_green "Your Dockerfile for $name has been created in: $(readlink -f "$dir")"
      exit 0
    else
      printf_green "Failed to create Dockerfile for $name"
      exit 1
    fi
  elif [ "$GEN_DOCKERFILE_TEMPLATE" = "scratch" ]; then
    if [ "$GEN_DOCKER_INIT" != "true" ]; then
      if __make_file "$GEN_DOCKERFILE_TEMPLATE" "$file"; then
        printf_green "Your Dockerfile for $name has been created in: $(readlink -f "$dir")"
      else
        printf_green "Failed to create Dockerfile for $name"
        exit 1
      fi
    fi
    # Create pkmgr script
    printf_blue "Creating $rootfs_dir/usr/local/bin/pkmgr"
    [ -d "$rootfs_dir/usr/local/bin" ] || mkdir -p "$rootfs_dir/usr/local/bin"
    __create_pkmgr_install_script >"$rootfs_dir/usr/local/bin/pkmgr"
    chmod -Rf 755 "$rootfs_dir/usr/local/bin/pkmgr"
    # Run git
    __init_git
    [ -f "$dotenv_file" ] && exit 0 || exit 1
  else
    printf_cyan "Generating your Dockerfile using template: $GEN_DOCKERFILE_TEMPLATE"
    __make_file "$GEN_DOCKERFILE_TEMPLATE" "$file"
    if [ -f "$file" ]; then
      printf_green "Your Dockerfile for $name has been created in: $(readlink -f "$file")"
      # Create directories
      if [ "$GEN_DOCKER_ONLY_DOCKERFILE" != "true" ]; then
        for create_dir in $make_directories; do
          printf_purple "Creating Directory: ${create_dir//$dir\//}"
          mkdir -p "$create_dir"
        done
        # create functions file
        printf_blue "Creating global functions file"
        [ -d "$rootfs_dir/usr/local/etc/docker/functions" ] || mkdir -p "$rootfs_dir/usr/local/etc/docker/functions"
        cp -Rf "$CASJAYSDEVDIR/templates/scripts/functions/docker-entrypoint" "$rootfs_dir/usr/local/etc/docker/functions/entrypoint.sh" &>/dev/null
        if [ -f "$rootfs_dir/usr/local/etc/docker/functions/entrypoint.sh" ]; then
          printf_cyan "Created $rootfs_dir/usr/local/etc/docker/functions/entrypoint.sh"
        fi
        # Create pkmgr script
        printf_blue "Creating $rootfs_dir/usr/local/bin/pkmgr"
        [ -d "$rootfs_dir/usr/local/bin" ] || mkdir -p "$rootfs_dir/usr/local/bin"
        __create_pkmgr_install_script >"$rootfs_dir/usr/local/bin/pkmgr"
        chmod -Rf 755 "$rootfs_dir/usr/local/bin/pkmgr"
        # Create entrypoint script
        printf_blue "Creating $rootfs_dir/usr/local/bin/entrypoint.sh"
        if [ -f "$rootfs_dir/usr/local/bin/entrypoint.sh" ]; then
          printf_yellow "Found existing entrypoint... ${GREEN}Backing up${NC}"
          mv -f "$rootfs_dir/usr/local/bin/entrypoint.sh" "$rootfs_dir/usr/local/bin/entrypoint.sh.$bak_ext"
        fi
        if GEN_SCRIPT_EDITFILE="N" gen-script other docker-entrypoint --name "$name" --dir "$rootfs_dir/usr/local/bin" "entrypoint.sh" &>/dev/null; then
          printf_green "Created the entrypoint script"
        else
          printf_red "Failed to create the entrypoint script"
        fi
        #         # backup init script if exists
        #         printf_blue "Creating $init_dir/zz-default.sh"
        #         if [ -f "$init_dir/zz-default.sh" ]; then
        #           printf_yellow "Found existing start-$name script... ${GREEN}Backing up${NC}"
        #           mv -f "$init_dir/zz-default.sh" "$init_dir/zz-default.sh.$bak_ext"
        #         fi
        #         # create root docker init files
        #         mkdir -p "$rootfs_dir/root/docker"
        #         for docker_init_script in init custom files packages post; do
        #           if [ ! -f "$rootfs_dir/root/docker/setup/$docker_init_script" ]; then
        #             printf_yellow "Creating $docker_init_script in $rootfs_dir/root/docker/setup"
        #             [ -d "$rootfs_dir/root/docker/setup" ] || mkdir -p "$rootfs_dir/root/docker/setup"
        #             cat <<EEOF >"$rootfs_dir/root/docker/setup/$docker_init_script"
        # #!/usr/bin/env sh
        # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # ##@Version           :  $(date +'%Y%m%d%H%M-git')
        # # @@Author           :  $GEN_DOCKERFILE_AUTHOR
        # # @@Contact          :  $GEN_DOCKERFILE_MAINTAINER
        # # @@License          :  MIT
        # # @@ReadME           :
        # # @@Copyright        :  Copyright $(date +'%Y') $GEN_DOCKERFILE_VENDOR
        # # @@Created          :  $(date)
        # # @@File             :  $(basename -- "$docker_init_script")"
        # # @@Description      :  script to run $(basename -- "$docker_init_script")"
        # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # # shellcheck shell=sh
        # # shellcheck disable=SC2016
        # # shellcheck disable=SC2031
        # # shellcheck disable=SC2120
        # # shellcheck disable=SC2155
        # # shellcheck disable=SC2199
        # # shellcheck disable=SC2317
        # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # set -ex
        # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # # Set env variables

        # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # # Main script

        # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # exit $?
        # EEOF
        #           fi
        #           chmod 755 "$rootfs_dir/root/docker/setup/$docker_init_script"
        #         done
        #         # Create start-service script
        #         if GEN_SCRIPT_EDITFILE="N" gen-script other start-service --name "$name" --dir "$init_dir" "zz-default.sh" &>/dev/null; then
        #           sed -i 's|REPLACE_SERVICE_NAME|'$name'|g' "$init_dir/zz-default.sh"
        #           printf_green "Created the start script $init_dir/zz-default.sh"
        #         else
        #           printf_red "Failed to create the start-$name script"
        #         fi
        # create env files
        mkdir -p "$shared_dir/template-files/config/env/examples"
        __create_env "$shared_dir/template-files/config/env/default.sample"
        if [ -d "$CASJAYSDEVDIR/templates/env/docker" ]; then
          printf_yellow "Copying enviroment files to $shared_dir/template-files/config/env/examples/$name"
          for env_file in "$CASJAYSDEVDIR/templates/env/docker"/*; do
            if [ -f "$env_file" ]; then
              name="$(basename -- "$env_file")"
              if ! cp -Rf "$env_file" "$shared_dir/template-files/config/env/examples" |& __devnull; then
                printf_red "Failed to copy $name to $shared_dir/template-files/config/env/examples/$name"
              fi
            fi
          done
        fi
        # Make sure git keeps empty directories
        touch "$template_dir/data/.gitkeep"
        touch "$template_dir/config/.gitkeep"
        touch "$template_dir/defaults/.gitkeep"
        # create .gitignore
        __init_git
      fi
      exitCode=$?
    else
      printf_red "Failed to create Dockerfile for $name in $dir"
      exitCode=1
    fi
  fi
  [ -f "$tmpFile" ] && rm -Rf "$tmpFile"
  return ${exitCode:-0}
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__make_file() {
  template="$(echo "$1" | tr '[:upper:]' '[:lower:]')"
  GEN_DOCKERFILE_TEMPLATE="$template"
  case "$template" in
  alpine)
    shift 1
    __alpine_file "$1"
    ;;

  arch | archlinux)
    shift 1
    __arch_file "$1"
    ;;

  debian)
    shift 1
    __debian_file "$1"
    ;;

  ubuntu)
    shift 1
    __ubuntu_file "$1"
    ;;

  rhel | rockylinux | almalinux | oraclelinux | redhat | centos)
    shift 1
    __almalinux "$1"
    ;;

  web)
    shift 1
    __web "$1"
    ;;

  xorg)
    shift 1
    __xorg "$1"
    ;;

  scratch)
    shift 1
    __scratch "$1"
    ;;

  *)
    __alpine_file "${2:-$1}"
    ;;
  esac
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_start_script() {
  local script_filename="$(basename -- "$1")"
  local rootfs_dir="${dir:-${GEN_DOCKERFILE_CWD:-$PWD}}/rootfs"
  local init_dir="${init_dir:-$rootfs_dir/usr/local/etc/docker/init.d}"
  local script_file="$init_dir/$script_filename"
  local mess="startup script"
  [ "$script_filename" = "service.sample" ] && mess="example start script"
  printf_cyan "Creating the $mess for $script_file"
  [ -d "$init_dir" ] || mkdir -p "$init_dir"
  GEN_SCRIPT_EDITFILE="N" gen-script other start-service --name "$script_filename" --dir "$init_dir" "$script_filename" #&>/dev/null
  [ -f "$script_file" ] && printf_cyan "Created $script_file"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_pkmgr_install_script() {
  cat <<EOF
#!/usr/bin/env sh
# shellcheck shell=sh
# shellcheck disable=SC2016
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
set -e
[ -n "\$_DEBUG" ] && set -x || { [ "\$1" = "--debug" ] && set -x && shift 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
USER_UID="\$(id -u)"
USER_GID="\$(id -g)"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -f "/etc/pkmgr/options.conf" ] && . "/etc/pkmgr/options.conf"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -x "\$(command -v apt 2>/dev/null)" ]; then
  export DEBIAN_FRONTEND=noninteractive
  pkmgr_cmd="apt"
  pkmgr_clean_cmd="\$pkmgr_cmd clean"
  pkmgr_mkcache_cmd="\$pkmgr_cmd update"
  pkmgr_update_cmd="\$pkmgr_cmd upgrade -yy"
  pkmgr_install_cmd="\$pkmgr_cmd install -yy \$PKMGR_OPTS"
elif [ -x "\$(command -v apt-get 2>/dev/null)" ]; then
  export DEBIAN_FRONTEND=noninteractive
  pkmgr_cmd="apt-get"
  pkmgr_clean_cmd="\$pkmgr_cmd clean"
  pkmgr_mkcache_cmd="\$pkmgr_cmd update"
  pkmgr_update_cmd="\$pkmgr_cmd upgrade -yy"
  pkmgr_install_cmd="\$pkmgr_cmd install -yy \$PKMGR_OPTS"
elif [ -x "\$(command -v dnf 2>/dev/null)" ]; then
  pkmgr_cmd="dnf"
  pkmgr_clean_cmd="\$pkmgr_cmd clean all"
  pkmgr_mkcache_cmd="\$pkmgr_cmd makecache"
  pkmgr_update_cmd="\$pkmgr_cmd update -y --skip-broken \$PKMGR_OPTS"
  pkmgr_install_cmd="\$pkmgr_cmd install -y --skip-broken \$PKMGR_OPTS"
elif [ -x "\$(command -v yum 2>/dev/null)" ]; then
  pkmgr_cmd="yum"
  pkmgr_clean_cmd="\$pkmgr_cmd clean all"
  pkmgr_mkcache_cmd="\$pkmgr_cmd makecache"
  pkmgr_update_cmd="\$pkmgr_cmd update -y --skip-broken \$PKMGR_OPTS"
  pkmgr_install_cmd="\$pkmgr_cmd install -y --skip-broken \$PKMGR_OPTS"
elif [ -n "\$(command -v pacman 2>/dev/null)" ]; then
  pkmgr_cmd="pacman"
  pkmgr_mkcache_cmd="true"
  pkmgr_clean_cmd="\$pkmgr_cmd -Scc --noconfirm"
  pkmgr_update_cmd="\$pkmgr_cmd -Syyu --noconfirm \$PKMGR_OPTS"
  pkmgr_install_cmd="\$pkmgr_cmd -Syy --noconfirm \$PKMGR_OPTS"
elif [ -x "\$(command -v apk 2>/dev/null)" ]; then
  pkmgr_cmd="apk"
  pkmgr_mkcache_cmd="true"
  pkmgr_clean_cmd="\$pkmgr_cmd cache clean"
  pkmgr_update_cmd="\$pkmgr_cmd -U upgrade --no-cache \$PKMGR_OPTS"
  pkmgr_install_cmd="\$pkmgr_cmd add --no-cache \$PKMGR_OPTS"
elif [ -x "\$(command -v zypper 2>/dev/null)" ]; then
  pkmgr_cmd="zypper"
  pkmgr_mkcache_cmd="true"
  pkmgr_clean_cmd="\$pkmgr_cmd clean --all"
  pkmgr_update_cmd="\$pkmgr_cmd update -y \$PKMGR_OPTS"
  pkmgr_install_cmd="\$pkmgr_cmd install -y \$PKMGR_OPTS"
else
  pkmgr_cmd="true"
  pkmgr_mkcache_cmd="\$pkmgr_cmd"
  pkmgr_clean_cmd="\$pkmgr_cmd"
  pkmgr_update_cmd="\$pkmgr_cmd"
  pkmgr_install_cmd="\$pkmgr_cmd"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "/config/pkmgr/settings.conf" ]; then
  . "/config/pkmgr/settings.conf"
elif [ -f "/etc/pkmgr/settings.conf" ]; then
  . "/etc/pkmgr/settings.conf"
else
  mkdir -p "/config/pkmgr"
  cat <<EEOF >"/config/pkmgr/settings.conf"
pkmgr_cmd="\$pkmgr_cmd"
pkmgr_clean_cmd="\$pkmgr_clean_cmd"
pkmgr_update_cmd="\$pkmgr_update_cmd"
pkmgr_install_cmd="\$pkmgr_install_cmd"
pkmgr_mkcache_cmd="\$pkmgr_mkcache_cmd"
EEOF
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[ -n "\$pkmgr_cmd" ] || { echo "Can not determine the package manager" && exit 1; }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "\$1" in
pip)
  shift 1
  pip_bin="\$(command -v python3 2>/dev/null || command -v python2 2>/dev/null || command -v python 2>/dev/null || echo "")"
  py_version="\$(\$pip_bin --version | sed 's|[pP]ython ||g' | awk -F '.' '{print \$1\$2}' | grep '[0-9]' || echo "0")"
  [ "\$py_version" -gt "310" ] && pip_opts="--break-system-packages " || pip_opts=""
  case "\$1" in
  install)
    shift 1
    \$pip_bin -m \$pip_opts "\$@"
    ;;
  *)
    \$pip_bin "\$@"
    ;;
  esac
  exit \$?
  ;;
update | upgrade)
  shift \$#
  [ "\$USER_UID" -eq 0 ] || [ "\$USER" = "root" ] || pkmgr_update_cmd="sudo \$pkmgr_install_cmd"
  echo "Updating packages command: \$pkmgr_update_cmd"
  \$pkmgr_mkcache_cmd
  \$pkmgr_update_cmd
  exit \$?
  ;;
clean)
  shift \$#
  [ -n "\$1" ] || exit 0
  [ "\$USER_UID" -eq 0 ] || [ "\$USER" = "root" ] || pkmgr_clean_cmd="sudo \$pkmgr_clean_cmd"
  echo "Cleaning package cache: \$pkmgr_clean_cmd"
  \$pkmgr_clean_cmd
  exit \$?
  ;;
install)
  shift 1
  [ -n "\$1" ] || exit 0
  [ "\$USER_UID" -eq 0 ] || [ "\$USER" = "root" ] || pkmgr_install_cmd="sudo \$pkmgr_install_cmd"
  if [ -f "\$1" ]; then
    install_list="\$(cat "\$1")"
    echo 'installing packages from file with command: '\$pkmgr_install_cmd' "\$(<"\$1")"'
  else
    install_list="\$*"
    echo "installing packages command: \$pkmgr_install_cmd \$install_list"
  fi
  \$pkmgr_install_cmd \$install_list
  exit \$?
  ;;
*)
  [ -n "\$1" ] || exit 0
  [ "\$USER_UID" -eq 0 ] || [ "\$USER" = "root" ] || pkmgr_cmd="sudo \$pkmgr_cmd"
  echo "executing packages command: \$pkmgr_cmd \$*"
  \$pkmgr_cmd "\$@"
  exit \$?
  ;;
esac
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# end
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__create_env() {
  cat <<EOF | tee -p "$1" &>/dev/null
#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set bash options
[ "\$DEBUGGER" = "on" ] && echo "Enabling debugging" && set -o pipefail -x\$DEBUGGER_OPTIONS || set -o pipefail
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# import the functions file
[ -f "/usr/local/etc/docker/functions/entrypoint.sh" ] && . "/usr/local/etc/docker/functions/entrypoint.sh"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# GLOBAL enviroment variables
#USER="\${USER:-root}"
#LANG="\${LANG:-C.UTF-8}"
#TZ="\${TZ:-America/New_York}"
#SERVICE_USER="\${SERVICE_USER:-root}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# directory settings
#BACKUP_DIR="\${BACKUP_DIR:-/data/backups}"
#WWW_ROOT_DIR="\${WWW_ROOT_DIR:-/usr/share/httpd/default}"
#LOCAL_BIN_DIR="\${LOCAL_BIN_DIR:-/usr/local/bin}"
#DATABASE_BASE_DIR="\${DATABASE_BASE_DIR:-/data/db}"
#DEFAULT_DATA_DIR="\${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
#DEFAULT_CONF_DIR="\${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
#DEFAULT_TEMPLATE_DIR="\${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# healthcheck
#HEALTH_ENABLED="\${HEALTH_ENABLED:-\$ENV_HEALTH_ENABLED}"
#HEALTH_URL="\${HEALTH_URL:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# php settings
#PHP_VERSION="\${PHP_VERSION//php/}"
#PHP_INI_DIR="\${PHP_INI_DIR:-\$(__find_php_ini)}"
#PHP_BIN_DIR="\${PHP_BIN_DIR:-\$(__find_php_bin)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# services/ports
#ENV_PORTS="\${ENV_PORTS:-}"
#SERVICE_PORT="\${SERVICE_PORT:-\$PORT}"
#WEB_SERVER_PORTS="\${WEB_SERVER_PORTS:-\$ENV_WEB_SERVER_PORTS}"
#SERVICES_LIST="\${PROCS_LIST:-\$SERVICES_LIST} "
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# networing info
DOMAINNAME="\${DOMAINNAME:-}"
HOSTNAME="\${HOSTNAME:-casjaysdev-GEN_SCRIPT_REPLACE_APPNAME}"
FULL_DOMAIN_NAME="\${FULL_DOMAIN_NAME:-\${DOMAINNAME:-\$HOSTNAME}}"
SERVER_ADMIN="\${SERVER_ADMIN:-root@\${EMAIL_DOMAIN:-\${DOMAINNAME:-\$FULL_DOMAIN_NAME}}}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EMAIL_RELAY="\${EMAIL_RELAY:-}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# get ip addresses
CONTAINER_IP4_ADDRESS="\${CONTAINER_IP4_ADDRESS:-\$(__get_ip4)}"
CONTAINER_IP6_ADDRESS="\${CONTAINER_IP6_ADDRESS:-\$(__get_ip6)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# cerbot
#CERT_BOT_MAIL="\${CERT_BOT_MAIL:-}"
#CERTBOT_DOMAINS="\${CERTBOT_DOMAINS:-}"
#CERT_BOT_ENABLED="\${CERT_BOT_ENABLED:-false}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ssl server settings
#SSL_ENABLED="\${SSL_ENABLED:-false}"
#SSL_DIR="\${SSL_DIR:-/config/ssl}"
#SSL_CA="\${SSL_CA:-\$SSL_DIR/ca.crt}"
#SSL_KEY="\${SSL_KEY:-\$SSL_DIR/server.key}"
#SSL_CERT="\${SSL_CERT:-\$SSL_DIR/server.crt}"
#SSL_CONTAINER_DIR="\${SSL_CONTAINER_DIR:-/etc/ssl/CA}"
#COUNTRY="\${COUNTRY:-US}"
#STATE="\${STATE:-NY}"
#CITY="\${CITY:-Albany}"
#UNIT="\${UNIT:-CasjaysDev}"
#ORG="\${ORG:-"Casjays Developments"}"
#DAYS_VALID="\${DAYS_VALID:-3650}"
#RSA="\${RSA:-4096}"
#CN="\${CN:-\$FULL_DOMAIN_NAME}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# web server configs
HTTPD_CONFIG_FILE="\${HTTPD_CONFIG_FILE:-\$(__find_httpd_conf)}"
NGINX_CONFIG_FILE="\${NGINX_CONFIG_FILE:-\$(__find_nginx_conf)}"
LIGHTTPD_CONFIG_FILE="\${LIGHTTPD_CONFIG_FILE:-\$(__find_lighttpd_conf)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# redis env
DATABASE_DIR_REDIS="\${DATABASE_DIR_REDIS:-\$DATABASE_BASE_DIR/redis}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# postgresql env
DATABASE_DIR_PGSQL="\${DATABASE_DIR_PGSQL:-\$PGDATA}"
PGDATA="\${DATABASE_DIR_PGSQL:-\$DATABASE_BASE_DIR/postgres}"
POSTGRES_USER="\${DATABASE_USER_ROOT:-\$POSTGRES_USER}"
POSTGRES_PASSWORD="\${DATABASE_PASS_ROOT:-\$POSTGRES_PASSWORD}"
POSTGRES_CONFIG_FILE="\${POSTGRES_CONFIG_FILE:-\$(__find_pgsql_conf)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mariadb env
MARIADB_ROOT_HOST="\${MARIADB_ROOT_HOST:-%}"
MARIADB_AUTO_UPGRADE="\${MARIADB_AUTO_UPGRADE:-yes}"
MARIADB_DATABASE="\${DATABASE_CREATE:-\$MARIADB_DATABASE}"
MARIADB_USER="\${DATABASE_USER_NORMAL:-\$MARIADB_USER}"
MARIADB_PASSWORD="\${DATABASE_PASS_NORMAL:-\$MARIADB_PASSWORD}"
DATABASE_DIR_MARIADB="\${DATABASE_DIR_MARIADB:-\$DATABASE_BASE_DIR/mysql}"
MARIADB_ROOT_PASSWORD="\${DATABASE_PASS_ROOT:-\$MARIADB_ROOT_PASSWORD}"
MARIADB_ALLOW_EMPTY_ROOT_PASSWORD="\${MARIADB_ALLOW_EMPTY_ROOT_PASSWORD:-}"
MARIADB_INITDB_SKIP_TZINFO="\${MARIADB_INITDB_SKIP_TZINFO}:-"
MARIADB_RANDOM_ROOT_PASSWORD="\${MARIADB_RANDOM_ROOT_PASSWORD:-}"
MARIADB_CONFIG_FILE="\${MARIADB_CONFIG_FILE:-\$(__find_mysql_conf)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# mongodb env
INITDB_ROOT_USERNAME="\${DATABASE_USER_ROOT:-\$INITDB_ROOT_USERNAME}"
DATABASE_DIR_MONGODB="\${DATABASE_DIR_MONGODB:-\$DATABASE_BASE_DIR/mongodb}"
MONGO_INITDB_ROOT_PASSWORD="\${DATABASE_PASS_ROOT:-\$MONGO_INITDB_ROOT_PASSWORD}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# couchdb env
NODENAME="\${NODENAME:-}"
COUCHDB_USER="\${DATABASE_USER_ROOT:-\$COUCHDB_USER}"
COUCHDB_PASSWORD="\${DATABASE_PASS_ROOT:-\$COUCHDB_PASSWORD}"
DATABASE_DIR_COUCHDB="\${DATABASE_DIR_COUCHDB:-\$DATABASE_BASE_DIR/couchdb}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Supabase
DATABASE_DIR_SUPABASE="\${DATABASE_DIR_SUPABASE:-\$DATABASE_BASE_DIR/supabase}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# docker env
DOCKER_HOST="${DOCKER_HOST:-unix://var/run/docker.sock}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# File locations
ENTRYPOINT_PID_FILE="\${ENTRYPOINT_PID_FILE:-/run/init.d/entrypoint.pid}"
ENTRYPOINT_INIT_FILE="\${ENTRYPOINT_INIT_FILE:-/config/.entrypoint.done}"
ENTRYPOINT_DATA_INIT_FILE="\${ENTRYPOINT_DATA_INIT_FILE:-/data/.docker_has_run}"
ENTRYPOINT_CONFIG_INIT_FILE="\${ENTRYPOINT_CONFIG_INIT_FILE:-/config/.docker_has_run}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Startup variables
INIT_DATE="\${INIT_DATE:-\$(date)}"
START_SERVICES="\${START_SERVICES:-yes}"
ENTRYPOINT_MESSAGE="\${ENTRYPOINT_MESSAGE:-yes}"
ENTRYPOINT_FIRST_RUN="\${ENTRYPOINT_FIRST_RUN:-yes}"
DATA_DIR_INITIALIZED="\${DATA_DIR_INITIALIZED:-false}"
CONFIG_DIR_INITIALIZED="\${CONFIG_DIR_INITIALIZED:-false}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ -f "\$ENTRYPOINT_PID_FILE" ] || [ -f "\$ENTRYPOINT_INIT_FILE" ];
  then START_SERVICES="no" ENTRYPOINT_MESSAGE="no" ENTRYPOINT_FIRST_RUN="no"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EOF
  [ -f "$1" ] && printf_cyan "Created default env file in $1" || printf_red "failed to create $1"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__scratch() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } "
  local packages="$(__trim "$packages")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_DEFAULT_IMAGE:-$GEN_DOCKERFILE_SET_DISTRO_NAME}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG LICENSE="MIT"
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

# FROM \${PULL_URL}:\${DISTRO_VERSION} AS build

FROM scratch
ARG USER
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /root

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV container="docker"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV NODE_MANAGER="\${NODE_MANAGER}"
ENV NODE_VERSION="\${NODE_VERSION}"
ENV PHP_VERSION="\${PHP_VERSION}"

COPY --from=build /. /

VOLUME [ "/config","/data" ]

EXPOSE \${ENV_PORTS}

ENTRYPOINT [ "/usr/sbin/init" ]
CMD [ "/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1

}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__web() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_DEBIAN//,/ }"
  local packages="$(__trim "$packages xorg x11-apps")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG LICENSE="MIT"
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="5800"
ARG EXPOSE_PORTS="5800 5900"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG PHP_VERSION

ARG PACK_LIST="$packages \\
  "

ENV ENV=~/.bashrc
ENV SHELL="/bin/sh"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdev-$name"

USER \${USER}
WORKDIR /root

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

RUN \\
$(__init_files)

RUN \\
$(__init_scripts)

RUN set -ex; \\
  echo ""

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN set -ex; \\
  echo ""

RUN \\
$(__setup_pkgs)

RUN \\
$(__init_packages)

RUN \\
$(__setup_files)

RUN set -ex \\
  echo "Custom Settings"; \\
  ${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN \\
$(__os_users)

RUN \\
$(__users_init)

RUN \\
$(__os_settings)

RUN set -ex; \\
  echo "Custom Applications"; \\
  ${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN \\
$(__init_custom)

RUN set -ex; \\
  echo

RUN \\
$(__init_post)

RUN \\
$(__clean_container)

RUN echo "Init done"

FROM scratch
ARG USER="x11user"
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /home/\${USER}

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV PORT="\${SERVICE_PORT}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV TERM="xterm-256color"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"

COPY --from=build /. /

VOLUME [ "/tmp/.X11-unix", "\$HOME/.Xauthority", ]

EXPOSE \${ENV_PORTS}

CMD [ "start","all" ]
ENTRYPOINT [ "tini","--","/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__xorg() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_DEBIAN//,/ }"
  local packages="$(__trim "$packages xorg x11-apps")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG PHP_VERSION

ARG PACK_LIST="$packages \\
  "

ENV ENV=~/.bashrc
ENV SHELL="/bin/sh"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdev-$name"

USER \${USER}
WORKDIR /root

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

RUN \\
$(__init_files)

RUN \\
$(__init_scripts)

RUN set -ex; \\
  echo ""

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN set -ex; \\
  echo ""

RUN \\
$(__setup_pkgs)

RUN \\
$(__init_packages)

RUN \\
$(__setup_files)

RUN set -ex \\
  echo "Custom Settings"; \\
  ${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN \\
$(__os_users)

RUN \\
$(__users_init)

RUN \\
$(__os_settings)

RUN set -ex; \\
  echo "Custom Applications"; \\
  ${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN \\
$(__init_custom)

RUN set -ex; \\
  echo

RUN \\
$(__init_post)

RUN \\
$(__clean_container)

RUN echo "Init done"

FROM scratch
ARG USER="x11user"
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /home/\${USER}

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV PORT="\${SERVICE_PORT}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV TERM="xterm-256color"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"

COPY --from=build /. /

VOLUME [ "/tmp/.X11-unix", "\${WORKDIR}/.Xauthority", ]

EXPOSE \${ENV_PORTS}

CMD [ "start","all" ]
ENTRYPOINT [ "tini","--","/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__debian_file() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_DEBIAN//,/ }"
  local packages="$(__trim "$packages")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG PHP_VERSION

ARG PACK_LIST="$packages \\
  "

ENV ENV=~/.bashrc
ENV SHELL="/bin/sh"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdev-$name"

USER \${USER}
WORKDIR /root

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

RUN \\
$(__init_files)

RUN \\
$(__init_scripts)

RUN set -ex; \\
  echo ""

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN set -ex; \\
  echo ""

RUN \\
$(__setup_pkgs)

RUN \\
$(__init_packages)

RUN \\
$(__setup_files)

RUN set -ex \\
  echo "Custom Settings"; \\
  ${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN \\
$(__os_users)

RUN \\
$(__users_init)

RUN \\
$(__os_settings)

RUN set -ex; \\
  echo "Custom Applications"; \\
  ${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN \\
$(__init_custom)

RUN set -ex; \\
  echo

RUN \\
$(__init_post)

RUN \\
$(__clean_container)

RUN echo "Init done"

FROM scratch
ARG USER
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /root

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV PORT="\${SERVICE_PORT}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV TERM="xterm-256color"
ENV NODE_VERSION="\${NODE_VERSION}"
ENV NODE_MANAGER="\${NODE_MANAGER}"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"

COPY --from=build /. /

VOLUME [ "/config","/data" ]

EXPOSE \${ENV_PORTS}

CMD [ "start","all" ]
ENTRYPOINT [ "tini","--","/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__ubuntu_file() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_UBUNTU//,/ }"
  local packages="$(__trim "$packages")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG PHP_VERSION

ARG PACK_LIST="$packages \\
  "

ENV ENV=~/.bashrc
ENV SHELL="/bin/sh"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdev-$name"

USER \${USER}
WORKDIR /root

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

# UBUNTU_CODENAME="$(grep -sh 'VERSION_CODENAME=' /etc/os-release | awk -F'=' '{print $2}' | grep '^' || echo 'unset')"
# [ "$UBUNTU_CODENAME" = "unset" ] || echo "deb http://archive.ubuntu.com/ubuntu $UBUNTU_CODENAME main universe restricted multiverse" | tee -p "/etc/apt/sources.list"

RUN \\
$(__init_files)

RUN \\
$(__init_scripts)

RUN set -ex; \\
  echo ""

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN set -ex; \\
  echo ""

RUN \\
$(__setup_pkgs)

RUN \\
$(__init_packages)

RUN \\
$(__setup_files)

RUN set -ex \\
  echo "Custom Settings"; \\
  ${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN \\
$(__os_users)

RUN \\
$(__users_init)

RUN \\
$(__os_settings)

RUN set -ex; \\
  echo "Custom Applications"; \\
  ${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN \\
$(__init_custom)

RUN set -ex; \\
  echo

RUN \\
$(__init_post)

RUN \\
$(__clean_container)

RUN echo "Init done"

FROM scratch
ARG USER
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /root

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV PORT="\${SERVICE_PORT}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"

COPY --from=build /. /

VOLUME [ "/config","/data" ]

EXPOSE \${ENV_PORTS}

CMD [ "start", "all" ]
ENTRYPOINT [ "tini", "--", "exec", "/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__almalinux() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_RHEL//,/ }"
  local packages="$(__trim "$packages")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL}"
  local GEN_DOCKERFILE_SET_TAG="${GEN_DOCKERFILE_SET_TAG:-$SET_DISTRO_VERSION}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG PHP_VERSION

ARG PACK_LIST="$packages \\
  "

ENV ENV=~/.bashrc
ENV SHELL="/bin/sh"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdev-$name"

USER \${USER}
WORKDIR /root

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

RUN \\
$(__init_files)

RUN \\
$(__init_scripts)

RUN set -ex; \\
  echo ""

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN set -ex; \\
  echo ""

RUN \\
$(__setup_pkgs)

RUN \\
$(__init_packages)

RUN \\
$(__setup_files)

RUN set -ex \\
  echo "Custom Settings"; \\
  ${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN \\
$(__os_users)

RUN \\
$(__users_init)

RUN \\
$(__os_settings)

RUN set -ex; \\
  echo "Custom Applications"; \\
  ${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN \\
$(__init_custom)

RUN set -ex; \\
  echo

RUN \\
$(__init_post)

RUN \\
$(__clean_container)

RUN echo "Init done"

FROM scratch
ARG USER
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /root

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV container="docker"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV PORT="\${SERVICE_PORT}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV PHP_SERVER="\${PHP_SERVER}"
ENV PHP_VERSION="\${PHP_VERSION}"
ENV NODE_VERSION="\${NODE_VERSION}"
ENV NODE_MANAGER="\${NODE_MANAGER}"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"

COPY --from=build /. /

VOLUME [ "/config","/data" ]

EXPOSE \${ENV_PORTS}

CMD [ "start","all" ]
ENTRYPOINT [ "tini","--","/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__alpine_file() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_ALPINE//,/ }"
  local packages="$(__trim "$packages")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG PHP_VERSION

ARG PACK_LIST="$packages \\
  "

ENV ENV=~/.bashrc
ENV SHELL="/bin/sh"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdev-$name"

USER \${USER}
WORKDIR /root

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

RUN \\
$(__init_files)

RUN \\
$(__init_scripts)

RUN set -ex; \\
  echo ""

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN set -ex; \\
  echo ""

RUN \\
$(__setup_pkgs)

RUN \\
$(__init_packages)

RUN \\
$(__setup_files)

RUN set -ex \\
  echo "Custom Settings"; \\
  ${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN \\
$(__os_users)

RUN \\
$(__users_init)

RUN \\
$(__os_settings)

RUN set -ex; \\
  echo "Custom Applications"; \\
  ${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN \\
$(__init_custom)

RUN set -ex; \\
  echo

RUN \\
$(__init_post)

RUN \\
$(__clean_container)

RUN echo "Init done"

FROM scratch
ARG USER
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /root

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV PORT="\${SERVICE_PORT}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV PHP_SERVER="\${PHP_SERVER}"
ENV PHP_VERSION="\${PHP_VERSION}"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"

COPY --from=build /. /

VOLUME [ "/config","/data" ]

EXPOSE \${ENV_PORTS}

CMD [ "start","all" ]
ENTRYPOINT [ "tini","--","/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__arch_file() {
  local Dfile="${1:-$file}"
  local packages="${GEN_DOCKER_FILE_PKGS_ALL//,/ } ${GEN_DOCKER_FILE_PKGS_ARCH//,/ }"
  local packages="$(__trim "$packages")"
  local SET_DISTRO_NAME="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX}"
  local SET_DISTRO_VERSION="${GEN_DOCKERFILE_SET_DISTRO_VERSION:-$GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX}"
  local PULL_URL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}}"
  if [ -f "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile" ]; then
    cat <<EOF | tee -p "$Dfile" &>/dev/null
$(. "$GEN_DOCKERFILE_CONFIG_DIR/Dockerfile")
EOF
  else
    cat <<EOF | tee -p "$Dfile" &>/dev/null
# Docker image for $name using the $GEN_DOCKERFILE_TEMPLATE template
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$(date)"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"

ARG IMAGE_REPO="${GEN_DOCKERFILE_SET_REPO:-$SET_DISTRO_NAME}"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAG"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG USER="root"
ARG PULL_URL="$PULL_URL"
ARG DISTRO_VERSION="$SET_DISTRO_VERSION"
ARG BUILD_VERSION="$GEN_DOCKERFILE_SET_BUILD"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG PHP_VERSION

ARG PACK_LIST="$packages \\
  "

ENV ENV=~/.bashrc
ENV SHELL="/bin/sh"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdev-$name"

USER \${USER}
WORKDIR /root

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

RUN \\
$(__init_files)

RUN \\
$(__init_scripts)

RUN set -ex; \\
  echo ""

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN set -ex; \\
  echo ""

RUN \\
$(__setup_pkgs)

RUN \\
$(__init_packages)

RUN \\
$(__setup_files)

RUN set -ex \\
  echo "Custom Settings"; \\
  ${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN \\
$(__os_users)

RUN \\
$(__users_init)

RUN \\
$(__os_settings)

RUN set -ex; \\
  echo "Custom Applications"; \\
  ${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN \\
$(__init_custom)

RUN set -ex; \\
  echo

RUN \\
$(__init_post)

RUN \\
$(__clean_container)

RUN echo "Init done"

FROM scratch
ARG USER
ARG LICENSE
ARG LANGUAGE
ARG TIMEZONE
ARG IMAGE_NAME
ARG PHP_SERVER
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG BUILD_VERSION
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION

USER \${USER}
WORKDIR /root

LABEL maintainer="${ENV_HUB_BASE:-$GEN_DOCKERFILE_MAINTAINER}"
LABEL org.opencontainers.image.vendor="${ENV_VENDOR:-CasjaysDev}"
LABEL org.opencontainers.image.authors="${ENV_AUTHOR:-CasjaysDev}"
LABEL org.opencontainers.image.description="Containerized version of \${IMAGE_NAME}"
LABEL org.opencontainers.image.title="\${IMAGE_NAME}"
LABEL org.opencontainers.image.base.name="\${IMAGE_NAME}"
LABEL org.opencontainers.image.authors="\${LICENSE}"
LABEL org.opencontainers.image.created="\${BUILD_DATE}"
LABEL org.opencontainers.image.version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.schema-version="\${BUILD_VERSION}"
LABEL org.opencontainers.image.url="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.vcs-type="Git"
LABEL org.opencontainers.image.revision="\${BUILD_VERSION}"
LABEL org.opencontainers.image.source="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL org.opencontainers.image.documentation="${ENV_HUB_BASE:-$GEN_DOCKERFILE_HUB_BASE}"
LABEL com.github.containers.toolbox="false"

ENV ENV=~/.bashrc
ENV SHELL="/bin/bash"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV PORT="\${SERVICE_PORT}"
ENV ENV_PORTS="\${EXPOSE_PORTS}"
ENV CONTAINER_NAME="\${IMAGE_NAME}"
ENV HOSTNAME="casjaysdev-\${IMAGE_NAME}"
ENV USER="\${USER}"

COPY --from=build /. /

VOLUME [ "/config","/data" ]

EXPOSE \${ENV_PORTS}

CMD [ "start","all" ]
ENTRYPOINT [ "tini","--","/usr/local/bin/entrypoint.sh" ]
HEALTHCHECK --start-period=1m --interval=2m --timeout=3s CMD [ "/usr/local/bin/entrypoint.sh", "healthcheck" ]
EOF
  fi
  [ -f "$Dfile" ] && return 0 || return 1
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__configure_dockerfile() {
  [ -n "$ENV_IMAGE_NAME" ] && name="$ENV_IMAGE_NAME" || local name="${1:-$GEN_DOCKERFILE_TEMPLATE}"
  [ -n "$ENV_PULL_URL" ] || ENV_PULL_URL="${ENV_IMAGE_REPO:-casjaysdev/$GEN_DOCKERFILE_TEMPLATE}"
  printf_yellow "Configuring for: $name"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __global_setup_files() {
    cat <<EOF
  echo "\$TIMEZONE" >"/etc/timezone"; \\
  touch "/etc/profile" "/root/.profile"; \\
  echo 'hosts: files dns' >"/etc/nsswitch.conf"; \\
  BASH_CMD="\$(command -v bash 2>/dev/null|| echo '')"; \\
  PHP_BIN="\$(command -v \${PHP_VERSION} 2>/dev/null || echo '')"; \\
  PHP_FPM="\$(ls /usr/*bin/php*fpm* 2>/dev/null || echo '')"; \\
  pip_bin="\$(command -v python3 2>/dev/null || command -v python2 2>/dev/null || command -v python 2>/dev/null || echo "")"; \\
  py_version="\$(\$pip_bin --version | sed 's|[pP]ython ||g' | awk -F '.' '{print \$1\$2}' | grep '[0-9]' || echo "0")"; \\
  [ "\$py_version" -gt "310" ] && pip_opts="--break-system-packages " || pip_opts=""; \\
  if [ -n "\$pip_bin" ];then \$pip_bin -m pip install $GEN_DOCKER_SPECIFY_CERT_BOT_PLUGINS \$pip_opts || true;fi; \\
  [ -f "\$BASH_CMD" ] && rm -rf "/bin/sh" && ln -sf "\$BASH_CMD" "/bin/sh" || true; \\
  [ -n "\$BASH_CMD" ] && sed -i 's|root:x:.*|root:x:0:0:root:/root:\$BASH_CMD|g' "/etc/passwd" || true; \\
  [ -f "/usr/share/zoneinfo/\${TZ}" ] && ln -sf "/usr/share/zoneinfo/\${TZ}" "/etc/localtime" || true; \\
  [ -n "\$PHP_BIN" ] && [ -z "\$(command -v php 2>/dev/null)" ] && ln -sf "\$PHP_BIN" "/usr/bin/php" 2>/dev/null || true; \\
  [ -n "\$PHP_FPM" ] && [ -z "\$(command -v php-fpm 2>/dev/null)" ] && ln -sf "\$PHP_FPM" "/usr/bin/php-fpm" 2>/dev/null || true; \\
  if [ -f "/etc/profile.d/color_prompt.sh.disabled" ]; then mv -f "/etc/profile.d/color_prompt.sh.disabled" "/etc/profile.d/color_prompt.sh";fi ; \\
  { [ -f "/etc/bash/bashrc" ] && cp -Rf "/etc/bash/bashrc" "/root/.bashrc"; } || { [ -f "/etc/bashrc" ] && cp -Rf "/etc/bashrc" "/root/.bashrc"; } || { [ -f "/etc/bash.bashrc" ] && cp -Rf "/etc/bash.bashrc" "/root/.bashrc"; } || true; \\
  if [ -z "\$(command -v "apt-get" 2>/dev/null)" ];then grep -sh -q 'alias quit' "/root/.bashrc" || printf '# Profile\n\n%s\n%s\n%s\n' '. /etc/profile' '. /root/.profile' "alias quit='exit 0 2>/dev/null'" >>"/root/.bashrc"; fi; \\
  if [ -e "/etc/php" ] && [ -d "/etc/\${PHP_VERSION}" ];then rm -Rf "/etc/php";fi; \\
  if [ -n "\${PHP_VERSION}" ] && [ -d "/etc/\${PHP_VERSION}" ];then ln -sf "/etc/\${PHP_VERSION}" "/etc/php";fi; \\
  echo ""
EOF
  }
  __init_files() {
    cat <<EOF
  set -ex; \\
  echo "Creating and editing system files "; \\
  echo ""
EOF
  }
  __setup_files() {
    cat <<EOF
  echo "Updating system files "; \\
  set -ex; \\
$(__global_setup_files)
EOF
  }
  __os_users() {
    cat <<EOF
  echo "Setting up users and scripts "; \\
  set -ex; \\
  echo ""
EOF
  }
  __users_init() {
    cat <<EOF
  echo "Running user configurations "; \\
  set -ex; \\
  echo ""
EOF
  }
  __os_settings() {
    cat <<EOF
  echo "Setting OS Settings "; \\
  set -ex; \\
  echo ""
EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __setup_pkgs() {
    cat <<EOF
  set -ex; \\
  if [ -n "\${PACK_LIST}" ];then echo "Installing packages: \$PACK_LIST"; pkmgr install \${PACK_LIST};fi; \\
  echo ""
EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __init_packages() {
    cat <<EOF
  set -ex; \\
  if [ -f "/root/docker/setup/packages" ];then echo "Running the packages script";sh "/root/docker/setup/packages";echo "Done running the packages script";fi
EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __init_scripts() {
    cat <<EOF
  set -ex; \\
  if [ -f "/root/docker/setup/init" ];then echo "Running the init script";sh "/root/docker/setup/init";echo "Done running the init script";fi; \\
  echo ""
EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __init_files() {
    cat <<EOF
  set -ex; \\
  echo ""
EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __init_custom() {
    cat <<EOF
  set -ex; \\
  if [ -f "/root/docker/setup/custom" ];then echo "Running the custom script";sh "/root/docker/setup/custom";echo "Done running the custom script";fi; \\
  echo ""
EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __init_post() {
    cat <<EOF
  set -ex; \\
  if [ -f "/root/docker/setup/post" ];then echo "Running the post script";sh "/root/docker/setup/post";echo "Done running the post script";fi; \\
  echo ""
EOF
  }
  __clean_container() {
    cat <<EOF
  echo "Deleting unneeded files"; \\
  set -ex; \\
  pkmgr clean; \\
  rm -Rf "/config" "/data"; \\
  rm -rf /etc/systemd/system/*.wants/*; \\
  rm -rf /lib/systemd/system/systemd-update-utmp*; \\
  rm -rf /lib/systemd/system/anaconda.target.wants/*; \\
  rm -rf /lib/systemd/system/local-fs.target.wants/*; \\
  rm -rf /lib/systemd/system/multi-user.target.wants/*; \\
  rm -rf /lib/systemd/system/sockets.target.wants/*udev*; \\
  rm -rf /lib/systemd/system/sockets.target.wants/*initctl*; \\
  rm -Rf /usr/share/doc/* /var/tmp/* /var/cache/*/* /root/.cache/* /usr/share/info/* /tmp/*; \\
  if [ -d "/lib/systemd/system/sysinit.target.wants" ];then cd "/lib/systemd/system/sysinit.target.wants" && rm -f \$(ls | grep -v systemd-tmpfiles-setup);fi
EOF
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __x11_setup() {
    if [ "$GEN_DOCKER_GIT_ENABLE_X11" = "yes" ]; then
      cat <<EOF
  echo "Creating and configuring the X11 user"
  set -ex; \\
  useradd --shell /bin/bash --create-home --home-dir /home/x11user x11user && \\
  usermod -a -G audio,video,sudo,tty,dialout,cdrom,floppy,audio,dip,video,plugdev x11user && \\
  echo "x11user ALL=(ALL) NOPASSWD: ALL" >"/etc/sudoers.d/x11user"; \\
  sudo -u x11user setup-$name.sh && \\
  chown -Rf x11user:x11user "/home/x11user"; \\
  echo ""
EOF
    else
      cat <<EOF
  echo ""
EOF
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ "$name" = "alpine" ]; then
    GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE:-$ENV_IMAGE_NAME}"
    GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE:-alpine}"
    ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE"
    [ "$name" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
    GEN_DOCKER_FILE_PKGS_ALPINE="bash,bash-completion,git,curl,wget,sudo,unzip,"
    GEN_DOCKER_FILE_PKGS_ALPINE+="iproute2,ssmtp,openssl,jq,ca-certificates,tzdata,mailcap,ncurses,util-linux,"
    GEN_DOCKER_FILE_PKGS_ALPINE+="pciutils,usbutils,coreutils,binutils,findutils,grep,rsync,zip,certbot,tini,"
    GEN_DOCKER_FILE_PKGS_ALPINE+="certbot,py3-pip,procps,net-tools,coreutils,sed,gawk,grep,attr,findutils,readline,"
    GEN_DOCKER_FILE_PKGS_ALPINE+="lsof,less,curl,shadow"
    __init_files() {
      cat <<EOF
  echo "Creating and editing system files "; \\
  set -ex; \\
  mkdir -p "\${DEFAULT_DATA_DIR}" "\${DEFAULT_CONF_DIR}" "\${DEFAULT_TEMPLATE_DIR}" "/root/docker/setup" "/etc/profile.d"; \\
  touch "/etc/profile" "/root/.profile"; \\
  rm -Rf "/etc/apk/repositories"; \\
  [ "\$DISTRO_VERSION" = "latest" ] && DISTRO_VERSION="edge";[ "\$DISTRO_VERSION" = "edge" ] || DISTRO_VERSION="v\${DISTRO_VERSION}"; \\
  echo "http://dl-cdn.alpinelinux.org/alpine/\${DISTRO_VERSION}/main" >>"/etc/apk/repositories"; \\
  echo "http://dl-cdn.alpinelinux.org/alpine/\${DISTRO_VERSION}/community" >>"/etc/apk/repositories"; \\
  if [ "\${DISTRO_VERSION}" = "edge" ]; then echo "http://dl-cdn.alpinelinux.org/alpine/\${DISTRO_VERSION}/testing" >>"/etc/apk/repositories";fi; \\
  echo ""
EOF
    }
    __setup_files() {
      cat <<EOF
  echo "Updating system files "; \\
  set -ex; \\
$(__global_setup_files)
EOF
    }
    __os_users() {
      cat <<EOF
  echo "Setting up users and scripts "; \\
  set -ex; \\
  echo ""
EOF
    }
    __users_init() {
      cat <<EOF
  echo "Running user configurations "; \\
  set -ex; \\
  echo ""
EOF
    }
    __os_settings() {
      cat <<EOF
  echo "Setting OS Settings "; \\
  set -ex; \\
  echo ""
EOF
    }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  elif [ "$name" = "almalinux" ] || [ "$name" = "rhel" ]; then
    GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL:-almalinux}"
    GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${ENV_IMAGE_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL}"
    ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL"
    [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
    GEN_DOCKER_FILE_PKGS_RHEL="bash,bash-completion,git,curl,wget,sudo,unzip,tini,iproute,net-tools,"
    GEN_DOCKER_FILE_PKGS_RHEL+="glibc-langpack-en,pinentry,nail,postfix "
    __init_files() {
      cat <<EOF
  echo "Creating and editing system files "; \\
  set -ex; \\
  mkdir -p "\${DEFAULT_DATA_DIR}" "\${DEFAULT_CONF_DIR}" "\${DEFAULT_TEMPLATE_DIR}" "/root/docker/setup" "/etc/profile.d"; \\
  touch "/etc/profile" "/root/.profile"; \\
  pkmgr update && pkmgr install epel-release; crb enable || true; \\
  echo ""
EOF
    }
    __setup_files() {
      cat <<EOF
  echo "Updating system files "; \\
  set -ex; \\
$(__global_setup_files)
EOF
    }
    __os_users() {
      cat <<EOF
  echo "Setting up users and scripts "; \\
  set -ex; \\
  echo ""
EOF
    }
    __users_init() {
      cat <<EOF
  echo "Running user configurations "; \\
  set -ex; \\
  echo ""
EOF
    }
    __os_settings() {
      cat <<EOF
  echo "Setting OS Settings "; \\
  set -ex; \\
  echo ""
EOF
    }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  elif [ "$name" = "archlinux" ]; then
    GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX:-menci/archlinuxarm}"
    GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${ENV_IMAGE_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX}"
    ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX"
    [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
    GEN_DOCKER_FILE_PKGS_ARCH="bash,bash-completion,git,curl,wget,sudo,unzip,base-devel,mailx,postfix"
    __init_files() {
      cat <<EOF
  echo "Creating and editing system files "; \\
  set -ex; \\
  mkdir -p "\${DEFAULT_DATA_DIR}" "\${DEFAULT_CONF_DIR}" "\${DEFAULT_TEMPLATE_DIR}" "/root/docker/setup" "/etc/profile.d"; \\
  mkdir -p "\${AUR_HOME}/.gnupg" "\${AUR_HOME}/build"; \\
  pkmgr install archlinux-keyring; \\
  pacman-key --init;pacman-key --populate; \\
  pkmgr update; \\
  echo ""
EOF
    }
    __setup_files() {
      cat <<EOF
  echo "Updating system files "; \\
  set -ex; \\
$(__global_setup_files)
EOF
    }
    __os_users() {
      cat <<EOF
  echo "Setting up users and scripts "; \\
  set -ex; \\
  if ! grep -sh -q "\${AUR_HOME}" /etc/passwd;then useradd -m -r -s /bin/bash -d "\${AUR_HOME}" "\${AUR_USER}";fi; \\
  passwd -d "\${AUR_USER}"; \\
  [ -d "/etc/sudoers.d" ] || mkdir -p "/etc/sudoers.d"; \\
  echo ''\${AUR_USER}'     ALL=(ALL) ALL' >"/etc/sudoers.d/\${AUR_USER}" && \\
  echo 'standard-resolver' >"\${AUR_HOME}/.gnupg/dirmngr.conf" && \\
  chown -Rf "\${AUR_USER}":"\${AUR_USER}" "\${AUR_HOME}"; \\
  if [ -z "\$(command -v yay 2>/dev/null)" ];then cd "\${AUR_HOME}/build" && \\
  sudo -u "\${AUR_USER}" git clone --depth 1 "https://aur.archlinux.org/yay.git" && cd yay && \\
  sudo -u "\${AUR_USER}" makepkg --noconfirm -si; \\
  fi; \\
  sudo -u "\${AUR_USER}" yay --afterclean --removemake --save && \\
  pacman -Qtdq | xargs -r pacman --noconfirm -Rcns; \\
  echo ""
EOF
    }
    __users_init() {
      cat <<EOF
  echo "Running user configurations "; \\
  set -ex; \\
  echo ""
EOF
    }
    __os_settings() {
      cat <<EOF
  echo "Setting OS Settings "; \\
  set -ex; \\
  sudo -u "\${AUR_USER}" yay -Syyu --noconfirm tini; \\
  echo ""
EOF
    }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  elif [ "$name" = "debian" ]; then
    GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN:-debian}"
    GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${ENV_IMAGE_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN}"
    ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN"
    [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
    GEN_DOCKER_FILE_PKGS_DEBIAN="bash,bash-completion,git,curl,wget,sudo,unzip,tini,xz-utils,iproute2 "
    GEN_DOCKER_FILE_PKGS_DEBIAN+="locales,procps,net-tools,bsd-mailx,postfix"
    __init_files() {
      cat <<EOF
  echo "Creating and editing system files "; \\
  set -ex; \\
  mkdir -p "\${DEFAULT_DATA_DIR}" "\${DEFAULT_CONF_DIR}" "\${DEFAULT_TEMPLATE_DIR}" "/root/docker/setup" "/etc/profile.d"; \\
  echo 'export DEBIAN_FRONTEND="'\${DEBIAN_FRONTEND}'"' >"/etc/profile.d/apt.sh" && chmod 755 "/etc/profile.d/apt.sh"; \\
  pkmgr update && pkmgr install locales && echo "\$LANG UTF-8" >"/etc/locale.gen"; \\
  dpkg-reconfigure --frontend=noninteractive locales;update-locale LANG=\$LANG; \\
  echo ""
EOF
    }
    __setup_files() {
      cat <<EOF
  echo "Updating system files "; \\
  set -ex; \\
$(__global_setup_files); \\
  update-alternatives --install /bin/sh sh /bin/bash 1
EOF
    }
    __os_users() {
      cat <<EOF
  echo "Setting up users and scripts "; \\
  set -ex; \\
  echo ""
EOF
    }
    __users_init() {
      cat <<EOF
  echo "Running user configurations "; \\
  set -ex; \\
  echo ""
EOF
    }
    __os_settings() {
      cat <<EOF
  echo "Setting OS Settings "; \\
  set -ex; \\
  echo ""
EOF
    }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  elif [ "$name" = "ubuntu" ]; then
    GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU:-ubuntu}"
    GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${ENV_IMAGE_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU}"
    ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU"
    [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
    GEN_DOCKER_FILE_PKGS_UBUNTU="bash,bash-completion,git,curl,wget,sudo,unzip,tini,xz-utils,iproute2 "
    GEN_DOCKER_FILE_PKGS_UBUNTU+="locales,procps,net-tools,bsd-mailx,postfix"
    __init_files() {
      cat <<EOF
  echo "Creating and editing system files "; \\
  set -ex; \\
  mkdir -p "\${DEFAULT_DATA_DIR}" "\${DEFAULT_CONF_DIR}" "\${DEFAULT_TEMPLATE_DIR}" "/root/docker/setup" "/etc/profile.d"; \\
  echo 'export DEBIAN_FRONTEND="'\${DEBIAN_FRONTEND}'"' >"/etc/profile.d/apt.sh" && chmod 755 "/etc/profile.d/apt.sh"; \\
  pkmgr update && pkmgr install locales && echo "\$LANG UTF-8" >"/etc/locale.gen"; \\
  dpkg-reconfigure --frontend=noninteractive locales;update-locale LANG=\$LANG; \\
  echo ""
EOF
    }
    __setup_files() {
      cat <<EOF
  echo "Updating system files "; \\
  set -ex; \\
$(__global_setup_files); \\
  update-alternatives --install /bin/sh sh /bin/bash 1
EOF
    }
    __os_users() {
      cat <<EOF
  echo "Setting up users and scripts "; \\
  set -ex; \\
  echo ""
EOF
    }
    __users_init() {
      cat <<EOF
  echo "Running user configurations "; \\
  set -ex; \\
  echo ""
EOF
    }
    __os_settings() {
      cat <<EOF
  echo "Setting OS Settings "; \\
  set -ex; \\
  echo ""
EOF
    }
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_variables() {
  # Set variables from .env.scripts file
  [ -n "$GEN_DOCKERFILE_DEFAULT_IMAGE" ] || GEN_DOCKERFILE_DEFAULT_IMAGE="casjaysdev/alpine"
  GEN_DOCKERFILE_SET_TAG="${ENV_ADD_TAGS:-${GEN_DOCKERFILE_SET_TAG:-}}"
  GEN_DOCKERFILE_SET_VERSION="${ENV_IMAGE_TAG:-$GEN_DOCKERFILE_SET_VERSION}"
  GEN_DOCKERFILE_SET_REPO="${ENV_IMAGE_REPO:-${GEN_DOCKERFILE_SET_REPO:-$GEN_DOCKERFILE_DEFAULT_IMAGE}}"
  GEN_DOCKERFILE_TEMPLATE="${ENV_USE_TEMPLATE:-$GEN_DOCKERFILE_SET_TEMPLATE}"
  GEN_DOCKERFILE_SET_DISTRO_NAME="${ENV_PULL_URL:-$GEN_DOCKERFILE_SET_DISTRO_NAME}"
  GEN_DOCKERFILE_SET_DISTRO_VERSION="${ENV_DISTRO_TAG:-$GEN_DOCKERFILE_SET_DISTRO_VERSION}"
  ENV_ORG_NAME="${ENV_ORG_NAME:-${organization:-$(basename -- "$(dirname "$GEN_DOCKERFILE_CWD")")}}"
  # Rewrite unset variables
  [ -n "$GEN_DOCKERFILE_SET_VERSION" ] || GEN_DOCKERFILE_SET_VERSION="latest"
  [ -n "$GEN_DOCKERFILE_SET_TAG" ] && GEN_DOCKERFILE_SET_TAG="${GEN_DOCKERFILE_SET_TAG//,/ }"
  [ -n "$GEN_DOCKERFILE_SET_DISTRO_VERSION" ] || GEN_DOCKERFILE_SET_DISTRO_VERSION='${IMAGE_VERSION}'
  [ -n "$GEN_DOCKERFILE_SET_BUILD" ] || GEN_DOCKERFILE_SET_BUILD="$(date +"$GEN_DOCKER_VERSION_FORMAT")"
  [ -n "$GEN_DOCKERFILE_SET_DISTRO_NAME" ] || GEN_DOCKERFILE_SET_DISTRO_NAME="$GEN_DOCKERFILE_SET_REPO"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__set_make_file_variables() {
  date="$(date +'%Y%m%d%H%M')"
  file="${1:-$GEN_DOCKERFILE_CWD/Dockerfile}"
  [ -n "$ENV_IMAGE_NAME" ] && name="$ENV_IMAGE_NAME" || name="${2:-$(basename -- "$GEN_DOCKERFILE_CWD")}"
  file="$(realpath "${ENV_DOCKERFILE:-$file}")"
  repo="${ENV_GIT_REPO_URL:-${3:-$GEN_DOCKERFILE_GIT_BASE/$name}}"
  GEN_DOCKERFILE_HUB_BASE="${ENV_REGISTRY_URL:-$GEN_DOCKERFILE_HUB_BASE/$name}"
  dir="${GEN_DOCKERFILE_CWD:-$(dirname "$file")}"
  version="$GEN_DOCKERFILE_SET_VERSION"
  tmpFile="$dir/init.$$"
  rootfs_dir="$dir/rootfs"
  shared_dir="$rootfs_dir/usr/local/share"
  template_dir="$shared_dir/template-files"
  init_dir="$rootfs_dir/usr/local/etc/docker/init.d"
  GEN_DOCKERFILE_TEMPLATE="${GEN_DOCKERFILE_TEMPLATE:-alpine}"
  IMAGE_REPO="${GEN_DOCKERFILE_HUB_BASE//http*:\/\//}"
  organization="${ENV_ORG_NAME:-$(basename -- "$(dirname "$GEN_DOCKERFILE_CWD")")}"
  make_directories="$dir $rootfs_dir $shared_dir $template_dir/config $template_dir/data $template_dir/defaults"
  file_version="$(echo "$version" | grep -v 'latest' | sed 's|[a-zA-Z]||g;s|^ ||g' | awk '{print $1}' | sed 's| ||g' | grep '[0-9]')"
  is_file_versioned="$(echo "$file" | grep -q "$file_version" || echo 'false')"
  GEN_DOCKERFILE_GIT_BASE="$repo"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# User defined variables/import external variables

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Application Folders
GEN_DOCKERFILE_CONFIG_FILE="${GEN_DOCKERFILE_CONFIG_FILE:-settings.conf}"
GEN_DOCKERFILE_CONFIG_DIR="${GEN_DOCKERFILE_CONFIG_DIR:-$HOME/.config/myscripts/gen-dockerfile}"
GEN_DOCKERFILE_CONFIG_BACKUP_DIR="${GEN_DOCKERFILE_CONFIG_BACKUP_DIR:-$HOME/.local/share/myscripts/gen-dockerfile/backups}"
GEN_DOCKERFILE_LOG_DIR="${GEN_DOCKERFILE_LOG_DIR:-$HOME/.local/log/gen-dockerfile}"
GEN_DOCKERFILE_TEMP_DIR="${GEN_DOCKERFILE_TEMP_DIR:-$HOME/.local/tmp/system_scripts/gen-dockerfile}"
GEN_DOCKERFILE_CACHE_DIR="${GEN_DOCKERFILE_CACHE_DIR:-$HOME/.cache/gen-dockerfile}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Color Settings
GEN_DOCKERFILE_OUTPUT_COLOR_1="${GEN_DOCKERFILE_OUTPUT_COLOR_1:-33}"
GEN_DOCKERFILE_OUTPUT_COLOR_2="${GEN_DOCKERFILE_OUTPUT_COLOR_2:-5}"
GEN_DOCKERFILE_OUTPUT_COLOR_GOOD="${GEN_DOCKERFILE_OUTPUT_COLOR_GOOD:-2}"
GEN_DOCKERFILE_OUTPUT_COLOR_ERROR="${GEN_DOCKERFILE_OUTPUT_COLOR_ERROR:-1}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Notification Settings
GEN_DOCKERFILE_NOTIFY_ENABLED="${GEN_DOCKERFILE_NOTIFY_ENABLED:-yes}"
GEN_DOCKERFILE_GOOD_NAME="${GEN_DOCKERFILE_GOOD_NAME:-Great:}"
GEN_DOCKERFILE_ERROR_NAME="${GEN_DOCKERFILE_ERROR_NAME:-Error:}"
GEN_DOCKERFILE_GOOD_MESSAGE="${GEN_DOCKERFILE_GOOD_MESSAGE:-No errors reported}"
GEN_DOCKERFILE_ERROR_MESSAGE="${GEN_DOCKERFILE_ERROR_MESSAGE:-Errors were reported}"
GEN_DOCKERFILE_NOTIFY_CLIENT_NAME="${GEN_DOCKERFILE_NOTIFY_CLIENT_NAME:-$APPNAME}"
GEN_DOCKERFILE_NOTIFY_CLIENT_ICON="${GEN_DOCKERFILE_NOTIFY_CLIENT_ICON:-notification-new}"
GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY="${GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY:-normal}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Additional Variables
GEN_DOCKERFILE_SET_TAG=""
GEN_DOCKERFILE_SET_BUILD=""
GEN_DOCKERFILE_SET_VERSION=""
GEN_DOCKERFILE_SILENT="${GEN_DOCKERFILE_SILENT:-true}"
GEN_DOCKER_FILE_OPTS="${GEN_DOCKER_FILE_OPTS:-set -ex;}"
GEN_DOCKER_GIT_AUTO_INIT="${GEN_DOCKER_GIT_AUTO_INIT:-no}"
GEN_DOCKERFILE_DEFAULT_IMAGE="${GEN_DOCKERFILE_DEFAULT_IMAGE:-}"
GEN_DOCKER_VERSION_FORMAT="${GEN_DOCKER_VERSION_FORMAT:-${VERSION_DATE_FORMAT:-%Y%m%d%H%M-git}}"
GEN_DOCKERFILE_GIT_BASE="${GEN_DOCKERFILE_GIT_BASE:-https://github.com/casjaysdevdocker}"
GEN_DOCKERFILE_HUB_BASE="${GEN_DOCKERFILE_HUB_BASE:-https://hub.docker.com/r/casjaysdevdocker}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL:-casjaysdev/almalinux}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE:-casjaysdev/alpine}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN:-casjaysdev/debian}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU:-casjaysdev/ubuntu}"
GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX:-casjaysdev/archlinux}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_RHEL:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ALPINE:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_DEBIAN:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_UBUNTU:-latest}"
GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_VERSION_ARCHLINUX:-latest}"
GEN_DOCKER_SPECIFY_CERT_BOT_PLUGINS="${GEN_DOCKER_SPECIFY_CERT_BOT_PLUGINS:-certbot-dns-rfc2136 certbot-dns-duckdns certbot-dns-cloudflare certbot-nginx}"
GEN_DOCKERFILE_VENDOR="${GEN_DOCKERFILE_VENDOR:-CasjaysDev}"
GEN_DOCKERFILE_AUTHOR="${GEN_DOCKERFILE_AUTHOR:-CasjaysDev}"
GEN_DOCKERFILE_MAINTAINER="${GEN_DOCKERFILE_MAINTAINER:-CasjaysDev <docker-admin@casjaysdev.pro>}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Global packages
GEN_DOCKER_FILE_PKGS_ALL="bash"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# debian - comma seperated list
GEN_DOCKER_FILE_PKGS_DEBIAN=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ubuntu - comma seperated list
GEN_DOCKER_FILE_PKGS_UBUNTU=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# almalinux - comma seperated list
GEN_DOCKER_FILE_PKGS_RHEL=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# alpine - comma seperated list
GEN_DOCKER_FILE_PKGS_ALPINE=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# archlinux - comma seperated list
GEN_DOCKER_FILE_PKGS_ARCH=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate config files
[ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ] || [ "$*" = "--config" ] || INIT_CONFIG="${INIT_CONFIG:-TRUE}" __gen_config ${SETARGS:-$@}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Import config
[ -f "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE" ] && . "$GEN_DOCKERFILE_CONFIG_DIR/$GEN_DOCKERFILE_CONFIG_FILE"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Ensure Directories exist
[ -d "$GEN_DOCKERFILE_LOG_DIR" ] || mkdir -p "$GEN_DOCKERFILE_LOG_DIR" |& __devnull
[ -d "$GEN_DOCKERFILE_TEMP_DIR" ] || mkdir -p "$GEN_DOCKERFILE_TEMP_DIR" |& __devnull
[ -d "$GEN_DOCKERFILE_CACHE_DIR" ] || mkdir -p "$GEN_DOCKERFILE_CACHE_DIR" |& __devnull
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GEN_DOCKERFILE_TEMP_FILE="${GEN_DOCKERFILE_TEMP_FILE:-$(mktemp $GEN_DOCKERFILE_TEMP_DIR/XXXXXX 2>/dev/null)}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup trap to remove temp file
trap '__trap_exit' EXIT
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup notification function
__notifications() {
  __cmd_exists notifications || return
  [ "$GEN_DOCKERFILE_NOTIFY_ENABLED" = "yes" ] || return
  [ "$SEND_NOTIFICATION" = "no" ] && return
  (
    export SCRIPT_OPTS="" _DEBUG=""
    export NOTIFY_GOOD_MESSAGE="${NOTIFY_GOOD_MESSAGE:-$GEN_DOCKERFILE_GOOD_MESSAGE}"
    export NOTIFY_ERROR_MESSAGE="${NOTIFY_ERROR_MESSAGE:-$GEN_DOCKERFILE_ERROR_MESSAGE}"
    export NOTIFY_CLIENT_ICON="${NOTIFY_CLIENT_ICON:-$GEN_DOCKERFILE_NOTIFY_CLIENT_ICON}"
    export NOTIFY_CLIENT_NAME="${NOTIFY_CLIENT_NAME:-$GEN_DOCKERFILE_NOTIFY_CLIENT_NAME}"
    export NOTIFY_CLIENT_URGENCY="${NOTIFY_CLIENT_URGENCY:-$GEN_DOCKERFILE_NOTIFY_CLIENT_URGENCY}"
    notifications "$@"
  ) |& __devnull &
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set custom actions

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Argument/Option settings
SETARGS=("$@")
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SHORTOPTS=""
SHORTOPTS+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LONGOPTS="completions:,config,debug,dir:,help,options,raw,version,silent"
LONGOPTS+=",dockerfile,startup,nogit,template:,image:,repo:,tag:,pkmgr"
LONGOPTS+=",distro-name:,distro-tag:,add-tags:,x11,init"
LONGOPTS+=",apache,nginx,mysql,postgres,php,application"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ARRAY="alpine arch debian ubuntu rhel scratch xorg web"
ARRAY+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST=""
LIST+=""
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup application options
setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -n "$APPNAME" -- "$@" 2>/dev/null)
eval set -- "${setopts[@]}" 2>/dev/null
while :; do
  case "$1" in
  --raw)
    shift 1
    export SHOW_RAW="true"
    NC=""
    RESET=""
    BLACK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    PURPLE=""
    CYAN=""
    WHITE=""
    ORANGE=""
    LIGHTRED=""
    BG_GREEN=""
    BG_RED=""
    ICON_INFO="[ info ]"
    ICON_GOOD="[ ok ]"
    ICON_WARN="[ warn ]"
    ICON_ERROR="[ error ]"
    ICON_QUESTION="[ ? ]"
    printf_column() { tee | grep '^'; }
    printf_color() { printf '%b' "$1" | tr -d '\t' | sed '/^%b$/d;s,\x1B\[ 0-9;]*[a-zA-Z],,g'; }
    ;;
  --debug)
    shift 1
    set -xo pipefail
    export SCRIPT_OPTS="--debug"
    export _DEBUG="on"
    __devnull() { tee || return 1; }
    __devnull2() { eval "$@" |& tee -p || return 1; }
    ;;
  --completions)
    if [ "$2" = "short" ]; then
      printf '%s\n' "-$SHORTOPTS" | sed 's|"||g;s|:||g;s|,|,-|g' | tr ',' '\n'
    elif [ "$2" = "long" ]; then
      printf '%s\n' "--$LONGOPTS" | sed 's|"||g;s|:||g;s|,|,--|g' | tr ',' '\n'
    elif [ "$2" = "array" ]; then
      printf '%s\n' "$ARRAY" | sed 's|"||g;s|:||g' | tr ',' '\n'
    elif [ "$2" = "list" ]; then
      printf '%s\n' "$LIST" | sed 's|"||g;s|:||g' | tr ',' '\n'
    else
      exit 1
    fi
    shift 2
    exit $?
    ;;
  --options)
    shift 1
    printf_blue "Current options for ${PROG:-$APPNAME}"
    [ -z "$SHORTOPTS" ] || __list_options "Short Options" "-${SHORTOPTS}" ',' '-' 4
    [ -z "$LONGOPTS" ] || __list_options "Long Options" "--${LONGOPTS}" ',' '--' 4
    [ -z "$ARRAY" ] || __list_options "Base Options" "${ARRAY}" ',' '' 4
    [ -z "$LIST" ] || __list_options "LIST Options" "${LIST}" ',' '' 4
    exit $?
    ;;
  --version)
    shift 1
    __version
    exit $?
    ;;
  --help)
    shift 1
    __help
    exit $?
    ;;
  --config)
    shift 1
    __gen_config
    exit $?
    ;;
  --silent)
    shift 1
    GEN_DOCKERFILE_SILENT="true"
    ;;
  --dir)
    CWD_IS_SET="TRUE"
    GEN_DOCKERFILE_CWD="$2"
    [ -d "$GEN_DOCKERFILE_CWD" ] || mkdir -p "$GEN_DOCKERFILE_CWD" |& __devnull
    shift 2
    ;;
  --init)
    GEN_DOCKER_INIT="true"
    shift 1
    ;;
  --x11)
    shift 1
    GEN_DOCKER_GIT_ENABLE_X11="yes"
    ;;
  --nogit)
    shift 1
    GEN_DOCKER_GIT_AUTO_INIT="no"
    ;;
  --startup)
    shift 1
    GEN_DOCKER_CREATE_START_SCRIPT="true"
    exit $?
    ;;
  --dockerfile)
    shift 1
    GEN_DOCKER_ONLY_DOCKERFILE="true"
    ;;
  --pkmgr)
    shift 1
    __create_pkmgr_install_script
    exit
    ;;
  --template)
    GEN_DOCKERFILE_SET_TEMPLATE="$2"
    shift 2
    ;;
  --repo)
    GEN_DOCKERFILE_SET_REPO="$2"
    shift 2
    ;;
  --image)
    GEN_DOCKERFILE_DEFAULT_IMAGE="$2"
    shift 2
    ;;
  --tag)
    GEN_DOCKERFILE_SET_VERSION="$2"
    shift 2
    ;;
  --add-tags)
    GEN_DOCKERFILE_SET_TAG+="$2 "
    shift 2
    ;;
  --distro-name)
    GEN_DOCKERFILE_SET_DISTRO_NAME="$2"
    shift 2
    ;;
  --distro-tag)
    GEN_DOCKERFILE_SET_DISTRO_VERSION="$2"
    shift 2
    ;;
  --application)
    file="https://github.com/templatemgr/$2/raw/main/install.sh"
    if curl -q -LSsfI "$file" &>/dev/null; then
      GEN_DOCKERFILE_CUSTOM_APPLICATIONS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"$file\")\"; \\
"
    fi
    unset file
    shift 2
    ;;
  --apache)
    shift 1
    GEN_DOCKERFILE_SET_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" apache2 apache2-ctl apache2-lua apache2-ssl apache2-ldap apache2-icons apache2-http2 \\
  apache2-error apache2-proxy apache2-brotli apache2-webdav apache2-mod-wsgi apache-mod-fcgid apache2-proxy-html \\
"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/apache2/raw/main/install.sh\")\"; \\
"
    GEN_DOCKERFILE_CUSTOM_APPLICATIONS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-cgi-bin/raw/main/install.sh\")\"; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-html-pages/raw/main/install.sh\")\"; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-error-pages/raw/main/install.sh\")\"; \\
"
    ;;
  --nginx)
    shift 1
    GEN_DOCKERFILE_SET_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" nginx nginx-mod-http-brotli nginx-mod-http-cache-purge nginx-mod-http-dav-ext nginx-mod-http-echo \\
  nginx-mod-http-encrypted-session nginx-mod-http-fancyindex nginx-mod-http-geoip nginx-mod-http-geoip2 \\
  nginx-mod-http-headers-more nginx-mod-http-image-filter nginx-mod-http-js nginx-mod-http-lua nginx-mod-http-perl \\
  nginx-mod-http-redis2 nginx-mod-http-set-misc nginx-mod-http-shibboleth nginx-mod-http-untar nginx-mod-http-upload \\
  nginx-mod-http-upload-progress nginx-mod-http-upstream-fair nginx-mod-http-xslt-filter nginx-mod-http-zip \\
"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/nginx/raw/main/install.sh\")\"; \\
"
    GEN_DOCKERFILE_CUSTOM_APPLICATIONS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-html-pages/raw/main/install.sh\")\"; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/casjay-templates/default-error-pages/raw/main/install.sh\")\"; \\
"
    ;;
  --mariadb | --mysql)
    shift 1
    GEN_DOCKERFILE_SET_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" mariadb-server-utils mariadb-client mariadb pwgen \\
"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/mariadb/raw/main/install.sh\")\"; \\
"
    ;;
  --postgres)
    shift 1
    GEN_DOCKERFILE_SET_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" pwgen \${POSTGRESQL_VERSION} \${POSTGRESQL_VERSION}-client \${POSTGRESQL_VERSION}-contrib \${POSTGRESQL_VERSION}-jit \\
"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=$PHP_VERSION NODE_VERSION=$NODE_VERSION NODE_MANAGER=$NODE_MANAGER; \\
  bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/postgres/raw/main/install.sh\")\"; \\
"
    ;;
  --php)
    shift 1
    GEN_DOCKERFILE_SET_TEMPLATE="alpine"
    GEN_DOCKER_FILE_PKGS_ALL+=" composer \${PHP_VERSION}-bcmath \${PHP_VERSION}-bz2 \${PHP_VERSION}-calendar \${PHP_VERSION}-cgi \${PHP_VERSION}-common \\
  \${PHP_VERSION}-ctype \${PHP_VERSION}-curl \${PHP_VERSION}-dba \${PHP_VERSION}-dev \${PHP_VERSION}-doc \${PHP_VERSION}-dom \\
  \${PHP_VERSION}-embed \${PHP_VERSION}-enchant \${PHP_VERSION}-exif \${PHP_VERSION}-ffi \${PHP_VERSION}-fileinfo \${PHP_VERSION}-fpm \\
  \${PHP_VERSION}-ftp \${PHP_VERSION}-gd \${PHP_VERSION}-gettext \${PHP_VERSION}-gmp \${PHP_VERSION}-iconv \${PHP_VERSION}-imap \${PHP_VERSION}-intl \\
  \${PHP_VERSION}-ldap \${PHP_VERSION}-litespeed \${PHP_VERSION}-mbstring \${PHP_VERSION}-mysqli \${PHP_VERSION}-mysqlnd \${PHP_VERSION}-odbc \\
  \${PHP_VERSION}-opcache \${PHP_VERSION}-openssl \${PHP_VERSION}-pcntl \${PHP_VERSION}-pdo \${PHP_VERSION}-pdo_dblib \${PHP_VERSION}-pdo_mysql \\
  \${PHP_VERSION}-pdo_odbc \${PHP_VERSION}-pdo_pgsql \${PHP_VERSION}-pdo_sqlite \${PHP_VERSION}-pear \${PHP_VERSION}-pgsql \${PHP_VERSION}-phar \\
  \${PHP_VERSION}-phpdbg \${PHP_VERSION}-posix \${PHP_VERSION}-pspell \${PHP_VERSION}-session \${PHP_VERSION}-shmop \${PHP_VERSION}-simplexml \\
  \${PHP_VERSION}-snmp \${PHP_VERSION}-soap \${PHP_VERSION}-sockets \${PHP_VERSION}-sodium \${PHP_VERSION}-sqlite3 \${PHP_VERSION}-sysvmsg \\
  \${PHP_VERSION}-sysvsem \${PHP_VERSION}-sysvshm \${PHP_VERSION}-tidy \${PHP_VERSION}-tokenizer \${PHP_VERSION}-xml \${PHP_VERSION}-xmlreader \\
  \${PHP_VERSION}-xmlwriter \${PHP_VERSION}-xsl \${PHP_VERSION}-zip \${PHP_VERSION}-pecl-memcached \${PHP_VERSION}-pecl-mcrypt \\
  \${PHP_VERSION}-pecl-mongodb \${PHP_VERSION}-pecl-redis \\
"
    GEN_DOCKERFILE_CUSTOM_COMMANDS+="export PHP_VERSION=\$PHP_VERSION NODE_VERSION=\$NODE_VERSION NODE_MANAGER=\$NODE_MANAGER; \\
  ;bash -c \"\$(curl -q -LSsf \"https://github.com/templatemgr/php/raw/main/install.sh\")\"; \\
"
    ;;
  --)
    shift 1
    break
    ;;
  esac
done
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get directory from args
# set -- "$@"
# for arg in "$@"; do
# if [ -d "$arg" ]; then
# GEN_DOCKERFILE_CWD="$arg" && shift 1 && SET_NEW_ARGS=("$@") && break
# elif [ -f "$arg" ]; then
# GEN_DOCKERFILE_CWD="$(dirname "$arg" 2>/dev/null)" && shift 1 && SET_NEW_ARGS=("$@") && break
# else
# SET_NEW_ARGS+=("$arg")
# fi
# done
# set -- "${SET_NEW_ARGS[@]}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set directory to first argument
[ -d "$1" ] && __is_an_option "$1" && GEN_DOCKERFILE_CWD="$1" && shift 1 || GEN_DOCKERFILE_CWD="${GEN_DOCKERFILE_CWD:-$PWD}"
GEN_DOCKERFILE_CWD="$(realpath "${GEN_DOCKERFILE_CWD:-$PWD}" 2>/dev/null)"
if [ -d "$GEN_DOCKERFILE_CWD" ] && cd "$GEN_DOCKERFILE_CWD"; then
  true
# if [ "$GEN_DOCKERFILE_SILENT" != "true" ] && [ "$CWD_SILENCE" != "true" ]; then
# printf_cyan "Setting working dir to $GEN_DOCKERFILE_CWD"
# fi
else
  printf_exit "ðŸ’” $GEN_DOCKERFILE_CWD does not exist ðŸ’”"
fi
export GEN_DOCKERFILE_CWD
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set actions based on variables
[ "$(ls -A "$GEN_DOCKERFILE_CWD/Dockerfile"* 2>/dev/null | wc -l)" -ne 0 ] && GEN_DOCKER_ONLY_DOCKERFILE="true"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Check for required applications/Network check
#requiresudo "$0" "$@" || exit 2     # exit 2 if errors
#cmd_exists --error --ask bash || exit 3 # exit 3 if not found
#am_i_online --error || exit 4           # exit 4 if no internet
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# APP Variables overrides

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Actions based on env
__set_variables
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$1" in
alpine)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="alpine"
  ;;
arch | archlinux)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="archlinux"
  ;;
debian)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="debian"
  ;;
rhel | rockylinux | almalinux | oraclelinux | redhat | centos)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="almalinux"
  ;;
ubuntu)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="ubuntu"
  ;;
xorg)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="xorg"
  ;;
web)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="web"
  ;;
scratch)
  shift 1
  GEN_DOCKERFILE_TEMPLATE="scratch"
  ;;
*)
  GEN_DOCKERFILE_TEMPLATE="${GEN_DOCKERFILE_SET_TEMPLATE:-${GEN_DOCKERFILE_TEMPLATE:-alpine}}"
  ;;
esac
if [ "$GEN_DOCKER_CREATE_START_SCRIPT" = "true" ]; then
  __create_start_script "$2"
else
  __execute_gen_dockerfile "${@:-Dockerfile}"
fi
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Set exit code
exitCode="${exitCode:-0}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit ${exitCode:-0}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ex: ts=2 sw=2 et filetype=sh
