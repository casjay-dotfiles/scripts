.\" Manpage for devenvmgr
.TH man 1 "14 October 2025" "202510141041-git" "devenvmgr"

.SH NAME
devenvmgr \- setup and manage development environments for multiple frameworks

.SH DESCRIPTION
A comprehensive command-line tool for scaffolding and managing development projects across multiple programming languages and frameworks. Provides automated project setup with best practices, configuration files, and development tools for web development, backend services, and containerized applications.

.SH SYNOPSIS
devenvmgr [options] [command] [arguments...]

.SH COMMANDS

.SS Project Types

.TP
.B html
Create a basic HTML project with CSS, JavaScript, and images directories

.TP
.B static
Start a static file server using caddy or built-in server

.TP
.B jekyll
Create a Jekyll static site project with Ruby gems

.TP
.B hugo
Create a Hugo static site project

.SS Programming Languages

.TP
.B python
Create a Python project with virtual environment (venv)

.TP
.B django
Create a Django web application with virtual environment and project structure

.TP
.B ruby
Create a Ruby project with proper structure

.TP
.B perl
Create a Perl project with proper structure

.TP
.B php
Create a basic PHP project

.TP
.B laravel
Create a Laravel PHP framework project using Composer

.SS Node.js & JavaScript

.TP
.B node
Create a Node.js project with package.json and directory structure

.TP
.B deno
Create a Deno Fresh project

.TP
.B bun
Create a Bun runtime project with package.json

.TP
.B vue
Create a Vue.js project using Vue CLI

.TP
.B react
Create a React application using create-react-app

.TP
.B express
Create an Express.js backend project with dependencies

.TP
.B mevn
Create a MongoDB, Express, Vue, Node.js full-stack project

.SS Modern JavaScript Frameworks

.TP
.B svelte
Create a Svelte project using Vite with automatic prettier and editorconfig

.TP
.B astro
Create an Astro project with automatic configuration setup

.TP
.B nextjs
Create a Next.js project with TypeScript, Tailwind CSS, and app directory structure

.TP
.B nuxt
Create a Nuxt.js project with automatic eslint and prettier configuration

.SS Configuration Generators

.TP
.B package
Generate a package.json file for Node.js projects with proper structure

.TP
.B prettier
Generate .prettierrc.json configuration file and install prettier

.TP
.B eslint
Generate .eslintrc.json configuration file with airbnb style guide

.TP
.B tsconfig
Generate tsconfig.json for TypeScript projects

.TP
.B editorconfig
Generate .editorconfig file for consistent editor settings

.TP
.B shellcheck
Generate .shellcheckrc configuration file

.SS Docker & Container Support

.TP
.B dockerfile [type]
Generate a Dockerfile for the specified type (node, python, php)
.br
Examples:
.br
  devenvmgr dockerfile node  - Node.js LTS Alpine Dockerfile
.br
  devenvmgr dockerfile python - Python 3.11 slim Dockerfile
.br
  devenvmgr dockerfile php - PHP 8.2 Apache Dockerfile

.TP
.B devcontainer [type]
Generate VSCode devcontainer configuration (node, python)
.br
Includes proper extensions, settings, and port forwarding

.TP
.B dockercompose
Generate docker-compose.yml file with app service configuration

.SS Project Management

.TP
.B import
Import an existing project from a git repository URL

.TP
.B download [template]
Download a project template from the devenvmgr repository

.TP
.B available
List all available project templates from GitHub organization

.SH OPTIONS

.TP
.B --dir <directory>
Set working directory for project operations

.TP
.B --help
Display help message with available commands and options

.TP
.B --version
Show script version information

.TP
.B --config
Generate user configuration file in ~/.config/myscripts/devenvmgr/

.TP
.B --options
Display all available command-line options

.TP
.B --debug
Enable debugging output for troubleshooting

.TP
.B --raw
Remove formatting from output for parsing

.TP
.B --silent
Suppress informational messages

.TP
.B --start <service>
Start a development server for the specified service (jekyll)

.TP
.B --list
List available templates

.TP
.B --all
Download all available templates from organization

.TP
.B --template
Use template mode when creating projects

.SH EXAMPLES

.SS HTML & Static Sites
.TP
.B devenvmgr html
Create a basic HTML project with CSS/JS/images structure

.TP
.B devenvmgr jekyll
Create a Jekyll blog with Ruby gems

.TP
.B devenvmgr hugo
Create a Hugo static site

.SS Python Projects
.TP
.B devenvmgr python
Create Python project with virtual environment

.TP
.B devenvmgr django
Create Django web application with venv and manage.py

.SS Node.js Projects
.TP
.B devenvmgr node
Create Node.js project with package.json and src/ structure

.TP
.B devenvmgr express
Create Express.js API with cors, ejs, helmet, morgan

.TP
.B devenvmgr react
Create React application using create-react-app

.SS Modern Frameworks
.TP
.B devenvmgr svelte
Create Svelte project with Vite, prettier, and editorconfig

.TP
.B devenvmgr astro
Create Astro project with automatic configuration

.TP
.B devenvmgr nextjs
Create Next.js project with TypeScript and Tailwind CSS

.TP
.B devenvmgr nuxt
Create Nuxt.js project with eslint and prettier

.TP
.B devenvmgr bun
Create Bun runtime project

.SS Docker & Containers
.TP
.B devenvmgr dockerfile node
Generate Node.js Dockerfile with LTS Alpine base

.TP
.B devenvmgr devcontainer python
Generate Python devcontainer with VSCode extensions

.TP
.B devenvmgr dockercompose
Generate docker-compose.yml for application

.SS Configuration Files
.TP
.B devenvmgr prettier
Generate .prettierrc.json and install prettier

.TP
.B devenvmgr eslint
Generate .eslintrc.json with airbnb style guide

.TP
.B devenvmgr tsconfig
Generate tsconfig.json for TypeScript

.TP
.B devenvmgr editorconfig
Generate .editorconfig for consistent editor settings

.SS Directory Specification
.TP
.B devenvmgr --dir /path/to/project node
Create Node.js project in specified directory

.TP
.B devenvmgr --dir ~/projects/myapp nextjs
Create Next.js project in ~/projects/myapp

.SS Project Import
.TP
.B devenvmgr import
Import project from git repository (prompts for URL)

.TP
.B devenvmgr download express-cors-api
Download template from devenvmgr organization

.SH FRAMEWORK FEATURES

.SS Svelte (via Vite)
- Vite build tool for fast development
- Automatic prettier configuration
- EditorConfig for consistent formatting
- Sample file detection and copying

.SS Astro
- Modern static site generator
- Component-based architecture
- Automatic prettier and editorconfig setup
- npm package management

.SS Next.js
- TypeScript enabled by default
- Tailwind CSS pre-configured
- App directory structure (React Server Components)
- src-dir layout
- Custom import alias (@/*)
- ESLint, Prettier, EditorConfig included

.SS Nuxt
- Vue.js framework for production
- Automatic routing
- ESLint and Prettier pre-configured
- EditorConfig for team consistency
- nuxi initialization

.SS Bun
- Fast JavaScript runtime and package manager
- Drop-in replacement for Node.js
- Package.json generation
- Prettier and EditorConfig setup

.SH DOCKER FEATURES

.SS Dockerfile Generation
Supports three project types with optimized Dockerfiles:

.B Node.js (node, nodejs)
- Base: node:lts-alpine
- Working directory: /app
- Production dependencies only (npm ci)
- Port: 3000
- CMD: npm start

.B Python
- Base: python:3.11-slim
- Working directory: /app
- Requirements.txt installation
- Port: 8000
- CMD: python app.py

.B PHP
- Base: php:8.2-apache
- Working directory: /var/www/html
- Proper permissions (www-data)
- Port: 80

.SS Devcontainer Configuration
VSCode Remote Containers support:

.B Node.js
- Image: microsoft devcontainers/javascript-node:lts
- Extensions: ESLint, Prettier, TypeScript
- Format on save enabled
- Port forwarding: 3000
- Auto npm install

.B Python
- Image: microsoft devcontainers/python:3.11
- Extensions: Python, Pylance, Black formatter
- Linting enabled (pylint)
- Port forwarding: 8000
- Auto pip install

.SS Docker Compose
- Version 3.8 specification
- App service with build context
- Port mapping (3000:3000)
- Volume mounting with node_modules exclusion
- Development environment variables
- Restart policy: unless-stopped

.SH AUTOMATIC FEATURES

All project types include:
- Git repository initialization
- Sample file detection and copying (.env.sample, config.example.js)
- Automatic .gitignore generation
- Editor launching (VSCode, vim, tmux, etc.)
- Node version manager support (fnm)
- Proper directory structure creation

Configuration files generated where appropriate:
- .prettierrc.json (code formatting)
- .eslintrc.json (linting rules)
- .editorconfig (editor settings)
- tsconfig.json (TypeScript config)
- .shellcheckrc (shell script linting)

.SH CONFIGURATION

.TP
.B Configuration Directory
~/.config/myscripts/devenvmgr/

.TP
.B Settings File
~/.config/myscripts/devenvmgr/settings.conf

.TP
.B Log Directory
~/.local/log/devenvmgr/

.TP
.B Cache Directory
~/.cache/devenvmgr/

.TP
.B Templates Directory
~/.local/share/CasjaysDev/scripts/templates/

.SH FILES

.TP
.I ~/.config/myscripts/devenvmgr/settings.conf
User configuration file with customizable options

.TP
.I ~/.local/log/devenvmgr/
Log files for project operations

.TP
.I ~/.cache/devenvmgr/
Cached data and temporary files

.SH ENVIRONMENT VARIABLES

.TP
.B DEVENVMGR_DEFAULT_GITHUB_ORG
Default GitHub organization for templates (default: devenvmgr)

.TP
.B DEVENVMGR_BASEDIR
Base directory for new projects (default: ~/.local/share/devenvmgr)

.TP
.B DEVENVMGR_GIT_PROJECT_DIR
Directory for git projects (default: ~/Projects/devenvmgr)

.TP
.B DEVENVMGR_TEMPLATESDIR
Template directory location (default: /usr/local/share/CasjaysDev/scripts/templates)

.TP
.B DEVENVMGR_COMMAND
Preferred GUI editor command (code, code-insiders, atom, etc.)

.TP
.B DEVENVMGR_COMMAND_TERM
Preferred terminal editor (default: vim)

.TP
.B DEVENVMGR_FILEMANAGER
File manager command for GUI mode

.TP
.B DEVENVMGR_TMUX_CMD
Tmux command (default: tmux)

.TP
.B DEVENVMGR_TMUX_CONF
Tmux configuration file (default: ~/.config/tmux/dev/tmux.conf)

.TP
.B DEVENVMGR_SCREEN_CMD
Screen command (default: screen)

.TP
.B DEVENVMGR_SCREEN_CONF
Screen configuration file (default: ~/.config/screen/dev/singlerc)

.SH NOTES

devenvmgr automatically detects and configures:
- Node version managers (fnm)
- Git user information for package.json
- Display environment (GUI vs terminal)
- Editor preferences (VSCode, vim, tmux, screen)

When creating Node.js projects, devenvmgr will:
- Generate proper package.json with author information
- Create src/ directory structure (api, lib, views, controllers, routes, middlewares)
- Create public/ directories (images, css, js)
- Install and update npm dependencies
- Configure prettier, eslint, and editorconfig

Docker features enable:
- Containerized development environments
- Consistent builds across teams
- VSCode Remote Containers support
- Production-ready Dockerfile templates
- Docker Compose orchestration

.SH WORKFLOW EXAMPLES

.TP
.B Full Stack Development
devenvmgr mevn
.br
# Creates MongoDB, Express, Vue, Node.js stack

.TP
.B Modern React Development
devenvmgr nextjs
.br
# TypeScript + Tailwind + App Router

.TP
.B Container-Ready Python App
devenvmgr python && devenvmgr dockerfile python && devenvmgr dockercompose
.br
# Python project with Docker support

.TP
.B VSCode Remote Development
devenvmgr node && devenvmgr devcontainer node
.br
# Node project with devcontainer

.SH SUPPORTED PACKAGE MANAGERS

- npm (Node.js)
- pip (Python)
- gem (Ruby)
- composer (PHP)
- bun (Bun runtime)

.SH REQUIREMENTS

.TP
.B Core Requirements
- bash (shell interpreter)
- git (version control)
- curl (HTTP requests)

.TP
.B Optional Requirements
- node/npm (for Node.js projects)
- python3/pip (for Python projects)
- ruby/gem (for Ruby/Jekyll projects)
- php/composer (for PHP/Laravel projects)
- docker (for container support)
- bun (for Bun projects)

.SH LICENSE
WTFPL

.SH BUGS
No known bugs.

.SH REPORTING BUGS
https://github.com/casjay-dotfiles/scripts/issues

.SH SEE ALSO
git(1), npm(1), docker(1), node(1), python(1)

.SH AUTHOR
Currently maintained by Jason Hempstead <jason@casjaysdev.pro>
