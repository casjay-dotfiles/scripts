.\" Manpage for gitcommit
.TH man 1 "10 October 2025" "202510101240-git" "gitcommit"

.SH NAME
gitcommit \- Self-contained Git repository commit management tool

.SH DESCRIPTION
A powerful, self-contained command-line tool for managing Git commits with intelligent file tracking, automated commit messages, changelog generation, and version management. Includes support for conventional commits, emoji commits, and custom commit workflows without any external dependencies.

.SH SYNOPSIS
gitcommit [options] [directory] [commands] [message]

.SH COMMIT COMMANDS
.TP
.B all
Commit all files (staged and unstaged)
.TP
.B files
Commit files based on git status (interactive selection)
.TP
.B modified
Commit only modified files
.TP
.B updated
Commit only updated files
.TP
.B deleted
Commit only deleted files
.TP
.B added
Commit only added/new files
.TP
.B renamed
Commit only renamed files
.TP
.B changed
Commit only changed files (modified + updated)
.TP
.B amend
Amend the previous commit with new changes

.SH SEMANTIC COMMIT TYPES
.TP
.B new
New features or functionality
.TP
.B improved
Improvements to existing features
.TP
.B fixes
Bug fixes and error corrections
.TP
.B release
New release version
.TP
.B deploy
Deployment-related changes
.TP
.B docs
Documentation updates
.TP
.B test
Test-related changes
.TP
.B breaking
Breaking changes that affect compatibility
.TP
.B refactor
Code refactoring without functionality changes
.TP
.B performance
Performance improvements
.TP
.B permissions
Permission and access control fixes
.TP
.B bugs
Multiple bug fixes

.SH PROJECT TYPE COMMITS
.TP
.B docker
Docker project changes
.TP
.B node
NodeJS/JavaScript project changes
.TP
.B ruby
Ruby project changes
.TP
.B php
PHP project changes
.TP
.B perl
Perl project changes
.TP
.B python
Python project changes

.SH REPOSITORY TYPE COMMITS
.TP
.B scratchpad
Scratchpad repository updates
.TP
.B todo
TODO list repository updates
.TP
.B notes
Notes repository updates
.TP
.B blog
Blog repository updates
.TP
.B recipe
Recipe repository updates

.SH REPOSITORY MANAGEMENT COMMANDS
.TP
.B init
Initialize a new Git repository
.TP
.B setup
Initialize and configure a new Git repository
.TP
.B reset
Reset the Git repository to clean state
.TP
.B status
Show Git repository status
.TP
.B log
Show Git commit log
.TP
.B search <query>
Search through commit history for specific terms
.TP
.B push
Push committed changes to remote repository
.TP
.B branch
Create a new branch
.TP
.B version
Bump version number and create version commit
.TP
.B tag
Create a Git tag for releases
.TP
.B tar
Create a tar archive release

.SH SPECIAL COMMIT COMMANDS
.TP
.B emojify
Create an emoji-based commit message
.TP
.B random
Generate a random commit message
.TP
.B custom
Specify a completely custom commit message
.TP
.B alot
Quick commit with "Updated a lot of files" message (lazy option)

.SH OPTIONS
.TP
.B \-\-message <message>
Specify a custom commit message directly
.TP
.B \-\-amend
Amend the previous commit
.TP
.B \-\-force
Force push changes to remote (overwrites remote history - use with caution)
.TP
.B \-\-dir <directory>
Set the working directory for git operations
.TP
.B \-\-help
Display comprehensive help message
.TP
.B \-\-version
Display current version information
.TP
.B \-\-config
Generate user configuration file
.TP
.B \-\-options
Show all available options
.TP
.B \-\-debug
Enable debugging output
.TP
.B \-\-raw
Remove all formatting and colors from output

.SH EXAMPLES
.TP
.B gitcommit all
Commit all changes with auto-generated message
.TP
.B gitcommit modified "Updated configuration files"
Commit only modified files with custom message
.TP
.B gitcommit new
Commit with "new feature" semantic message
.TP
.B gitcommit fixes
Commit bug fixes with appropriate message
.TP
.B gitcommit --dir /path/to/repo status
Show status of a different repository
.TP
.B gitcommit --message "Custom commit message"
Create commit with specific message
.TP
.B gitcommit amend
Amend the previous commit
.TP
.B gitcommit push
Commit and push changes to remote
.TP
.B gitcommit search "bug fix"
Search commit history for "bug fix"
.TP
.B gitcommit version
Bump version and create version commit
.TP
.B gitcommit tag
Create a release tag
.TP
.B gitcommit refactor
Commit refactoring changes

.SH COMMIT MESSAGE FILES
gitcommit supports reading commit messages from special files:
.TP
.B .git/COMMIT_MESS
Place your commit message in this file, and gitcommit will use it automatically. The file is automatically deleted after successful commit for all command types (all, files, modified, etc.). This enables integration with AI assistants and automated workflows.
.TP
.B Format
First line: Short commit message (summary)
.br
Following lines: Detailed commit message (optional)
.TP
.B Auto-Deletion
The file is removed only after successful commits and only if it exists at the default location (.git/COMMIT_MESS). Failed commits preserve the file for retry.

.SH CONFIGURATION
.TP
.B Default Project Directory
Uses ~/Projects for project repositories
.TP
.B Changelog Integration
Automatically updates CHANGELOG.md when present
.TP
.B No Push Mode
Create .no_push file in repository root to disable automatic pushing
.TP
.B Commit Signing
Respects Git's commit.gpgsign configuration

.SH FILES
.TP
.I ~/.config/myscripts/gitcommit/settings.conf
User configuration file with defaults and preferences
.TP
.I ~/.local/log/gitcommit/
Log directory for commit operations
.TP
.I .git/COMMIT_MESS
Repository-specific commit message file (auto-deleted after use)
.TP
.I .git/COMMIT_EDITMSG
Git's default commit message editor file
.TP
.I .no_push
Marker file to disable automatic pushing

.SH ENVIRONMENT VARIABLES
.TP
.B GITCOMMIT_NO_CONFIRM
Skip confirmation prompts (default: true)
.TP
.B GITCOMMIT_PROJECT_DIR
Default project directory location
.TP
.B GITCOMMIT_CHANGELOG_FILE_NAME
Name of changelog file to update (default: CHANGELOG.md)
.TP
.B GITCOMMIT_ROOT_DIR
Current Git repository root directory

.SH FEATURES
.TP
.B Self-Contained
No external function dependencies - fully portable single-file script
.TP
.B Intelligent File Tracking
Automatically detects and categorizes changed files by type
.TP
.B Semantic Commits
Supports conventional commit patterns and semantic versioning
.TP
.B Changelog Integration
Automatically updates changelog files when present
.TP
.B Version Management
Automated version bumping and tagging
.TP
.B Emoji Support
Optional emoji-based commit messages
.TP
.B Search Capability
Search through commit history efficiently
.TP
.B Multi-Repository
Manage commits across multiple repositories with --dir option
.TP
.B Message Persistence
Read commit messages from .git/COMMIT_MESS file
.TP
.B Git Signing
Full support for GPG commit signing

.SH WORKFLOW INTEGRATION
gitcommit integrates seamlessly with various Git workflows:
.TP
.B Feature Branch Workflow
Use 'gitcommit branch' to create feature branches
.TP
.B Conventional Commits
Supports semantic commit types (feat, fix, docs, etc.)
.TP
.B CI/CD Integration
Works with automated deployment pipelines
.TP
.B Changelog Generation
Automatically updates CHANGELOG.md files

.SH SECURITY CONSIDERATIONS
.TP
.B No External Dependencies
Self-contained script eliminates supply chain vulnerabilities
.TP
.B GPG Signing Support
Respects Git's commit signing configuration
.TP
.B Safe Force Push
Warns before force pushing to prevent data loss
.TP
.B Permission Handling
Proper file permissions for config and credential files

.SH REQUIREMENTS
.TP
.B Git
Git version control system must be installed
.TP
.B Bash
Bash shell version 4.0 or higher

.SH NOTES
gitcommit is a fully self-contained script with all functions inlined, making it highly portable and independent of external function libraries. It has been refactored to remove all external dependencies while maintaining full functionality.

The script supports the .git/COMMIT_MESS file pattern for integration with AI assistants and automated commit workflows.

.SH LICENSE
WTFPL

.SH BUGS
No known bugs.

.SH REPORTING BUGS
https://github.com/casjay-dotfiles/issues

.SH AUTHOR
Currently maintained by Jason Hempstead <jason@casjaysdev.pro>

.SH SEE ALSO
git(1), git-commit(1), git-status(1), git-log(1)
