.\" Manpage for tmux-new
.TH man 1 "10 October 2025" "202409241800-git" "tmux-new"

.SH NAME
tmux-new \- Launch and manage tmux sessions with predefined configurations

.SH DESCRIPTION
A comprehensive command-line tool for creating, managing, and launching tmux sessions with predefined window layouts and configurations. Provides session management, nested tmux support, development environments, and automated session restoration.

.SH SYNOPSIS
tmux-new [options] [command] [arguments...]

.SH SESSION MANAGEMENT COMMANDS
.TP
.B list
List all active tmux sessions
.TP
.B attach [session]
Attach to an existing session (uses last session if none specified)
.TP
.B switch [session]
Switch to a different session (with fzf selection if available)
.TP
.B rename <old> <new>
Rename an existing session
.TP
.B clone <source> <target>
Clone a session configuration and create new session
.TP
.B status
Show detailed status of all active sessions
.TP
.B nested [name]
Create nested tmux session with single status bar
.TP
.B kill [type] [name]
Kill sessions, windows, or panes
.TP
.B kill all
Kill all sessions, clean resurrect data, and recreate

.SH DEVELOPMENT ENVIRONMENTS
.TP
.B dev
General development environment with editor, logging, and server windows
.TP
.B go
Go development environment with run, test, mod, and docs windows
.TP
.B rust
Rust development with cargo build, run, test, clippy, and fmt windows
.TP
.B python
Python development with main, test, venv, and jupyter windows
.TP
.B node
Node.js development environment with devel, client, server windows
.TP
.B bun
Bun runtime development environment
.TP
.B deno
Deno runtime development environment
.TP
.B devops
DevOps tools: kubectl, docker, terraform, ansible, monitoring
.TP
.B monitoring
System monitoring with htop, logs, docker stats, network, disk
.TP
.B database
Database management: mysql, postgres, redis, mongo shells

.SH PROJECT ENVIRONMENTS
.TP
.B single
Single window environment for quick tasks
.TP
.B shell
Multi-window shell environment
.TP
.B server
Full server environment with editor, browser, server, and logs
.TP
.B web
Web development environment with full server stack
.TP
.B docker
Docker development with mgr, buildx, editor, testing windows
.TP
.B rpm
RPM package building with multi-architecture support
.TP
.B build
Generic build environment with build, edit, test, log windows
.TP
.B ssh
Multi-window SSH environment with 7 connection windows
.TP
.B productivity
Productivity tools: todo, notes, scratchpad, tasks, blog
.TP
.B test
Testing environment with 2 default windows
.TP
.B default
Default 3-window environment

.SH CONFIGURATION COMMANDS
.TP
.B create <name> <win1:cmd> <win2:cmd> [...]
Create custom session configuration with specified windows
.TP
.B edit [session]
Edit session configuration files
.TP
.B update
Update template and all session configs
.TP
.B update templates
Update only the template from source
.TP
.B update all
Update all session configs from template
.TP
.B clean
Remove all session configuration files

.SH OPTIONS
.TP
.B \-\-dir <directory>
Set working directory for the session
.TP
.B \-\-name <name>
Set custom session name
.TP
.B \-\-socket <name>
Use specific socket file
.TP
.B \-\-kill
Enable kill mode for operations
.TP
.B \-\-silent
Suppress output messages
.TP
.B \-\-help
Display comprehensive help message
.TP
.B \-\-version
Display current version
.TP
.B \-\-config
Generate user configuration file
.TP
.B \-\-options
Show all available options
.TP
.B \-\-debug
Enable debugging output
.TP
.B \-\-raw
Remove all formatting from output

.SH EXAMPLES
.TP
.B tmux-new list
List all active sessions
.TP
.B tmux-new dev
Start development environment in current directory
.TP
.B tmux-new --dir ~/projects/myapp rust
Start Rust development environment in specified directory
.TP
.B tmux-new docker
Start Docker development environment
.TP
.B tmux-new attach
Attach to last active session
.TP
.B tmux-new switch myproject
Switch to 'myproject' session
.TP
.B tmux-new rename old-name new-name
Rename a session
.TP
.B tmux-new clone dev-template new-project
Clone session configuration
.TP
.B tmux-new nested workspace
Create nested tmux with single status bar
.TP
.B tmux-new kill session myproject
Kill specific session
.TP
.B tmux-new kill all
Kill and recreate all sessions
.TP
.B tmux-new create myapp "editor:nvim" "server:npm start" "test:npm test"
Create custom session with 3 windows
.TP
.B tmux-new edit dev
Edit development environment configuration
.TP
.B tmux-new update
Update template and all configs
.TP
.B tmux-new monitoring
Start system monitoring environment
.TP
.B tmux-new python
Start Python development environment

.SH SESSION FEATURES
.TP
.B Session Persistence
Automatic session state saving and restoration using tmux-resurrect
.TP
.B Named Windows
Each environment has descriptively named windows for easy navigation
.TP
.B Custom Commands
Windows can execute custom commands on creation
.TP
.B Directory Context
Sessions remember their working directory
.TP
.B Multiple Sockets
Support for multiple tmux socket files for isolation

.SH NESTED TMUX SUPPORT
tmux-new provides excellent nested tmux support with single status bar:
.TP
.B Automatic Detection
Detects when running inside tmux and adjusts configuration
.TP
.B Status Bar Management
Disables outer status bar when nested session is active
.TP
.B Different Prefix
Uses C-a prefix for nested sessions (C-b for outer)
.TP
.B Visual Indicators
Clear visual distinction between nested and outer sessions
.TP
.B Mouse Support
Natural mouse scrolling works correctly in nested sessions

.SH DEVELOPMENT ENVIRONMENT FEATURES
Each development environment includes:
.TP
.B Language-Specific Tools
Commands and windows tailored to each language/framework
.TP
.B Testing Integration
Dedicated windows for running tests
.TP
.B Editor Support
Integration with editor commands
.TP
.B Logging
Dedicated log viewing windows where applicable
.TP
.B Server Management
Built-in server start/stop for web frameworks

.SH KILL COMMAND TYPES
.TP
.B kill all
Kill all sessions and recreate them (preserves session info)
.TP
.B kill session <name>
Kill specific session and clean resurrect data
.TP
.B kill window <name>
Kill specific window
.TP
.B kill pane <name>
Kill specific pane
.TP
.B kill server <name>
Kill tmux server

.SH CONFIGURATION
.TP
.B Template System
Uses central template for consistent session configuration
.TP
.B Per-Session Configs
Each session has its own configuration file
.TP
.B Window Definitions
Separate window configuration files for each session
.TP
.B Local Overrides
Support for local configuration overrides
.TP
.B Plugin Management
Automatic plugin installation on first run

.SH FILES
.TP
.I ~/.config/myscripts/tmux-new/settings.conf
User configuration file with defaults
.TP
.I ~/.config/myscripts/tmux-new/template
Base template for all session configs
.TP
.I ~/.config/myscripts/tmux-new/conf/
Directory containing per-session configuration files
.TP
.I ~/.config/myscripts/tmux-new/windows/
Directory containing window definitions for each session
.TP
.I ~/.config/myscripts/tmux-new/local/
Directory for local configuration overrides
.TP
.I ~/.config/tmux/sessions/
Socket files for different tmux instances
.TP
.I ~/.local/share/tmux/resurrect/
Session persistence data for restoration
.TP
.I ~/.local/share/tmux/plugins/
Tmux plugins directory
.TP
.I ~/.local/log/tmux-new/
Log directory for tmux-new operations

.SH ENVIRONMENT VARIABLES
.TP
.B TMUX_NEW_CWD
Current working directory for session
.TP
.B TMUX_NEW_SET_NAME
Override session name
.TP
.B TMUX_NEW_SOCKET_FILE
Socket file to use (default: default)
.TP
.B TMUX_NEW_CONFIG_DIR
Configuration directory location
.TP
.B RUN_OPTIONS_DIRS_PROJECTS
Default project directory
.TP
.B RUN_OPTIONS_DIRS_DOCKER_SRC
Docker source directory
.TP
.B RUN_OPTIONS_DIRS_GITHUB_DOCKERMGR
Docker manager repository location
.TP
.B RUN_OPTIONS_LOGS_BUILDX
Build logs directory
.TP
.B EDITOR
Editor command for configuration editing

.SH SESSION RESURRECTION
tmux-new integrates with tmux-resurrect for automatic session persistence:
.TP
.B Automatic Save
Sessions are automatically saved periodically
.TP
.B Automatic Restore
Sessions are restored on reconnect if save data exists
.TP
.B Per-Session Storage
Each session has its own resurrection data
.TP
.B Clean Removal
Kill commands properly clean up resurrection data

.SH WINDOW NAMING CONVENTION
Windows are named using format: name:command
.TP
.B name
Display name for the window in tmux status bar
.TP
.B command
Command to execute when window is created
.TP
.B Example
"editor:nvim" creates window named "editor" running nvim

.SH CUSTOM SESSION CREATION
Create fully custom sessions with:
.TP
.B Basic Syntax
tmux-new create <session-name> <win1:cmd> <win2:cmd> ...
.TP
.B Minimum Windows
At least 3 arguments required (name + 2 windows)
.TP
.B Unlimited Windows
Add as many windows as needed
.TP
.B Persistent Config
Creates reusable configuration files

.SH REQUIREMENTS
.TP
.B tmux
tmux terminal multiplexer must be installed
.TP
.B bash
Bash shell version 4.0 or higher
.TP
.B Optional: fzf
Fuzzy finder for interactive session selection

.SH NOTES
tmux-new simplifies tmux session management by providing preconfigured environments for common development workflows. It integrates session persistence, nested tmux support, and comprehensive window management into a single tool.

The nested tmux feature is particularly useful for remote development, allowing you to run tmux on a remote server within your local tmux session while maintaining a single, clean status bar.

All sessions automatically capture their working directory and can be recreated in the same location even after being killed.

.SH LICENSE
LICENSE.md

.SH BUGS
No known bugs.

.SH REPORTING BUGS
https://github.com/casjay-dotfiles/issues

.SH AUTHOR
Currently maintained by Jason Hempstead <jason@casjaysdev.pro>

.SH SEE ALSO
tmux(1), tmux-resurrect(1)
