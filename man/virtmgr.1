.\" Manpage for virtmgr
.TH man 1 "16 September 2025" "202509160030-git" "virtmgr"

.SH NAME
virtmgr \- Comprehensive virtualization management tool for libvirt/qemu and containers

.SH DESCRIPTION
A powerful command-line tool for managing virtual machines using libvirt/qemu and containers using incus. Provides complete lifecycle management including VM creation, snapshot management, network configuration, and remote access via SPICE or SSH.

.SH SYNOPSIS
virtmgr [options] [command] [arguments...]

.SH VM MANAGEMENT COMMANDS
.TP
.B list
List all virtual machines with their current status (running, stopped, paused)
.TP
.B start <vm-name>
Start a virtual machine
.TP
.B new <name> <iso> [disk-size] [ram-size]
Create a new virtual machine from an ISO image with specified disk size (GB) and RAM (MB)
.TP
.B delete <vm-name>
Delete a virtual machine and its associated storage
.TP
.B open <vm-name>
Open VM console viewer using virt-viewer or remote-viewer
.TP
.B manage
Launch the virt-manager graphical interface

.SH SNAPSHOT & RECOVERY COMMANDS
.TP
.B create <vm-name> [snapshot-name]
Create a snapshot of the virtual machine (default name: "Default")
.TP
.B restore <vm-name> [snapshot-name]
Restore virtual machine from a snapshot (default: "Default")

.SH NETWORK & ACCESS COMMANDS
.TP
.B ip [vm-name]
Show IP addresses for all VMs or a specific VM
.TP
.B ssh <vm-name> [user] [keyfile]
SSH into a virtual machine (default user: root)

.SH SYSTEM SETUP COMMANDS
.TP
.B init
Install and setup complete virtualization environment including packages, services, and configuration
.TP
.B setup
Setup virtualization on the host system (alias for init)
.TP
.B incus
Setup and configure incus containers with default images (almalinux, debian, ubuntu)
.TP
.B status
Check virtualization support, package installation, and service status

.SH VM CREATION OPTIONS
.TP
.B \-\-cpu <type>
Set CPU type for new VMs (default: host-passthrough)
.TP
.B \-\-memory <size>
Set RAM size in MB for new VMs (default: 2048)
.TP
.B \-\-disk <size>
Set disk size in GB for new VMs (default: 100)
.TP
.B \-\-arch <architecture>
Set VM architecture: x86_64, aarch64, arm (default: x86_64)
.TP
.B \-\-uefi
Enable UEFI boot for new VMs
.TP
.B \-\-force
Force operations, bypass safety checks

.SH GENERAL OPTIONS
.TP
.B \-\-help
Display comprehensive help message
.TP
.B \-\-version
Display current version
.TP
.B \-\-config
Generate user configuration file
.TP
.B \-\-options
Show all available options
.TP
.B \-\-debug
Enable debugging output
.TP
.B \-\-raw
Remove all formatting from output
.TP
.B \-\-silent
Suppress non-error output

.SH EXAMPLES
.TP
.B virtmgr init
Setup complete virtualization environment
.TP
.B virtmgr status
Check system virtualization readiness
.TP
.B virtmgr new ubuntu ubuntu-22.04.iso 50 4096
Create Ubuntu VM with 50GB disk and 4GB RAM
.TP
.B virtmgr \-\-arch aarch64 \-\-uefi new arm-vm arm-iso.iso 30 2048
Create ARM64 VM with UEFI boot
.TP
.B virtmgr list
Show all VMs and their status
.TP
.B virtmgr start ubuntu
Start the Ubuntu virtual machine
.TP
.B virtmgr create ubuntu backup-snapshot
Create a snapshot named "backup-snapshot"
.TP
.B virtmgr ssh ubuntu admin ~/.ssh/vm_key
SSH to Ubuntu VM as admin user with specific key
.TP
.B virtmgr ip
Show IP addresses for all running VMs
.TP
.B virtmgr incus
Setup development containers

.SH VIRTUALIZATION FEATURES
.TP
.B Hardware Support
Automatically detects CPU virtualization features (Intel VT-x, AMD-V)
.TP
.B Multi-Architecture
Supports x86_64, ARM64, and ARM virtual machines
.TP
.B UEFI Boot
Modern UEFI firmware support with SecureBoot capability
.TP
.B Nested Virtualization
Automatically enables nested virtualization for development
.TP
.B Network Management
Automatic network bridge configuration and DHCP lease tracking
.TP
.B Container Integration
Supports both libvirt VMs and incus containers

.SH CONTAINER MANAGEMENT
The incus command sets up development containers with:
.TP
.B AlmaLinux 9
Enterprise Linux development environment
.TP
.B Debian 12
Stable Debian development environment  
.TP
.B Ubuntu 22.04
Ubuntu LTS development environment

All containers are configured with:
- Security nesting enabled for Docker-in-Docker
- Privileged mode for system development
- Default snapshots for easy reset

.SH WEB MANAGEMENT
When Docker or Podman is available, virtmgr can optionally install webvirtcloud:
.TP
.B Web Interface
Modern web-based VM management at http://localhost:65000
.TP
.B VNC Console
Browser-based VM console access
.TP
.B Default Credentials
Username: admin, Password: admin

.SH ARCHITECTURE SUPPORT
.TP
.B x86_64
Standard Intel/AMD 64-bit architecture
.TP
.B aarch64 (ARM64)
Modern ARM 64-bit architecture with UEFI
.TP
.B arm
Legacy ARM architecture support

.SH FILES
.TP
.I ~/.config/myscripts/virtmgr/settings.conf
User configuration file with VM defaults
.TP
.I ~/.local/log/virtmgr/
Log directory for package installation and VM operations
.TP
.I /var/lib/libvirt/images/
Default storage location for VM disk images
.TP
.I /etc/kvm/
System KVM configuration directory

.SH REQUIREMENTS
.TP
.B Hardware
- 64-bit processor with virtualization support (VT-x/AMD-V)
- Sufficient RAM (recommended: 8GB+ for host + VMs)
- Available disk space for VM images

.TP
.B Software
- libvirt and qemu packages
- virt-manager, virt-install, virt-viewer
- Bridge utilities for networking

.SH SECURITY
VMs are created with:
- Isolated network namespaces
- Restricted file system access
- Modern security features (TPM 2.0 when available)
- User privilege separation

.SH TROUBLESHOOTING
.TP
.B Permission Issues
Ensure user is in libvirt and kvm groups: sudo usermod -aG libvirt,kvm $USER
.TP
.B Network Problems
Check bridge configuration: sudo virsh net-list --all
.TP
.B Performance Issues
Enable nested virtualization and check CPU allocation

.SH LICENSE
WTFPL

.SH BUGS
No known bugs.

.SH REPORTING BUGS
https://github.com/casjay-dotfiles/issues

.SH AUTHOR
Currently maintained by Jason Hempstead <jason@casjaysdev.pro>