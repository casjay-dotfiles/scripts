cat <<EOF
# syntax=docker/dockerfile:1
# Docker image for $name using the alpine template
ARG IMAGE_NAME="$name"
ARG PHP_SERVER="$name"
ARG BUILD_DATE="$build_date"
ARG LANGUAGE="en_US.UTF-8"
ARG TIMEZONE="America/New_York"
ARG WWW_ROOT_DIR="${WWW_ROOT_DIR:-/usr/local/share/httpd/default}"
ARG DEFAULT_FILE_DIR="${DEFAULT_FILE_DIR:-/usr/local/share/template-files}"
ARG DEFAULT_DATA_DIR="${DEFAULT_DATA_DIR:-/usr/local/share/template-files/data}"
ARG DEFAULT_CONF_DIR="${DEFAULT_CONF_DIR:-/usr/local/share/template-files/config}"
ARG DEFAULT_TEMPLATE_DIR="${DEFAULT_TEMPLATE_DIR:-/usr/local/share/template-files/defaults}"
ARG PATH="/usr/local/etc/docker/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

ARG USER="root"
ARG SHELL_OPTS="set -e -o pipefail"

ARG SERVICE_PORT="$SERVICE_PORT"
ARG EXPOSE_PORTS="$EXPOSE_PORTS"
ARG PHP_VERSION="$PHP_VERSION"
ARG NODE_VERSION="$NODE_VERSION"
ARG NODE_MANAGER="$NODE_MANAGER"

ARG IMAGE_REPO="$GEN_DOCKERFILE_PUSH_URL"
ARG IMAGE_VERSION="$GEN_DOCKERFILE_SET_VERSION"
ARG CONTAINER_VERSION="$GEN_DOCKERFILE_SET_TAGS"

ARG PULL_URL="${GEN_DOCKERFILE_PULL_URL}"
ARG DISTRO_VERSION="${ENV_DISTRO_TAG:-${GEN_DOCKERFILE_SET_DISTRO_VERSION:-\$IMAGE_VERSION}}"
ARG BUILD_VERSION="\${BUILD_DATE}"

FROM tianon/gosu:latest AS gosu
FROM \${PULL_URL}:\${DISTRO_VERSION} AS build
ARG TZ
ARG USER
ARG LICENSE
ARG TIMEZONE
ARG LANGUAGE
ARG IMAGE_NAME
ARG BUILD_DATE
ARG SERVICE_PORT
ARG EXPOSE_PORTS
ARG BUILD_VERSION
ARG IMAGE_VERSION
ARG WWW_ROOT_DIR
ARG DEFAULT_FILE_DIR
ARG DEFAULT_DATA_DIR
ARG DEFAULT_CONF_DIR
ARG DEFAULT_TEMPLATE_DIR
ARG DISTRO_VERSION
ARG NODE_VERSION
ARG NODE_MANAGER
ARG PHP_VERSION
ARG PHP_SERVER
ARG SHELL_OPTS
ARG PATH

ARG PACK_LIST="$packages "

ENV ENV=~/.profile
ENV SHELL="/bin/sh"
ENV PATH="\${PATH}"
ENV TZ="\${TIMEZONE}"
ENV TIMEZONE="\${TZ}"
ENV LANG="\${LANGUAGE}"
ENV TERM="xterm-256color"
ENV HOSTNAME="casjaysdevdocker-$name"

USER \${USER}
WORKDIR /root

COPY ./rootfs/usr/local/bin/. /usr/local/bin/

  echo "Updating the system and ensuring bash is installed"; \\
  pkmgr update;pkmgr install bash

RUN set -e; \\
  echo "Setting up prerequisites"; \\
$(__prerequisites)

ENV SHELL="/bin/bash"
SHELL [ "/bin/bash", "-c" ]

COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

RUN echo "Initializing the system"; \\
  \$SHELL_OPTS; \\
$(__init_scripts)

RUN echo "Creating and editing system files "; \\
  \$SHELL_OPTS; \\
$(__init_files)

RUN echo "Running pre-package commands"; \\
  \$SHELL_OPTS; \\
  echo ""

RUN echo "Setting up and installing packages"; \\
  \$SHELL_OPTS; \\
$(__setup_pkgs)

RUN echo "Initializing packages before copying files to image"; \\
  \$SHELL_OPTS; \\
$(__init_packages)

COPY ./rootfs/. /
COPY ./$GEN_DOCKERFILE_DOCKERFILE_NAME /root/docker/Dockerfile

RUN echo "Updating system files "; \\
  \$SHELL_OPTS; \\
$(__setup_files)

RUN echo "Custom Settings"; \\
  \$SHELL_OPTS; \\
${GEN_DOCKERFILE_CUSTOM_COMMANDS}echo ""

RUN echo "Setting up users and scripts "; \\
  \$SHELL_OPTS; \\
$(__os_users)

RUN echo "Running the user init commands"; \\
  \$SHELL_OPTS; \\
$(__users_init)

RUN echo "Setting OS Settings "; \\
  \$SHELL_OPTS; \\
$(__os_settings)

RUN echo "Custom Applications"; \\
  \$SHELL_OPTS; \\
${GEN_DOCKERFILE_CUSTOM_APPLICATIONS}echo ""

RUN echo "Running custom commands"; \\
$(__init_custom)

RUN echo "Running final commands before cleanup"; \\
  \$SHELL_OPTS; \\
$(__init_post)

RUN echo "Deleting unneeded files"; \\
  \$SHELL_OPTS; \\
$(__clean_container)

RUN echo "Init done"
EOF
