#!/usr/bin/env bash
__global_setup_files() {
  cat <<EOF
  echo "\$TIMEZONE" >"/etc/timezone"; \\
  touch "/etc/profile" "/root/.profile"; \\
  echo 'hosts: files dns' >"/etc/nsswitch.conf"; \\
  [ "\$PHP_VERSION" = "system" ] && PHP_VERSION="php" || true; \\
  PHP_BIN="\$(command -v \${PHP_VERSION} 2>/dev/null || true)"; \\
  PHP_FPM="\$(ls /usr/*bin/php*fpm* 2>/dev/null || true)"; \\
  pip_bin="\$(command -v python3 2>/dev/null || command -v python2 2>/dev/null || command -v python 2>/dev/null || true)"; \\
  py_version="\$(command \$pip_bin --version | sed 's|[pP]ython ||g' | awk -F '.' '{print \$1\$2}' | grep '[0-9]' || true)"; \\
  [ "\$py_version" -gt "310" ] && pip_opts="--break-system-packages " || pip_opts=""; \\
  [ -f "/usr/share/zoneinfo/\${TZ}" ] && ln -sf "/usr/share/zoneinfo/\${TZ}" "/etc/localtime" || true; \\
  [ -n "\$PHP_BIN" ] && [ -z "\$(command -v php 2>/dev/null)" ] && ln -sf "\$PHP_BIN" "/usr/bin/php" 2>/dev/null || true; \\
  [ -n "\$PHP_FPM" ] && [ -z "\$(command -v php-fpm 2>/dev/null)" ] && ln -sf "\$PHP_FPM" "/usr/bin/php-fpm" 2>/dev/null || true; \\
  if [ -f "/etc/profile.d/color_prompt.sh.disabled" ]; then mv -f "/etc/profile.d/color_prompt.sh.disabled" "/etc/profile.d/color_prompt.sh";fi ; \\
  { [ -f "/etc/bash/bashrc" ] && cp -Rf "/etc/bash/bashrc" "/root/.bashrc"; } || { [ -f "/etc/bashrc" ] && cp -Rf "/etc/bashrc" "/root/.bashrc"; } || { [ -f "/etc/bash.bashrc" ] && cp -Rf "/etc/bash.bashrc" "/root/.bashrc"; } || true; \\
  if [ -z "\$(command -v "apt-get" 2>/dev/null)" ];then grep -sh -q 'alias quit' "/root/.bashrc" || printf '# Profile\n\n%s\n%s\n%s\n' '. /etc/profile' '. /root/.profile' "alias quit='exit 0 2>/dev/null'" >>"/root/.bashrc"; fi; \\
  if [ "\$PHP_VERSION" != "system" ] && [ -e "/etc/php" ] && [ -d "/etc/\${PHP_VERSION}" ];then rm -Rf "/etc/php";fi; \\
  if [ "\$PHP_VERSION" != "system" ] && [ -n "\${PHP_VERSION}" ] && [ -d "/etc/\${PHP_VERSION}" ];then ln -sf "/etc/\${PHP_VERSION}" "/etc/php";fi; \\
  if [ -f "/root/docker/setup/03-files.sh" ];then echo "Running the files script";/root/docker/setup/03-files.sh||{ echo "Failed to execute /root/docker/setup/03-files.sh" >&2 && exit 10; };echo "Done running the files script";fi
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__prerequisites() {
  cat <<EOF
  true
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_files() {
  cat <<EOF
  [ -f "/root/.profile" ] || touch "/root/.profile"; \\
  if [ -f "/root/docker/setup/01-system.sh" ];then echo "Running the system script";/root/docker/setup/01-system.sh||{ echo "Failed to execute /root/docker/setup/01-system.sh" >&2 && exit 10; };echo "Done running the system script";fi; \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__setup_files() {
  cat <<EOF
$(__global_setup_files); \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__os_users() {
  cat <<EOF
  if [ -f "/root/docker/setup/04-users.sh" ];then echo "Running the users script";/root/docker/setup/04-users.sh||{ echo "Failed to execute /root/docker/setup/04-users.sh" >&2 && exit 10; };echo "Done running the users script";fi; \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__users_init() {
  cat <<EOF
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__os_settings() {
  cat <<EOF
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__setup_pkgs() {
  cat <<EOF
  if [ -n "\${PACK_LIST}" ];then echo "Installing packages: \$PACK_LIST";echo "\${PACK_LIST}" >/root/docker/setup/packages.txt;pkmgr install \${PACK_LIST};fi; \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_packages() {
  cat <<EOF
  if [ -f "/root/docker/setup/02-packages.sh" ];then echo "Running the packages script";/root/docker/setup/02-packages.sh||{ echo "Failed to execute /root/docker/setup/02-packages.sh" >&2 && exit 10; };echo "Done running the packages script";fi; \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_scripts() {
  cat <<EOF
  mkdir -p "\${DEFAULT_DATA_DIR}" "\${DEFAULT_CONF_DIR}" "\${DEFAULT_TEMPLATE_DIR}" "/root/docker/setup" "/etc/profile.d"; \\
  if [ -f "/root/docker/setup/00-init.sh" ];then echo "Running the init script";/root/docker/setup/00-init.sh||{ echo "Failed to execute /root/docker/setup/00-init.sh" >&2 && exit 10; };echo "Done running the init script";fi; \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_custom() {
  cat <<EOF
  if [ -f "/root/docker/setup/05-custom.sh" ];then echo "Running the custom script";/root/docker/setup/05-custom.sh||{ echo "Failed to execute /root/docker/setup/05-custom.sh" && exit 10; };echo "Done running the custom script";fi; \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__init_post() {
  cat <<EOF
  if [ -f "/root/docker/setup/06-post.sh" ];then echo "Running the post script";/root/docker/setup/06-post.sh||{ echo "Failed to execute /root/docker/setup/06-post.sh" >&2 && exit 10; };echo "Done running the post script";fi; \\
  echo ""
EOF
}
__clean_container() {
  cat <<EOF
  pkmgr clean; \\
  rm -Rf "/config" "/data" || true; \\
  rm -rf /etc/systemd/system/*.wants/* || true; \\
  rm -rf /lib/systemd/system/systemd-update-utmp* || true; \\
  rm -rf /lib/systemd/system/anaconda.target.wants/* || true; \\
  rm -rf /lib/systemd/system/local-fs.target.wants/* || true; \\
  rm -rf /lib/systemd/system/multi-user.target.wants/* || true; \\
  rm -rf /lib/systemd/system/sockets.target.wants/*udev* || true; \\
  rm -rf /lib/systemd/system/sockets.target.wants/*initctl* || true; \\
  rm -Rf /usr/share/doc/* /var/tmp/* /var/cache/*/* /root/.cache/* /usr/share/info/* /tmp/* || true; \\
  if [ -d "/lib/systemd/system/sysinit.target.wants" ];then cd "/lib/systemd/system/sysinit.target.wants" && rm -f \$(ls | grep -v systemd-tmpfiles-setup);fi; \\
  if [ -f "/root/docker/setup/07-cleanup.sh" ];then echo "Running the cleanup script";/root/docker/setup/07-cleanup.sh||{ echo "Failed to execute /root/docker/setup/07-cleanup.sh" >&2 && exit 10; };echo "Done running the cleanup script";fi; \\
  echo ""
EOF
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
__x11_setup() {
  if [ "$GEN_DOCKER_ENABLE_X11" = "yes" ]; then
    GEN_DOCKERFILE_DEFAULT_TEMPLATE="debian"
    cat <<EOF
  echo "Creating and configuring the X11 user"
  useradd --shell /bin/bash --create-home --home-dir /home/x11user x11user && \\
  usermod -a -G audio,video,sudo,tty,dialout,cdrom,floppy,audio,dip,video,plugdev x11user && \\
  echo "x11user ALL=(ALL) NOPASSWD: ALL" >"/etc/sudoers.d/x11user"; \\
  sudo -u x11user setup-$name.sh && \\
  chown -Rf x11user:x11user "/home/x11user"; \\
  echo ""
EOF
  else
    cat <<EOF
  echo ""
EOF
  fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if [ "$name" = "alpine" ] || [ "$name" = "alpinelinux" ]; then
  printf_cyan "Creating an OS image for $name"
  GEN_DOCKERFILE_DEFAULT_TEMPLATE="alpine"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ALPINE:-alpine}"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE}"
  ENV_IMAGE_PUSH="casjaysdev/$name"
  ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE"
  [ "$name" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_ALPINE" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
  GEN_DOCKER_FILE_PKGS_ALPINE="bash-completion,git,curl,wget,sudo,unzip,"
  GEN_DOCKER_FILE_PKGS_ALPINE+="iproute2,ssmtp,openssl,jq,tzdata,mailcap,ncurses,util-linux,"
  GEN_DOCKER_FILE_PKGS_ALPINE+="pciutils,usbutils,coreutils,binutils,findutils,grep,rsync,zip,tini,"
  GEN_DOCKER_FILE_PKGS_ALPINE+="py3-pip,procps,net-tools,coreutils,sed,gawk,grep,attr,findutils,readline,"
  GEN_DOCKER_FILE_PKGS_ALPINE+="lsof,less,curl,shadow,certbot,ca-certificates,"
  __prerequisites() {
    cat <<EOF
  apk --no-cache add bash; \\
  SH_CMD="\$(which sh 2>/dev/null||command -v sh 2>/dev/null)"; \\
  BASH_CMD="\$(which bash 2>/dev/null||command -v bash 2>/dev/null)"; \\
  [ -x "\$BASH_CMD" ] && symlink "\$BASH_CMD" "/bin/sh" || true; \\
  [ -x "\$BASH_CMD" ] && symlink "\$BASH_CMD" "/usr/bin/sh" || true; \\
  [ -x "\$BASH_CMD" ] && [ "\$SH_CMD" != "/bin/sh"] && symlink "\$BASH_CMD" "\$SH_CMD" || true; \\
  [ -n "\$BASH_CMD" ] && sed -i 's|root:x:.*|root:x:0:0:root:/root:'\$BASH_CMD'|g' "/etc/passwd" || true
EOF
  }
  __init_files() {
    cat <<EOF
  rm -Rf "/etc/apk/repositories"; \\
  [ "\$DISTRO_VERSION" = "latest" ] && DISTRO_VERSION="edge";[ "\$DISTRO_VERSION" = "edge" ] || DISTRO_VERSION="v\${DISTRO_VERSION}"; \\
  echo "http://dl-cdn.alpinelinux.org/alpine/\${DISTRO_VERSION}/main" >>"/etc/apk/repositories"; \\
  echo "http://dl-cdn.alpinelinux.org/alpine/\${DISTRO_VERSION}/community" >>"/etc/apk/repositories"; \\
  if [ "\${DISTRO_VERSION}" = "edge" ]; then echo "http://dl-cdn.alpinelinux.org/alpine/\${DISTRO_VERSION}/testing" >>"/etc/apk/repositories";fi; \\
  if [ -f "/root/docker/setup/01-system.sh" ];then echo "Running the system script";/root/docker/setup/01-system.sh||{ echo "Failed to execute /root/docker/setup/01-system.sh" >&2 && exit 10; };echo "Done running the system script";fi; \\
  echo ""
EOF
  }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$name" = "almalinux" ] || [ "$name" = "rockylinux" ] || [ "$name" = "alma" ] || [ "$name" = "rocky" ] || [ "$name" = "centos" ]; then
  printf_cyan "Creating an OS image for $name"
  GEN_DOCKERFILE_DEFAULT_TEMPLATE="almalinux"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_RHEL:-almalinux}"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL}"
  ENV_IMAGE_PUSH="casjaysdev/$name"
  ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL"
  [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_RHEL" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
  GEN_DOCKER_FILE_PKGS_RHEL="bash-completion,git,curl,wget,sudo,unzip,tini,iproute,net-tools,"
  GEN_DOCKER_FILE_PKGS_RHEL+="glibc-langpack-en,pinentry,nail,postfix,python3-pip,certbot,ca-certificates,"
  __prerequisites() {
    cat <<EOF
  yum makecache && yum install -yy bash; \\
  SH_CMD="\$(which sh 2>/dev/null||command -v sh 2>/dev/null)"; \\
  BASH_CMD="\$(which bash 2>/dev/null||command -v bash 2>/dev/null)"; \\
  [ -x "\$BASH_CMD" ] && symlink "\$BASH_CMD" "/bin/sh" || true; \\
  [ -x "\$BASH_CMD" ] && symlink "\$BASH_CMD" "/usr/bin/sh" || true; \\
  [ -x "\$BASH_CMD" ] && [ "\$SH_CMD" != "/bin/sh"] && symlink "\$BASH_CMD" "\$SH_CMD" || true; \\
  [ -n "\$BASH_CMD" ] && sed -i 's|root:x:.*|root:x:0:0:root:/root:'\$BASH_CMD'|g' "/etc/passwd" || true
EOF
  }
  __init_files() {
    cat <<EOF
  touch "/etc/profile" "/root/.profile"; \\
  pkmgr update && pkmgr install epel-release; crb enable || true; \\
  if [ -f "/root/docker/setup/01-system.sh" ];then echo "Running the system script";/root/docker/setup/01-system.sh||{ echo "Failed to execute /root/docker/setup/01-system.sh" >&2 && exit 10; };echo "Done running the system script";fi; \\
  echo ""
EOF
  }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$name" = "archlinux" ] || [ "$name" = "arch" ]; then
  printf_cyan "Creating an OS image for $name"
  GEN_DOCKERFILE_DEFAULT_TEMPLATE="archlinux"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_ARCHLINUX:-menci/archlinuxarm}"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX}"
  ENV_IMAGE_PUSH="casjaysdev/$name"
  ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX"
  [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_ARCHLINUX" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
  GEN_DOCKER_FILE_PKGS_ARCH="bash-completion,git,curl,wget,sudo,unzip,base-devel,mailx,postfix,python,python-pip,certbot,ca-certificates,"
  __prerequisites() {
    cat <<EOF
  pacman -Sy --noconfirm archlinux-keyring; \\
  pacman-key --init; \\
  pacman-key --populate; \\
  echo "installing bash"; \\
  pacman -Sy --noconfirm bash; \\
  SH_CMD="\$(which sh 2>/dev/null||command -v sh 2>/dev/null)"; \\
  BASH_CMD="\$(which bash 2>/dev/null||command -v bash 2>/dev/null)"; \\
  [ -x "\$BASH_CMD" ] && symlink "\$BASH_CMD" "/bin/sh" || true; \\
  [ -x "\$BASH_CMD" ] && symlink "\$BASH_CMD" "/usr/bin/sh" || true; \\
  [ -x "\$BASH_CMD" ] && [ "\$SH_CMD" != "/bin/sh"] && symlink "\$BASH_CMD" "\$SH_CMD" || true; \\
  [ -n "\$BASH_CMD" ] && sed -i 's|root:x:.*|root:x:0:0:root:/root:'\$BASH_CMD'|g' "/etc/passwd" || true
EOF
  }
  __setup_files() {
    cat <<EOF
$(__global_setup_files); \\
echo ""
EOF
  }
  __os_users() {
    cat <<EOF
  if ! grep -sh -q "\${AUR_HOME}" /etc/passwd;then useradd -m -r -s /bin/bash -d "\${AUR_HOME}" "\${AUR_USER}";fi; \\
  passwd -d "\${AUR_USER}"; \\
  [ -d "/etc/sudoers.d" ] || mkdir -p "/etc/sudoers.d"; \\
  echo ''\${AUR_USER}'     ALL=(ALL) ALL' >"/etc/sudoers.d/\${AUR_USER}" && \\
  echo 'standard-resolver' >"\${AUR_HOME}/.gnupg/dirmngr.conf" && \\
  chown -Rf "\${AUR_USER}":"\${AUR_USER}" "\${AUR_HOME}"; \\
  if [ -z "\$(command -v yay 2>/dev/null)" ];then cd "\${AUR_HOME}/build" && \\
  sudo -u "\${AUR_USER}" git clone --depth 1 "https://aur.archlinux.org/yay.git" && cd yay && \\
  sudo -u "\${AUR_USER}" makepkg --noconfirm -si; \\
  fi; \\
  sudo -u "\${AUR_USER}" yay --afterclean --removemake --save && pacman -Qtdq | xargs -r pacman --noconfirm -Rcns; \\
  if [ -f "/root/docker/setup/04-users.sh" ];then echo "Running the users script";/root/docker/setup/04-users.sh||{ echo "Failed to execute /root/docker/setup/04-users.sh" >&2 && exit 10; };echo "Done running the users script";fi; \\
  echo ""
EOF
  }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$name" = "debian" ]; then
  printf_cyan "Creating an OS image for $name"
  GEN_DOCKERFILE_DEFAULT_TEMPLATE="debian"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_DEBIAN:-debian}"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN}"
  ENV_IMAGE_PUSH="casjaysdev/$name"
  ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN"
  [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_DEBIAN" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
  GEN_DOCKER_FILE_PKGS_DEBIAN="bash-completion,git,curl,wget,sudo,unzip,tini,xz-utils,iproute2,pinentry-curses,"
  GEN_DOCKER_FILE_PKGS_DEBIAN+="bsd-mailx,procps,net-tools,bsd-mailx,postfix,python3-pip,certbot,ca-certificates,"
  __prerequisites() {
    cat <<EOF
  echo "\$LANG UTF-8" >"/etc/locale.gen"; \\
  echo 'export DEBIAN_FRONTEND="'\${DEBIAN_FRONTEND}'"' >"/etc/profile.d/apt.sh" && chmod 755 "/etc/profile.d/apt.sh"; \\
  apt-get update && apt-get upgrade -yy && apt-get install -yy bash locales apt-utils; \\
  update-alternatives --install /bin/sh sh /bin/bash 1; \\
  update-alternatives --install /usr/bin/sh sh /bin/bash 1; \\
  dpkg-reconfigure --frontend=noninteractive locales;update-locale LANG=\$LANG
EOF
  }
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
elif [ "$name" = "ubuntu" ]; then
  printf_cyan "Creating an OS image for $name"
  GEN_DOCKERFILE_DEFAULT_TEMPLATE="ubuntu"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${GEN_DOCKER_SPECIFY_IMAGE_SOURCE_UBUNTU:-ubuntu}"
  GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU="${GEN_DOCKERFILE_SET_DISTRO_NAME:-$GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU}"
  ENV_IMAGE_PUSH="casjaysdev/$name"
  ENV_PULL_URL="$GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU"
  [ "$ENV_PULL_URL" = "$GEN_DOCKER_SPECIFY_IMAGE_REPO_UBUNTU" ] || printf_yellow "$name does not match template: $GEN_DOCKERFILE_SET_TEMPLATE"
  GEN_DOCKER_FILE_PKGS_UBUNTU="bash-completion,git,curl,wget,sudo,unzip,tini,xz-utils,iproute2,pinentry-curses,"
  GEN_DOCKER_FILE_PKGS_UBUNTU+="bsd-mailx,procps,net-tools,bsd-mailx,postfix,python3-pip,certbot,ca-certificates,"
  __prerequisites() {
    cat <<EOF
  echo "\$LANG UTF-8" >"/etc/locale.gen"; \\
  echo 'export DEBIAN_FRONTEND="'\${DEBIAN_FRONTEND}'"' >"/etc/profile.d/apt.sh" && chmod 755 "/etc/profile.d/apt.sh"; \\
  apt-get update && apt-get upgrade -yy && apt-get install -yy bash locales apt-utils; \\
  update-alternatives --install /bin/sh sh /bin/bash 1; \\
  update-alternatives --install /usr/bin/sh sh /bin/bash 1; \\
  dpkg-reconfigure --frontend=noninteractive locales;update-locale LANG=\$LANG
EOF
  }
fi
# update variables
__set_variables
