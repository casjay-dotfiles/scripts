# Set environment
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.local/share/tmux/plugins/default'
# Override LC and LANG
set-environment -g LANG 'en_US.UTF-8'
set-environment -g LC_ALL 'en_US.UTF-8'
set-environment -g LC_CTYPE 'en_US.UTF-8'
# plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'jabirali/tmux-tilish'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'kristijanhusak/tmux-simple-git-status'
set -g @plugin 'tmux-plugins/tmux-yank'

# Set the prefix to Ctrl+Space
unbind C-b
set-option -g prefix C-Space
bind-key C-Space send-prefix

# nested tmux, obey me
bind-key Space send-prefix

# set default shell
set -g default-command bash

# Dracula theme colors (modified for better readability)
# Background
color_bg="#282a36"
# Foreground
color_fg="#f8f8f2"
# Current line (lighter for readability)
color_current="#44475a"
# Selection
color_selection="#44475a"
# Comment
color_comment="#6272a4"
# Cyan
color_cyan="#8be9fd"
# Green
color_green="#50fa7b"
# Orange
color_orange="#ffb86c"
# Pink
color_pink="#ff79c6"
# Purple
color_purple="#bd93f9"
# Red
color_red="#ff5555"
# Yellow
color_yellow="#f1fa8c"

# Map to tmux color names
color_dark="$color_bg"
color_light="$color_fg"
color_session_text="$color_purple"
color_status_text="$color_fg"
color_main="$color_purple"
color_secondary="$color_pink"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="$color_red"
color_window_off_status_bg="$color_selection"
color_window_off_status_current_bg="$color_comment"

set-option -g mode-style "fg=$color_fg,bg=$color_selection"
set-option -g message-style "fg=$color_fg,bg=$color_selection"
set-option -g message-command-style "fg=$color_fg,bg=$color_selection"

# All kind of nice options
set-option -g   default-terminal "screen-256color"
set-option -ga  terminal-overrides ",xterm-256color:Tc"
set-option -g   history-limit 100000
set-option -g   repeat-time 500
set-option -g   terminal-overrides 'xterm*:smcup@:rmcup@'
set-option -ga  terminal-overrides ',xterm*:smcup@:rmcup@'
set-option -g   base-index 1
set-option -g   update-environment -r

# titles
set-option -g set-titles on
set-option -g set-titles-string "#T"

# Window options
set-option -g allow-rename on
set-option -g base-index 1
set-window-option -g pane-base-index 1
set-window-option -g renumber-windows on
set-window-option -g monitor-activity on
set-window-option -g xterm-keys on
set-window-option -g automatic-rename on
set-window-option -g aggressive-resize off

# Remap keys to my settings
unbind-key d        ; bind-key d        detach-client
unbind-key Tab      ; bind-key Tab      choose-window
unbind-key t        ; bind-key t        new-window
unbind-key `        ; bind-key `        last-window
unbind-key n        ; bind-key n        next-window
unbind-key p        ; bind-key p        previous-window
unbind-key r        ; bind-key r        command-prompt -I "#W" "rename-window '%%'"

# Window selection
unbind-key 1        ; bind-key 1        select-window -t 1
unbind-key 2        ; bind-key 2        select-window -t 2
unbind-key 3        ; bind-key 3        select-window -t 3
unbind-key 4        ; bind-key 4        select-window -t 4
unbind-key 5        ; bind-key 5        select-window -t 5
unbind-key 6        ; bind-key 6        select-window -t 6
unbind-key 7        ; bind-key 7        select-window -t 7
unbind-key 8        ; bind-key 8        select-window -t 8
unbind-key 9        ; bind-key 9        select-window -t 9

# Window splitting
unbind-key \        ; bind-key \        split-window -c "#{pane_current_path}" -h
unbind-key /        ; bind-key /        split-window -c "#{pane_current_path}" -v

# Pane selection and resizing
unbind-key left     ; bind-key left     select-pane -L
unbind-key up       ; bind-key up       select-pane -U
unbind-key down     ; bind-key down     select-pane -D
unbind-key right    ; bind-key right    select-pane -R
unbind-key C-h      ; bind-key C-h      select-pane -L
unbind-key C-k      ; bind-key C-k      select-pane -U
unbind-key C-j      ; bind-key C-j      select-pane -D
unbind-key C-l      ; bind-key C-l      select-pane -R
unbind-key j        ; bind-key -r j     resize-pane -D 5
unbind-key k        ; bind-key -r k     resize-pane -U 5
unbind-key h        ; bind-key -r h     resize-pane -L 5
unbind-key l        ; bind-key -r l     resize-pane -R 5
unbind-key C-left   ; bind-key -r C-left    resize-pane -L 1
unbind-key C-right  ; bind-key -r C-right   resize-pane -R 1
unbind-key C-up     ; bind-key -r C-up  resize-pane -U 1
unbind-key C-down   ; bind-key -r C-down    resize-pane -D 1
unbind-key @        ; bind-key @        confirm-before kill-window
unbind-key ?        ; bind-key ?        list-keys

# new window and retain cwd
bind-key c new-window -c "#{pane_current_path}"

# Set that stupid Esc-Wait off, so VI works again
set-option -sg  escape-time 0

# set mode either vi or emacs
set-window-option -g mode-keys vi

# Source setup file
bind-key R source-file ~/.config/tmux/tmux.conf \; display-message 'Reloaded ~/.config/tmux/tmux.conf'

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# Clipboard integration
# For Linux (X11)
if-shell "command -v xclip" {
    bind-key -T copy-mode C-c send-keys -X copy-pipe-and-cancel "xclip -i -sel clipboard"
    bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -i -sel clipboard"
    bind-key C-v run "xclip -o -sel clipboard | tmux load-buffer - ; tmux paste-buffer"
}

# For Linux (Wayland)
if-shell "command -v wl-copy" {
    bind-key -T copy-mode C-c send-keys -X copy-pipe-and-cancel "wl-copy"
    bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "wl-copy"
    bind-key C-v run "wl-paste | tmux load-buffer - ; tmux paste-buffer"
}

# For macOS
if-shell "command -v pbcopy" {
    bind-key -T copy-mode C-c send-keys -X copy-pipe-and-cancel "pbcopy"
    bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
    bind-key C-v run "pbpaste | tmux load-buffer - ; tmux paste-buffer"
}

# copy/paste with tmux-yank plugin
set -g @yank_selection 'clipboard'
set -g @yank_selection_mouse 'clipboard'
set -g @yank_action 'copy-pipe-and-cancel'

# Mouse support with proper scrollback
set -g mouse off

# Toggle mouse with status display
unbind-key m ; bind-key m if-shell '[ "$(tmux show -gv mouse)" = "on" ]' 'set -g mouse off; display-message "Mouse: OFF"' 'set -g mouse on; display-message "Mouse: ON"'

# Better mouse scrolling - enters copy mode and scrolls
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# When in copy mode, scroll slower (2 lines at a time instead of 5)
bind -T copy-mode WheelUpPane send-keys -X -N 2 scroll-up
bind -T copy-mode WheelDownPane send-keys -X -N 2 scroll-down
bind -T copy-mode-emacs WheelUpPane send-keys -X -N 2 scroll-up
bind -T copy-mode-emacs WheelDownPane send-keys -X -N 2 scroll-down

# Select layout
bind-key w command-prompt -p "tiled/even-horizontal/even-vertical/main-horizontal/main-vertical?"  "select-layout '%%'"

# Zoom tmux pane with '+' key
bind + resize-pane -Z

# Message display time (ms)
set-option -g display-time 2000

# Sync toggle
unbind-key s ; bind-key s set-window-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# Open prompt
unbind-key C-p ; bind C-p command-prompt -p "Command:" "run \"tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""

# Notification
set-window-option -g monitor-activity on
set-option -g visual-activity on
set-option -g bell-action any
set-option -g visual-bell on

# Plugin properties
set -g @tilish-navigate 'on'
set -g @sidebar-tree 't'
set -g @sidebar-tree-focus 'T'
set -g @sidebar-tree-command 'tree -C'
set -g @sidebar-tree-position 'right'

## tmux prefix highlight - MUST be configured before status-left
set -g @prefix_highlight_fg 'colour232'
set -g @prefix_highlight_bg 'colour154'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=colour232,bg=colour226,bold'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr 'fg=colour232,bg=colour196,bold'

# tmux continuum and resurrect
set -g @continuum-restore 'on'
set -g @continuum-save-interval '5'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

# See: https://github.com/christoomey/vim-tmux-navigator
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Dracula theme status bar
set-option -g status on
set-option -g status-interval 2
set-option -g window-status-separator ''
set-option -g status-position "bottom"
set-option -g status-justify "centre"
set-option -g status-left-length 120
set-option -g status-right-length 120

# Status bar styling with Dracula colors
set-option -g status-style "fg=$color_fg,bg=$color_bg"
set-option -g pane-border-style "fg=$color_selection"
set-option -g pane-active-border-style "fg=$color_purple"

# Window status
set-window-option -g window-status-format "#[fg=$color_bg,bg=$color_comment] #I #[fg=$color_fg,bg=$color_selection] #W "
set-window-option -g window-status-current-format "#[fg=$color_bg,bg=$color_purple] #I #[fg=$color_fg,bg=$color_current,bold] #W "
set-window-option -g window-status-activity-style "fg=$color_yellow,bg=$color_bg"
set-window-option -g window-status-bell-style "fg=$color_red,bg=$color_bg"

# Status bar configuration
set-environment -g TMUX_WEATHER_LOCATION ""

# Define weather function
run-shell 'tmux set-environment -g TMUX_WEATHER_FUNCTION "weather=\$(curl -q -LSsf -m 2 \"https://wttr.in/\${MYLOCATION_NAME:-\$TMUX_WEATHER_LOCATION}?u&format=3\" 2>/dev/null) || weather=\"No Weather\"; echo \"\${weather}\" | sed \"s/:/ /g\" | sed \"s/°F/F/g\""'

# Status left and right
set -g status-left "#{prefix_highlight}#[fg=$color_fg,bg=$color_selection] #S #[fg=$color_cyan,bg=$color_bg] #(whoami)@#H #[fg=$color_yellow]#{simple_git_status}"
set -g status-right "#[fg=$color_pink]#($TMUX_WEATHER_FUNCTION) #[fg=$color_comment]│ #[fg=$color_orange]UP:#(uptime | cut -f 4-5 -d ' ' | cut -f 1 -d ',') #[fg=$color_comment]│ #[fg=$color_green]↺ #{continuum_status} #[fg=$color_comment]│ #[fg=$color_cyan]%m/%d #[fg=$color_fg]%H:%M "

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if 'test ! -d ~/.local/share/tmux/plugins/default/tpm/.git' 'run git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/plugins/default/tpm && ~/.local/share/tmux/plugins/default/bin/install_plugins'
if 'test -f ~/.local/share/tmux/plugins/default/tpm/tpm' 'run ~/.local/share/tmux/plugins/default/tpm/tpm'

# vim: ft=tmux ts=2 sw=2 sts=2 et
